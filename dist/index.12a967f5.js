// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function(modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this,
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function() {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"3lxtH":[function(require,module,exports) {
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d751713988987e9331980363e24189ce";
module.bundle.HMR_BUNDLE_ID = "976fca2dd6c4c051c39bde7312a967f5"; // @flow
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {
            });
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets/*: {|[string]: boolean|} */ , acceptedAssets/*: {|[string]: boolean|} */ , assetsToAccept/*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');
    // $FlowFixMe
    ws.onmessage = function(event/*: {data: string, ...} */ ) {
        checkedAssets = {
        };
        acceptedAssets = {
        };
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH
            );
            // Handle HMR Update
            var handled = false;
            assets.forEach((asset)=>{
                var didAccept = asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
                if (didAccept) handled = true;
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else window.location.reload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
            }
            // Render the fancy html overlay
            removeErrorOverlay();
            var overlay = createErrorOverlay(data.diagnostics.html);
            // $FlowFixMe
            document.body.appendChild(overlay);
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function(e) {
        console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] ✨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
        errorHTML += `\n      <div>\n        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>\n          ${stack}\n        </pre>\n        <div>\n          ${diagnostic.hints.map((hint)=>'<div>' + hint + '</div>'
        ).join('')}\n        </div>\n      </div>\n    `;
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', // $FlowFixMe
    link.getAttribute('href').split('?')[0] + '?' + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle/*: ParcelRequire */ , asset/*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') {
        reloadCSS();
        return;
    }
    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
    if (deps) {
        var fn = new Function('require', 'module', 'exports', asset.output);
        modules[asset.id] = [
            fn,
            deps
        ];
    } else if (bundle.parent) hmrApply(bundle.parent, asset);
}
function hmrAcceptCheck(bundle/*: ParcelRequire */ , id/*: string */ , depsByBundle/*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) return true;
    return getParents(module.bundle.root, id).some(function(v) {
        return hmrAcceptCheck(v[0], v[1], null);
    });
}
function hmrAcceptRun(bundle/*: ParcelRequire */ , id/*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData = {
    };
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"6s8cZ":[function(require,module,exports) {
var _router = require("./router");
(function() {
    const root = document.querySelector(".root");
    _router.initRouter(root);
})();

},{"./router":"6rMSh"}],"6rMSh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initRouter", ()=>initRouter
);
var _index = require("./views/index");
var _empezar = require("./views/empezar");
var _juego = require("./views/juego");
function initRouter(root) {
    function goTo(path) {
        history.pushState({
        }, "", path);
        handleRoute(path);
    }
    function handleRoute(route) {
        const routes = [
            {
                path: "/",
                component: _index.initIndex
            },
            {
                path: "/empezar",
                component: _empezar.initEmpezarPage
            },
            {
                path: "/juego",
                component: _juego.initJuego
            }, 
        ];
        for (const r of routes)if (r.path === route) {
            const el = r.component({
                goTo: goTo
            });
            root.firstChild?.remove();
            const wrongEl = document.querySelector(".result");
            if (wrongEl !== null && location.pathname.includes("/empezar")) root.removeChild(wrongEl);
            console.clear();
            root.appendChild(el);
        }
    }
    handleRoute(location.pathname);
}

},{"./views/index":"5fhIS","./views/empezar":"3TKas","./views/juego":"3ZMao","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"5fhIS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initIndex", ()=>initIndex
);
var _button = require("./../components/button");
var _input = require("./../components/input");
var _state = require("./../state");
const tijerasIMG = require("url:./../img/tijeras.png");
const piedraIMG = require("url:./../img/piedra.png");
const papelIMG = require("url:./../img/papel.png");
function initIndex(params) {
    const el = document.createElement("div");
    el.innerHTML = `\n  <div class="title-index__container">\n      <h1 class="title-index">\n        Piedra <br />\n        Papel\n        <span class="title-o">o</span>\n        <br />\n        Tijera\n      </h1>\n    </div>\n    \n    <div>\n      ${_button.buttonComponent("Nuevo Juego", "new-game", "")}\n      ${_button.buttonComponent("Ingresar a una sala", "get-game", "")}\n    </div>\n\n    <div class="hands_container">\n      <div class="hands">\n        <img src="${tijerasIMG}" alt="" class="img-hand__tijeras" />\n        <img src="${piedraIMG}" alt="" class="img-hand__piedra" />\n        <img src="${papelIMG}" alt="" class="img-hand__papel" />\n      </div>\n    </div>\n  `;
    const newGame = el.querySelector("#new-game");
    const getGame = el.querySelector("#get-game");
    newGame.addEventListener("click", ()=>{
        _state.state.setState({
            ..._state.state.getState(),
            methodStart: "new"
        });
    });
    getGame.addEventListener("click", ()=>{
        _state.state.setState({
            ..._state.state.getState(),
            methodStart: "join"
        });
    });
    _state.state.subscribe(()=>{
        // Hago esta evaluacion para que no se choque con otros components
        if (window.location.pathname == "/") {
            // Div donde se pone el codigo
            const codeDiv = document.createElement("div");
            codeDiv.innerHTML = `\n      ${_input.inputComponent("", "codigo", "inputCode")}\n      ${_button.buttonComponent("Ingresar a la sala", "addCodeButton", "")}\n      `;
            // Div donde se pone el nombre
            const nameDiv = document.createElement("div");
            nameDiv.innerHTML = `\n        ${_input.inputComponent("Tu Nombre", "", "inputName")}\n        ${_button.buttonComponent("Empezar", "startNewGame", "")}\n      `;
            if (_state.state.getState().methodStart == "new") {
                newGame.parentNode.parentNode?.appendChild(nameDiv);
                newGame.parentNode.parentNode?.removeChild(newGame.parentNode);
                getGame.parentNode.parentNode?.removeChild(getGame.parentNode);
                const startNewGameButton = document.querySelector("#startNewGame");
                startNewGameButton.addEventListener("click", ()=>{
                    const inputName = document.querySelector("#inputName");
                    const playerOwner = inputName.value;
                    if (inputName.value !== "") fetch("/api/gamerooms", {
                        method: "POST",
                        body: JSON.stringify({
                            playerOwner
                        }),
                        headers: {
                            Accept: "application/json",
                            "Content-Type": "application/json"
                        }
                    }).then((res)=>res.json()
                    ).then((json)=>{
                        _state.state.setState({
                            ..._state.state.getState(),
                            gameroomId: json.gameroom,
                            name: playerOwner,
                            sala: json.gameroom
                        });
                        _state.state.initRTDBData(_state.state.getState().sala);
                        params.goTo("/empezar");
                    });
                });
            } else if (_state.state.getState().methodStart == "join") {
                getGame.parentNode.parentNode?.appendChild(codeDiv);
                getGame.parentNode.parentNode?.removeChild(getGame.parentNode);
                newGame.parentNode.parentNode?.removeChild(newGame.parentNode);
                const addCodeButton = document.querySelector("#addCodeButton");
                addCodeButton?.addEventListener("click", ()=>{
                    const inputCode = document.querySelector("#inputCode");
                    fetch(`/api/gamerooms/${inputCode.value}`).then((res)=>res.json()
                    ).then((json)=>{
                        if (json.error) {
                            const errDiv = document.createElement("div");
                            errDiv.innerHTML = `\n              <h2 class="err">ERROR: ${json.error}<h2>\n            `;
                            inputCode.parentNode.appendChild(errDiv);
                        } else {
                            _state.state.setState({
                                ..._state.state.getState(),
                                sala: inputCode.value
                            });
                            addCodeButton.parentNode.parentNode.appendChild(nameDiv);
                            addCodeButton.parentNode.parentNode.removeChild(addCodeButton.parentNode);
                            inputCode.parentNode.parentNode.parentNode.removeChild(inputCode.parentNode.parentNode);
                            const start = document.querySelector("#startNewGame");
                            start.addEventListener("click", ()=>{
                                const inputName = document.querySelector("#inputName");
                                const newPlayer = inputName.value;
                                // const newState = state.getState();
                                const { sala  } = _state.state.getState();
                                if (inputName.value !== "") fetch(`/api/gamerooms/${sala}`, {
                                    method: "POST",
                                    body: JSON.stringify({
                                        newPlayer
                                    }),
                                    headers: {
                                        Accept: "application/json",
                                        "Content-Type": "application/json"
                                    }
                                }).then((res)=>res.json()
                                ).then((json1)=>{
                                    const { error  } = json1;
                                    if (error) {
                                        const errDiv = document.createElement("div");
                                        errDiv.innerHTML = `\n                        <h2 class="err">ERROR: ${json1.error}<h2>\n                      `;
                                        inputName.parentNode.appendChild(errDiv);
                                    } else {
                                        _state.state.setState({
                                            ..._state.state.getState(),
                                            gameroomId: json1.id,
                                            name: newPlayer
                                        });
                                        _state.state.initRTDBData(sala);
                                        params.goTo("/empezar");
                                    }
                                });
                            });
                        }
                    });
                });
            }
        }
    });
    return el;
}

},{"./../components/button":"1zpZY","./../components/input":"1k3rr","./../state":"5mroK","url:./../img/tijeras.png":"7xh9Q","url:./../img/piedra.png":"405Ce","url:./../img/papel.png":"6MZTm","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"1zpZY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "buttonComponent", ()=>buttonComponent
);
function buttonComponent(text, id, clase) {
    const button = `\n    <div class="button-component__container">\n      <button class="button-component ${clase}" id="${id}">${text}</button>\n    </div>\n    `;
    return button;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"367CR":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule') return;
        // Skip duplicate re-exports when they have the same value.
        if (key in dest && dest[key] === source[key]) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"1k3rr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "inputComponent", ()=>inputComponent
);
function inputComponent(text, placeholder, id) {
    const input = `\n        <div class="button-component__container">\n            <form>\n              <label class="title-input">${text}</label>\n              <br />\n              <input class="input-component" id="${id}" name="${id}" placeholder="${placeholder}" />\n            </form>\n        </div>\n    `;
    return input;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"5mroK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "state", ()=>state
);
var _db = require("./db");
var _button = require("./components/button");
const loseSign = require("url:./img/lose-sign.png");
const successSign = require("url:./img/success-sign.png");
const state = {
    data: {
    },
    listeners: [],
    getState () {
        return this.data;
    },
    setState (newState) {
        this.data = newState;
        for (const cb of this.listeners)cb();
    },
    subscribe (callback) {
        if (this.listeners.length < 3) this.listeners.push(callback);
    },
    initRTDBData (roomId) {
        const rtdbRef = _db.rtdb.ref(`/gamerooms/${roomId}/players`);
        let data = {
        };
        rtdbRef.on("value", (snapshot)=>{
            const { name  } = this.getState();
            data = snapshot.val();
            // Data a agregar
            let userObject = Object.keys(data)[0] == name ? data[Object.keys(data)[0]] : data[Object.keys(data)[1]];
            if (Object.keys(data).length === 2) {
                var oponentName = Object.keys(data)[0] != name ? Object.keys(data)[0] : Object.keys(data)[1];
                var oponentObject = data[oponentName];
            }
            state.setState({
                ...state.getState(),
                userObject,
                oponentName,
                oponentObject
            });
        });
    },
    setReady () {
        let { userObject  } = state.getState();
        userObject.ready = true;
        _db.rtdb.ref(`/gamerooms/${state.getState().sala}/players/${state.getState().name}`).update(userObject);
    },
    setHand () {
        let { userObject  } = state.getState();
        _db.rtdb.ref(`/gamerooms/${state.getState().sala}/players/${state.getState().name}`).update(userObject);
    },
    resetValuesRTDB () {
        if (state.getState().compStatus == "reset") {
            let dataToReset = {
                handChoosen: false,
                ready: false
            };
            state.setState({
                ...state.getState(),
                compStatus: "other"
            });
            _db.rtdb.ref(`/gamerooms/${state.getState().sala}/players/${state.getState().name}`).update(dataToReset);
            state.setState({
                ...state.getState(),
                time: 0,
                moment: "waiting"
            });
        }
    },
    initResult (data, params) {
        const resultDiv = document.querySelector(".result");
        if (state.getState().winner == state.getState().oponentName) {
            const message = document.createElement("div");
            message.innerHTML = `\n        <img src="${loseSign}" class="sign-result" />\n            <div class="score-container">\n              <h2>Score</h2>\n              <h3>${state.getState().name}: ${data[state.getState().name].puntos}</h3>\n              <h3>${state.getState().oponentName}: ${data[state.getState().oponentName].puntos}</h3>\n            </div>\n\n            ${_button.buttonComponent("Volver a jugar", "", "backAndReset")}`;
            resultDiv.appendChild(message);
            resultDiv.classList.add("err-bg");
        } else {
            const message = document.createElement("div");
            message.innerHTML = `\n              <img src="${successSign}" class="sign-result" />\n              <div class="score-container">\n                <h2>Score</h2>\n                <h3>${state.getState().name}: ${data[state.getState().name].puntos}</h3>\n                <h3>${state.getState().oponentName}: ${data[state.getState().oponentName].puntos}</h3>\n              </div>\n            ${_button.buttonComponent("Volver a jugar", "", "backAndReset")}`;
            resultDiv.appendChild(message);
            resultDiv.classList.add("success-bg");
        }
        const buttonComp = document.querySelector(".backAndReset");
        buttonComp.addEventListener("click", (e)=>{
            params.goTo("/empezar");
            state.setState({
                ...state.getState(),
                compStatus: false,
                handOn: false,
                moment: false,
                time: false,
                winner: false
            });
        });
    },
    fetchResults (params) {
        let { winner , name , validator , sala  } = state.getState();
        let dataPlayers = {
        };
        if (winner == name && validator == true) {
            state.setState({
                ...state.getState(),
                validator: false
            });
            fetch(`/api/gamerooms/${sala}`, {
                method: "PUT",
                body: JSON.stringify({
                    winner
                }),
                headers: {
                    Accept: "application/json",
                    "Content-Type": "application/json"
                }
            }).then((res)=>res.json()
            ).then((json)=>{
                dataPlayers = json.players;
                state.setState({
                    ...state.getState(),
                    compStatus: "reset",
                    handOn: false
                });
                state.resetValuesRTDB();
                state.initResult(dataPlayers, params);
            });
        } else if (winner != name && validator == true) {
            state.setState({
                ...state.getState(),
                validator: false
            });
            setTimeout(()=>{
                fetch(`/api/gamerooms/${sala}`).then((res)=>res.json()
                ).then((json)=>{
                    dataPlayers = json.players;
                    state.setState({
                        ...state.getState(),
                        compStatus: "reset",
                        handOn: false
                    });
                    state.resetValuesRTDB();
                    state.initResult(dataPlayers, params);
                });
            }, 2000);
        }
    }
};

},{"./db":"7w2Im","@parcel/transformer-js/src/esmodule-helpers.js":"367CR","./components/button":"1zpZY","url:./img/lose-sign.png":"2ceTA","url:./img/success-sign.png":"1bKAa"}],"7w2Im":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// export { rtdb, initFirebase };
parcelHelpers.export(exports, "rtdb", ()=>rtdb
);
var _firebase = require("firebase");
var _firebaseDefault = parcelHelpers.interopDefault(_firebase);
// const initFirebase = () => {
_firebaseDefault.default.initializeApp({
    apiKey: "AIzaSyAY51xRKdVdFlrXc1CtMHg2sSN6b4uIE9Y",
    authDomain: "dwf-m6-desafio.firebaseapp.com",
    databaseURL: "https://dwf-m6-desafio-default-rtdb.firebaseio.com/",
    storageBucket: "dwf-m6-desafio.appspot.com"
});
// };
const rtdb = _firebaseDefault.default.database();

},{"firebase":"7mnIA","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"7mnIA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_appDefault.default
);
var _app = require("@firebase/app");
var _appDefault = parcelHelpers.interopDefault(_app);
var _auth = require("@firebase/auth");
var _database = require("@firebase/database");
var _firestore = require("@firebase/firestore");
var _bundle = require("@firebase/firestore/bundle");
var _functions = require("@firebase/functions");
var _messaging = require("@firebase/messaging");
var _storage = require("@firebase/storage");
var _performance = require("@firebase/performance");
var _analytics = require("@firebase/analytics");
var _remoteConfig = require("@firebase/remote-config");
var _appCheck = require("@firebase/app-check");
var name$1 = "firebase";
var version$1 = "8.10.0";
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ _appDefault.default.registerVersion(name$1, version$1, 'app');
_appDefault.default.SDK_VERSION = version$1;
var name = "firebase";
var version = "8.10.0";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ console.warn("\nIt looks like you're using the development build of the Firebase JS SDK.\nWhen deploying Firebase apps to production, it is advisable to only import\nthe individual SDK components you intend to use.\n\nFor the module builds, these are available in the following manner\n(replace <PACKAGE> with the name of a component - i.e. auth, database, etc):\n\nCommonJS Modules:\nconst firebase = require('firebase/app');\nrequire('firebase/<PACKAGE>');\n\nES Modules:\nimport firebase from 'firebase/app';\nimport 'firebase/<PACKAGE>';\n\nTypescript:\nimport firebase from 'firebase/app';\nimport 'firebase/<PACKAGE>';\n");
_appDefault.default.registerVersion(name, version);

},{"@firebase/app":"6IUA5","@firebase/auth":"2lC03","@firebase/database":"RnLqB","@firebase/firestore":"6C1I5","@firebase/firestore/bundle":"5lpAL","@firebase/functions":"6ki78","@firebase/messaging":"JdbMr","@firebase/storage":"3n4LN","@firebase/performance":"6u4rS","@firebase/analytics":"5L5Kb","@firebase/remote-config":"ZvaH1","@firebase/app-check":"5QDSN","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"6IUA5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "firebase", ()=>firebase
);
var _tslib = require("tslib");
var _util = require("@firebase/util");
var _component = require("@firebase/component");
var _logger = require("@firebase/logger");
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _a$1;
var ERRORS = (_a$1 = {
}, _a$1["no-app"] = "No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()", _a$1["bad-app-name"] = "Illegal App name: '{$appName}", _a$1["duplicate-app"] = "Firebase App named '{$appName}' already exists", _a$1["app-deleted"] = "Firebase App named '{$appName}' already deleted", _a$1["invalid-app-argument"] = "firebase.{$appName}() takes either no argument or a Firebase App instance.", _a$1["invalid-log-argument"] = 'First argument to `onLog` must be null or a function.', _a$1);
var ERROR_FACTORY = new _util.ErrorFactory('app', 'Firebase', ERRORS);
var name$c = "@firebase/app";
var version$1 = "0.6.30";
var name$b = "@firebase/analytics";
var name$a = "@firebase/app-check";
var name$9 = "@firebase/auth";
var name$8 = "@firebase/database";
var name$7 = "@firebase/functions";
var name$6 = "@firebase/installations";
var name$5 = "@firebase/messaging";
var name$4 = "@firebase/performance";
var name$3 = "@firebase/remote-config";
var name$2 = "@firebase/storage";
var name$1 = "@firebase/firestore";
var name = "firebase-wrapper";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _a;
var DEFAULT_ENTRY_NAME = '[DEFAULT]';
var PLATFORM_LOG_STRING = (_a = {
}, _a[name$c] = 'fire-core', _a[name$b] = 'fire-analytics', _a[name$a] = 'fire-app-check', _a[name$9] = 'fire-auth', _a[name$8] = 'fire-rtdb', _a[name$7] = 'fire-fn', _a[name$6] = 'fire-iid', _a[name$5] = 'fire-fcm', _a[name$4] = 'fire-perf', _a[name$3] = 'fire-rc', _a[name$2] = 'fire-gcs', _a[name$1] = 'fire-fst', _a['fire-js'] = 'fire-js', _a[name] = 'fire-js-all', _a);
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var logger = new _logger.Logger('@firebase/app');
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Global context object for a collection of services using
 * a shared authentication state.
 */ var FirebaseAppImpl = function() {
    function FirebaseAppImpl1(options, config, firebase_) {
        var _this = this;
        this.firebase_ = firebase_;
        this.isDeleted_ = false;
        this.name_ = config.name;
        this.automaticDataCollectionEnabled_ = config.automaticDataCollectionEnabled || false;
        this.options_ = _util.deepCopy(options);
        this.container = new _component.ComponentContainer(config.name);
        // add itself to container
        this._addComponent(new _component.Component('app', function() {
            return _this;
        }, "PUBLIC"/* PUBLIC */ ));
        // populate ComponentContainer with existing components
        this.firebase_.INTERNAL.components.forEach(function(component) {
            return _this._addComponent(component);
        });
    }
    Object.defineProperty(FirebaseAppImpl1.prototype, "automaticDataCollectionEnabled", {
        get: function() {
            this.checkDestroyed_();
            return this.automaticDataCollectionEnabled_;
        },
        set: function(val) {
            this.checkDestroyed_();
            this.automaticDataCollectionEnabled_ = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FirebaseAppImpl1.prototype, "name", {
        get: function() {
            this.checkDestroyed_();
            return this.name_;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FirebaseAppImpl1.prototype, "options", {
        get: function() {
            this.checkDestroyed_();
            return this.options_;
        },
        enumerable: false,
        configurable: true
    });
    FirebaseAppImpl1.prototype.delete = function() {
        var _this = this;
        return new Promise(function(resolve) {
            _this.checkDestroyed_();
            resolve();
        }).then(function() {
            _this.firebase_.INTERNAL.removeApp(_this.name_);
            return Promise.all(_this.container.getProviders().map(function(provider) {
                return provider.delete();
            }));
        }).then(function() {
            _this.isDeleted_ = true;
        });
    };
    /**
     * Return a service instance associated with this app (creating it
     * on demand), identified by the passed instanceIdentifier.
     *
     * NOTE: Currently storage and functions are the only ones that are leveraging this
     * functionality. They invoke it by calling:
     *
     * ```javascript
     * firebase.app().storage('STORAGE BUCKET ID')
     * ```
     *
     * The service name is passed to this already
     * @internal
     */ FirebaseAppImpl1.prototype._getService = function(name1, instanceIdentifier) {
        var _a1;
        if (instanceIdentifier === void 0) instanceIdentifier = DEFAULT_ENTRY_NAME;
        this.checkDestroyed_();
        // Initialize instance if InstatiationMode is `EXPLICIT`.
        var provider = this.container.getProvider(name1);
        if (!provider.isInitialized() && ((_a1 = provider.getComponent()) === null || _a1 === void 0 ? void 0 : _a1.instantiationMode) === "EXPLICIT") provider.initialize();
        // getImmediate will always succeed because _getService is only called for registered components.
        return provider.getImmediate({
            identifier: instanceIdentifier
        });
    };
    /**
     * Remove a service instance from the cache, so we will create a new instance for this service
     * when people try to get this service again.
     *
     * NOTE: currently only firestore is using this functionality to support firestore shutdown.
     *
     * @param name The service name
     * @param instanceIdentifier instance identifier in case multiple instances are allowed
     * @internal
     */ FirebaseAppImpl1.prototype._removeServiceInstance = function(name1, instanceIdentifier) {
        if (instanceIdentifier === void 0) instanceIdentifier = DEFAULT_ENTRY_NAME;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.container.getProvider(name1).clearInstance(instanceIdentifier);
    };
    /**
     * @param component the component being added to this app's container
     */ FirebaseAppImpl1.prototype._addComponent = function(component) {
        try {
            this.container.addComponent(component);
        } catch (e) {
            logger.debug("Component " + component.name + " failed to register with FirebaseApp " + this.name, e);
        }
    };
    FirebaseAppImpl1.prototype._addOrOverwriteComponent = function(component) {
        this.container.addOrOverwriteComponent(component);
    };
    FirebaseAppImpl1.prototype.toJSON = function() {
        return {
            name: this.name,
            automaticDataCollectionEnabled: this.automaticDataCollectionEnabled,
            options: this.options
        };
    };
    /**
     * This function will throw an Error if the App has already been deleted -
     * use before performing API actions on the App.
     */ FirebaseAppImpl1.prototype.checkDestroyed_ = function() {
        if (this.isDeleted_) throw ERROR_FACTORY.create("app-deleted"/* APP_DELETED */ , {
            appName: this.name_
        });
    };
    return FirebaseAppImpl1;
}();
// Prevent dead-code elimination of these methods w/o invalid property
// copying.
FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options || FirebaseAppImpl.prototype.delete || console.log('dc');
var version = "8.10.0";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Because auth can't share code with other components, we attach the utility functions
 * in an internal namespace to share code.
 * This function return a firebase namespace object without
 * any utility functions, so it can be shared between the regular firebaseNamespace and
 * the lite version.
 */ function createFirebaseNamespaceCore(firebaseAppImpl) {
    var apps = {
    };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var components = new Map();
    // A namespace is a plain JavaScript Object.
    var namespace = {
        // Hack to prevent Babel from modifying the object returned
        // as the firebase namespace.
        // @ts-ignore
        __esModule: true,
        initializeApp: initializeApp,
        // @ts-ignore
        app: app,
        registerVersion: registerVersion,
        setLogLevel: _logger.setLogLevel,
        onLog: onLog,
        // @ts-ignore
        apps: null,
        SDK_VERSION: version,
        INTERNAL: {
            registerComponent: registerComponent,
            removeApp: removeApp,
            components: components,
            useAsService: useAsService
        }
    };
    // Inject a circular default export to allow Babel users who were previously
    // using:
    //
    //   import firebase from 'firebase';
    //   which becomes: var firebase = require('firebase').default;
    //
    // instead of
    //
    //   import * as firebase from 'firebase';
    //   which becomes: var firebase = require('firebase');
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    namespace['default'] = namespace;
    // firebase.apps is a read-only getter.
    Object.defineProperty(namespace, 'apps', {
        get: getApps
    });
    /**
     * Called by App.delete() - but before any services associated with the App
     * are deleted.
     */ function removeApp(name1) {
        delete apps[name1];
    }
    /**
     * Get the App object for a given name (or DEFAULT).
     */ function app(name1) {
        name1 = name1 || DEFAULT_ENTRY_NAME;
        if (!_util.contains(apps, name1)) throw ERROR_FACTORY.create("no-app"/* NO_APP */ , {
            appName: name1
        });
        return apps[name1];
    }
    // @ts-ignore
    app['App'] = firebaseAppImpl;
    function initializeApp(options, rawConfig) {
        if (rawConfig === void 0) rawConfig = {
        };
        if (typeof rawConfig !== 'object' || rawConfig === null) {
            var name_1 = rawConfig;
            rawConfig = {
                name: name_1
            };
        }
        var config = rawConfig;
        if (config.name === undefined) config.name = DEFAULT_ENTRY_NAME;
        var name1 = config.name;
        if (typeof name1 !== 'string' || !name1) throw ERROR_FACTORY.create("bad-app-name"/* BAD_APP_NAME */ , {
            appName: String(name1)
        });
        if (_util.contains(apps, name1)) throw ERROR_FACTORY.create("duplicate-app"/* DUPLICATE_APP */ , {
            appName: name1
        });
        var app1 = new firebaseAppImpl(options, config, namespace);
        apps[name1] = app1;
        return app1;
    }
    /*
     * Return an array of all the non-deleted FirebaseApps.
     */ function getApps() {
        // Make a copy so caller cannot mutate the apps list.
        return Object.keys(apps).map(function(name1) {
            return apps[name1];
        });
    }
    function registerComponent(component) {
        var componentName = component.name;
        if (components.has(componentName)) {
            logger.debug("There were multiple attempts to register component " + componentName + ".");
            return component.type === "PUBLIC" ? namespace[componentName] : null;
        }
        components.set(componentName, component);
        // create service namespace for public components
        if (component.type === "PUBLIC") {
            // The Service namespace is an accessor function ...
            var serviceNamespace = function(appArg) {
                if (appArg === void 0) appArg = app();
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                if (typeof appArg[componentName] !== 'function') // Invalid argument.
                // This happens in the following case: firebase.storage('gs:/')
                throw ERROR_FACTORY.create("invalid-app-argument"/* INVALID_APP_ARGUMENT */ , {
                    appName: componentName
                });
                // Forward service instance lookup to the FirebaseApp.
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                return appArg[componentName]();
            };
            // ... and a container for service-level properties.
            if (component.serviceProps !== undefined) _util.deepExtend(serviceNamespace, component.serviceProps);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            namespace[componentName] = serviceNamespace;
            // Patch the FirebaseAppImpl prototype
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            firebaseAppImpl.prototype[componentName] = // TODO: The eslint disable can be removed and the 'ignoreRestArgs'
            // option added to the no-explicit-any rule when ESlint releases it.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            function() {
                var args = [];
                for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
                var serviceFxn = this._getService.bind(this, componentName);
                return serviceFxn.apply(this, component.multipleInstances ? args : []);
            };
        }
        // add the component to existing app instances
        for(var _i = 0, _a1 = Object.keys(apps); _i < _a1.length; _i++){
            var appName = _a1[_i];
            apps[appName]._addComponent(component);
        }
        return component.type === "PUBLIC" ? namespace[componentName] : null;
    }
    function registerVersion(libraryKeyOrName, version1, variant) {
        var _a1;
        // TODO: We can use this check to whitelist strings when/if we set up
        // a good whitelist system.
        var library = (_a1 = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a1 !== void 0 ? _a1 : libraryKeyOrName;
        if (variant) library += "-" + variant;
        var libraryMismatch = library.match(/\s|\//);
        var versionMismatch = version1.match(/\s|\//);
        if (libraryMismatch || versionMismatch) {
            var warning = [
                "Unable to register library \"" + library + "\" with version \"" + version1 + "\":"
            ];
            if (libraryMismatch) warning.push("library name \"" + library + "\" contains illegal characters (whitespace or \"/\")");
            if (libraryMismatch && versionMismatch) warning.push('and');
            if (versionMismatch) warning.push("version name \"" + version1 + "\" contains illegal characters (whitespace or \"/\")");
            logger.warn(warning.join(' '));
            return;
        }
        registerComponent(new _component.Component(library + "-version", function() {
            return {
                library: library,
                version: version1
            };
        }, "VERSION"/* VERSION */ ));
    }
    function onLog(logCallback, options) {
        if (logCallback !== null && typeof logCallback !== 'function') throw ERROR_FACTORY.create("invalid-log-argument"/* INVALID_LOG_ARGUMENT */ );
        _logger.setUserLogHandler(logCallback, options);
    }
    // Map the requested service to a registered service name
    // (used to map auth to serverAuth service when needed).
    function useAsService(app1, name1) {
        if (name1 === 'serverAuth') return null;
        var useService = name1;
        return useService;
    }
    return namespace;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Return a firebase namespace object.
 *
 * In production, this will be called exactly once and the result
 * assigned to the 'firebase' global.  It may be called multiple times
 * in unit tests.
 */ function createFirebaseNamespace() {
    var namespace = createFirebaseNamespaceCore(FirebaseAppImpl);
    namespace.INTERNAL = _tslib.__assign(_tslib.__assign({
    }, namespace.INTERNAL), {
        createFirebaseNamespace: createFirebaseNamespace,
        extendNamespace: extendNamespace,
        createSubscribe: _util.createSubscribe,
        ErrorFactory: _util.ErrorFactory,
        deepExtend: _util.deepExtend
    });
    /**
     * Patch the top-level firebase namespace with additional properties.
     *
     * firebase.INTERNAL.extendNamespace()
     */ function extendNamespace(props) {
        _util.deepExtend(namespace, props);
    }
    return namespace;
}
var firebase$1 = createFirebaseNamespace();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var PlatformLoggerService = function() {
    function PlatformLoggerService1(container) {
        this.container = container;
    }
    // In initial implementation, this will be called by installations on
    // auth token refresh, and installations will send this string.
    PlatformLoggerService1.prototype.getPlatformInfoString = function() {
        var providers = this.container.getProviders();
        // Loop through providers and get library/version pairs from any that are
        // version components.
        return providers.map(function(provider) {
            if (isVersionServiceProvider(provider)) {
                var service = provider.getImmediate();
                return service.library + "/" + service.version;
            } else return null;
        }).filter(function(logString) {
            return logString;
        }).join(' ');
    };
    return PlatformLoggerService1;
}();
/**
 *
 * @param provider check if this provider provides a VersionService
 *
 * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
 * provides VersionService. The provider is not necessarily a 'app-version'
 * provider.
 */ function isVersionServiceProvider(provider) {
    var component = provider.getComponent();
    return (component === null || component === void 0 ? void 0 : component.type) === "VERSION";
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function registerCoreComponents(firebase, variant) {
    firebase.INTERNAL.registerComponent(new _component.Component('platform-logger', function(container) {
        return new PlatformLoggerService(container);
    }, "PRIVATE"/* PRIVATE */ ));
    // Register `app` package.
    firebase.registerVersion(name$c, version$1, variant);
    // Register platform SDK identifier (no version).
    firebase.registerVersion('fire-js', '');
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Firebase Lite detection test
// eslint-disable-next-line @typescript-eslint/no-explicit-any
if (_util.isBrowser() && self.firebase !== undefined) {
    logger.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");
    // eslint-disable-next-line
    var sdkVersion = self.firebase.SDK_VERSION;
    if (sdkVersion && sdkVersion.indexOf('LITE') >= 0) logger.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ");
}
var initializeApp = firebase$1.initializeApp;
// TODO: This disable can be removed and the 'ignoreRestArgs' option added to
// the no-explicit-any rule when ESlint releases it.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
firebase$1.initializeApp = function() {
    var args = [];
    for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
    // Environment check before initializing app
    // Do the check in initializeApp, so people have a chance to disable it by setting logLevel
    // in @firebase/logger
    if (_util.isNode()) logger.warn("\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the \"main\" field in package.json.\n      \n      If you are using Webpack, you can specify \"main\" as the first item in\n      \"resolve.mainFields\":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the @rollup/plugin-node-resolve plugin and specify \"main\"\n      as the first item in \"mainFields\", e.g. ['main', 'module'].\n      https://github.com/rollup/@rollup/plugin-node-resolve\n      ");
    return initializeApp.apply(undefined, args);
};
var firebase = firebase$1;
registerCoreComponents(firebase);
exports.default = firebase;

},{"tslib":"4rd38","@firebase/util":"3bR6t","@firebase/component":"5qT0x","@firebase/logger":"5PuYX","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"4rd38":[function(require,module,exports) {
var global = arguments[3];
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global global, define, System, Reflect, Promise */ var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __spreadArrays;
var __spreadArray;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
var __classPrivateFieldGet;
var __classPrivateFieldSet;
var __createBinding;
(function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {
    };
    if (typeof define === "function" && define.amd) define("tslib", [
        "exports"
    ], function(exports) {
        factory(createExporter(root, createExporter(exports)));
    });
    else if (typeof module === "object" && typeof module.exports === "object") factory(createExporter(root, createExporter(module.exports)));
    else factory(createExporter(root));
    function createExporter(exports, previous) {
        if (exports !== root) {
            if (typeof Object.create === "function") Object.defineProperty(exports, "__esModule", {
                value: true
            });
            else exports.__esModule = true;
        }
        return function(id, v) {
            return exports[id] = previous ? previous(id, v) : v;
        };
    }
})(function(exporter) {
    var extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    __extends = function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    __rest = function(s, e) {
        var t = {
        };
        for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
        return t;
    };
    __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
        return function(target, key) {
            decorator(target, key, paramIndex);
        };
    };
    __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
                resolve(value);
            });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    __generator = function(thisArg, body) {
        var _ = {
            label: 0,
            sent: function() {
                if (t[0] & 1) throw t[1];
                return t[1];
            },
            trys: [],
            ops: []
        }, f, y, t, g;
        function verb(n) {
            return function(v) {
                return step([
                    n,
                    v
                ]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while(_)try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [
                    op[0] & 2,
                    t.value
                ];
                switch(op[0]){
                    case 0:
                    case 1:
                        t = op;
                        break;
                    case 4:
                        _.label++;
                        return {
                            value: op[1],
                            done: false
                        };
                    case 5:
                        _.label++;
                        y = op[1];
                        op = [
                            0
                        ];
                        continue;
                    case 7:
                        op = _.ops.pop();
                        _.trys.pop();
                        continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;
                            continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];
                            break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];
                            t = op;
                            break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];
                            _.ops.push(op);
                            break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();
                        continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [
                    6,
                    e
                ];
                y = 0;
            } finally{
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];
            return {
                value: op[0] ? op[1] : void 0,
                done: true
            };
        }
        return g = {
            next: verb(0),
            "throw": verb(1),
            "return": verb(2)
        }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
        }), g;
    };
    __exportStar = function(m, o) {
        for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
            enumerable: true,
            get: function() {
                return m[k];
            }
        });
    } : function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    };
    __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function() {
                if (o && i >= o.length) o = void 0;
                return {
                    value: o && o[i++],
                    done: !o
                };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while((n === void 0 || (n--) > 0) && !(r = i.next()).done)ar.push(r.value);
        } catch (error) {
            e = {
                error: error
            };
        } finally{
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            } finally{
                if (e) throw e.error;
            }
        }
        return ar;
    };
    /** @deprecated */ __spread = function() {
        for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
        return ar;
    };
    /** @deprecated */ __spreadArrays = function() {
        for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
        for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
        return r;
    };
    __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    };
    __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        function verb(n) {
            if (g[n]) i[n] = function(v) {
                return new Promise(function(a, b) {
                    q.push([
                        n,
                        v,
                        a,
                        b
                    ]) > 1 || resume(n, v);
                });
            };
        }
        function resume(n, v) {
            try {
                step(g[n](v));
            } catch (e) {
                settle(q[0][3], e);
            }
        }
        function step(r) {
            r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
            resume("next", value);
        }
        function reject(value) {
            resume("throw", value);
        }
        function settle(f, v) {
            if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
        }
        return i = {
        }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
        }, i;
    };
    __asyncDelegator = function(o) {
        var i, p;
        function verb(n, f) {
            i[n] = o[n] ? function(v) {
                return (p = !p) ? {
                    value: __await(o[n](v)),
                    done: n === "return"
                } : f ? f(v) : v;
            } : f;
        }
        return i = {
        }, verb("next"), verb("throw", function(e) {
            throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
            return this;
        }, i;
    };
    __asyncValues = function(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        function verb(n) {
            i[n] = o[n] && function(v) {
                return new Promise(function(resolve, reject) {
                    v = o[n](v), settle(resolve, reject, v.done, v.value);
                });
            };
        }
        function settle(resolve, reject, d, v) {
            Promise.resolve(v).then(function(v1) {
                resolve({
                    value: v1,
                    done: d
                });
            }, reject);
        }
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {
        }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
        }, i);
    };
    __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
            value: raw
        });
        else cooked.raw = raw;
        return cooked;
    };
    var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", {
            enumerable: true,
            value: v
        });
    } : function(o, v) {
        o["default"] = v;
    };
    __importStar = function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {
        };
        if (mod != null) for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : {
            "default": mod
        };
    };
    __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__spreadArray", __spreadArray);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
});

},{}],"3bR6t":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CONSTANTS", ()=>CONSTANTS
);
parcelHelpers.export(exports, "Deferred", ()=>Deferred
);
parcelHelpers.export(exports, "ErrorFactory", ()=>ErrorFactory
);
parcelHelpers.export(exports, "FirebaseError", ()=>FirebaseError1
);
parcelHelpers.export(exports, "MAX_VALUE_MILLIS", ()=>MAX_VALUE_MILLIS
);
parcelHelpers.export(exports, "RANDOM_FACTOR", ()=>RANDOM_FACTOR
);
parcelHelpers.export(exports, "Sha1", ()=>Sha1
);
parcelHelpers.export(exports, "areCookiesEnabled", ()=>areCookiesEnabled
);
parcelHelpers.export(exports, "assert", ()=>assert
);
parcelHelpers.export(exports, "assertionError", ()=>assertionError
);
parcelHelpers.export(exports, "async", ()=>async
);
parcelHelpers.export(exports, "base64", ()=>base64
);
parcelHelpers.export(exports, "base64Decode", ()=>base64Decode
);
parcelHelpers.export(exports, "base64Encode", ()=>base64Encode
);
parcelHelpers.export(exports, "base64urlEncodeWithoutPadding", ()=>base64urlEncodeWithoutPadding
);
parcelHelpers.export(exports, "calculateBackoffMillis", ()=>calculateBackoffMillis
);
parcelHelpers.export(exports, "contains", ()=>contains
);
parcelHelpers.export(exports, "createMockUserToken", ()=>createMockUserToken
);
parcelHelpers.export(exports, "createSubscribe", ()=>createSubscribe
);
parcelHelpers.export(exports, "decode", ()=>decode
);
parcelHelpers.export(exports, "deepCopy", ()=>deepCopy
);
parcelHelpers.export(exports, "deepEqual", ()=>deepEqual
);
parcelHelpers.export(exports, "deepExtend", ()=>deepExtend
);
parcelHelpers.export(exports, "errorPrefix", ()=>errorPrefix
);
parcelHelpers.export(exports, "extractQuerystring", ()=>extractQuerystring
);
parcelHelpers.export(exports, "getGlobal", ()=>getGlobal
);
parcelHelpers.export(exports, "getModularInstance", ()=>getModularInstance
);
parcelHelpers.export(exports, "getUA", ()=>getUA
);
parcelHelpers.export(exports, "isAdmin", ()=>isAdmin
);
parcelHelpers.export(exports, "isBrowser", ()=>isBrowser
);
parcelHelpers.export(exports, "isBrowserExtension", ()=>isBrowserExtension
);
parcelHelpers.export(exports, "isElectron", ()=>isElectron
);
parcelHelpers.export(exports, "isEmpty", ()=>isEmpty
);
parcelHelpers.export(exports, "isIE", ()=>isIE
);
parcelHelpers.export(exports, "isIndexedDBAvailable", ()=>isIndexedDBAvailable
);
parcelHelpers.export(exports, "isMobileCordova", ()=>isMobileCordova
);
parcelHelpers.export(exports, "isNode", ()=>isNode
);
parcelHelpers.export(exports, "isNodeSdk", ()=>isNodeSdk
);
parcelHelpers.export(exports, "isReactNative", ()=>isReactNative
);
parcelHelpers.export(exports, "isSafari", ()=>isSafari
);
parcelHelpers.export(exports, "isUWP", ()=>isUWP
);
parcelHelpers.export(exports, "isValidFormat", ()=>isValidFormat
);
parcelHelpers.export(exports, "isValidTimestamp", ()=>isValidTimestamp
);
parcelHelpers.export(exports, "issuedAtTime", ()=>issuedAtTime
);
parcelHelpers.export(exports, "jsonEval", ()=>jsonEval
);
parcelHelpers.export(exports, "map", ()=>map
);
parcelHelpers.export(exports, "ordinal", ()=>ordinal
);
parcelHelpers.export(exports, "querystring", ()=>querystring
);
parcelHelpers.export(exports, "querystringDecode", ()=>querystringDecode
);
parcelHelpers.export(exports, "safeGet", ()=>safeGet
);
parcelHelpers.export(exports, "stringLength", ()=>stringLength
);
parcelHelpers.export(exports, "stringToByteArray", ()=>stringToByteArray
);
parcelHelpers.export(exports, "stringify", ()=>stringify
);
parcelHelpers.export(exports, "validateArgCount", ()=>validateArgCount
);
parcelHelpers.export(exports, "validateCallback", ()=>validateCallback
);
parcelHelpers.export(exports, "validateContextObject", ()=>validateContextObject
);
parcelHelpers.export(exports, "validateIndexedDBOpenable", ()=>validateIndexedDBOpenable
);
parcelHelpers.export(exports, "validateNamespace", ()=>validateNamespace
);
var _tslib = require("tslib");
var global = arguments[3];
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
 */ var CONSTANTS = {
    /**
     * @define {boolean} Whether this is the client Node.js SDK.
     */ NODE_CLIENT: false,
    /**
     * @define {boolean} Whether this is the Admin Node.js SDK.
     */ NODE_ADMIN: false,
    /**
     * Firebase SDK Version
     */ SDK_VERSION: '${JSCORE_VERSION}'
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Throws an error if the provided assertion is falsy
 */ var assert = function(assertion, message) {
    if (!assertion) throw assertionError(message);
};
/**
 * Returns an Error object suitable for throwing.
 */ var assertionError = function(message) {
    return new Error('Firebase Database (' + CONSTANTS.SDK_VERSION + ') INTERNAL ASSERT FAILED: ' + message);
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var stringToByteArray$1 = function(str) {
    // TODO(user): Use native implementations if/when available
    var out = [];
    var p = 0;
    for(var i = 0; i < str.length; i++){
        var c = str.charCodeAt(i);
        if (c < 128) out[p++] = c;
        else if (c < 2048) {
            out[p++] = c >> 6 | 192;
            out[p++] = c & 63 | 128;
        } else if ((c & 64512) === 55296 && i + 1 < str.length && (str.charCodeAt(i + 1) & 64512) === 56320) {
            // Surrogate Pair
            c = 65536 + ((c & 1023) << 10) + (str.charCodeAt(++i) & 1023);
            out[p++] = c >> 18 | 240;
            out[p++] = c >> 12 & 63 | 128;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        } else {
            out[p++] = c >> 12 | 224;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        }
    }
    return out;
};
/**
 * Turns an array of numbers into the string given by the concatenation of the
 * characters to which the numbers correspond.
 * @param bytes Array of numbers representing characters.
 * @return Stringification of the array.
 */ var byteArrayToString = function(bytes) {
    // TODO(user): Use native implementations if/when available
    var out = [];
    var pos = 0, c = 0;
    while(pos < bytes.length){
        var c1 = bytes[pos++];
        if (c1 < 128) out[c++] = String.fromCharCode(c1);
        else if (c1 > 191 && c1 < 224) {
            var c2 = bytes[pos++];
            out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
        } else if (c1 > 239 && c1 < 365) {
            // Surrogate Pair
            var c2 = bytes[pos++];
            var c3 = bytes[pos++];
            var c4 = bytes[pos++];
            var u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 65536;
            out[c++] = String.fromCharCode(55296 + (u >> 10));
            out[c++] = String.fromCharCode(56320 + (u & 1023));
        } else {
            var c2 = bytes[pos++];
            var c3 = bytes[pos++];
            out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
        }
    }
    return out.join('');
};
// We define it as an object literal instead of a class because a class compiled down to es5 can't
// be treeshaked. https://github.com/rollup/rollup/issues/1691
// Static lookup maps, lazily populated by init_()
var base64 = {
    /**
     * Maps bytes to characters.
     */ byteToCharMap_: null,
    /**
     * Maps characters to bytes.
     */ charToByteMap_: null,
    /**
     * Maps bytes to websafe characters.
     * @private
     */ byteToCharMapWebSafe_: null,
    /**
     * Maps websafe characters to bytes.
     * @private
     */ charToByteMapWebSafe_: null,
    /**
     * Our default alphabet, shared between
     * ENCODED_VALS and ENCODED_VALS_WEBSAFE
     */ ENCODED_VALS_BASE: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
    /**
     * Our default alphabet. Value 64 (=) is special; it means "nothing."
     */ get ENCODED_VALS () {
        return undefined.ENCODED_VALS_BASE + '+/=';
    },
    /**
     * Our websafe alphabet.
     */ get ENCODED_VALS_WEBSAFE () {
        return undefined.ENCODED_VALS_BASE + '-_.';
    },
    /**
     * Whether this browser supports the atob and btoa functions. This extension
     * started at Mozilla but is now implemented by many browsers. We use the
     * ASSUME_* variables to avoid pulling in the full useragent detection library
     * but still allowing the standard per-browser compilations.
     *
     */ HAS_NATIVE_SUPPORT: typeof atob === 'function',
    /**
     * Base64-encode an array of bytes.
     *
     * @param input An array of bytes (numbers with
     *     value in [0, 255]) to encode.
     * @param webSafe Boolean indicating we should use the
     *     alternative alphabet.
     * @return The base64 encoded string.
     */ encodeByteArray: function(input, webSafe) {
        if (!Array.isArray(input)) throw Error('encodeByteArray takes an array as a parameter');
        this.init_();
        var byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
        var output = [];
        for(var i = 0; i < input.length; i += 3){
            var byte1 = input[i];
            var haveByte2 = i + 1 < input.length;
            var byte2 = haveByte2 ? input[i + 1] : 0;
            var haveByte3 = i + 2 < input.length;
            var byte3 = haveByte3 ? input[i + 2] : 0;
            var outByte1 = byte1 >> 2;
            var outByte2 = (byte1 & 3) << 4 | byte2 >> 4;
            var outByte3 = (byte2 & 15) << 2 | byte3 >> 6;
            var outByte4 = byte3 & 63;
            if (!haveByte3) {
                outByte4 = 64;
                if (!haveByte2) outByte3 = 64;
            }
            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
        }
        return output.join('');
    },
    /**
     * Base64-encode a string.
     *
     * @param input A string to encode.
     * @param webSafe If true, we should use the
     *     alternative alphabet.
     * @return The base64 encoded string.
     */ encodeString: function(input, webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !webSafe) return btoa(input);
        return this.encodeByteArray(stringToByteArray$1(input), webSafe);
    },
    /**
     * Base64-decode a string.
     *
     * @param input to decode.
     * @param webSafe True if we should use the
     *     alternative alphabet.
     * @return string representing the decoded value.
     */ decodeString: function(input, webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !webSafe) return atob(input);
        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
    },
    /**
     * Base64-decode a string.
     *
     * In base-64 decoding, groups of four characters are converted into three
     * bytes.  If the encoder did not apply padding, the input length may not
     * be a multiple of 4.
     *
     * In this case, the last group will have fewer than 4 characters, and
     * padding will be inferred.  If the group has one or two characters, it decodes
     * to one byte.  If the group has three characters, it decodes to two bytes.
     *
     * @param input Input to decode.
     * @param webSafe True if we should use the web-safe alphabet.
     * @return bytes representing the decoded value.
     */ decodeStringToByteArray: function(input, webSafe) {
        this.init_();
        var charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
        var output = [];
        for(var i = 0; i < input.length;){
            var byte1 = charToByteMap[input.charAt(i++)];
            var haveByte2 = i < input.length;
            var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
            ++i;
            var haveByte3 = i < input.length;
            var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            var haveByte4 = i < input.length;
            var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) throw Error();
            var outByte1 = byte1 << 2 | byte2 >> 4;
            output.push(outByte1);
            if (byte3 !== 64) {
                var outByte2 = byte2 << 4 & 240 | byte3 >> 2;
                output.push(outByte2);
                if (byte4 !== 64) {
                    var outByte3 = byte3 << 6 & 192 | byte4;
                    output.push(outByte3);
                }
            }
        }
        return output;
    },
    /**
     * Lazy static initialization function. Called before
     * accessing any of the static map variables.
     * @private
     */ init_: function() {
        if (!this.byteToCharMap_) {
            this.byteToCharMap_ = {
            };
            this.charToByteMap_ = {
            };
            this.byteToCharMapWebSafe_ = {
            };
            this.charToByteMapWebSafe_ = {
            };
            // We want quick mappings back and forth, so we precompute two maps.
            for(var i = 0; i < this.ENCODED_VALS.length; i++){
                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                this.charToByteMap_[this.byteToCharMap_[i]] = i;
                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
                // Be forgiving when decoding and correctly decode both encodings.
                if (i >= this.ENCODED_VALS_BASE.length) {
                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                }
            }
        }
    }
};
/**
 * URL-safe base64 encoding
 */ var base64Encode = function(str) {
    var utf8Bytes = stringToByteArray$1(str);
    return base64.encodeByteArray(utf8Bytes, true);
};
/**
 * URL-safe base64 encoding (without "." padding in the end).
 * e.g. Used in JSON Web Token (JWT) parts.
 */ var base64urlEncodeWithoutPadding = function(str) {
    // Use base64url encoding and remove padding in the end (dot characters).
    return base64Encode(str).replace(/\./g, '');
};
/**
 * URL-safe base64 decoding
 *
 * NOTE: DO NOT use the global atob() function - it does NOT support the
 * base64Url variant encoding.
 *
 * @param str To be decoded
 * @return Decoded result, if possible
 */ var base64Decode = function(str) {
    try {
        return base64.decodeString(str, true);
    } catch (e) {
        console.error('base64Decode failed: ', e);
    }
    return null;
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Do a deep-copy of basic JavaScript Objects or Arrays.
 */ function deepCopy(value) {
    return deepExtend(undefined, value);
}
/**
 * Copy properties from source to target (recursively allows extension
 * of Objects and Arrays).  Scalar values in the target are over-written.
 * If target is undefined, an object of the appropriate type will be created
 * (and returned).
 *
 * We recursively copy all child properties of plain Objects in the source- so
 * that namespace- like dictionaries are merged.
 *
 * Note that the target can be a function, in which case the properties in
 * the source Object are copied onto it as static properties of the Function.
 *
 * Note: we don't merge __proto__ to prevent prototype pollution
 */ function deepExtend(target, source) {
    if (!(source instanceof Object)) return source;
    switch(source.constructor){
        case Date:
            // Treat Dates like scalars; if the target date object had any child
            // properties - they will be lost!
            var dateValue = source;
            return new Date(dateValue.getTime());
        case Object:
            if (target === undefined) target = {
            };
            break;
        case Array:
            // Always copy the array source and overwrite the target.
            target = [];
            break;
        default:
            // Not a plain Object - treat it as a scalar.
            return source;
    }
    for(var prop in source){
        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202
        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) continue;
        target[prop] = deepExtend(target[prop], source[prop]);
    }
    return target;
}
function isValidKey(key) {
    return key !== '__proto__';
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var Deferred = function() {
    function Deferred1() {
        var _this = this;
        this.reject = function() {
        };
        this.resolve = function() {
        };
        this.promise = new Promise(function(resolve, reject) {
            _this.resolve = resolve;
            _this.reject = reject;
        });
    }
    /**
     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
     * and returns a node-style callback which will resolve or reject the Deferred's promise.
     */ Deferred1.prototype.wrapCallback = function(callback) {
        var _this = this;
        return function(error, value) {
            if (error) _this.reject(error);
            else _this.resolve(value);
            if (typeof callback === 'function') {
                // Attaching noop handler just in case developer wasn't expecting
                // promises
                _this.promise.catch(function() {
                });
                // Some of our callbacks don't expect a value and our own tests
                // assert that the parameter length is 1
                if (callback.length === 1) callback(error);
                else callback(error, value);
            }
        };
    };
    return Deferred1;
}();
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function createMockUserToken(token, projectId) {
    if (token.uid) throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
    // Unsecured JWTs use "none" as the algorithm.
    var header = {
        alg: 'none',
        type: 'JWT'
    };
    var project = projectId || 'demo-project';
    var iat = token.iat || 0;
    var sub = token.sub || token.user_id;
    if (!sub) throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
    var payload = _tslib.__assign({
        // Set all required fields to decent defaults
        iss: "https://securetoken.google.com/" + project,
        aud: project,
        iat: iat,
        exp: iat + 3600,
        auth_time: iat,
        sub: sub,
        user_id: sub,
        firebase: {
            sign_in_provider: 'custom',
            identities: {
            }
        }
    }, token);
    // Unsecured JWTs use the empty string as a signature.
    var signature = '';
    return [
        base64urlEncodeWithoutPadding(JSON.stringify(header)),
        base64urlEncodeWithoutPadding(JSON.stringify(payload)),
        signature
    ].join('.');
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns navigator.userAgent string or '' if it's not defined.
 * @return user agent string
 */ function getUA() {
    if (typeof navigator !== 'undefined' && typeof navigator['userAgent'] === 'string') return navigator['userAgent'];
    else return '';
}
/**
 * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
 *
 * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
 * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
 * wait for a callback.
 */ function isMobileCordova() {
    return typeof window !== 'undefined' && // @ts-ignore Setting up an broadly applicable index signature for Window
    // just to deal with this case would probably be a bad idea.
    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA());
}
/**
 * Detect Node.js.
 *
 * @return true if Node.js environment is detected.
 */ // Node detection logic from: https://github.com/iliakan/detect-node/
function isNode() {
    try {
        return Object.prototype.toString.call(global.process) === '[object process]';
    } catch (e) {
        return false;
    }
}
/**
 * Detect Browser Environment
 */ function isBrowser() {
    return typeof self === 'object' && self.self === self;
}
function isBrowserExtension() {
    var runtime = typeof chrome === 'object' ? chrome.runtime : typeof browser === 'object' ? browser.runtime : undefined;
    return typeof runtime === 'object' && runtime.id !== undefined;
}
/**
 * Detect React Native.
 *
 * @return true if ReactNative environment is detected.
 */ function isReactNative() {
    return typeof navigator === 'object' && navigator['product'] === 'ReactNative';
}
/** Detects Electron apps. */ function isElectron() {
    return getUA().indexOf('Electron/') >= 0;
}
/** Detects Internet Explorer. */ function isIE() {
    var ua = getUA();
    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
}
/** Detects Universal Windows Platform apps. */ function isUWP() {
    return getUA().indexOf('MSAppHost/') >= 0;
}
/**
 * Detect whether the current SDK build is the Node version.
 *
 * @return true if it's the Node SDK build.
 */ function isNodeSdk() {
    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
}
/** Returns true if we are running in Safari. */ function isSafari() {
    return !isNode() && navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');
}
/**
 * This method checks if indexedDB is supported by current browser/service worker context
 * @return true if indexedDB is supported by current browser/service worker context
 */ function isIndexedDBAvailable() {
    return 'indexedDB' in self && indexedDB != null;
}
/**
 * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject
 * if errors occur during the database open operation.
 *
 * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox
 * private browsing)
 */ function validateIndexedDBOpenable() {
    return new Promise(function(resolve, reject) {
        try {
            var preExist_1 = true;
            var DB_CHECK_NAME_1 = 'validate-browser-context-for-indexeddb-analytics-module';
            var request_1 = self.indexedDB.open(DB_CHECK_NAME_1);
            request_1.onsuccess = function() {
                request_1.result.close();
                // delete database only when it doesn't pre-exist
                if (!preExist_1) self.indexedDB.deleteDatabase(DB_CHECK_NAME_1);
                resolve(true);
            };
            request_1.onupgradeneeded = function() {
                preExist_1 = false;
            };
            request_1.onerror = function() {
                var _a;
                reject(((_a = request_1.error) === null || _a === void 0 ? void 0 : _a.message) || '');
            };
        } catch (error) {
            reject(error);
        }
    });
}
/**
 *
 * This method checks whether cookie is enabled within current browser
 * @return true if cookie is enabled within current browser
 */ function areCookiesEnabled() {
    if (!navigator || !navigator.cookieEnabled) return false;
    return true;
}
/**
 * Polyfill for `globalThis` object.
 * @returns the `globalThis` object for the given environment.
 */ function getGlobal() {
    if (typeof self !== 'undefined') return self;
    if (typeof window !== 'undefined') return window;
    if (typeof global !== 'undefined') return global;
    throw new Error('Unable to locate global object.');
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var ERROR_NAME = 'FirebaseError';
// Based on code from:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
var FirebaseError1 = function(_super) {
    _tslib.__extends(FirebaseError2, _super);
    function FirebaseError2(code, message, customData) {
        var _this = _super.call(this, message) || this;
        _this.code = code;
        _this.customData = customData;
        _this.name = ERROR_NAME;
        // Fix For ES5
        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        Object.setPrototypeOf(_this, FirebaseError2.prototype);
        // Maintains proper stack trace for where our error was thrown.
        // Only available on V8.
        if (Error.captureStackTrace) Error.captureStackTrace(_this, ErrorFactory.prototype.create);
        return _this;
    }
    return FirebaseError2;
}(Error);
var ErrorFactory = function() {
    function ErrorFactory1(service, serviceName, errors) {
        this.service = service;
        this.serviceName = serviceName;
        this.errors = errors;
    }
    ErrorFactory1.prototype.create = function(code) {
        var data = [];
        for(var _i = 1; _i < arguments.length; _i++)data[_i - 1] = arguments[_i];
        var customData = data[0] || {
        };
        var fullCode = this.service + "/" + code;
        var template = this.errors[code];
        var message = template ? replaceTemplate(template, customData) : 'Error';
        // Service Name: Error message (service/code).
        var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
        var error = new FirebaseError1(fullCode, fullMessage, customData);
        return error;
    };
    return ErrorFactory1;
}();
function replaceTemplate(template, data) {
    return template.replace(PATTERN, function(_, key) {
        var value = data[key];
        return value != null ? String(value) : "<" + key + "?>";
    });
}
var PATTERN = /\{\$([^}]+)}/g;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Evaluates a JSON string into a javascript object.
 *
 * @param {string} str A string containing JSON.
 * @return {*} The javascript object representing the specified JSON.
 */ function jsonEval(str) {
    return JSON.parse(str);
}
/**
 * Returns JSON representing a javascript object.
 * @param {*} data Javascript object to be stringified.
 * @return {string} The JSON contents of the object.
 */ function stringify(data) {
    return JSON.stringify(data);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Decodes a Firebase auth. token into constituent parts.
 *
 * Notes:
 * - May return with invalid / incomplete claims if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ var decode = function(token) {
    var header = {
    }, claims = {
    }, data = {
    }, signature = '';
    try {
        var parts = token.split('.');
        header = jsonEval(base64Decode(parts[0]) || '');
        claims = jsonEval(base64Decode(parts[1]) || '');
        signature = parts[2];
        data = claims['d'] || {
        };
        delete claims['d'];
    } catch (e) {
    }
    return {
        header: header,
        claims: claims,
        data: data,
        signature: signature
    };
};
/**
 * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the
 * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ var isValidTimestamp = function(token) {
    var claims = decode(token).claims;
    var now = Math.floor(new Date().getTime() / 1000);
    var validSince = 0, validUntil = 0;
    if (typeof claims === 'object') {
        if (claims.hasOwnProperty('nbf')) validSince = claims['nbf'];
        else if (claims.hasOwnProperty('iat')) validSince = claims['iat'];
        if (claims.hasOwnProperty('exp')) validUntil = claims['exp'];
        else // token will expire after 24h by default
        validUntil = validSince + 86400;
    }
    return !!now && !!validSince && !!validUntil && now >= validSince && now <= validUntil;
};
/**
 * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.
 *
 * Notes:
 * - May return null if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ var issuedAtTime = function(token) {
    var claims = decode(token).claims;
    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) return claims['iat'];
    return null;
};
/**
 * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ var isValidFormat = function(token) {
    var decoded = decode(token), claims = decoded.claims;
    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');
};
/**
 * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ var isAdmin = function(token) {
    var claims = decode(token).claims;
    return typeof claims === 'object' && claims['admin'] === true;
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function contains(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
}
function safeGet(obj, key) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) return obj[key];
    else return undefined;
}
function isEmpty(obj) {
    for(var key in obj){
        if (Object.prototype.hasOwnProperty.call(obj, key)) return false;
    }
    return true;
}
function map(obj, fn, contextObj) {
    var res = {
    };
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) res[key] = fn.call(contextObj, obj[key], key, obj);
    return res;
}
/**
 * Deep equal two objects. Support Arrays and Objects.
 */ function deepEqual(a, b) {
    if (a === b) return true;
    var aKeys = Object.keys(a);
    var bKeys = Object.keys(b);
    for(var _i = 0, aKeys_1 = aKeys; _i < aKeys_1.length; _i++){
        var k = aKeys_1[_i];
        if (!bKeys.includes(k)) return false;
        var aProp = a[k];
        var bProp = b[k];
        if (isObject(aProp) && isObject(bProp)) {
            if (!deepEqual(aProp, bProp)) return false;
        } else if (aProp !== bProp) return false;
    }
    for(var _a = 0, bKeys_1 = bKeys; _a < bKeys_1.length; _a++){
        var k = bKeys_1[_a];
        if (!aKeys.includes(k)) return false;
    }
    return true;
}
function isObject(thing) {
    return thing !== null && typeof thing === 'object';
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
 * params object (e.g. {arg: 'val', arg2: 'val2'})
 * Note: You must prepend it with ? when adding it to a URL.
 */ function querystring(querystringParams) {
    var params = [];
    var _loop_1 = function(key, value) {
        if (Array.isArray(value)) value.forEach(function(arrayVal) {
            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
        });
        else params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
    };
    for(var _i = 0, _a = Object.entries(querystringParams); _i < _a.length; _i++){
        var _b = _a[_i], key = _b[0], value = _b[1];
        _loop_1(key, value);
    }
    return params.length ? '&' + params.join('&') : '';
}
/**
 * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object
 * (e.g. {arg: 'val', arg2: 'val2'})
 */ function querystringDecode(querystring1) {
    var obj = {
    };
    var tokens = querystring1.replace(/^\?/, '').split('&');
    tokens.forEach(function(token) {
        if (token) {
            var _a = token.split('='), key = _a[0], value = _a[1];
            obj[decodeURIComponent(key)] = decodeURIComponent(value);
        }
    });
    return obj;
}
/**
 * Extract the query string part of a URL, including the leading question mark (if present).
 */ function extractQuerystring(url) {
    var queryStart = url.indexOf('?');
    if (!queryStart) return '';
    var fragmentStart = url.indexOf('#', queryStart);
    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @fileoverview SHA-1 cryptographic hash.
 * Variable names follow the notation in FIPS PUB 180-3:
 * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
 *
 * Usage:
 *   var sha1 = new sha1();
 *   sha1.update(bytes);
 *   var hash = sha1.digest();
 *
 * Performance:
 *   Chrome 23:   ~400 Mbit/s
 *   Firefox 16:  ~250 Mbit/s
 *
 */ /**
 * SHA-1 cryptographic hash constructor.
 *
 * The properties declared here are discussed in the above algorithm document.
 * @constructor
 * @final
 * @struct
 */ var Sha1 = function() {
    function Sha11() {
        /**
         * Holds the previous values of accumulated variables a-e in the compress_
         * function.
         * @private
         */ this.chain_ = [];
        /**
         * A buffer holding the partially computed hash result.
         * @private
         */ this.buf_ = [];
        /**
         * An array of 80 bytes, each a part of the message to be hashed.  Referred to
         * as the message schedule in the docs.
         * @private
         */ this.W_ = [];
        /**
         * Contains data needed to pad messages less than 64 bytes.
         * @private
         */ this.pad_ = [];
        /**
         * @private {number}
         */ this.inbuf_ = 0;
        /**
         * @private {number}
         */ this.total_ = 0;
        this.blockSize = 64;
        this.pad_[0] = 128;
        for(var i = 1; i < this.blockSize; ++i)this.pad_[i] = 0;
        this.reset();
    }
    Sha11.prototype.reset = function() {
        this.chain_[0] = 1732584193;
        this.chain_[1] = 4023233417;
        this.chain_[2] = 2562383102;
        this.chain_[3] = 271733878;
        this.chain_[4] = 3285377520;
        this.inbuf_ = 0;
        this.total_ = 0;
    };
    /**
     * Internal compress helper function.
     * @param buf Block to compress.
     * @param offset Offset of the block in the buffer.
     * @private
     */ Sha11.prototype.compress_ = function(buf, offset) {
        if (!offset) offset = 0;
        var W = this.W_;
        // get 16 big endian words
        if (typeof buf === 'string') for(var i = 0; i < 16; i++){
            // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
            // have a bug that turns the post-increment ++ operator into pre-increment
            // during JIT compilation.  We have code that depends heavily on SHA-1 for
            // correctness and which is affected by this bug, so I've removed all uses
            // of post-increment ++ in which the result value is used.  We can revert
            // this change once the Safari bug
            // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
            // most clients have been updated.
            W[i] = buf.charCodeAt(offset) << 24 | buf.charCodeAt(offset + 1) << 16 | buf.charCodeAt(offset + 2) << 8 | buf.charCodeAt(offset + 3);
            offset += 4;
        }
        else for(var i = 0; i < 16; i++){
            W[i] = buf[offset] << 24 | buf[offset + 1] << 16 | buf[offset + 2] << 8 | buf[offset + 3];
            offset += 4;
        }
        // expand to 80 words
        for(var i = 16; i < 80; i++){
            var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
            W[i] = (t << 1 | t >>> 31) & 4294967295;
        }
        var a = this.chain_[0];
        var b = this.chain_[1];
        var c = this.chain_[2];
        var d = this.chain_[3];
        var e = this.chain_[4];
        var f, k;
        // TODO(user): Try to unroll this loop to speed up the computation.
        for(var i = 0; i < 80; i++){
            if (i < 40) {
                if (i < 20) {
                    f = d ^ b & (c ^ d);
                    k = 1518500249;
                } else {
                    f = b ^ c ^ d;
                    k = 1859775393;
                }
            } else if (i < 60) {
                f = b & c | d & (b | c);
                k = 2400959708;
            } else {
                f = b ^ c ^ d;
                k = 3395469782;
            }
            var t = (a << 5 | a >>> 27) + f + e + k + W[i] & 4294967295;
            e = d;
            d = c;
            c = (b << 30 | b >>> 2) & 4294967295;
            b = a;
            a = t;
        }
        this.chain_[0] = this.chain_[0] + a & 4294967295;
        this.chain_[1] = this.chain_[1] + b & 4294967295;
        this.chain_[2] = this.chain_[2] + c & 4294967295;
        this.chain_[3] = this.chain_[3] + d & 4294967295;
        this.chain_[4] = this.chain_[4] + e & 4294967295;
    };
    Sha11.prototype.update = function(bytes, length) {
        // TODO(johnlenz): tighten the function signature and remove this check
        if (bytes == null) return;
        if (length === undefined) length = bytes.length;
        var lengthMinusBlock = length - this.blockSize;
        var n = 0;
        // Using local instead of member variables gives ~5% speedup on Firefox 16.
        var buf = this.buf_;
        var inbuf = this.inbuf_;
        // The outer while loop should execute at most twice.
        while(n < length){
            // When we have no data in the block to top up, we can directly process the
            // input buffer (assuming it contains sufficient data). This gives ~25%
            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
            // the data is provided in large chunks (or in multiples of 64 bytes).
            if (inbuf === 0) while(n <= lengthMinusBlock){
                this.compress_(bytes, n);
                n += this.blockSize;
            }
            if (typeof bytes === 'string') while(n < length){
                buf[inbuf] = bytes.charCodeAt(n);
                ++inbuf;
                ++n;
                if (inbuf === this.blockSize) {
                    this.compress_(buf);
                    inbuf = 0;
                    break;
                }
            }
            else while(n < length){
                buf[inbuf] = bytes[n];
                ++inbuf;
                ++n;
                if (inbuf === this.blockSize) {
                    this.compress_(buf);
                    inbuf = 0;
                    break;
                }
            }
        }
        this.inbuf_ = inbuf;
        this.total_ += length;
    };
    /** @override */ Sha11.prototype.digest = function() {
        var digest = [];
        var totalBits = this.total_ * 8;
        // Add pad 0x80 0x00*.
        if (this.inbuf_ < 56) this.update(this.pad_, 56 - this.inbuf_);
        else this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
        // Add # bits.
        for(var i = this.blockSize - 1; i >= 56; i--){
            this.buf_[i] = totalBits & 255;
            totalBits /= 256; // Don't use bit-shifting here!
        }
        this.compress_(this.buf_);
        var n = 0;
        for(var i = 0; i < 5; i++)for(var j = 24; j >= 0; j -= 8){
            digest[n] = this.chain_[i] >> j & 255;
            ++n;
        }
        return digest;
    };
    return Sha11;
}();
/**
 * Helper to make a Subscribe function (just like Promise helps make a
 * Thenable).
 *
 * @param executor Function which can make calls to a single Observer
 *     as a proxy.
 * @param onNoObservers Callback when count of Observers goes to zero.
 */ function createSubscribe(executor, onNoObservers) {
    var proxy = new ObserverProxy(executor, onNoObservers);
    return proxy.subscribe.bind(proxy);
}
/**
 * Implement fan-out for any number of Observers attached via a subscribe
 * function.
 */ var ObserverProxy = function() {
    /**
     * @param executor Function which can make calls to a single Observer
     *     as a proxy.
     * @param onNoObservers Callback when count of Observers goes to zero.
     */ function ObserverProxy1(executor, onNoObservers) {
        var _this = this;
        this.observers = [];
        this.unsubscribes = [];
        this.observerCount = 0;
        // Micro-task scheduling by calling task.then().
        this.task = Promise.resolve();
        this.finalized = false;
        this.onNoObservers = onNoObservers;
        // Call the executor asynchronously so subscribers that are called
        // synchronously after the creation of the subscribe function
        // can still receive the very first value generated in the executor.
        this.task.then(function() {
            executor(_this);
        }).catch(function(e) {
            _this.error(e);
        });
    }
    ObserverProxy1.prototype.next = function(value) {
        this.forEachObserver(function(observer) {
            observer.next(value);
        });
    };
    ObserverProxy1.prototype.error = function(error) {
        this.forEachObserver(function(observer) {
            observer.error(error);
        });
        this.close(error);
    };
    ObserverProxy1.prototype.complete = function() {
        this.forEachObserver(function(observer) {
            observer.complete();
        });
        this.close();
    };
    /**
     * Subscribe function that can be used to add an Observer to the fan-out list.
     *
     * - We require that no event is sent to a subscriber sychronously to their
     *   call to subscribe().
     */ ObserverProxy1.prototype.subscribe = function(nextOrObserver, error, complete) {
        var _this = this;
        var observer;
        if (nextOrObserver === undefined && error === undefined && complete === undefined) throw new Error('Missing Observer.');
        // Assemble an Observer object when passed as callback functions.
        if (implementsAnyMethods(nextOrObserver, [
            'next',
            'error',
            'complete'
        ])) observer = nextOrObserver;
        else observer = {
            next: nextOrObserver,
            error: error,
            complete: complete
        };
        if (observer.next === undefined) observer.next = noop;
        if (observer.error === undefined) observer.error = noop;
        if (observer.complete === undefined) observer.complete = noop;
        var unsub = this.unsubscribeOne.bind(this, this.observers.length);
        // Attempt to subscribe to a terminated Observable - we
        // just respond to the Observer with the final error or complete
        // event.
        if (this.finalized) // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(function() {
            try {
                if (_this.finalError) observer.error(_this.finalError);
                else observer.complete();
            } catch (e) {
            // nothing
            }
            return;
        });
        this.observers.push(observer);
        return unsub;
    };
    // Unsubscribe is synchronous - we guarantee that no events are sent to
    // any unsubscribed Observer.
    ObserverProxy1.prototype.unsubscribeOne = function(i) {
        if (this.observers === undefined || this.observers[i] === undefined) return;
        delete this.observers[i];
        this.observerCount -= 1;
        if (this.observerCount === 0 && this.onNoObservers !== undefined) this.onNoObservers(this);
    };
    ObserverProxy1.prototype.forEachObserver = function(fn) {
        if (this.finalized) // Already closed by previous event....just eat the additional values.
        return;
        // Since sendOne calls asynchronously - there is no chance that
        // this.observers will become undefined.
        for(var i = 0; i < this.observers.length; i++)this.sendOne(i, fn);
    };
    // Call the Observer via one of it's callback function. We are careful to
    // confirm that the observe has not been unsubscribed since this asynchronous
    // function had been queued.
    ObserverProxy1.prototype.sendOne = function(i, fn) {
        var _this = this;
        // Execute the callback asynchronously
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(function() {
            if (_this.observers !== undefined && _this.observers[i] !== undefined) try {
                fn(_this.observers[i]);
            } catch (e) {
                // Ignore exceptions raised in Observers or missing methods of an
                // Observer.
                // Log error to console. b/31404806
                if (typeof console !== 'undefined' && console.error) console.error(e);
            }
        });
    };
    ObserverProxy1.prototype.close = function(err) {
        var _this = this;
        if (this.finalized) return;
        this.finalized = true;
        if (err !== undefined) this.finalError = err;
        // Proxy is no longer needed - garbage collect references
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(function() {
            _this.observers = undefined;
            _this.onNoObservers = undefined;
        });
    };
    return ObserverProxy1;
}();
/** Turn synchronous function into one called asynchronously. */ // eslint-disable-next-line @typescript-eslint/ban-types
function async(fn, onError) {
    return function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        Promise.resolve(true).then(function() {
            fn.apply(void 0, args);
        }).catch(function(error) {
            if (onError) onError(error);
        });
    };
}
/**
 * Return true if the object passed in implements any of the named methods.
 */ function implementsAnyMethods(obj, methods) {
    if (typeof obj !== 'object' || obj === null) return false;
    for(var _i = 0, methods_1 = methods; _i < methods_1.length; _i++){
        var method = methods_1[_i];
        if (method in obj && typeof obj[method] === 'function') return true;
    }
    return false;
}
function noop() {
// do nothing
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Check to make sure the appropriate number of arguments are provided for a public function.
 * Throws an error if it fails.
 *
 * @param fnName The function name
 * @param minCount The minimum number of arguments to allow for the function call
 * @param maxCount The maximum number of argument to allow for the function call
 * @param argCount The actual number of arguments provided.
 */ var validateArgCount = function(fnName, minCount, maxCount, argCount) {
    var argError;
    if (argCount < minCount) argError = 'at least ' + minCount;
    else if (argCount > maxCount) argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
    if (argError) {
        var error = fnName + ' failed: Was called with ' + argCount + (argCount === 1 ? ' argument.' : ' arguments.') + ' Expects ' + argError + '.';
        throw new Error(error);
    }
};
/**
 * Generates a string to prefix an error message about failed argument validation
 *
 * @param fnName The function name
 * @param argName The name of the argument
 * @return The prefix to add to the error thrown for validation.
 */ function errorPrefix(fnName, argName) {
    return fnName + " failed: " + argName + " argument ";
}
/**
 * @param fnName
 * @param argumentNumber
 * @param namespace
 * @param optional
 */ function validateNamespace(fnName, namespace, optional) {
    if (optional && !namespace) return;
    if (typeof namespace !== 'string') //TODO: I should do more validation here. We only allow certain chars in namespaces.
    throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');
}
function validateCallback(fnName, argumentName, // eslint-disable-next-line @typescript-eslint/ban-types
callback, optional) {
    if (optional && !callback) return;
    if (typeof callback !== 'function') throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');
}
function validateContextObject(fnName, argumentName, context, optional) {
    if (optional && !context) return;
    if (typeof context !== 'object' || context === null) throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
// automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
// so it's been modified.
// Note that not all Unicode characters appear as single characters in JavaScript strings.
// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
// pair).
// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3
/**
 * @param {string} str
 * @return {Array}
 */ var stringToByteArray = function(str) {
    var out = [];
    var p = 0;
    for(var i = 0; i < str.length; i++){
        var c = str.charCodeAt(i);
        // Is this the lead surrogate in a surrogate pair?
        if (c >= 55296 && c <= 56319) {
            var high = c - 55296; // the high 10 bits.
            i++;
            assert(i < str.length, 'Surrogate pair missing trail surrogate.');
            var low = str.charCodeAt(i) - 56320; // the low 10 bits.
            c = 65536 + (high << 10) + low;
        }
        if (c < 128) out[p++] = c;
        else if (c < 2048) {
            out[p++] = c >> 6 | 192;
            out[p++] = c & 63 | 128;
        } else if (c < 65536) {
            out[p++] = c >> 12 | 224;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        } else {
            out[p++] = c >> 18 | 240;
            out[p++] = c >> 12 & 63 | 128;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        }
    }
    return out;
};
/**
 * Calculate length without actually converting; useful for doing cheaper validation.
 * @param {string} str
 * @return {number}
 */ var stringLength = function(str) {
    var p = 0;
    for(var i = 0; i < str.length; i++){
        var c = str.charCodeAt(i);
        if (c < 128) p++;
        else if (c < 2048) p += 2;
        else if (c >= 55296 && c <= 56319) {
            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
            p += 4;
            i++; // skip trail surrogate.
        } else p += 3;
    }
    return p;
};
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The amount of milliseconds to exponentially increase.
 */ var DEFAULT_INTERVAL_MILLIS = 1000;
/**
 * The factor to backoff by.
 * Should be a number greater than 1.
 */ var DEFAULT_BACKOFF_FACTOR = 2;
/**
 * The maximum milliseconds to increase to.
 *
 * <p>Visible for testing
 */ var MAX_VALUE_MILLIS = 14400000; // Four hours, like iOS and Android.
/**
 * The percentage of backoff time to randomize by.
 * See
 * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic
 * for context.
 *
 * <p>Visible for testing
 */ var RANDOM_FACTOR = 0.5;
/**
 * Based on the backoff method from
 * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.
 * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.
 */ function calculateBackoffMillis(backoffCount, intervalMillis, backoffFactor) {
    if (intervalMillis === void 0) intervalMillis = DEFAULT_INTERVAL_MILLIS;
    if (backoffFactor === void 0) backoffFactor = DEFAULT_BACKOFF_FACTOR;
    // Calculates an exponentially increasing value.
    // Deviation: calculates value from count and a constant interval, so we only need to save value
    // and count to restore state.
    var currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);
    // A random "fuzz" to avoid waves of retries.
    // Deviation: randomFactor is required.
    var randomWait = Math.round(// A fraction of the backoff value to add/subtract.
    // Deviation: changes multiplication order to improve readability.
    RANDOM_FACTOR * currBaseValue * (Math.random() - 0.5) * 2);
    // Limits backoff to max to avoid effectively permanent backoff.
    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provide English ordinal letters after a number
 */ function ordinal(i) {
    if (!Number.isFinite(i)) return "" + i;
    return i + indicator(i);
}
function indicator(i) {
    i = Math.abs(i);
    var cent = i % 100;
    if (cent >= 10 && cent <= 20) return 'th';
    var dec = i % 10;
    if (dec === 1) return 'st';
    if (dec === 2) return 'nd';
    if (dec === 3) return 'rd';
    return 'th';
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function getModularInstance(service) {
    if (service && service._delegate) return service._delegate;
    else return service;
}

},{"tslib":"4rd38","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"5qT0x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Component", ()=>Component
);
parcelHelpers.export(exports, "ComponentContainer", ()=>ComponentContainer
);
parcelHelpers.export(exports, "Provider", ()=>Provider
);
var _tslib = require("tslib");
var _util = require("@firebase/util");
/**
 * Component for service name T, e.g. `auth`, `auth-internal`
 */ var Component = function() {
    /**
     *
     * @param name The public service name, e.g. app, auth, firestore, database
     * @param instanceFactory Service factory responsible for creating the public interface
     * @param type whether the service provided by the component is public or private
     */ function Component1(name, instanceFactory, type) {
        this.name = name;
        this.instanceFactory = instanceFactory;
        this.type = type;
        this.multipleInstances = false;
        /**
         * Properties to be added to the service namespace
         */ this.serviceProps = {
        };
        this.instantiationMode = "LAZY";
        this.onInstanceCreated = null;
    }
    Component1.prototype.setInstantiationMode = function(mode) {
        this.instantiationMode = mode;
        return this;
    };
    Component1.prototype.setMultipleInstances = function(multipleInstances) {
        this.multipleInstances = multipleInstances;
        return this;
    };
    Component1.prototype.setServiceProps = function(props) {
        this.serviceProps = props;
        return this;
    };
    Component1.prototype.setInstanceCreatedCallback = function(callback) {
        this.onInstanceCreated = callback;
        return this;
    };
    return Component1;
}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var DEFAULT_ENTRY_NAME = '[DEFAULT]';
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
 * NameServiceMapping[T] is an alias for the type of the instance
 */ var Provider = function() {
    function Provider1(name, container) {
        this.name = name;
        this.container = container;
        this.component = null;
        this.instances = new Map();
        this.instancesDeferred = new Map();
        this.instancesOptions = new Map();
        this.onInitCallbacks = new Map();
    }
    /**
     * @param identifier A provider can provide mulitple instances of a service
     * if this.component.multipleInstances is true.
     */ Provider1.prototype.get = function(identifier) {
        // if multipleInstances is not supported, use the default name
        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        if (!this.instancesDeferred.has(normalizedIdentifier)) {
            var deferred = new _util.Deferred();
            this.instancesDeferred.set(normalizedIdentifier, deferred);
            if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) // initialize the service if it can be auto-initialized
            try {
                var instance = this.getOrInitializeService({
                    instanceIdentifier: normalizedIdentifier
                });
                if (instance) deferred.resolve(instance);
            } catch (e) {
            // when the instance factory throws an exception during get(), it should not cause
            // a fatal error. We just return the unresolved promise in this case.
            }
        }
        return this.instancesDeferred.get(normalizedIdentifier).promise;
    };
    Provider1.prototype.getImmediate = function(options) {
        var _a;
        // if multipleInstances is not supported, use the default name
        var normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);
        var optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;
        if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) try {
            return this.getOrInitializeService({
                instanceIdentifier: normalizedIdentifier
            });
        } catch (e) {
            if (optional) return null;
            else throw e;
        }
        else {
            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw
            if (optional) return null;
            else throw Error("Service " + this.name + " is not available");
        }
    };
    Provider1.prototype.getComponent = function() {
        return this.component;
    };
    Provider1.prototype.setComponent = function(component) {
        var e_1, _a;
        if (component.name !== this.name) throw Error("Mismatching Component " + component.name + " for Provider " + this.name + ".");
        if (this.component) throw Error("Component for " + this.name + " has already been provided");
        this.component = component;
        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)
        if (!this.shouldAutoInitialize()) return;
        // if the service is eager, initialize the default instance
        if (isComponentEager(component)) try {
            this.getOrInitializeService({
                instanceIdentifier: DEFAULT_ENTRY_NAME
            });
        } catch (e) {
        // when the instance factory for an eager Component throws an exception during the eager
        // initialization, it should not cause a fatal error.
        // TODO: Investigate if we need to make it configurable, because some component may want to cause
        // a fatal error in this case?
        }
        try {
            // Create service instances for the pending promises and resolve them
            // NOTE: if this.multipleInstances is false, only the default instance will be created
            // and all promises with resolve with it regardless of the identifier.
            for(var _b = _tslib.__values(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()){
                var _d = _tslib.__read(_c.value, 2), instanceIdentifier = _d[0], instanceDeferred = _d[1];
                var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
                try {
                    // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
                    var instance = this.getOrInitializeService({
                        instanceIdentifier: normalizedIdentifier
                    });
                    instanceDeferred.resolve(instance);
                } catch (e) {
                // when the instance factory throws an exception, it should not cause
                // a fatal error. We just leave the promise unresolved.
                }
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
    };
    Provider1.prototype.clearInstance = function(identifier) {
        if (identifier === void 0) identifier = DEFAULT_ENTRY_NAME;
        this.instancesDeferred.delete(identifier);
        this.instancesOptions.delete(identifier);
        this.instances.delete(identifier);
    };
    // app.delete() will call this method on every provider to delete the services
    // TODO: should we mark the provider as deleted?
    Provider1.prototype.delete = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var services;
            return _tslib.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        services = Array.from(this.instances.values());
                        return [
                            4,
                            Promise.all(_tslib.__spreadArray(_tslib.__spreadArray([], _tslib.__read(services.filter(function(service) {
                                return 'INTERNAL' in service;
                            })// eslint-disable-next-line @typescript-eslint/no-explicit-any
                            .map(function(service) {
                                return service.INTERNAL.delete();
                            }))), _tslib.__read(services.filter(function(service) {
                                return '_delete' in service;
                            })// eslint-disable-next-line @typescript-eslint/no-explicit-any
                            .map(function(service) {
                                return service._delete();
                            }))))
                        ];
                    case 1:
                        _a.sent();
                        return [
                            2
                        ];
                }
            });
        });
    };
    Provider1.prototype.isComponentSet = function() {
        return this.component != null;
    };
    Provider1.prototype.isInitialized = function(identifier) {
        if (identifier === void 0) identifier = DEFAULT_ENTRY_NAME;
        return this.instances.has(identifier);
    };
    Provider1.prototype.getOptions = function(identifier) {
        if (identifier === void 0) identifier = DEFAULT_ENTRY_NAME;
        return this.instancesOptions.get(identifier) || {
        };
    };
    Provider1.prototype.initialize = function(opts) {
        var e_2, _a;
        if (opts === void 0) opts = {
        };
        var _b = opts.options, options = _b === void 0 ? {
        } : _b;
        var normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);
        if (this.isInitialized(normalizedIdentifier)) throw Error(this.name + "(" + normalizedIdentifier + ") has already been initialized");
        if (!this.isComponentSet()) throw Error("Component " + this.name + " has not been registered yet");
        var instance = this.getOrInitializeService({
            instanceIdentifier: normalizedIdentifier,
            options: options
        });
        try {
            // resolve any pending promise waiting for the service instance
            for(var _c = _tslib.__values(this.instancesDeferred.entries()), _d = _c.next(); !_d.done; _d = _c.next()){
                var _e = _tslib.__read(_d.value, 2), instanceIdentifier = _e[0], instanceDeferred = _e[1];
                var normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
                if (normalizedIdentifier === normalizedDeferredIdentifier) instanceDeferred.resolve(instance);
            }
        } catch (e_2_1) {
            e_2 = {
                error: e_2_1
            };
        } finally{
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            } finally{
                if (e_2) throw e_2.error;
            }
        }
        return instance;
    };
    /**
     *
     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().
     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.
     *
     * @param identifier An optional instance identifier
     * @returns a function to unregister the callback
     */ Provider1.prototype.onInit = function(callback, identifier) {
        var _a;
        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        var existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();
        existingCallbacks.add(callback);
        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
        var existingInstance = this.instances.get(normalizedIdentifier);
        if (existingInstance) callback(existingInstance, normalizedIdentifier);
        return function() {
            existingCallbacks.delete(callback);
        };
    };
    /**
     * Invoke onInit callbacks synchronously
     * @param instance the service instance`
     */ Provider1.prototype.invokeOnInitCallbacks = function(instance, identifier) {
        var e_3, _a;
        var callbacks = this.onInitCallbacks.get(identifier);
        if (!callbacks) return;
        try {
            for(var callbacks_1 = _tslib.__values(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()){
                var callback = callbacks_1_1.value;
                try {
                    callback(instance, identifier);
                } catch (_b) {
                // ignore errors in the onInit callback
                }
            }
        } catch (e_3_1) {
            e_3 = {
                error: e_3_1
            };
        } finally{
            try {
                if (callbacks_1_1 && !callbacks_1_1.done && (_a = callbacks_1.return)) _a.call(callbacks_1);
            } finally{
                if (e_3) throw e_3.error;
            }
        }
    };
    Provider1.prototype.getOrInitializeService = function(_a) {
        var instanceIdentifier = _a.instanceIdentifier, _b = _a.options, options = _b === void 0 ? {
        } : _b;
        var instance = this.instances.get(instanceIdentifier);
        if (!instance && this.component) {
            instance = this.component.instanceFactory(this.container, {
                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),
                options: options
            });
            this.instances.set(instanceIdentifier, instance);
            this.instancesOptions.set(instanceIdentifier, options);
            /**
             * Invoke onInit listeners.
             * Note this.component.onInstanceCreated is different, which is used by the component creator,
             * while onInit listeners are registered by consumers of the provider.
             */ this.invokeOnInitCallbacks(instance, instanceIdentifier);
            /**
             * Order is important
             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which
             * makes `isInitialized()` return true.
             */ if (this.component.onInstanceCreated) try {
                this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
            } catch (_c) {
            // ignore errors in the onInstanceCreatedCallback
            }
        }
        return instance || null;
    };
    Provider1.prototype.normalizeInstanceIdentifier = function(identifier) {
        if (identifier === void 0) identifier = DEFAULT_ENTRY_NAME;
        if (this.component) return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
        else return identifier; // assume multiple instances are supported before the component is provided.
    };
    Provider1.prototype.shouldAutoInitialize = function() {
        return !!this.component && this.component.instantiationMode !== "EXPLICIT";
    };
    return Provider1;
}();
// undefined should be passed to the service factory for the default instance
function normalizeIdentifierForFactory(identifier) {
    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;
}
function isComponentEager(component) {
    return component.instantiationMode === "EAGER";
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
 */ var ComponentContainer = function() {
    function ComponentContainer1(name) {
        this.name = name;
        this.providers = new Map();
    }
    /**
     *
     * @param component Component being added
     * @param overwrite When a component with the same name has already been registered,
     * if overwrite is true: overwrite the existing component with the new component and create a new
     * provider with the new component. It can be useful in tests where you want to use different mocks
     * for different tests.
     * if overwrite is false: throw an exception
     */ ComponentContainer1.prototype.addComponent = function(component) {
        var provider = this.getProvider(component.name);
        if (provider.isComponentSet()) throw new Error("Component " + component.name + " has already been registered with " + this.name);
        provider.setComponent(component);
    };
    ComponentContainer1.prototype.addOrOverwriteComponent = function(component) {
        var provider = this.getProvider(component.name);
        if (provider.isComponentSet()) // delete the existing provider from the container, so we can register the new component
        this.providers.delete(component.name);
        this.addComponent(component);
    };
    /**
     * getProvider provides a type safe interface where it can only be called with a field name
     * present in NameServiceMapping interface.
     *
     * Firebase SDKs providing services should extend NameServiceMapping interface to register
     * themselves.
     */ ComponentContainer1.prototype.getProvider = function(name) {
        if (this.providers.has(name)) return this.providers.get(name);
        // create a Provider for a service that hasn't registered with Firebase
        var provider = new Provider(name, this);
        this.providers.set(name, provider);
        return provider;
    };
    ComponentContainer1.prototype.getProviders = function() {
        return Array.from(this.providers.values());
    };
    return ComponentContainer1;
}();

},{"tslib":"4rd38","@firebase/util":"3bR6t","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"5PuYX":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */ function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _a;
/**
 * A container for all of the Logger instances
 */ var instances = [];
(function(LogLevel) {
    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
    LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
    LogLevel[LogLevel["INFO"] = 2] = "INFO";
    LogLevel[LogLevel["WARN"] = 3] = "WARN";
    LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
    LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
})(exports.LogLevel || (exports.LogLevel = {
}));
var levelStringToEnum = {
    'debug': exports.LogLevel.DEBUG,
    'verbose': exports.LogLevel.VERBOSE,
    'info': exports.LogLevel.INFO,
    'warn': exports.LogLevel.WARN,
    'error': exports.LogLevel.ERROR,
    'silent': exports.LogLevel.SILENT
};
/**
 * The default log level
 */ var defaultLogLevel = exports.LogLevel.INFO;
/**
 * By default, `console.debug` is not displayed in the developer console (in
 * chrome). To avoid forcing users to have to opt-in to these logs twice
 * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
 * logs to the `console.log` function.
 */ var ConsoleMethod = (_a = {
}, _a[exports.LogLevel.DEBUG] = 'log', _a[exports.LogLevel.VERBOSE] = 'log', _a[exports.LogLevel.INFO] = 'info', _a[exports.LogLevel.WARN] = 'warn', _a[exports.LogLevel.ERROR] = 'error', _a);
/**
 * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
 * messages on to their corresponding console counterparts (if the log method
 * is supported by the current log level)
 */ var defaultLogHandler = function(instance, logType) {
    var args = [];
    for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];
    if (logType < instance.logLevel) return;
    var now = new Date().toISOString();
    var method = ConsoleMethod[logType];
    if (method) console[method].apply(console, __spreadArrays([
        "[" + now + "]  " + instance.name + ":"
    ], args));
    else throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
};
var Logger = function() {
    /**
     * Gives you an instance of a Logger to capture messages according to
     * Firebase's logging scheme.
     *
     * @param name The name that the logs will be associated with
     */ function Logger1(name) {
        this.name = name;
        /**
         * The log level of the given Logger instance.
         */ this._logLevel = defaultLogLevel;
        /**
         * The main (internal) log handler for the Logger instance.
         * Can be set to a new function in internal package code but not by user.
         */ this._logHandler = defaultLogHandler;
        /**
         * The optional, additional, user-defined log handler for the Logger instance.
         */ this._userLogHandler = null;
        /**
         * Capture the current instance for later use
         */ instances.push(this);
    }
    Object.defineProperty(Logger1.prototype, "logLevel", {
        get: function() {
            return this._logLevel;
        },
        set: function(val) {
            if (!(val in exports.LogLevel)) throw new TypeError("Invalid value \"" + val + "\" assigned to `logLevel`");
            this._logLevel = val;
        },
        enumerable: false,
        configurable: true
    });
    // Workaround for setter/getter having to be the same type.
    Logger1.prototype.setLogLevel = function(val) {
        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
    };
    Object.defineProperty(Logger1.prototype, "logHandler", {
        get: function() {
            return this._logHandler;
        },
        set: function(val) {
            if (typeof val !== 'function') throw new TypeError('Value assigned to `logHandler` must be a function');
            this._logHandler = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger1.prototype, "userLogHandler", {
        get: function() {
            return this._userLogHandler;
        },
        set: function(val) {
            this._userLogHandler = val;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * The functions below are all based on the `console` interface
     */ Logger1.prototype.debug = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([
            this,
            exports.LogLevel.DEBUG
        ], args));
        this._logHandler.apply(this, __spreadArrays([
            this,
            exports.LogLevel.DEBUG
        ], args));
    };
    Logger1.prototype.log = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([
            this,
            exports.LogLevel.VERBOSE
        ], args));
        this._logHandler.apply(this, __spreadArrays([
            this,
            exports.LogLevel.VERBOSE
        ], args));
    };
    Logger1.prototype.info = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([
            this,
            exports.LogLevel.INFO
        ], args));
        this._logHandler.apply(this, __spreadArrays([
            this,
            exports.LogLevel.INFO
        ], args));
    };
    Logger1.prototype.warn = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([
            this,
            exports.LogLevel.WARN
        ], args));
        this._logHandler.apply(this, __spreadArrays([
            this,
            exports.LogLevel.WARN
        ], args));
    };
    Logger1.prototype.error = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([
            this,
            exports.LogLevel.ERROR
        ], args));
        this._logHandler.apply(this, __spreadArrays([
            this,
            exports.LogLevel.ERROR
        ], args));
    };
    return Logger1;
}();
function setLogLevel(level) {
    instances.forEach(function(inst) {
        inst.setLogLevel(level);
    });
}
function setUserLogHandler(logCallback, options) {
    var _loop_1 = function(instance) {
        var customLogLevel = null;
        if (options && options.level) customLogLevel = levelStringToEnum[options.level];
        if (logCallback === null) instance.userLogHandler = null;
        else instance.userLogHandler = function(instance1, level) {
            var args = [];
            for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];
            var message = args.map(function(arg) {
                if (arg == null) return null;
                else if (typeof arg === 'string') return arg;
                else if (typeof arg === 'number' || typeof arg === 'boolean') return arg.toString();
                else if (arg instanceof Error) return arg.message;
                else try {
                    return JSON.stringify(arg);
                } catch (ignored) {
                    return null;
                }
            }).filter(function(arg) {
                return arg;
            }).join(' ');
            if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance1.logLevel)) logCallback({
                level: exports.LogLevel[level].toLowerCase(),
                message: message,
                args: args,
                type: instance1.name
            });
        };
    };
    for(var _i = 0, instances_1 = instances; _i < instances_1.length; _i++){
        var instance = instances_1[_i];
        _loop_1(instance);
    }
}
exports.Logger = Logger;
exports.setLogLevel = setLogLevel;
exports.setUserLogHandler = setUserLogHandler;

},{}],"2lC03":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _app = require("@firebase/app");
var _appDefault = parcelHelpers.interopDefault(_app);
var global = arguments[3];
(function() {
    var k, aa = "function" == typeof Object.defineProperties ? Object.defineProperty : function(a, b, c) {
        a != Array.prototype && a != Object.prototype && (a[b] = c.value);
    };
    function ba(a) {
        a = [
            "object" == typeof window && window,
            "object" == typeof self && self,
            "object" == typeof global && global,
            a
        ];
        for(var b = 0; b < a.length; ++b){
            var c = a[b];
            if (c && c.Math == Math) return c;
        }
        return globalThis;
    }
    var ca = ba(this);
    function da(a, b) {
        if (b) {
            var c = ca;
            a = a.split(".");
            for(var d = 0; d < a.length - 1; d++){
                var e = a[d];
                e in c || (c[e] = {
                });
                c = c[e];
            }
            a = a[a.length - 1];
            d = c[a];
            b = b(d);
            b != d && null != b && aa(c, a, {
                configurable: true,
                writable: true,
                value: b
            });
        }
    }
    function ea(a) {
        var b = 0;
        return function() {
            return b < a.length ? {
                done: false,
                value: a[b++]
            } : {
                done: true
            };
        };
    }
    function fa(a) {
        var b = "undefined" != typeof Symbol && Symbol.iterator && a[Symbol.iterator];
        return b ? b.call(a) : {
            next: ea(a)
        };
    }
    da("Promise", function(a) {
        function b(g) {
            this.b = 0;
            this.c = void 0;
            this.a = [];
            var h = this.f();
            try {
                g(h.resolve, h.reject);
            } catch (m) {
                h.reject(m);
            }
        }
        function c() {
            this.a = null;
        }
        function d(g) {
            return g instanceof b ? g : new b(function(h) {
                h(g);
            });
        }
        if (a) return a;
        c.prototype.b = function(g) {
            if (null == this.a) {
                this.a = [];
                var h = this;
                this.c(function() {
                    h.g();
                });
            }
            this.a.push(g);
        };
        var e = ca.setTimeout;
        c.prototype.c = function(g) {
            e(g, 0);
        };
        c.prototype.g = function() {
            for(; this.a && this.a.length;){
                var g = this.a;
                this.a = [];
                for(var h = 0; h < g.length; ++h){
                    var m = g[h];
                    g[h] = null;
                    try {
                        m();
                    } catch (p) {
                        this.f(p);
                    }
                }
            }
            this.a = null;
        };
        c.prototype.f = function(g) {
            this.c(function() {
                throw g;
            });
        };
        b.prototype.f = function() {
            function g(p) {
                return function(v) {
                    m || (m = true, p.call(h, v));
                };
            }
            var h = this, m = false;
            return {
                resolve: g(this.m),
                reject: g(this.g)
            };
        };
        b.prototype.m = function(g) {
            if (g === this) this.g(new TypeError("A Promise cannot resolve to itself"));
            else if (g instanceof b) this.s(g);
            else {
                a: switch(typeof g){
                    case "object":
                        var h = null != g;
                        break a;
                    case "function":
                        h = true;
                        break a;
                    default:
                        h = false;
                }
                h ? this.v(g) : this.h(g);
            }
        };
        b.prototype.v = function(g) {
            var h = void 0;
            try {
                h = g.then;
            } catch (m) {
                this.g(m);
                return;
            }
            "function" == typeof h ? this.u(h, g) : this.h(g);
        };
        b.prototype.g = function(g) {
            this.i(2, g);
        };
        b.prototype.h = function(g) {
            this.i(1, g);
        };
        b.prototype.i = function(g, h) {
            if (0 != this.b) throw Error("Cannot settle(" + g + ", " + h + "): Promise already settled in state" + this.b);
            this.b = g;
            this.c = h;
            this.l();
        };
        b.prototype.l = function() {
            if (null != this.a) {
                for(var g = 0; g < this.a.length; ++g)f.b(this.a[g]);
                this.a = null;
            }
        };
        var f = new c;
        b.prototype.s = function(g) {
            var h = this.f();
            g.Ra(h.resolve, h.reject);
        };
        b.prototype.u = function(g, h) {
            var m = this.f();
            try {
                g.call(h, m.resolve, m.reject);
            } catch (p) {
                m.reject(p);
            }
        };
        b.prototype.then = function(g, h) {
            function m(A, Q) {
                return "function" == typeof A ? function(ya) {
                    try {
                        p(A(ya));
                    } catch (Ad) {
                        v(Ad);
                    }
                } : Q;
            }
            var p, v, B = new b(function(A, Q) {
                p = A;
                v = Q;
            });
            this.Ra(m(g, p), m(h, v));
            return B;
        };
        b.prototype.catch = function(g) {
            return this.then(void 0, g);
        };
        b.prototype.Ra = function(g, h) {
            function m() {
                switch(p.b){
                    case 1:
                        g(p.c);
                        break;
                    case 2:
                        h(p.c);
                        break;
                    default:
                        throw Error("Unexpected state: " + p.b);
                }
            }
            var p = this;
            null == this.a ? f.b(m) : this.a.push(m);
        };
        b.resolve = d;
        b.reject = function(g) {
            return new b(function(h, m) {
                m(g);
            });
        };
        b.race = function(g) {
            return new b(function(h, m) {
                for(var p = fa(g), v = p.next(); !v.done; v = p.next())d(v.value).Ra(h, m);
            });
        };
        b.all = function(g) {
            var h = fa(g), m = h.next();
            return m.done ? d([]) : new b(function(p, v) {
                function B(ya) {
                    return function(Ad) {
                        A[ya] = Ad;
                        Q--;
                        0 == Q && p(A);
                    };
                }
                var A = [], Q = 0;
                do A.push(void 0), Q++, d(m.value).Ra(B(A.length - 1), v), m = h.next();
                while (!m.done)
            });
        };
        return b;
    });
    var ha = ha || {
    }, l = this || self, ia = /^[\w+/_-]+[=]{0,2}$/, ja = null;
    function ka(a) {
        return (a = a.querySelector && a.querySelector("script[nonce]")) && (a = a.nonce || a.getAttribute("nonce")) && ia.test(a) ? a : "";
    }
    function la() {
    }
    function ma(a) {
        var b = typeof a;
        return "object" != b ? b : a ? Array.isArray(a) ? "array" : b : "null";
    }
    function na(a) {
        var b = ma(a);
        return "array" == b || "object" == b && "number" == typeof a.length;
    }
    function oa(a) {
        return "function" == ma(a);
    }
    function n(a) {
        var b = typeof a;
        return "object" == b && null != a || "function" == b;
    }
    function pa(a) {
        return Object.prototype.hasOwnProperty.call(a, qa) && a[qa] || (a[qa] = ++ra);
    }
    var qa = "closure_uid_" + (1000000000 * Math.random() >>> 0), ra = 0;
    function sa(a, b, c) {
        return a.call.apply(a.bind, arguments);
    }
    function ta(a, b, c) {
        if (!a) throw Error();
        if (2 < arguments.length) {
            var d = Array.prototype.slice.call(arguments, 2);
            return function() {
                var e = Array.prototype.slice.call(arguments);
                Array.prototype.unshift.apply(e, d);
                return a.apply(b, e);
            };
        }
        return function() {
            return a.apply(b, arguments);
        };
    }
    function q(a, b, c) {
        Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? q = sa : q = ta;
        return q.apply(null, arguments);
    }
    function ua(a, b) {
        var c = Array.prototype.slice.call(arguments, 1);
        return function() {
            var d = c.slice();
            d.push.apply(d, arguments);
            return a.apply(this, d);
        };
    }
    var va = Date.now;
    function r(a, b) {
        function c() {
        }
        c.prototype = b.prototype;
        a.bb = b.prototype;
        a.prototype = new c;
        a.prototype.constructor = a;
    }
    function wa(a) {
        return a;
    }
    function t(a, b, c) {
        this.code = xa + a;
        this.message = b || za[a] || "";
        this.a = c || null;
    }
    r(t, Error);
    t.prototype.w = function() {
        var a = {
            code: this.code,
            message: this.message
        };
        this.a && (a.serverResponse = this.a);
        return a;
    };
    t.prototype.toJSON = function() {
        return this.w();
    };
    function Aa(a) {
        var b = a && a.code;
        return b ? new t(b.substring(xa.length), a.message, a.serverResponse) : null;
    }
    var xa = "auth/", za = {
        "admin-restricted-operation": "This operation is restricted to administrators only.",
        "argument-error": "",
        "app-not-authorized": "This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.",
        "app-not-installed": "The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.",
        "captcha-check-failed": "The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.",
        "code-expired": "The SMS code has expired. Please re-send the verification code to try again.",
        "cordova-not-ready": "Cordova framework is not ready.",
        "cors-unsupported": "This browser is not supported.",
        "credential-already-in-use": "This credential is already associated with a different user account.",
        "custom-token-mismatch": "The custom token corresponds to a different audience.",
        "requires-recent-login": "This operation is sensitive and requires recent authentication. Log in again before retrying this request.",
        "dynamic-link-not-activated": "Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.",
        "email-change-needs-verification": "Multi-factor users must always have a verified email.",
        "email-already-in-use": "The email address is already in use by another account.",
        "expired-action-code": "The action code has expired. ",
        "cancelled-popup-request": "This operation has been cancelled due to another conflicting popup being opened.",
        "internal-error": "An internal error has occurred.",
        "invalid-app-credential": "The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.",
        "invalid-app-id": "The mobile app identifier is not registed for the current project.",
        "invalid-user-token": "This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.",
        "invalid-auth-event": "An internal error has occurred.",
        "invalid-verification-code": "The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure to use the verification code provided by the user.",
        "invalid-continue-uri": "The continue URL provided in the request is invalid.",
        "invalid-cordova-configuration": "The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.",
        "invalid-custom-token": "The custom token format is incorrect. Please check the documentation.",
        "invalid-dynamic-link-domain": "The provided dynamic link domain is not configured or authorized for the current project.",
        "invalid-email": "The email address is badly formatted.",
        "invalid-api-key": "Your API key is invalid, please check you have copied it correctly.",
        "invalid-cert-hash": "The SHA-1 certificate hash provided is invalid.",
        "invalid-credential": "The supplied auth credential is malformed or has expired.",
        "invalid-message-payload": "The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.",
        "invalid-multi-factor-session": "The request does not contain a valid proof of first factor successful sign-in.",
        "invalid-oauth-provider": "EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.",
        "invalid-oauth-client-id": "The OAuth client ID provided is either invalid or does not match the specified API key.",
        "unauthorized-domain": "This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.",
        "invalid-action-code": "The action code is invalid. This can happen if the code is malformed, expired, or has already been used.",
        "wrong-password": "The password is invalid or the user does not have a password.",
        "invalid-persistence-type": "The specified persistence type is invalid. It can only be local, session or none.",
        "invalid-phone-number": "The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].",
        "invalid-provider-id": "The specified provider ID is invalid.",
        "invalid-recipient-email": "The email corresponding to this action failed to send as the provided recipient email address is invalid.",
        "invalid-sender": "The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.",
        "invalid-verification-id": "The verification ID used to create the phone auth credential is invalid.",
        "invalid-tenant-id": "The Auth instance's tenant ID is invalid.",
        "multi-factor-info-not-found": "The user does not have a second factor matching the identifier provided.",
        "multi-factor-auth-required": "Proof of ownership of a second factor is required to complete sign-in.",
        "missing-android-pkg-name": "An Android Package Name must be provided if the Android App is required to be installed.",
        "auth-domain-config-required": "Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.",
        "missing-app-credential": "The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.",
        "missing-verification-code": "The phone auth credential was created with an empty SMS verification code.",
        "missing-continue-uri": "A continue URL must be provided in the request.",
        "missing-iframe-start": "An internal error has occurred.",
        "missing-ios-bundle-id": "An iOS Bundle ID must be provided if an App Store ID is provided.",
        "missing-multi-factor-info": "No second factor identifier is provided.",
        "missing-multi-factor-session": "The request is missing proof of first factor successful sign-in.",
        "missing-or-invalid-nonce": "The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.",
        "missing-phone-number": "To send verification codes, provide a phone number for the recipient.",
        "missing-verification-id": "The phone auth credential was created with an empty verification ID.",
        "app-deleted": "This instance of FirebaseApp has been deleted.",
        "account-exists-with-different-credential": "An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.",
        "network-request-failed": "A network error (such as timeout, interrupted connection or unreachable host) has occurred.",
        "no-auth-event": "An internal error has occurred.",
        "no-such-provider": "User was not linked to an account with the given provider.",
        "null-user": "A null user object was provided as the argument for an operation which requires a non-null user object.",
        "operation-not-allowed": "The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.",
        "operation-not-supported-in-this-environment": 'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',
        "popup-blocked": "Unable to establish a connection with the popup. It may have been blocked by the browser.",
        "popup-closed-by-user": "The popup has been closed by the user before finalizing the operation.",
        "provider-already-linked": "User can only be linked to one identity for the given provider.",
        "quota-exceeded": "The project's quota for this operation has been exceeded.",
        "redirect-cancelled-by-user": "The redirect operation has been cancelled by the user before finalizing.",
        "redirect-operation-pending": "A redirect sign-in operation is already pending.",
        "rejected-credential": "The request contains malformed or mismatching credentials.",
        "second-factor-already-in-use": "The second factor is already enrolled on this account.",
        "maximum-second-factor-count-exceeded": "The maximum allowed number of second factors on a user has been exceeded.",
        "tenant-id-mismatch": "The provided tenant ID does not match the Auth instance's tenant ID",
        timeout: "The operation has timed out.",
        "user-token-expired": "The user's credential is no longer valid. The user must sign in again.",
        "too-many-requests": "We have blocked all requests from this device due to unusual activity. Try again later.",
        "unauthorized-continue-uri": "The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.",
        "unsupported-first-factor": "Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.",
        "unsupported-persistence-type": "The current environment does not support the specified persistence type.",
        "unsupported-tenant-operation": "This operation is not supported in a multi-tenant context.",
        "unverified-email": "The operation requires a verified email.",
        "user-cancelled": "The user did not grant your application the permissions it requested.",
        "user-not-found": "There is no user record corresponding to this identifier. The user may have been deleted.",
        "user-disabled": "The user account has been disabled by an administrator.",
        "user-mismatch": "The supplied credentials do not correspond to the previously signed in user.",
        "user-signed-out": "",
        "weak-password": "The password must be 6 characters long or more.",
        "web-storage-unsupported": "This browser is not supported or 3rd party cookies and data may be disabled."
    };
    var Ba = {
        ld: {
            Ua: "https://staging-identitytoolkit.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",
            $a: "https://staging-securetoken.sandbox.googleapis.com/v1/token",
            Xa: "https://staging-identitytoolkit.sandbox.googleapis.com/v2/",
            id: "b"
        },
        sd: {
            Ua: "https://www.googleapis.com/identitytoolkit/v3/relyingparty/",
            $a: "https://securetoken.googleapis.com/v1/token",
            Xa: "https://identitytoolkit.googleapis.com/v2/",
            id: "p"
        },
        ud: {
            Ua: "https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",
            $a: "https://staging-securetoken.sandbox.googleapis.com/v1/token",
            Xa: "https://staging-identitytoolkit.sandbox.googleapis.com/v2/",
            id: "s"
        },
        vd: {
            Ua: "https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",
            $a: "https://test-securetoken.sandbox.googleapis.com/v1/token",
            Xa: "https://test-identitytoolkit.sandbox.googleapis.com/v2/",
            id: "t"
        }
    };
    function Ca(a) {
        for(var b in Ba)if (Ba[b].id === a) return a = Ba[b], {
            firebaseEndpoint: a.Ua,
            secureTokenEndpoint: a.$a,
            identityPlatformEndpoint: a.Xa
        };
        return null;
    }
    var Da;
    Da = Ca("__EID__") ? "__EID__" : void 0;
    function Ea(a) {
        if (!a) return false;
        try {
            return !!a.$goog_Thenable;
        } catch (b) {
            return false;
        }
    }
    function u(a) {
        if (Error.captureStackTrace) Error.captureStackTrace(this, u);
        else {
            var b = Error().stack;
            b && (this.stack = b);
        }
        a && (this.message = String(a));
    }
    r(u, Error);
    u.prototype.name = "CustomError";
    function Fa(a, b) {
        a = a.split("%s");
        for(var c = "", d = a.length - 1, e = 0; e < d; e++)c += a[e] + (e < b.length ? b[e] : "%s");
        u.call(this, c + a[d]);
    }
    r(Fa, u);
    Fa.prototype.name = "AssertionError";
    function Ga(a, b) {
        throw new Fa("Failure" + (a ? ": " + a : ""), Array.prototype.slice.call(arguments, 1));
    }
    function Ha(a, b) {
        this.c = a;
        this.f = b;
        this.b = 0;
        this.a = null;
    }
    Ha.prototype.get = function() {
        if (0 < this.b) {
            this.b--;
            var a = this.a;
            this.a = a.next;
            a.next = null;
        } else a = this.c();
        return a;
    };
    function Ia(a, b) {
        a.f(b);
        100 > a.b && (a.b++, b.next = a.a, a.a = b);
    }
    function Ja() {
        this.b = this.a = null;
    }
    var La = new Ha(function() {
        return new Ka;
    }, function(a) {
        a.reset();
    });
    Ja.prototype.add = function(a, b) {
        var c = La.get();
        c.set(a, b);
        this.b ? this.b.next = c : this.a = c;
        this.b = c;
    };
    function Ma() {
        var a = Na, b = null;
        a.a && (b = a.a, a.a = a.a.next, a.a || (a.b = null), b.next = null);
        return b;
    }
    function Ka() {
        this.next = this.b = this.a = null;
    }
    Ka.prototype.set = function(a, b) {
        this.a = a;
        this.b = b;
        this.next = null;
    };
    Ka.prototype.reset = function() {
        this.next = this.b = this.a = null;
    };
    var Oa = Array.prototype.indexOf ? function(a, b) {
        return Array.prototype.indexOf.call(a, b, void 0);
    } : function(a, b) {
        if ("string" === typeof a) return "string" !== typeof b || 1 != b.length ? -1 : a.indexOf(b, 0);
        for(var c = 0; c < a.length; c++)if (c in a && a[c] === b) return c;
        return -1;
    }, w = Array.prototype.forEach ? function(a, b, c) {
        Array.prototype.forEach.call(a, b, c);
    } : function(a, b, c) {
        for(var d = a.length, e = "string" === typeof a ? a.split("") : a, f = 0; f < d; f++)f in e && b.call(c, e[f], f, a);
    };
    function Pa(a, b) {
        for(var c = "string" === typeof a ? a.split("") : a, d = a.length - 1; 0 <= d; --d)d in c && b.call(void 0, c[d], d, a);
    }
    var Qa = Array.prototype.filter ? function(a, b) {
        return Array.prototype.filter.call(a, b, void 0);
    } : function(a, b) {
        for(var c = a.length, d = [], e = 0, f = "string" === typeof a ? a.split("") : a, g = 0; g < c; g++)if (g in f) {
            var h = f[g];
            b.call(void 0, h, g, a) && (d[e++] = h);
        }
        return d;
    }, Ra = Array.prototype.map ? function(a, b) {
        return Array.prototype.map.call(a, b, void 0);
    } : function(a, b) {
        for(var c = a.length, d = Array(c), e = "string" === typeof a ? a.split("") : a, f = 0; f < c; f++)f in e && (d[f] = b.call(void 0, e[f], f, a));
        return d;
    }, Sa = Array.prototype.some ? function(a, b) {
        return Array.prototype.some.call(a, b, void 0);
    } : function(a, b) {
        for(var c = a.length, d = "string" === typeof a ? a.split("") : a, e = 0; e < c; e++)if (e in d && b.call(void 0, d[e], e, a)) return true;
        return false;
    };
    function Ta(a) {
        a: {
            var b = Ua;
            for(var c = a.length, d = "string" === typeof a ? a.split("") : a, e = 0; e < c; e++)if (e in d && b.call(void 0, d[e], e, a)) {
                b = e;
                break a;
            }
            b = -1;
        }
        return 0 > b ? null : "string" === typeof a ? a.charAt(b) : a[b];
    }
    function Va(a, b) {
        return 0 <= Oa(a, b);
    }
    function Wa(a, b) {
        b = Oa(a, b);
        var c;
        (c = 0 <= b) && Array.prototype.splice.call(a, b, 1);
        return c;
    }
    function Xa(a, b) {
        var c = 0;
        Pa(a, function(d, e) {
            b.call(void 0, d, e, a) && 1 == Array.prototype.splice.call(a, e, 1).length && c++;
        });
    }
    function Ya(a) {
        return Array.prototype.concat.apply([], arguments);
    }
    function Za(a) {
        var b = a.length;
        if (0 < b) {
            for(var c = Array(b), d = 0; d < b; d++)c[d] = a[d];
            return c;
        }
        return [];
    }
    var $a = String.prototype.trim ? function(a) {
        return a.trim();
    } : function(a) {
        return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1];
    }, ab = /&/g, bb = /</g, cb = />/g, db = /"/g, eb = /'/g, fb = /\x00/g, gb = /[\x00&<>"']/;
    function x(a, b) {
        return -1 != a.indexOf(b);
    }
    function hb(a, b) {
        return a < b ? -1 : a > b ? 1 : 0;
    }
    var ib;
    a: {
        var jb = l.navigator;
        if (jb) {
            var kb = jb.userAgent;
            if (kb) {
                ib = kb;
                break a;
            }
        }
        ib = "";
    }
    function y(a) {
        return x(ib, a);
    }
    function lb(a, b) {
        for(var c in a)b.call(void 0, a[c], c, a);
    }
    function mb(a) {
        for(var b in a)return false;
        return true;
    }
    function nb(a) {
        var b = {
        }, c;
        for(c in a)b[c] = a[c];
        return b;
    }
    var ob = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
    function z(a, b) {
        for(var c, d, e = 1; e < arguments.length; e++){
            d = arguments[e];
            for(c in d)a[c] = d[c];
            for(var f = 0; f < ob.length; f++)c = ob[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
        }
    }
    function pb(a, b) {
        a: {
            try {
                var c = a && a.ownerDocument, d = c && (c.defaultView || c.parentWindow);
                d = d || l;
                if (d.Element && d.Location) {
                    var e = d;
                    break a;
                }
            } catch (g) {
            }
            e = null;
        }
        if (e && "undefined" != typeof e[b] && (!a || !(a instanceof e[b]) && (a instanceof e.Location || a instanceof e.Element))) {
            if (n(a)) try {
                var f = a.constructor.displayName || a.constructor.name || Object.prototype.toString.call(a);
            } catch (g) {
                f = "<object could not be stringified>";
            }
            else f = (void 0) === a ? "undefined" : null === a ? "null" : typeof a;
            Ga("Argument is not a %s (or a non-Element, non-Location mock); got: %s", b, f);
        }
    }
    function qb(a, b) {
        this.a = a === rb && b || "";
        this.b = sb;
    }
    qb.prototype.ta = true;
    qb.prototype.sa = function() {
        return this.a;
    };
    qb.prototype.toString = function() {
        return "Const{" + this.a + "}";
    };
    function tb(a) {
        if (a instanceof qb && a.constructor === qb && a.b === sb) return a.a;
        Ga("expected object of type Const, got '" + a + "'");
        return "type_error:Const";
    }
    var sb = {
    }, rb = {
    };
    var ub;
    function vb() {
        if ((void 0) === ub) {
            var a = null, b = l.trustedTypes;
            if (b && b.createPolicy) {
                try {
                    a = b.createPolicy("goog#html", {
                        createHTML: wa,
                        createScript: wa,
                        createScriptURL: wa
                    });
                } catch (c) {
                    l.console && l.console.error(c.message);
                }
                ub = a;
            } else ub = a;
        }
        return ub;
    }
    function wb(a, b) {
        this.a = b === xb ? a : "";
    }
    wb.prototype.ta = true;
    wb.prototype.sa = function() {
        return this.a.toString();
    };
    wb.prototype.toString = function() {
        return "TrustedResourceUrl{" + this.a + "}";
    };
    function yb(a) {
        if (a instanceof wb && a.constructor === wb) return a.a;
        Ga("expected object of type TrustedResourceUrl, got '" + a + "' of type " + ma(a));
        return "type_error:TrustedResourceUrl";
    }
    function zb(a, b) {
        var c = tb(a);
        if (!Ab.test(c)) throw Error("Invalid TrustedResourceUrl format: " + c);
        a = c.replace(Bb, function(d, e) {
            if (!Object.prototype.hasOwnProperty.call(b, e)) throw Error('Found marker, "' + e + '", in format string, "' + c + '", but no valid label mapping found in args: ' + JSON.stringify(b));
            d = b[e];
            return d instanceof qb ? tb(d) : encodeURIComponent(String(d));
        });
        return Cb(a);
    }
    var Bb = /%{(\w+)}/g, Ab = /^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i, xb = {
    };
    function Cb(a) {
        var b = vb();
        a = b ? b.createScriptURL(a) : a;
        return new wb(a, xb);
    }
    function C(a, b) {
        this.a = b === Db ? a : "";
    }
    C.prototype.ta = true;
    C.prototype.sa = function() {
        return this.a.toString();
    };
    C.prototype.toString = function() {
        return "SafeUrl{" + this.a + "}";
    };
    function Eb(a) {
        if (a instanceof C && a.constructor === C) return a.a;
        Ga("expected object of type SafeUrl, got '" + a + "' of type " + ma(a));
        return "type_error:SafeUrl";
    }
    var Fb = /^(?:audio\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)|font\/\w+|image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|text\/csv|video\/(?:mpeg|mp4|ogg|webm|quicktime|x-matroska))(?:;\w+=(?:\w+|"[\w;,= ]+"))*$/i, Gb = /^data:(.*);base64,[a-z0-9+\/]+=*$/i, Hb = /^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;
    function Ib(a) {
        if (a instanceof C) return a;
        a = "object" == typeof a && a.ta ? a.sa() : String(a);
        if (Hb.test(a)) a = new C(a, Db);
        else {
            a = String(a);
            a = a.replace(/(%0A|%0D)/g, "");
            var b = a.match(Gb);
            a = b && Fb.test(b[1]) ? new C(a, Db) : null;
        }
        return a;
    }
    function Jb(a) {
        if (a instanceof C) return a;
        a = "object" == typeof a && a.ta ? a.sa() : String(a);
        Hb.test(a) || (a = "about:invalid#zClosurez");
        return new C(a, Db);
    }
    var Db = {
    }, Kb = new C("about:invalid#zClosurez", Db);
    function Lb(a, b, c) {
        this.a = c === Mb ? a : "";
    }
    Lb.prototype.ta = true;
    Lb.prototype.sa = function() {
        return this.a.toString();
    };
    Lb.prototype.toString = function() {
        return "SafeHtml{" + this.a + "}";
    };
    function Nb(a) {
        if (a instanceof Lb && a.constructor === Lb) return a.a;
        Ga("expected object of type SafeHtml, got '" + a + "' of type " + ma(a));
        return "type_error:SafeHtml";
    }
    var Mb = {
    };
    function Ob(a, b) {
        pb(a, "HTMLScriptElement");
        a.src = yb(b);
        (b = a.ownerDocument && a.ownerDocument.defaultView) && b != l ? b = ka(b.document) : (null === ja && (ja = ka(l.document)), b = ja);
        b && a.setAttribute("nonce", b);
    }
    function Pb(a, b, c, d) {
        a = a instanceof C ? a : Jb(a);
        b = b || l;
        c = c instanceof qb ? tb(c) : c || "";
        return b.open(Eb(a), c, d, void 0);
    }
    function Qb(a, b) {
        for(var c = a.split("%s"), d = "", e = Array.prototype.slice.call(arguments, 1); e.length && 1 < c.length;)d += c.shift() + e.shift();
        return d + c.join("%s");
    }
    function Rb(a) {
        gb.test(a) && (-1 != a.indexOf("&") && (a = a.replace(ab, "&amp;")), -1 != a.indexOf("<") && (a = a.replace(bb, "&lt;")), -1 != a.indexOf(">") && (a = a.replace(cb, "&gt;")), -1 != a.indexOf('"') && (a = a.replace(db, "&quot;")), -1 != a.indexOf("'") && (a = a.replace(eb, "&#39;")), -1 != a.indexOf("\x00") && (a = a.replace(fb, "&#0;")));
        return a;
    }
    function Sb(a) {
        Sb[" "](a);
        return a;
    }
    Sb[" "] = la;
    function Tb(a, b) {
        var c = Ub;
        return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a);
    }
    var Vb = y("Opera"), Wb = y("Trident") || y("MSIE"), Xb = y("Edge"), Yb = Xb || Wb, Zb = y("Gecko") && !(x(ib.toLowerCase(), "webkit") && !y("Edge")) && !(y("Trident") || y("MSIE")) && !y("Edge"), $b = x(ib.toLowerCase(), "webkit") && !y("Edge");
    function ac() {
        var a = l.document;
        return a ? a.documentMode : void 0;
    }
    var bc;
    a: {
        var cc = "", dc = function() {
            var a = ib;
            if (Zb) return /rv:([^\);]+)(\)|;)/.exec(a);
            if (Xb) return /Edge\/([\d\.]+)/.exec(a);
            if (Wb) return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);
            if ($b) return /WebKit\/(\S+)/.exec(a);
            if (Vb) return /(?:Version)[ \/]?(\S+)/.exec(a);
        }();
        dc && (cc = dc ? dc[1] : "");
        if (Wb) {
            var ec = ac();
            if (null != ec && ec > parseFloat(cc)) {
                bc = String(ec);
                break a;
            }
        }
        bc = cc;
    }
    var Ub = {
    };
    function fc(a) {
        return Tb(a, function() {
            for(var b = 0, c = $a(String(bc)).split("."), d = $a(String(a)).split("."), e = Math.max(c.length, d.length), f = 0; 0 == b && f < e; f++){
                var g = c[f] || "", h = d[f] || "";
                do {
                    g = /(\d*)(\D*)(.*)/.exec(g) || [
                        "",
                        "",
                        "",
                        ""
                    ];
                    h = /(\d*)(\D*)(.*)/.exec(h) || [
                        "",
                        "",
                        "",
                        ""
                    ];
                    if (0 == g[0].length && 0 == h[0].length) break;
                    b = hb(0 == g[1].length ? 0 : parseInt(g[1], 10), 0 == h[1].length ? 0 : parseInt(h[1], 10)) || hb(0 == g[2].length, 0 == h[2].length) || hb(g[2], h[2]);
                    g = g[3];
                    h = h[3];
                }while (0 == b)
            }
            return 0 <= b;
        });
    }
    var gc;
    if (l.document && Wb) {
        var hc = ac();
        gc = hc ? hc : parseInt(bc, 10) || void 0;
    } else gc = void 0;
    var ic = gc;
    try {
        new self.OffscreenCanvas(0, 0).getContext("2d");
    } catch (a) {
    }
    var jc = !Wb || 9 <= Number(ic);
    function kc(a) {
        var b = document;
        return "string" === typeof a ? b.getElementById(a) : a;
    }
    function lc(a, b) {
        lb(b, function(c, d) {
            c && "object" == typeof c && c.ta && (c = c.sa());
            "style" == d ? a.style.cssText = c : "class" == d ? a.className = c : "for" == d ? a.htmlFor = c : mc.hasOwnProperty(d) ? a.setAttribute(mc[d], c) : 0 == d.lastIndexOf("aria-", 0) || 0 == d.lastIndexOf("data-", 0) ? a.setAttribute(d, c) : a[d] = c;
        });
    }
    var mc = {
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        colspan: "colSpan",
        frameborder: "frameBorder",
        height: "height",
        maxlength: "maxLength",
        nonce: "nonce",
        role: "role",
        rowspan: "rowSpan",
        type: "type",
        usemap: "useMap",
        valign: "vAlign",
        width: "width"
    };
    function nc(a, b, c) {
        var d = arguments, e = document, f = String(d[0]), g = d[1];
        if (!jc && g && (g.name || g.type)) {
            f = [
                "<",
                f
            ];
            g.name && f.push(' name="', Rb(g.name), '"');
            if (g.type) {
                f.push(' type="', Rb(g.type), '"');
                var h = {
                };
                z(h, g);
                delete h.type;
                g = h;
            }
            f.push(">");
            f = f.join("");
        }
        f = oc(e, f);
        g && ("string" === typeof g ? f.className = g : Array.isArray(g) ? f.className = g.join(" ") : lc(f, g));
        2 < d.length && pc(e, f, d);
        return f;
    }
    function pc(a, b, c) {
        function d(h) {
            h && b.appendChild("string" === typeof h ? a.createTextNode(h) : h);
        }
        for(var e = 2; e < c.length; e++){
            var f = c[e];
            if (!na(f) || n(f) && 0 < f.nodeType) d(f);
            else {
                a: {
                    if (f && "number" == typeof f.length) {
                        if (n(f)) {
                            var g = "function" == typeof f.item || "string" == typeof f.item;
                            break a;
                        }
                        if (oa(f)) {
                            g = "function" == typeof f.item;
                            break a;
                        }
                    }
                    g = false;
                }
                w(g ? Za(f) : f, d);
            }
        }
    }
    function oc(a, b) {
        b = String(b);
        "application/xhtml+xml" === a.contentType && (b = b.toLowerCase());
        return a.createElement(b);
    }
    function qc(a) {
        l.setTimeout(function() {
            throw a;
        }, 0);
    }
    var rc;
    function sc() {
        var a = l.MessageChannel;
        "undefined" === typeof a && "undefined" !== typeof window && window.postMessage && window.addEventListener && !y("Presto") && (a = function() {
            var e = oc(document, "IFRAME");
            e.style.display = "none";
            document.documentElement.appendChild(e);
            var f = e.contentWindow;
            e = f.document;
            e.open();
            e.close();
            var g = "callImmediate" + Math.random(), h = "file:" == f.location.protocol ? "*" : f.location.protocol + "//" + f.location.host;
            e = q(function(m) {
                if (("*" == h || m.origin == h) && m.data == g) this.port1.onmessage();
            }, this);
            f.addEventListener("message", e, false);
            this.port1 = {
            };
            this.port2 = {
                postMessage: function() {
                    f.postMessage(g, h);
                }
            };
        });
        if ("undefined" !== typeof a && !y("Trident") && !y("MSIE")) {
            var b = new a, c = {
            }, d = c;
            b.port1.onmessage = function() {
                if ((void 0) !== c.next) {
                    c = c.next;
                    var e = c.Hb;
                    c.Hb = null;
                    e();
                }
            };
            return function(e) {
                d.next = {
                    Hb: e
                };
                d = d.next;
                b.port2.postMessage(0);
            };
        }
        return function(e) {
            l.setTimeout(e, 0);
        };
    }
    function tc(a, b) {
        uc || vc();
        wc || (uc(), wc = true);
        Na.add(a, b);
    }
    var uc;
    function vc() {
        if (l.Promise && l.Promise.resolve) {
            var a = l.Promise.resolve(void 0);
            uc = function() {
                a.then(xc);
            };
        } else uc = function() {
            var b = xc;
            !oa(l.setImmediate) || l.Window && l.Window.prototype && !y("Edge") && l.Window.prototype.setImmediate == l.setImmediate ? (rc || (rc = sc()), rc(b)) : l.setImmediate(b);
        };
    }
    var wc = false, Na = new Ja;
    function xc() {
        for(var a; a = Ma();){
            try {
                a.a.call(a.b);
            } catch (b) {
                qc(b);
            }
            Ia(La, a);
        }
        wc = false;
    }
    function D(a, b) {
        this.a = yc;
        this.i = void 0;
        this.f = this.b = this.c = null;
        this.g = this.h = false;
        if (a != la) try {
            var c = this;
            a.call(b, function(d) {
                zc(c, Ac, d);
            }, function(d) {
                if (!(d instanceof Bc)) try {
                    if (d instanceof Error) throw d;
                    throw Error("Promise rejected.");
                } catch (e) {
                }
                zc(c, Cc, d);
            });
        } catch (d) {
            zc(this, Cc, d);
        }
    }
    var yc = 0, Ac = 2, Cc = 3;
    function Dc() {
        this.next = this.f = this.b = this.g = this.a = null;
        this.c = false;
    }
    Dc.prototype.reset = function() {
        this.f = this.b = this.g = this.a = null;
        this.c = false;
    };
    var Ec = new Ha(function() {
        return new Dc;
    }, function(a) {
        a.reset();
    });
    function Fc(a, b, c) {
        var d = Ec.get();
        d.g = a;
        d.b = b;
        d.f = c;
        return d;
    }
    function E(a) {
        if (a instanceof D) return a;
        var b = new D(la);
        zc(b, Ac, a);
        return b;
    }
    function F(a) {
        return new D(function(b, c) {
            c(a);
        });
    }
    function Gc(a, b, c) {
        Hc(a, b, c, null) || tc(ua(b, a));
    }
    function Ic(a) {
        return new D(function(b, c) {
            var d = a.length, e = [];
            if (d) for(var f = function(p, v) {
                d--;
                e[p] = v;
                0 == d && b(e);
            }, g = function(p) {
                c(p);
            }, h = 0, m; h < a.length; h++)m = a[h], Gc(m, ua(f, h), g);
            else b(e);
        });
    }
    function Jc(a) {
        return new D(function(b) {
            var c = a.length, d = [];
            if (c) for(var e = function(h, m, p) {
                c--;
                d[h] = m ? {
                    Qb: true,
                    value: p
                } : {
                    Qb: false,
                    reason: p
                };
                0 == c && b(d);
            }, f = 0, g; f < a.length; f++)g = a[f], Gc(g, ua(e, f, true), ua(e, f, false));
            else b(d);
        });
    }
    D.prototype.then = function(a, b, c) {
        return Kc(this, oa(a) ? a : null, oa(b) ? b : null, c);
    };
    D.prototype.$goog_Thenable = true;
    k = D.prototype;
    k.oa = function(a, b) {
        a = Fc(a, a, b);
        a.c = true;
        Lc(this, a);
        return this;
    };
    k.o = function(a, b) {
        return Kc(this, null, a, b);
    };
    k.cancel = function(a) {
        if (this.a == yc) {
            var b = new Bc(a);
            tc(function() {
                Mc(this, b);
            }, this);
        }
    };
    function Mc(a, b) {
        if (a.a == yc) {
            if (a.c) {
                var c = a.c;
                if (c.b) {
                    for(var d = 0, e = null, f = null, g = c.b; g && (g.c || (d++, g.a == a && (e = g), !(e && 1 < d))); g = g.next)e || (f = g);
                    e && (c.a == yc && 1 == d ? Mc(c, b) : (f ? (d = f, d.next == c.f && (c.f = d), d.next = d.next.next) : Nc(c), Oc(c, e, Cc, b)));
                }
                a.c = null;
            } else zc(a, Cc, b);
        }
    }
    function Lc(a, b) {
        a.b || a.a != Ac && a.a != Cc || Pc(a);
        a.f ? a.f.next = b : a.b = b;
        a.f = b;
    }
    function Kc(a, b, c, d) {
        var e = Fc(null, null, null);
        e.a = new D(function(f, g) {
            e.g = b ? function(h) {
                try {
                    var m = b.call(d, h);
                    f(m);
                } catch (p) {
                    g(p);
                }
            } : f;
            e.b = c ? function(h) {
                try {
                    var m = c.call(d, h);
                    (void 0) === m && h instanceof Bc ? g(h) : f(m);
                } catch (p) {
                    g(p);
                }
            } : g;
        });
        e.a.c = a;
        Lc(a, e);
        return e.a;
    }
    k.$c = function(a) {
        this.a = yc;
        zc(this, Ac, a);
    };
    k.ad = function(a) {
        this.a = yc;
        zc(this, Cc, a);
    };
    function zc(a, b, c) {
        a.a == yc && (a === c && (b = Cc, c = new TypeError("Promise cannot resolve to itself")), a.a = 1, Hc(c, a.$c, a.ad, a) || (a.i = c, a.a = b, a.c = null, Pc(a), b != Cc || c instanceof Bc || Qc(a, c)));
    }
    function Hc(a, b, c, d) {
        if (a instanceof D) return Lc(a, Fc(b || la, c || null, d)), true;
        if (Ea(a)) return a.then(b, c, d), true;
        if (n(a)) try {
            var e = a.then;
            if (oa(e)) return Rc(a, e, b, c, d), true;
        } catch (f) {
            return c.call(d, f), true;
        }
        return false;
    }
    function Rc(a, b, c, d, e) {
        function f(m) {
            h || (h = true, d.call(e, m));
        }
        function g(m) {
            h || (h = true, c.call(e, m));
        }
        var h = false;
        try {
            b.call(a, g, f);
        } catch (m) {
            f(m);
        }
    }
    function Pc(a) {
        a.h || (a.h = true, tc(a.gc, a));
    }
    function Nc(a) {
        var b = null;
        a.b && (b = a.b, a.b = b.next, b.next = null);
        a.b || (a.f = null);
        return b;
    }
    k.gc = function() {
        for(var a; a = Nc(this);)Oc(this, a, this.a, this.i);
        this.h = false;
    };
    function Oc(a, b, c, d) {
        if (c == Cc && b.b && !b.c) for(; a && a.g; a = a.c)a.g = false;
        if (b.a) b.a.c = null, Sc(b, c, d);
        else try {
            b.c ? b.g.call(b.f) : Sc(b, c, d);
        } catch (e) {
            Tc.call(null, e);
        }
        Ia(Ec, b);
    }
    function Sc(a, b, c) {
        b == Ac ? a.g.call(a.f, c) : a.b && a.b.call(a.f, c);
    }
    function Qc(a, b) {
        a.g = true;
        tc(function() {
            a.g && Tc.call(null, b);
        });
    }
    var Tc = qc;
    function Bc(a) {
        u.call(this, a);
    }
    r(Bc, u);
    Bc.prototype.name = "cancel";
    function Uc() {
        0 != Vc && (Wc[pa(this)] = this);
        this.ya = this.ya;
        this.pa = this.pa;
    }
    var Vc = 0, Wc = {
    };
    Uc.prototype.ya = false;
    function Xc(a) {
        if (!a.ya && (a.ya = true, a.Da(), 0 != Vc)) {
            var b = pa(a);
            if (0 != Vc && a.pa && 0 < a.pa.length) throw Error(a + " did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");
            delete Wc[b];
        }
    }
    Uc.prototype.Da = function() {
        if (this.pa) for(; this.pa.length;)this.pa.shift()();
    };
    var Yc = Object.freeze || function(a) {
        return a;
    };
    var Zc = !Wb || 9 <= Number(ic), $c = Wb && !fc("9"), ad = function() {
        if (!l.addEventListener || !Object.defineProperty) return false;
        var a = false, b = Object.defineProperty({
        }, "passive", {
            get: function() {
                a = true;
            }
        });
        try {
            l.addEventListener("test", la, b), l.removeEventListener("test", la, b);
        } catch (c) {
        }
        return a;
    }();
    function G(a, b) {
        this.type = a;
        this.b = this.target = b;
        this.defaultPrevented = false;
    }
    G.prototype.preventDefault = function() {
        this.defaultPrevented = true;
    };
    function bd(a, b) {
        G.call(this, a ? a.type : "");
        this.relatedTarget = this.b = this.target = null;
        this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
        this.key = "";
        this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = false;
        this.pointerId = 0;
        this.pointerType = "";
        this.a = null;
        if (a) {
            var c = this.type = a.type, d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
            this.target = a.target || a.srcElement;
            this.b = b;
            if (b = a.relatedTarget) {
                if (Zb) {
                    a: {
                        try {
                            Sb(b.nodeName);
                            var e = true;
                            break a;
                        } catch (f) {
                        }
                        e = false;
                    }
                    e || (b = null);
                }
            } else "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);
            this.relatedTarget = b;
            d ? (this.clientX = (void 0) !== d.clientX ? d.clientX : d.pageX, this.clientY = (void 0) !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = (void 0) !== a.clientX ? a.clientX : a.pageX, this.clientY = (void 0) !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
            this.button = a.button;
            this.key = a.key || "";
            this.ctrlKey = a.ctrlKey;
            this.altKey = a.altKey;
            this.shiftKey = a.shiftKey;
            this.metaKey = a.metaKey;
            this.pointerId = a.pointerId || 0;
            this.pointerType = "string" === typeof a.pointerType ? a.pointerType : cd[a.pointerType] || "";
            this.a = a;
            a.defaultPrevented && this.preventDefault();
        }
    }
    r(bd, G);
    var cd = Yc({
        2: "touch",
        3: "pen",
        4: "mouse"
    });
    bd.prototype.preventDefault = function() {
        bd.bb.preventDefault.call(this);
        var a = this.a;
        if (a.preventDefault) a.preventDefault();
        else if (a.returnValue = false, $c) try {
            if (a.ctrlKey || 112 <= a.keyCode && 123 >= a.keyCode) a.keyCode = -1;
        } catch (b) {
        }
    };
    bd.prototype.g = function() {
        return this.a;
    };
    var dd = "closure_listenable_" + (1000000 * Math.random() | 0), ed = 0;
    function fd(a, b, c, d, e) {
        this.listener = a;
        this.proxy = null;
        this.src = b;
        this.type = c;
        this.capture = !!d;
        this.Wa = e;
        this.key = ++ed;
        this.wa = this.Qa = false;
    }
    function gd(a) {
        a.wa = true;
        a.listener = null;
        a.proxy = null;
        a.src = null;
        a.Wa = null;
    }
    function hd(a) {
        this.src = a;
        this.a = {
        };
        this.b = 0;
    }
    hd.prototype.add = function(a, b, c, d, e) {
        var f = a.toString();
        a = this.a[f];
        a || (a = this.a[f] = [], this.b++);
        var g = id(a, b, d, e);
        -1 < g ? (b = a[g], c || (b.Qa = false)) : (b = new fd(b, this.src, f, !!d, e), b.Qa = c, a.push(b));
        return b;
    };
    function jd(a, b) {
        var c = b.type;
        c in a.a && Wa(a.a[c], b) && (gd(b), 0 == a.a[c].length && (delete a.a[c], a.b--));
    }
    function id(a, b, c, d) {
        for(var e = 0; e < a.length; ++e){
            var f = a[e];
            if (!f.wa && f.listener == b && f.capture == !!c && f.Wa == d) return e;
        }
        return -1;
    }
    var kd = "closure_lm_" + (1000000 * Math.random() | 0), ld = {
    }, md = 0;
    function nd(a, b, c, d, e) {
        if (d && d.once) od(a, b, c, d, e);
        else if (Array.isArray(b)) for(var f = 0; f < b.length; f++)nd(a, b[f], c, d, e);
        else c = pd(c), a && a[dd] ? qd(a, b, c, n(d) ? !!d.capture : !!d, e) : rd(a, b, c, false, d, e);
    }
    function rd(a, b, c, d, e, f) {
        if (!b) throw Error("Invalid event type");
        var g = n(e) ? !!e.capture : !!e, h = sd(a);
        h || (a[kd] = h = new hd(a));
        c = h.add(b, c, d, g, f);
        if (!c.proxy) {
            d = td();
            c.proxy = d;
            d.src = a;
            d.listener = c;
            if (a.addEventListener) ad || (e = g), (void 0) === e && (e = false), a.addEventListener(b.toString(), d, e);
            else if (a.attachEvent) a.attachEvent(ud(b.toString()), d);
            else if (a.addListener && a.removeListener) a.addListener(d);
            else throw Error("addEventListener and attachEvent are unavailable.");
            md++;
        }
    }
    function td() {
        var a = vd, b = Zc ? function(c) {
            return a.call(b.src, b.listener, c);
        } : function(c) {
            c = a.call(b.src, b.listener, c);
            if (!c) return c;
        };
        return b;
    }
    function od(a, b, c, d, e) {
        if (Array.isArray(b)) for(var f = 0; f < b.length; f++)od(a, b[f], c, d, e);
        else c = pd(c), a && a[dd] ? wd(a, b, c, n(d) ? !!d.capture : !!d, e) : rd(a, b, c, true, d, e);
    }
    function xd(a, b, c, d, e) {
        if (Array.isArray(b)) for(var f = 0; f < b.length; f++)xd(a, b[f], c, d, e);
        else (d = n(d) ? !!d.capture : !!d, c = pd(c), a && a[dd]) ? (a = a.v, b = String(b).toString(), b in a.a && (f = a.a[b], c = id(f, c, d, e), -1 < c && (gd(f[c]), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.a[b], a.b--)))) : a && (a = sd(a)) && (b = a.a[b.toString()], a = -1, b && (a = id(b, c, d, e)), (c = -1 < a ? b[a] : null) && yd(c));
    }
    function yd(a) {
        if ("number" !== typeof a && a && !a.wa) {
            var b = a.src;
            if (b && b[dd]) jd(b.v, a);
            else {
                var c = a.type, d = a.proxy;
                b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(ud(c), d) : b.addListener && b.removeListener && b.removeListener(d);
                md--;
                (c = sd(b)) ? (jd(c, a), 0 == c.b && (c.src = null, b[kd] = null)) : gd(a);
            }
        }
    }
    function ud(a) {
        return a in ld ? ld[a] : ld[a] = "on" + a;
    }
    function zd(a, b, c, d) {
        var e = true;
        if (a = sd(a)) {
            if (b = a.a[b.toString()]) for(b = b.concat(), a = 0; a < b.length; a++){
                var f = b[a];
                f && f.capture == c && !f.wa && (f = Bd(f, d), e = e && false !== f);
            }
        }
        return e;
    }
    function Bd(a, b) {
        var c = a.listener, d = a.Wa || a.src;
        a.Qa && yd(a);
        return c.call(d, b);
    }
    function vd(a, b) {
        if (a.wa) return true;
        if (!Zc) {
            if (!b) a: {
                b = [
                    "window",
                    "event"
                ];
                for(var c = l, d = 0; d < b.length; d++)if (c = c[b[d]], null == c) {
                    b = null;
                    break a;
                }
                b = c;
            }
            d = b;
            b = new bd(d, this);
            c = true;
            if (!(0 > d.keyCode || (void 0) != d.returnValue)) {
                a: {
                    var e = false;
                    if (0 == d.keyCode) try {
                        d.keyCode = -1;
                        break a;
                    } catch (g) {
                        e = true;
                    }
                    if (e || (void 0) == d.returnValue) d.returnValue = true;
                }
                d = [];
                for(e = b.b; e; e = e.parentNode)d.push(e);
                a = a.type;
                for(e = d.length - 1; 0 <= e; e--){
                    b.b = d[e];
                    var f = zd(d[e], a, true, b);
                    c = c && f;
                }
                for(e = 0; e < d.length; e++)b.b = d[e], f = zd(d[e], a, false, b), c = c && f;
            }
            return c;
        }
        return Bd(a, new bd(b, this));
    }
    function sd(a) {
        a = a[kd];
        return a instanceof hd ? a : null;
    }
    var Cd = "__closure_events_fn_" + (1000000000 * Math.random() >>> 0);
    function pd(a) {
        if (oa(a)) return a;
        a[Cd] || (a[Cd] = function(b) {
            return a.handleEvent(b);
        });
        return a[Cd];
    }
    function H() {
        Uc.call(this);
        this.v = new hd(this);
        this.bc = this;
        this.hb = null;
    }
    r(H, Uc);
    H.prototype[dd] = true;
    H.prototype.addEventListener = function(a, b, c, d) {
        nd(this, a, b, c, d);
    };
    H.prototype.removeEventListener = function(a, b, c, d) {
        xd(this, a, b, c, d);
    };
    H.prototype.dispatchEvent = function(a) {
        var b, c = this.hb;
        if (c) for(b = []; c; c = c.hb)b.push(c);
        c = this.bc;
        var d = a.type || a;
        if ("string" === typeof a) a = new G(a, c);
        else if (a instanceof G) a.target = a.target || c;
        else {
            var e = a;
            a = new G(d, c);
            z(a, e);
        }
        e = true;
        if (b) for(var f = b.length - 1; 0 <= f; f--){
            var g = a.b = b[f];
            e = Dd(g, d, true, a) && e;
        }
        g = a.b = c;
        e = Dd(g, d, true, a) && e;
        e = Dd(g, d, false, a) && e;
        if (b) for(f = 0; f < b.length; f++)g = a.b = b[f], e = Dd(g, d, false, a) && e;
        return e;
    };
    H.prototype.Da = function() {
        H.bb.Da.call(this);
        if (this.v) {
            var a = this.v, b = 0, c;
            for(c in a.a){
                for(var d = a.a[c], e = 0; e < d.length; e++)++b, gd(d[e]);
                delete a.a[c];
                a.b--;
            }
        }
        this.hb = null;
    };
    function qd(a, b, c, d, e) {
        a.v.add(String(b), c, false, d, e);
    }
    function wd(a, b, c, d, e) {
        a.v.add(String(b), c, true, d, e);
    }
    function Dd(a, b, c, d) {
        b = a.v.a[String(b)];
        if (!b) return true;
        b = b.concat();
        for(var e = true, f = 0; f < b.length; ++f){
            var g = b[f];
            if (g && !g.wa && g.capture == c) {
                var h = g.listener, m = g.Wa || g.src;
                g.Qa && jd(a.v, g);
                e = false !== h.call(m, d) && e;
            }
        }
        return e && !d.defaultPrevented;
    }
    function Ed(a, b, c) {
        if (oa(a)) c && (a = q(a, c));
        else if (a && "function" == typeof a.handleEvent) a = q(a.handleEvent, a);
        else throw Error("Invalid listener argument");
        return 2147483647 < Number(b) ? -1 : l.setTimeout(a, b || 0);
    }
    function Fd(a) {
        var b = null;
        return new D(function(c, d) {
            b = Ed(function() {
                c(void 0);
            }, a);
            -1 == b && d(Error("Failed to schedule timer."));
        }).o(function(c) {
            l.clearTimeout(b);
            throw c;
        });
    }
    function Gd(a) {
        if (a.X && "function" == typeof a.X) return a.X();
        if ("string" === typeof a) return a.split("");
        if (na(a)) {
            for(var b = [], c = a.length, d = 0; d < c; d++)b.push(a[d]);
            return b;
        }
        b = [];
        c = 0;
        for(d in a)b[c++] = a[d];
        return b;
    }
    function Hd(a) {
        if (a.Y && "function" == typeof a.Y) return a.Y();
        if (!a.X || "function" != typeof a.X) {
            if (na(a) || "string" === typeof a) {
                var b = [];
                a = a.length;
                for(var c = 0; c < a; c++)b.push(c);
                return b;
            }
            b = [];
            c = 0;
            for(var d in a)b[c++] = d;
            return b;
        }
    }
    function Id(a, b) {
        if (a.forEach && "function" == typeof a.forEach) a.forEach(b, void 0);
        else if (na(a) || "string" === typeof a) w(a, b, void 0);
        else for(var c = Hd(a), d = Gd(a), e = d.length, f = 0; f < e; f++)b.call(void 0, d[f], c && c[f], a);
    }
    function Jd(a, b) {
        this.b = {
        };
        this.a = [];
        this.c = 0;
        var c = arguments.length;
        if (1 < c) {
            if (c % 2) throw Error("Uneven number of arguments");
            for(var d = 0; d < c; d += 2)this.set(arguments[d], arguments[d + 1]);
        } else if (a) {
            if (a instanceof Jd) for(c = a.Y(), d = 0; d < c.length; d++)this.set(c[d], a.get(c[d]));
            else for(d in a)this.set(d, a[d]);
        }
    }
    k = Jd.prototype;
    k.X = function() {
        Kd(this);
        for(var a = [], b = 0; b < this.a.length; b++)a.push(this.b[this.a[b]]);
        return a;
    };
    k.Y = function() {
        Kd(this);
        return this.a.concat();
    };
    k.clear = function() {
        this.b = {
        };
        this.c = this.a.length = 0;
    };
    function Kd(a) {
        if (a.c != a.a.length) {
            for(var b = 0, c = 0; b < a.a.length;){
                var d = a.a[b];
                Ld(a.b, d) && (a.a[c++] = d);
                b++;
            }
            a.a.length = c;
        }
        if (a.c != a.a.length) {
            var e = {
            };
            for(c = b = 0; b < a.a.length;)d = a.a[b], Ld(e, d) || (a.a[c++] = d, e[d] = 1), b++;
            a.a.length = c;
        }
    }
    k.get = function(a, b) {
        return Ld(this.b, a) ? this.b[a] : b;
    };
    k.set = function(a, b) {
        Ld(this.b, a) || (this.c++, this.a.push(a));
        this.b[a] = b;
    };
    k.forEach = function(a, b) {
        for(var c = this.Y(), d = 0; d < c.length; d++){
            var e = c[d], f = this.get(e);
            a.call(b, f, e, this);
        }
    };
    function Ld(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }
    var Md = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;
    function Nd(a, b) {
        if (a) {
            a = a.split("&");
            for(var c = 0; c < a.length; c++){
                var d = a[c].indexOf("="), e = null;
                if (0 <= d) {
                    var f = a[c].substring(0, d);
                    e = a[c].substring(d + 1);
                } else f = a[c];
                b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
            }
        }
    }
    function Od(a, b) {
        this.a = this.l = this.c = "";
        this.g = null;
        this.h = this.f = "";
        this.i = false;
        var c;
        a instanceof Od ? (this.i = (void 0) !== b ? b : a.i, Pd(this, a.c), this.l = a.l, this.a = a.a, Qd(this, a.g), this.f = a.f, Rd(this, Sd(a.b)), this.h = a.h) : a && (c = String(a).match(Md)) ? (this.i = !!b, Pd(this, c[1] || "", true), this.l = Td(c[2] || ""), this.a = Td(c[3] || "", true), Qd(this, c[4]), this.f = Td(c[5] || "", true), Rd(this, c[6] || "", true), this.h = Td(c[7] || "")) : (this.i = !!b, this.b = new Ud(null, this.i));
    }
    Od.prototype.toString = function() {
        var a = [], b = this.c;
        b && a.push(Vd(b, Wd, true), ":");
        var c = this.a;
        if (c || "file" == b) a.push("//"), (b = this.l) && a.push(Vd(b, Wd, true), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.g, null != c && a.push(":", String(c));
        if (c = this.f) this.a && "/" != c.charAt(0) && a.push("/"), a.push(Vd(c, "/" == c.charAt(0) ? Xd : Yd, true));
        (c = this.b.toString()) && a.push("?", c);
        (c = this.h) && a.push("#", Vd(c, Zd));
        return a.join("");
    };
    Od.prototype.resolve = function(a) {
        var b = new Od(this), c = !!a.c;
        c ? Pd(b, a.c) : c = !!a.l;
        c ? b.l = a.l : c = !!a.a;
        c ? b.a = a.a : c = null != a.g;
        var d = a.f;
        if (c) Qd(b, a.g);
        else if (c = !!a.f) {
            if ("/" != d.charAt(0)) {
                if (this.a && !this.f) d = "/" + d;
                else {
                    var e = b.f.lastIndexOf("/");
                    -1 != e && (d = b.f.substr(0, e + 1) + d);
                }
            }
            e = d;
            if (".." == e || "." == e) d = "";
            else if (x(e, "./") || x(e, "/.")) {
                d = 0 == e.lastIndexOf("/", 0);
                e = e.split("/");
                for(var f = [], g = 0; g < e.length;){
                    var h = e[g++];
                    "." == h ? d && g == e.length && f.push("") : ".." == h ? ((1 < f.length || 1 == f.length && "" != f[0]) && f.pop(), d && g == e.length && f.push("")) : (f.push(h), d = true);
                }
                d = f.join("/");
            } else d = e;
        }
        c ? b.f = d : c = "" !== a.b.toString();
        c ? Rd(b, Sd(a.b)) : c = !!a.h;
        c && (b.h = a.h);
        return b;
    };
    function Pd(a, b, c) {
        a.c = c ? Td(b, true) : b;
        a.c && (a.c = a.c.replace(/:$/, ""));
    }
    function Qd(a, b) {
        if (b) {
            b = Number(b);
            if (isNaN(b) || 0 > b) throw Error("Bad port number " + b);
            a.g = b;
        } else a.g = null;
    }
    function Rd(a, b, c) {
        b instanceof Ud ? (a.b = b, $d(a.b, a.i)) : (c || (b = Vd(b, ae)), a.b = new Ud(b, a.i));
    }
    function I(a, b, c) {
        a.b.set(b, c);
    }
    function be(a, b) {
        return a.b.get(b);
    }
    function J(a) {
        return a instanceof Od ? new Od(a) : new Od(a, void 0);
    }
    function ce(a, b, c, d) {
        var e = new Od(null, void 0);
        a && Pd(e, a);
        b && (e.a = b);
        c && Qd(e, c);
        d && (e.f = d);
        return e;
    }
    function Td(a, b) {
        return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
    }
    function Vd(a, b, c) {
        return "string" === typeof a ? (a = encodeURI(a).replace(b, de), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
    }
    function de(a) {
        a = a.charCodeAt(0);
        return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
    }
    var Wd = /[#\/\?@]/g, Yd = /[#\?:]/g, Xd = /[#\?]/g, ae = /[#\?@]/g, Zd = /#/g;
    function Ud(a, b) {
        this.b = this.a = null;
        this.c = a || null;
        this.f = !!b;
    }
    function ee(a) {
        a.a || (a.a = new Jd, a.b = 0, a.c && Nd(a.c, function(b, c) {
            a.add(decodeURIComponent(b.replace(/\+/g, " ")), c);
        }));
    }
    function fe(a) {
        var b = Hd(a);
        if ("undefined" == typeof b) throw Error("Keys are undefined");
        var c = new Ud(null, void 0);
        a = Gd(a);
        for(var d = 0; d < b.length; d++){
            var e = b[d], f = a[d];
            Array.isArray(f) ? ge(c, e, f) : c.add(e, f);
        }
        return c;
    }
    k = Ud.prototype;
    k.add = function(a, b) {
        ee(this);
        this.c = null;
        a = he(this, a);
        var c = this.a.get(a);
        c || this.a.set(a, c = []);
        c.push(b);
        this.b += 1;
        return this;
    };
    function ie(a, b) {
        ee(a);
        b = he(a, b);
        Ld(a.a.b, b) && (a.c = null, a.b -= a.a.get(b).length, a = a.a, Ld(a.b, b) && (delete a.b[b], a.c--, a.a.length > 2 * a.c && Kd(a)));
    }
    k.clear = function() {
        this.a = this.c = null;
        this.b = 0;
    };
    function je(a, b) {
        ee(a);
        b = he(a, b);
        return Ld(a.a.b, b);
    }
    k.forEach = function(a, b) {
        ee(this);
        this.a.forEach(function(c, d) {
            w(c, function(e) {
                a.call(b, e, d, this);
            }, this);
        }, this);
    };
    k.Y = function() {
        ee(this);
        for(var a = this.a.X(), b = this.a.Y(), c = [], d = 0; d < b.length; d++)for(var e = a[d], f = 0; f < e.length; f++)c.push(b[d]);
        return c;
    };
    k.X = function(a) {
        ee(this);
        var b = [];
        if ("string" === typeof a) je(this, a) && (b = Ya(b, this.a.get(he(this, a))));
        else {
            a = this.a.X();
            for(var c = 0; c < a.length; c++)b = Ya(b, a[c]);
        }
        return b;
    };
    k.set = function(a, b) {
        ee(this);
        this.c = null;
        a = he(this, a);
        je(this, a) && (this.b -= this.a.get(a).length);
        this.a.set(a, [
            b
        ]);
        this.b += 1;
        return this;
    };
    k.get = function(a, b) {
        if (!a) return b;
        a = this.X(a);
        return 0 < a.length ? String(a[0]) : b;
    };
    function ge(a, b, c) {
        ie(a, b);
        0 < c.length && (a.c = null, a.a.set(he(a, b), Za(c)), a.b += c.length);
    }
    k.toString = function() {
        if (this.c) return this.c;
        if (!this.a) return "";
        for(var a = [], b = this.a.Y(), c = 0; c < b.length; c++){
            var d = b[c], e = encodeURIComponent(String(d));
            d = this.X(d);
            for(var f = 0; f < d.length; f++){
                var g = e;
                "" !== d[f] && (g += "=" + encodeURIComponent(String(d[f])));
                a.push(g);
            }
        }
        return this.c = a.join("&");
    };
    function Sd(a) {
        var b = new Ud;
        b.c = a.c;
        a.a && (b.a = new Jd(a.a), b.b = a.b);
        return b;
    }
    function he(a, b) {
        b = String(b);
        a.f && (b = b.toLowerCase());
        return b;
    }
    function $d(a, b) {
        b && !a.f && (ee(a), a.c = null, a.a.forEach(function(c, d) {
            var e = d.toLowerCase();
            d != e && (ie(this, d), ge(this, e, c));
        }, a));
        a.f = b;
    }
    function ke(a) {
        var b = [];
        le(new me, a, b);
        return b.join("");
    }
    function me() {
    }
    function le(a, b, c) {
        if (null == b) c.push("null");
        else {
            if ("object" == typeof b) {
                if (Array.isArray(b)) {
                    var d = b;
                    b = d.length;
                    c.push("[");
                    for(var e = "", f = 0; f < b; f++)c.push(e), le(a, d[f], c), e = ",";
                    c.push("]");
                    return;
                }
                if (b instanceof String || b instanceof Number || b instanceof Boolean) b = b.valueOf();
                else {
                    c.push("{");
                    e = "";
                    for(d in b)Object.prototype.hasOwnProperty.call(b, d) && (f = b[d], "function" != typeof f && (c.push(e), ne(d, c), c.push(":"), le(a, f, c), e = ","));
                    c.push("}");
                    return;
                }
            }
            switch(typeof b){
                case "string":
                    ne(b, c);
                    break;
                case "number":
                    c.push(isFinite(b) && !isNaN(b) ? String(b) : "null");
                    break;
                case "boolean":
                    c.push(String(b));
                    break;
                case "function":
                    c.push("null");
                    break;
                default:
                    throw Error("Unknown type: " + typeof b);
            }
        }
    }
    var oe = {
        '"': '\\"',
        "\\": "\\\\",
        "/": "\\/",
        "\b": "\\b",
        "\f": "\\f",
        "\n": "\\n",
        "\r": "\\r",
        "\t": "\\t",
        "\x0B": "\\u000b"
    }, pe = /\uffff/.test("\uffff") ? /[\\"\x00-\x1f\x7f-\uffff]/g : /[\\"\x00-\x1f\x7f-\xff]/g;
    function ne(a, b) {
        b.push('"', a.replace(pe, function(c) {
            var d = oe[c];
            d || (d = "\\u" + (c.charCodeAt(0) | 65536).toString(16).substr(1), oe[c] = d);
            return d;
        }), '"');
    }
    function qe() {
        var a = K();
        return Wb && !!ic && 11 == ic || /Edge\/\d+/.test(a);
    }
    function re() {
        return l.window && l.window.location.href || self && self.location && self.location.href || "";
    }
    function se(a, b) {
        b = b || l.window;
        var c = "about:blank";
        a && (c = Eb(Ib(a) || Kb));
        b.location.href = c;
    }
    function te(a, b) {
        var c = [], d;
        for(d in a)d in b ? typeof a[d] != typeof b[d] ? c.push(d) : "object" == typeof a[d] && null != a[d] && null != b[d] ? 0 < te(a[d], b[d]).length && c.push(d) : a[d] !== b[d] && c.push(d) : c.push(d);
        for(d in b)d in a || c.push(d);
        return c;
    }
    function ue() {
        var a = K();
        a = ve(a) != we ? null : (a = a.match(/\sChrome\/(\d+)/i)) && 2 == a.length ? parseInt(a[1], 10) : null;
        return a && 30 > a ? false : !Wb || !ic || 9 < ic;
    }
    function xe(a) {
        a = (a || K()).toLowerCase();
        return a.match(/android/) || a.match(/webos/) || a.match(/iphone|ipad|ipod/) || a.match(/blackberry/) || a.match(/windows phone/) || a.match(/iemobile/) ? true : false;
    }
    function ye(a) {
        a = a || l.window;
        try {
            a.close();
        } catch (b) {
        }
    }
    function ze(a, b, c) {
        var d = Math.floor(1000000000 * Math.random()).toString();
        b = b || 500;
        c = c || 600;
        var e = (window.screen.availHeight - c) / 2, f = (window.screen.availWidth - b) / 2;
        b = {
            width: b,
            height: c,
            top: 0 < e ? e : 0,
            left: 0 < f ? f : 0,
            location: true,
            resizable: true,
            statusbar: true,
            toolbar: false
        };
        c = K().toLowerCase();
        d && (b.target = d, x(c, "crios/") && (b.target = "_blank"));
        ve(K()) == Ae && (a = a || "http://localhost", b.scrollbars = true);
        c = a || "";
        (a = b) || (a = {
        });
        d = window;
        b = c instanceof C ? c : Ib("undefined" != typeof c.href ? c.href : String(c)) || Kb;
        c = a.target || c.target;
        e = [];
        for(g in a)switch(g){
            case "width":
            case "height":
            case "top":
            case "left":
                e.push(g + "=" + a[g]);
                break;
            case "target":
            case "noopener":
            case "noreferrer":
                break;
            default:
                e.push(g + "=" + (a[g] ? 1 : 0));
        }
        var g = e.join(",");
        if ((y("iPhone") && !y("iPod") && !y("iPad") || y("iPad") || y("iPod")) && d.navigator && d.navigator.standalone && c && "_self" != c) g = oc(document, "A"), pb(g, "HTMLAnchorElement"), b = b instanceof C ? b : Jb(b), g.href = Eb(b), g.setAttribute("target", c), a.noreferrer && g.setAttribute("rel", "noreferrer"), a = document.createEvent("MouseEvent"), a.initMouseEvent("click", true, true, d, 1), g.dispatchEvent(a), g = {
        };
        else if (a.noreferrer) {
            if (g = Pb("", d, c, g), a = Eb(b), g && (Yb && x(a, ";") && (a = "'" + a.replace(/'/g, "%27") + "'"), g.opener = null, a = '<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url=' + Rb(a) + '">', a = (d = vb()) ? d.createHTML(a) : a, a = new Lb(a, null, Mb), d = g.document)) d.write(Nb(a)), d.close();
        } else (g = Pb(b, d, c, g)) && a.noopener && (g.opener = null);
        if (g) try {
            g.focus();
        } catch (h) {
        }
        return g;
    }
    function Be(a) {
        return new D(function(b) {
            function c() {
                Fd(2000).then(function() {
                    if (!a || a.closed) b();
                    else return c();
                });
            }
            return c();
        });
    }
    var Ce = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/, De = /^[^@]+@[^@]+$/;
    function Ee() {
        var a = null;
        return new D(function(b) {
            "complete" == l.document.readyState ? b() : (a = function() {
                b();
            }, od(window, "load", a));
        }).o(function(b) {
            xd(window, "load", a);
            throw b;
        });
    }
    function Fe() {
        return Ge(void 0) ? Ee().then(function() {
            return new D(function(a, b) {
                var c = l.document, d = setTimeout(function() {
                    b(Error("Cordova framework is not ready."));
                }, 1000);
                c.addEventListener("deviceready", function() {
                    clearTimeout(d);
                    a();
                }, false);
            });
        }) : F(Error("Cordova must run in an Android or iOS file scheme."));
    }
    function Ge(a) {
        a = a || K();
        return !("file:" !== He() && "ionic:" !== He() || !a.toLowerCase().match(/iphone|ipad|ipod|android/));
    }
    function Ie() {
        var a = l.window;
        try {
            return !(!a || a == a.top);
        } catch (b) {
            return false;
        }
    }
    function Je() {
        return "undefined" !== typeof l.WorkerGlobalScope && "function" === typeof l.importScripts;
    }
    function Ke() {
        return _appDefault.default.INTERNAL.hasOwnProperty("reactNative") ? "ReactNative" : _appDefault.default.INTERNAL.hasOwnProperty("node") ? "Node" : Je() ? "Worker" : "Browser";
    }
    function Le() {
        var a = Ke();
        return "ReactNative" === a || "Node" === a;
    }
    function Me() {
        for(var a = 50, b = []; 0 < a;)b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62 * Math.random()))), a--;
        return b.join("");
    }
    var Ae = "Firefox", we = "Chrome";
    function ve(a) {
        var b = a.toLowerCase();
        if (x(b, "opera/") || x(b, "opr/") || x(b, "opios/")) return "Opera";
        if (x(b, "iemobile")) return "IEMobile";
        if (x(b, "msie") || x(b, "trident/")) return "IE";
        if (x(b, "edge/")) return "Edge";
        if (x(b, "firefox/")) return Ae;
        if (x(b, "silk/")) return "Silk";
        if (x(b, "blackberry")) return "Blackberry";
        if (x(b, "webos")) return "Webos";
        if (!x(b, "safari/") || x(b, "chrome/") || x(b, "crios/") || x(b, "android")) {
            if (!x(b, "chrome/") && !x(b, "crios/") || x(b, "edge/")) {
                if (x(b, "android")) return "Android";
                if ((a = a.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/)) && 2 == a.length) return a[1];
            } else return we;
        } else return "Safari";
        return "Other";
    }
    var Ne = {
        md: "FirebaseCore-web",
        od: "FirebaseUI-web"
    };
    function Oe(a, b) {
        b = b || [];
        var c = [], d = {
        }, e;
        for(e in Ne)d[Ne[e]] = true;
        for(e = 0; e < b.length; e++)"undefined" !== typeof d[b[e]] && (delete d[b[e]], c.push(b[e]));
        c.sort();
        b = c;
        b.length || (b = [
            "FirebaseCore-web"
        ]);
        c = Ke();
        "Browser" === c ? (d = K(), c = ve(d)) : "Worker" === c && (d = K(), c = ve(d) + "-" + c);
        return c + "/JsCore/" + a + "/" + b.join(",");
    }
    function K() {
        return l.navigator && l.navigator.userAgent || "";
    }
    function L(a, b) {
        a = a.split(".");
        b = b || l;
        for(var c = 0; c < a.length && "object" == typeof b && null != b; c++)b = b[a[c]];
        c != a.length && (b = void 0);
        return b;
    }
    function Pe() {
        try {
            var a = l.localStorage, b = Qe();
            if (a) return a.setItem(b, "1"), a.removeItem(b), qe() ? !!l.indexedDB : true;
        } catch (c) {
            return Je() && !!l.indexedDB;
        }
        return false;
    }
    function Re() {
        return (Se() || "chrome-extension:" === He() || Ge()) && !Le() && Pe() && !Je();
    }
    function Se() {
        return "http:" === He() || "https:" === He();
    }
    function He() {
        return l.location && l.location.protocol || null;
    }
    function Te(a) {
        a = a || K();
        return xe(a) || ve(a) == Ae ? false : true;
    }
    function Ue(a) {
        return "undefined" === typeof a ? null : ke(a);
    }
    function Ve(a) {
        var b = {
        }, c;
        for(c in a)a.hasOwnProperty(c) && null !== a[c] && (void 0) !== a[c] && (b[c] = a[c]);
        return b;
    }
    function We(a) {
        if (null !== a) return JSON.parse(a);
    }
    function Qe(a) {
        return a ? a : Math.floor(1000000000 * Math.random()).toString();
    }
    function Xe(a) {
        a = a || K();
        return "Safari" == ve(a) || a.toLowerCase().match(/iphone|ipad|ipod/) ? false : true;
    }
    function Ye() {
        var a = l.___jsl;
        if (a && a.H) for(var b in a.H)if (a.H[b].r = a.H[b].r || [], a.H[b].L = a.H[b].L || [], a.H[b].r = a.H[b].L.concat(), a.CP) for(var c = 0; c < a.CP.length; c++)a.CP[c] = null;
    }
    function Ze(a, b) {
        if (a > b) throw Error("Short delay should be less than long delay!");
        this.a = a;
        this.c = b;
        a = K();
        b = Ke();
        this.b = xe(a) || "ReactNative" === b;
    }
    Ze.prototype.get = function() {
        var a = l.navigator;
        return (a && "boolean" === typeof a.onLine && (Se() || "chrome-extension:" === He() || "undefined" !== typeof a.connection) ? a.onLine : 1) ? this.b ? this.c : this.a : Math.min(5000, this.a);
    };
    function $e() {
        var a = l.document;
        return a && "undefined" !== typeof a.visibilityState ? "visible" == a.visibilityState : true;
    }
    function af() {
        var a = l.document, b = null;
        return $e() || !a ? E() : new D(function(c) {
            b = function() {
                $e() && (a.removeEventListener("visibilitychange", b, false), c());
            };
            a.addEventListener("visibilitychange", b, false);
        }).o(function(c) {
            a.removeEventListener("visibilitychange", b, false);
            throw c;
        });
    }
    function bf(a) {
        try {
            var b = new Date(parseInt(a, 10));
            if (!isNaN(b.getTime()) && !/[^0-9]/.test(a)) return b.toUTCString();
        } catch (c) {
        }
        return null;
    }
    function cf() {
        return !(!L("fireauth.oauthhelper", l) && !L("fireauth.iframe", l));
    }
    function df() {
        var a = l.navigator;
        return a && a.serviceWorker && a.serviceWorker.controller || null;
    }
    function ef() {
        var a = l.navigator;
        return a && a.serviceWorker ? E().then(function() {
            return a.serviceWorker.ready;
        }).then(function(b) {
            return b.active || null;
        }).o(function() {
            return null;
        }) : E(null);
    }
    var ff = {
    };
    function gf(a) {
        ff[a] || (ff[a] = true, "undefined" !== typeof console && "function" === typeof console.warn && console.warn(a));
    }
    var hf;
    try {
        var jf = {
        };
        Object.defineProperty(jf, "abcd", {
            configurable: true,
            enumerable: true,
            value: 1
        });
        Object.defineProperty(jf, "abcd", {
            configurable: true,
            enumerable: true,
            value: 2
        });
        hf = 2 == jf.abcd;
    } catch (a) {
        hf = false;
    }
    function M(a, b, c) {
        hf ? Object.defineProperty(a, b, {
            configurable: true,
            enumerable: true,
            value: c
        }) : a[b] = c;
    }
    function N(a, b) {
        if (b) for(var c in b)b.hasOwnProperty(c) && M(a, c, b[c]);
    }
    function kf(a) {
        var b = {
        };
        N(b, a);
        return b;
    }
    function lf(a) {
        var b = {
        }, c;
        for(c in a)a.hasOwnProperty(c) && (b[c] = a[c]);
        return b;
    }
    function mf(a, b) {
        if (!b || !b.length) return true;
        if (!a) return false;
        for(var c = 0; c < b.length; c++){
            var d = a[b[c]];
            if ((void 0) === d || null === d || "" === d) return false;
        }
        return true;
    }
    function nf(a) {
        var b = a;
        if ("object" == typeof a && null != a) {
            b = "length" in a ? [] : {
            };
            for(var c in a)M(b, c, nf(a[c]));
        }
        return b;
    }
    function of(a) {
        var b = a && (a[pf] ? "phone" : null);
        if (b && a && a[qf]) {
            M(this, "uid", a[qf]);
            M(this, "displayName", a[rf] || null);
            var c = null;
            a[sf] && (c = new Date(a[sf]).toUTCString());
            M(this, "enrollmentTime", c);
            M(this, "factorId", b);
        } else throw new t("internal-error", "Internal assert: invalid MultiFactorInfo object");
    }
    of.prototype.w = function() {
        return {
            uid: this.uid,
            displayName: this.displayName,
            factorId: this.factorId,
            enrollmentTime: this.enrollmentTime
        };
    };
    function tf(a) {
        try {
            var b = new uf(a);
        } catch (c) {
            b = null;
        }
        return b;
    }
    var rf = "displayName", sf = "enrolledAt", qf = "mfaEnrollmentId", pf = "phoneInfo";
    function uf(a) {
        of.call(this, a);
        M(this, "phoneNumber", a[pf]);
    }
    r(uf, of);
    uf.prototype.w = function() {
        var a = uf.bb.w.call(this);
        a.phoneNumber = this.phoneNumber;
        return a;
    };
    function vf(a) {
        var b = {
        }, c = a[wf], d = a[xf], e = a[yf];
        a = tf(a[zf]);
        if (!e || e != Af && e != Bf && !c || e == Bf && !d || e == Cf && !a) throw Error("Invalid checkActionCode response!");
        e == Bf ? (b[Df] = c || null, b[Ef] = c || null, b[Ff] = d) : (b[Df] = d || null, b[Ef] = d || null, b[Ff] = c || null);
        b[Gf] = a || null;
        M(this, Hf, e);
        M(this, If, nf(b));
    }
    var Cf = "REVERT_SECOND_FACTOR_ADDITION", Af = "EMAIL_SIGNIN", Bf = "VERIFY_AND_CHANGE_EMAIL", wf = "email", zf = "mfaInfo", xf = "newEmail", yf = "requestType", Ff = "email", Df = "fromEmail", Gf = "multiFactorInfo", Ef = "previousEmail", If = "data", Hf = "operation";
    function Jf(a) {
        a = J(a);
        var b = be(a, Kf) || null, c = be(a, Lf) || null, d = be(a, Mf) || null;
        d = d ? Nf[d] || null : null;
        if (!b || !c || !d) throw new t("argument-error", Kf + ", " + Lf + "and " + Mf + " are required in a valid action code URL.");
        N(this, {
            apiKey: b,
            operation: d,
            code: c,
            continueUrl: be(a, Of) || null,
            languageCode: be(a, Pf) || null,
            tenantId: be(a, Qf) || null
        });
    }
    var Kf = "apiKey", Lf = "oobCode", Of = "continueUrl", Pf = "languageCode", Mf = "mode", Qf = "tenantId", Nf = {
        recoverEmail: "RECOVER_EMAIL",
        resetPassword: "PASSWORD_RESET",
        revertSecondFactorAddition: Cf,
        signIn: Af,
        verifyAndChangeEmail: Bf,
        verifyEmail: "VERIFY_EMAIL"
    };
    function Rf(a) {
        try {
            return new Jf(a);
        } catch (b) {
            return null;
        }
    }
    function Sf(a) {
        var b = a[Tf];
        if ("undefined" === typeof b) throw new t("missing-continue-uri");
        if ("string" !== typeof b || "string" === typeof b && !b.length) throw new t("invalid-continue-uri");
        this.h = b;
        this.b = this.a = null;
        this.g = false;
        var c = a[Uf];
        if (c && "object" === typeof c) {
            b = c[Vf];
            var d = c[Wf];
            c = c[Xf];
            if ("string" === typeof b && b.length) {
                this.a = b;
                if ("undefined" !== typeof d && "boolean" !== typeof d) throw new t("argument-error", Wf + " property must be a boolean when specified.");
                this.g = !!d;
                if ("undefined" !== typeof c && ("string" !== typeof c || "string" === typeof c && !c.length)) throw new t("argument-error", Xf + " property must be a non empty string when specified.");
                this.b = c || null;
            } else {
                if ("undefined" !== typeof b) throw new t("argument-error", Vf + " property must be a non empty string when specified.");
                if ("undefined" !== typeof d || "undefined" !== typeof c) throw new t("missing-android-pkg-name");
            }
        } else if ("undefined" !== typeof c) throw new t("argument-error", Uf + " property must be a non null object when specified.");
        this.f = null;
        if ((b = a[Yf]) && "object" === typeof b) {
            if (b = b[Zf], "string" === typeof b && b.length) this.f = b;
            else {
                if ("undefined" !== typeof b) throw new t("argument-error", Zf + " property must be a non empty string when specified.");
            }
        } else if ("undefined" !== typeof b) throw new t("argument-error", Yf + " property must be a non null object when specified.");
        b = a[$f];
        if ("undefined" !== typeof b && "boolean" !== typeof b) throw new t("argument-error", $f + " property must be a boolean when specified.");
        this.c = !!b;
        a = a[ag];
        if ("undefined" !== typeof a && ("string" !== typeof a || "string" === typeof a && !a.length)) throw new t("argument-error", ag + " property must be a non empty string when specified.");
        this.i = a || null;
    }
    var Uf = "android", ag = "dynamicLinkDomain", $f = "handleCodeInApp", Yf = "iOS", Tf = "url", Wf = "installApp", Xf = "minimumVersion", Vf = "packageName", Zf = "bundleId";
    function bg(a) {
        var b = {
        };
        b.continueUrl = a.h;
        b.canHandleCodeInApp = a.c;
        if (b.androidPackageName = a.a) b.androidMinimumVersion = a.b, b.androidInstallApp = a.g;
        b.iOSBundleId = a.f;
        b.dynamicLinkDomain = a.i;
        for(var c in b)null === b[c] && delete b[c];
        return b;
    }
    function cg(a) {
        return Ra(a, function(b) {
            b = b.toString(16);
            return 1 < b.length ? b : "0" + b;
        }).join("");
    }
    var dg = null;
    function eg(a) {
        var b = [];
        fg(a, function(c) {
            b.push(c);
        });
        return b;
    }
    function fg(a, b) {
        function c(m) {
            for(; d < a.length;){
                var p = a.charAt(d++), v = dg[p];
                if (null != v) return v;
                if (!/^[\s\xa0]*$/.test(p)) throw Error("Unknown base64 encoding at char: " + p);
            }
            return m;
        }
        gg();
        for(var d = 0;;){
            var e = c(-1), f = c(0), g = c(64), h = c(64);
            if (64 === h && -1 === e) break;
            b(e << 2 | f >> 4);
            64 != g && (b(f << 4 & 240 | g >> 2), 64 != h && b(g << 6 & 192 | h));
        }
    }
    function gg() {
        if (!dg) {
            dg = {
            };
            for(var a = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""), b = [
                "+/=",
                "+/",
                "-_=",
                "-_.",
                "-_"
            ], c = 0; 5 > c; c++)for(var d = a.concat(b[c].split("")), e = 0; e < d.length; e++){
                var f = d[e];
                (void 0) === dg[f] && (dg[f] = e);
            }
        }
    }
    function hg(a) {
        var b = ig(a);
        if (!(b && b.sub && b.iss && b.aud && b.exp)) throw Error("Invalid JWT");
        this.h = a;
        this.a = b.exp;
        this.i = b.sub;
        a = Date.now() / 1000;
        this.g = b.iat || (a > this.a ? this.a : a);
        this.b = b.provider_id || b.firebase && b.firebase.sign_in_provider || null;
        this.f = b.firebase && b.firebase.tenant || null;
        this.c = !!b.is_anonymous || "anonymous" == this.b;
    }
    hg.prototype.T = function() {
        return this.f;
    };
    hg.prototype.l = function() {
        return this.c;
    };
    hg.prototype.toString = function() {
        return this.h;
    };
    function jg(a) {
        try {
            return new hg(a);
        } catch (b) {
            return null;
        }
    }
    function ig(a) {
        if (!a) return null;
        a = a.split(".");
        if (3 != a.length) return null;
        a = a[1];
        for(var b = (4 - a.length % 4) % 4, c = 0; c < b; c++)a += ".";
        try {
            var d = eg(a);
            a = [];
            for(c = b = 0; b < d.length;){
                var e = d[b++];
                if (128 > e) a[c++] = String.fromCharCode(e);
                else if (191 < e && 224 > e) {
                    var f = d[b++];
                    a[c++] = String.fromCharCode((e & 31) << 6 | f & 63);
                } else if (239 < e && 365 > e) {
                    f = d[b++];
                    var g = d[b++], h = d[b++], m = ((e & 7) << 18 | (f & 63) << 12 | (g & 63) << 6 | h & 63) - 65536;
                    a[c++] = String.fromCharCode(55296 + (m >> 10));
                    a[c++] = String.fromCharCode(56320 + (m & 1023));
                } else f = d[b++], g = d[b++], a[c++] = String.fromCharCode((e & 15) << 12 | (f & 63) << 6 | g & 63);
            }
            return JSON.parse(a.join(""));
        } catch (p) {
        }
        return null;
    }
    var kg = "oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "), lg = [
        "client_id",
        "response_type",
        "scope",
        "redirect_uri",
        "state"
    ], mg = {
        nd: {
            Ja: "locale",
            va: 700,
            ua: 600,
            fa: "facebook.com",
            Ya: lg
        },
        pd: {
            Ja: null,
            va: 500,
            ua: 750,
            fa: "github.com",
            Ya: lg
        },
        qd: {
            Ja: "hl",
            va: 515,
            ua: 680,
            fa: "google.com",
            Ya: lg
        },
        wd: {
            Ja: "lang",
            va: 485,
            ua: 705,
            fa: "twitter.com",
            Ya: kg
        },
        kd: {
            Ja: "locale",
            va: 640,
            ua: 600,
            fa: "apple.com",
            Ya: []
        }
    };
    function ng(a) {
        for(var b in mg)if (mg[b].fa == a) return mg[b];
        return null;
    }
    function og(a) {
        var b = {
        };
        b["facebook.com"] = pg;
        b["google.com"] = qg;
        b["github.com"] = rg;
        b["twitter.com"] = sg;
        var c = a && a[tg];
        try {
            if (c) return b[c] ? new b[c](a) : new ug(a);
            if ("undefined" !== typeof a[vg]) return new wg(a);
        } catch (d) {
        }
        return null;
    }
    var vg = "idToken", tg = "providerId";
    function wg(a) {
        var b = a[tg];
        if (!b && a[vg]) {
            var c = jg(a[vg]);
            c && c.b && (b = c.b);
        }
        if (!b) throw Error("Invalid additional user info!");
        if ("anonymous" == b || "custom" == b) b = null;
        c = false;
        "undefined" !== typeof a.isNewUser ? c = !!a.isNewUser : "identitytoolkit#SignupNewUserResponse" === a.kind && (c = true);
        M(this, "providerId", b);
        M(this, "isNewUser", c);
    }
    function ug(a) {
        wg.call(this, a);
        a = We(a.rawUserInfo || "{}");
        M(this, "profile", nf(a || {
        }));
    }
    r(ug, wg);
    function pg(a) {
        ug.call(this, a);
        if ("facebook.com" != this.providerId) throw Error("Invalid provider ID!");
    }
    r(pg, ug);
    function rg(a) {
        ug.call(this, a);
        if ("github.com" != this.providerId) throw Error("Invalid provider ID!");
        M(this, "username", this.profile && this.profile.login || null);
    }
    r(rg, ug);
    function qg(a) {
        ug.call(this, a);
        if ("google.com" != this.providerId) throw Error("Invalid provider ID!");
    }
    r(qg, ug);
    function sg(a) {
        ug.call(this, a);
        if ("twitter.com" != this.providerId) throw Error("Invalid provider ID!");
        M(this, "username", a.screenName || null);
    }
    r(sg, ug);
    function xg(a) {
        var b = J(a), c = be(b, "link"), d = be(J(c), "link");
        b = be(b, "deep_link_id");
        return be(J(b), "link") || b || d || c || a;
    }
    function yg(a, b) {
        if (!a && !b) throw new t("internal-error", "Internal assert: no raw session string available");
        if (a && b) throw new t("internal-error", "Internal assert: unable to determine the session type");
        this.a = a || null;
        this.b = b || null;
        this.type = this.a ? zg : Ag;
    }
    var zg = "enroll", Ag = "signin";
    yg.prototype.Ha = function() {
        return this.a ? E(this.a) : E(this.b);
    };
    yg.prototype.w = function() {
        return this.type == zg ? {
            multiFactorSession: {
                idToken: this.a
            }
        } : {
            multiFactorSession: {
                pendingCredential: this.b
            }
        };
    };
    function Bg() {
    }
    Bg.prototype.ka = function() {
    };
    Bg.prototype.b = function() {
    };
    Bg.prototype.c = function() {
    };
    Bg.prototype.w = function() {
    };
    function Cg(a, b) {
        return a.then(function(c) {
            if (c[Dg]) {
                var d = jg(c[Dg]);
                if (!d || b != d.i) throw new t("user-mismatch");
                return c;
            }
            throw new t("user-mismatch");
        }).o(function(c) {
            throw c && c.code && c.code == xa + "user-not-found" ? new t("user-mismatch") : c;
        });
    }
    function Eg(a, b) {
        if (b) this.a = b;
        else throw new t("internal-error", "failed to construct a credential");
        M(this, "providerId", a);
        M(this, "signInMethod", a);
    }
    Eg.prototype.ka = function(a) {
        return Fg(a, Gg(this));
    };
    Eg.prototype.b = function(a, b) {
        var c = Gg(this);
        c.idToken = b;
        return Hg(a, c);
    };
    Eg.prototype.c = function(a, b) {
        return Cg(Ig(a, Gg(this)), b);
    };
    function Gg(a) {
        return {
            pendingToken: a.a,
            requestUri: "http://localhost"
        };
    }
    Eg.prototype.w = function() {
        return {
            providerId: this.providerId,
            signInMethod: this.signInMethod,
            pendingToken: this.a
        };
    };
    function Jg(a) {
        if (a && a.providerId && a.signInMethod && 0 == a.providerId.indexOf("saml.") && a.pendingToken) try {
            return new Eg(a.providerId, a.pendingToken);
        } catch (b) {
        }
        return null;
    }
    function Kg(a, b, c) {
        this.a = null;
        if (b.idToken || b.accessToken) b.idToken && M(this, "idToken", b.idToken), b.accessToken && M(this, "accessToken", b.accessToken), b.nonce && !b.pendingToken && M(this, "nonce", b.nonce), b.pendingToken && (this.a = b.pendingToken);
        else if (b.oauthToken && b.oauthTokenSecret) M(this, "accessToken", b.oauthToken), M(this, "secret", b.oauthTokenSecret);
        else throw new t("internal-error", "failed to construct a credential");
        M(this, "providerId", a);
        M(this, "signInMethod", c);
    }
    Kg.prototype.ka = function(a) {
        return Fg(a, Lg(this));
    };
    Kg.prototype.b = function(a, b) {
        var c = Lg(this);
        c.idToken = b;
        return Hg(a, c);
    };
    Kg.prototype.c = function(a, b) {
        var c = Lg(this);
        return Cg(Ig(a, c), b);
    };
    function Lg(a) {
        var b = {
        };
        a.idToken && (b.id_token = a.idToken);
        a.accessToken && (b.access_token = a.accessToken);
        a.secret && (b.oauth_token_secret = a.secret);
        b.providerId = a.providerId;
        a.nonce && !a.a && (b.nonce = a.nonce);
        b = {
            postBody: fe(b).toString(),
            requestUri: "http://localhost"
        };
        a.a && (delete b.postBody, b.pendingToken = a.a);
        return b;
    }
    Kg.prototype.w = function() {
        var a = {
            providerId: this.providerId,
            signInMethod: this.signInMethod
        };
        this.idToken && (a.oauthIdToken = this.idToken);
        this.accessToken && (a.oauthAccessToken = this.accessToken);
        this.secret && (a.oauthTokenSecret = this.secret);
        this.nonce && (a.nonce = this.nonce);
        this.a && (a.pendingToken = this.a);
        return a;
    };
    function Mg(a) {
        if (a && a.providerId && a.signInMethod) {
            var b = {
                idToken: a.oauthIdToken,
                accessToken: a.oauthTokenSecret ? null : a.oauthAccessToken,
                oauthTokenSecret: a.oauthTokenSecret,
                oauthToken: a.oauthTokenSecret && a.oauthAccessToken,
                nonce: a.nonce,
                pendingToken: a.pendingToken
            };
            try {
                return new Kg(a.providerId, b, a.signInMethod);
            } catch (c) {
            }
        }
        return null;
    }
    function Ng(a, b) {
        this.Qc = b || [];
        N(this, {
            providerId: a,
            isOAuthProvider: true
        });
        this.Jb = {
        };
        this.qb = (ng(a) || {
        }).Ja || null;
        this.pb = null;
    }
    Ng.prototype.Ka = function(a) {
        this.Jb = nb(a);
        return this;
    };
    function Og(a) {
        if ("string" !== typeof a || 0 != a.indexOf("saml.")) throw new t("argument-error", 'SAML provider IDs must be prefixed with "saml."');
        Ng.call(this, a, []);
    }
    r(Og, Ng);
    function Pg(a) {
        Ng.call(this, a, lg);
        this.a = [];
    }
    r(Pg, Ng);
    Pg.prototype.Ca = function(a) {
        Va(this.a, a) || this.a.push(a);
        return this;
    };
    Pg.prototype.Rb = function() {
        return Za(this.a);
    };
    Pg.prototype.credential = function(a, b) {
        var c;
        n(a) ? c = {
            idToken: a.idToken || null,
            accessToken: a.accessToken || null,
            nonce: a.rawNonce || null
        } : c = {
            idToken: a || null,
            accessToken: b || null
        };
        if (!c.idToken && !c.accessToken) throw new t("argument-error", "credential failed: must provide the ID token and/or the access token.");
        return new Kg(this.providerId, c, this.providerId);
    };
    function Qg() {
        Pg.call(this, "facebook.com");
    }
    r(Qg, Pg);
    M(Qg, "PROVIDER_ID", "facebook.com");
    M(Qg, "FACEBOOK_SIGN_IN_METHOD", "facebook.com");
    function Rg(a) {
        if (!a) throw new t("argument-error", "credential failed: expected 1 argument (the OAuth access token).");
        var b = a;
        n(a) && (b = a.accessToken);
        return (new Qg).credential({
            accessToken: b
        });
    }
    function Sg() {
        Pg.call(this, "github.com");
    }
    r(Sg, Pg);
    M(Sg, "PROVIDER_ID", "github.com");
    M(Sg, "GITHUB_SIGN_IN_METHOD", "github.com");
    function Tg(a) {
        if (!a) throw new t("argument-error", "credential failed: expected 1 argument (the OAuth access token).");
        var b = a;
        n(a) && (b = a.accessToken);
        return (new Sg).credential({
            accessToken: b
        });
    }
    function Ug() {
        Pg.call(this, "google.com");
        this.Ca("profile");
    }
    r(Ug, Pg);
    M(Ug, "PROVIDER_ID", "google.com");
    M(Ug, "GOOGLE_SIGN_IN_METHOD", "google.com");
    function Vg(a, b) {
        var c = a;
        n(a) && (c = a.idToken, b = a.accessToken);
        return (new Ug).credential({
            idToken: c,
            accessToken: b
        });
    }
    function Wg() {
        Ng.call(this, "twitter.com", kg);
    }
    r(Wg, Ng);
    M(Wg, "PROVIDER_ID", "twitter.com");
    M(Wg, "TWITTER_SIGN_IN_METHOD", "twitter.com");
    function Xg(a, b) {
        var c = a;
        n(c) || (c = {
            oauthToken: a,
            oauthTokenSecret: b
        });
        if (!c.oauthToken || !c.oauthTokenSecret) throw new t("argument-error", "credential failed: expected 2 arguments (the OAuth access token and secret).");
        return new Kg("twitter.com", c, "twitter.com");
    }
    function Yg(a, b, c) {
        this.a = a;
        this.f = b;
        M(this, "providerId", "password");
        M(this, "signInMethod", c === Zg.EMAIL_LINK_SIGN_IN_METHOD ? Zg.EMAIL_LINK_SIGN_IN_METHOD : Zg.EMAIL_PASSWORD_SIGN_IN_METHOD);
    }
    Yg.prototype.ka = function(a) {
        return this.signInMethod == Zg.EMAIL_LINK_SIGN_IN_METHOD ? O(a, $g, {
            email: this.a,
            oobCode: this.f
        }) : O(a, ah, {
            email: this.a,
            password: this.f
        });
    };
    Yg.prototype.b = function(a, b) {
        return this.signInMethod == Zg.EMAIL_LINK_SIGN_IN_METHOD ? O(a, bh, {
            idToken: b,
            email: this.a,
            oobCode: this.f
        }) : O(a, ch, {
            idToken: b,
            email: this.a,
            password: this.f
        });
    };
    Yg.prototype.c = function(a, b) {
        return Cg(this.ka(a), b);
    };
    Yg.prototype.w = function() {
        return {
            email: this.a,
            password: this.f,
            signInMethod: this.signInMethod
        };
    };
    function dh(a) {
        return a && a.email && a.password ? new Yg(a.email, a.password, a.signInMethod) : null;
    }
    function Zg() {
        N(this, {
            providerId: "password",
            isOAuthProvider: false
        });
    }
    function eh(a, b) {
        b = fh(b);
        if (!b) throw new t("argument-error", "Invalid email link!");
        return new Yg(a, b.code, Zg.EMAIL_LINK_SIGN_IN_METHOD);
    }
    function fh(a) {
        a = xg(a);
        return (a = Rf(a)) && a.operation === Af ? a : null;
    }
    N(Zg, {
        PROVIDER_ID: "password"
    });
    N(Zg, {
        EMAIL_LINK_SIGN_IN_METHOD: "emailLink"
    });
    N(Zg, {
        EMAIL_PASSWORD_SIGN_IN_METHOD: "password"
    });
    function gh(a) {
        if (!(a.fb && a.eb || a.La && a.ea)) throw new t("internal-error");
        this.a = a;
        M(this, "providerId", "phone");
        this.fa = "phone";
        M(this, "signInMethod", "phone");
    }
    gh.prototype.ka = function(a) {
        return a.gb(hh(this));
    };
    gh.prototype.b = function(a, b) {
        var c = hh(this);
        c.idToken = b;
        return O(a, ih, c);
    };
    gh.prototype.c = function(a, b) {
        var c = hh(this);
        c.operation = "REAUTH";
        a = O(a, jh, c);
        return Cg(a, b);
    };
    gh.prototype.w = function() {
        var a = {
            providerId: "phone"
        };
        this.a.fb && (a.verificationId = this.a.fb);
        this.a.eb && (a.verificationCode = this.a.eb);
        this.a.La && (a.temporaryProof = this.a.La);
        this.a.ea && (a.phoneNumber = this.a.ea);
        return a;
    };
    function kh(a) {
        if (a && "phone" === a.providerId && (a.verificationId && a.verificationCode || a.temporaryProof && a.phoneNumber)) {
            var b = {
            };
            w([
                "verificationId",
                "verificationCode",
                "temporaryProof",
                "phoneNumber"
            ], function(c) {
                a[c] && (b[c] = a[c]);
            });
            return new gh(b);
        }
        return null;
    }
    function hh(a) {
        return a.a.La && a.a.ea ? {
            temporaryProof: a.a.La,
            phoneNumber: a.a.ea
        } : {
            sessionInfo: a.a.fb,
            code: a.a.eb
        };
    }
    function lh(a) {
        try {
            this.a = a || _appDefault.default.auth();
        } catch (b) {
            throw new t("argument-error", "Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().");
        }
        N(this, {
            providerId: "phone",
            isOAuthProvider: false
        });
    }
    lh.prototype.gb = function(a, b) {
        var c = this.a.a;
        return E(b.verify()).then(function(d) {
            if ("string" !== typeof d) throw new t("argument-error", "An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");
            switch(b.type){
                case "recaptcha":
                    var e = n(a) ? a.session : null, f = n(a) ? a.phoneNumber : a, g;
                    e && e.type == zg ? g = e.Ha().then(function(h) {
                        return mh(c, {
                            idToken: h,
                            phoneEnrollmentInfo: {
                                phoneNumber: f,
                                recaptchaToken: d
                            }
                        });
                    }) : e && e.type == Ag ? g = e.Ha().then(function(h) {
                        return nh(c, {
                            mfaPendingCredential: h,
                            mfaEnrollmentId: a.multiFactorHint && a.multiFactorHint.uid || a.multiFactorUid,
                            phoneSignInInfo: {
                                recaptchaToken: d
                            }
                        });
                    }) : g = oh(c, {
                        phoneNumber: f,
                        recaptchaToken: d
                    });
                    return g.then(function(h) {
                        "function" === typeof b.reset && b.reset();
                        return h;
                    }, function(h) {
                        "function" === typeof b.reset && b.reset();
                        throw h;
                    });
                default:
                    throw new t("argument-error", 'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.');
            }
        });
    };
    function ph(a, b) {
        if (!a) throw new t("missing-verification-id");
        if (!b) throw new t("missing-verification-code");
        return new gh({
            fb: a,
            eb: b
        });
    }
    N(lh, {
        PROVIDER_ID: "phone"
    });
    N(lh, {
        PHONE_SIGN_IN_METHOD: "phone"
    });
    function qh(a) {
        if (a.temporaryProof && a.phoneNumber) return new gh({
            La: a.temporaryProof,
            ea: a.phoneNumber
        });
        var b = a && a.providerId;
        if (!b || "password" === b) return null;
        var c = a && a.oauthAccessToken, d = a && a.oauthTokenSecret, e = a && a.nonce, f = a && a.oauthIdToken, g = a && a.pendingToken;
        try {
            switch(b){
                case "google.com":
                    return Vg(f, c);
                case "facebook.com":
                    return Rg(c);
                case "github.com":
                    return Tg(c);
                case "twitter.com":
                    return Xg(c, d);
                default:
                    return c || d || f || g ? g ? 0 == b.indexOf("saml.") ? new Eg(b, g) : new Kg(b, {
                        pendingToken: g,
                        idToken: a.oauthIdToken,
                        accessToken: a.oauthAccessToken
                    }, b) : new Pg(b).credential({
                        idToken: f,
                        accessToken: c,
                        rawNonce: e
                    }) : null;
            }
        } catch (h) {
            return null;
        }
    }
    function rh(a) {
        if (!a.isOAuthProvider) throw new t("invalid-oauth-provider");
    }
    function sh(a, b, c, d, e, f, g) {
        this.c = a;
        this.b = b || null;
        this.g = c || null;
        this.f = d || null;
        this.i = f || null;
        this.h = g || null;
        this.a = e || null;
        if (this.g || this.a) {
            if (this.g && this.a) throw new t("invalid-auth-event");
            if (this.g && !this.f) throw new t("invalid-auth-event");
        } else throw new t("invalid-auth-event");
    }
    sh.prototype.getUid = function() {
        var a = [];
        a.push(this.c);
        this.b && a.push(this.b);
        this.f && a.push(this.f);
        this.h && a.push(this.h);
        return a.join("-");
    };
    sh.prototype.T = function() {
        return this.h;
    };
    sh.prototype.w = function() {
        return {
            type: this.c,
            eventId: this.b,
            urlResponse: this.g,
            sessionId: this.f,
            postBody: this.i,
            tenantId: this.h,
            error: this.a && this.a.w()
        };
    };
    function th(a) {
        a = a || {
        };
        return a.type ? new sh(a.type, a.eventId, a.urlResponse, a.sessionId, a.error && Aa(a.error), a.postBody, a.tenantId) : null;
    }
    function uh() {
        this.b = null;
        this.a = [];
    }
    var vh = null;
    function wh(a) {
        var b = vh;
        b.a.push(a);
        b.b || (b.b = function(c) {
            for(var d = 0; d < b.a.length; d++)b.a[d](c);
        }, a = L("universalLinks.subscribe", l), "function" === typeof a && a(null, b.b));
    }
    function xh(a) {
        var b = "unauthorized-domain", c = void 0, d = J(a);
        a = d.a;
        d = d.c;
        "chrome-extension" == d ? c = Qb("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.", a) : "http" == d || "https" == d ? c = Qb("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.", a) : b = "operation-not-supported-in-this-environment";
        t.call(this, b, c);
    }
    r(xh, t);
    function yh(a, b, c) {
        t.call(this, a, c);
        a = b || {
        };
        a.Kb && M(this, "email", a.Kb);
        a.ea && M(this, "phoneNumber", a.ea);
        a.credential && M(this, "credential", a.credential);
        a.$b && M(this, "tenantId", a.$b);
    }
    r(yh, t);
    yh.prototype.w = function() {
        var a = {
            code: this.code,
            message: this.message
        };
        this.email && (a.email = this.email);
        this.phoneNumber && (a.phoneNumber = this.phoneNumber);
        this.tenantId && (a.tenantId = this.tenantId);
        var b = this.credential && this.credential.w();
        b && z(a, b);
        return a;
    };
    yh.prototype.toJSON = function() {
        return this.w();
    };
    function zh(a) {
        if (a.code) {
            var b = a.code || "";
            0 == b.indexOf(xa) && (b = b.substring(xa.length));
            var c = {
                credential: qh(a),
                $b: a.tenantId
            };
            if (a.email) c.Kb = a.email;
            else if (a.phoneNumber) c.ea = a.phoneNumber;
            else if (!c.credential) return new t(b, a.message || void 0);
            return new yh(b, c, a.message);
        }
        return null;
    }
    function Ah() {
    }
    Ah.prototype.c = null;
    function Bh(a) {
        return a.c || (a.c = a.b());
    }
    var Ch;
    function Dh() {
    }
    r(Dh, Ah);
    Dh.prototype.a = function() {
        var a = Eh(this);
        return a ? new ActiveXObject(a) : new XMLHttpRequest;
    };
    Dh.prototype.b = function() {
        var a = {
        };
        Eh(this) && (a[0] = true, a[1] = true);
        return a;
    };
    function Eh(a) {
        if (!a.f && "undefined" == typeof XMLHttpRequest && "undefined" != typeof ActiveXObject) {
            for(var b = [
                "MSXML2.XMLHTTP.6.0",
                "MSXML2.XMLHTTP.3.0",
                "MSXML2.XMLHTTP",
                "Microsoft.XMLHTTP"
            ], c = 0; c < b.length; c++){
                var d = b[c];
                try {
                    return new ActiveXObject(d), a.f = d;
                } catch (e) {
                }
            }
            throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed");
        }
        return a.f;
    }
    Ch = new Dh;
    function Fh() {
    }
    r(Fh, Ah);
    Fh.prototype.a = function() {
        var a = new XMLHttpRequest;
        if ("withCredentials" in a) return a;
        if ("undefined" != typeof XDomainRequest) return new Gh;
        throw Error("Unsupported browser");
    };
    Fh.prototype.b = function() {
        return {
        };
    };
    function Gh() {
        this.a = new XDomainRequest;
        this.readyState = 0;
        this.onreadystatechange = null;
        this.responseType = this.responseText = this.response = "";
        this.status = -1;
        this.statusText = "";
        this.a.onload = q(this.qc, this);
        this.a.onerror = q(this.Tb, this);
        this.a.onprogress = q(this.rc, this);
        this.a.ontimeout = q(this.vc, this);
    }
    k = Gh.prototype;
    k.open = function(a, b, c) {
        if (null != c && !c) throw Error("Only async requests are supported.");
        this.a.open(a, b);
    };
    k.send = function(a) {
        if (a) {
            if ("string" == typeof a) this.a.send(a);
            else throw Error("Only string data is supported");
        } else this.a.send();
    };
    k.abort = function() {
        this.a.abort();
    };
    k.setRequestHeader = function() {
    };
    k.getResponseHeader = function(a) {
        return "content-type" == a.toLowerCase() ? this.a.contentType : "";
    };
    k.qc = function() {
        this.status = 200;
        this.response = this.responseText = this.a.responseText;
        Hh(this, 4);
    };
    k.Tb = function() {
        this.status = 500;
        this.response = this.responseText = "";
        Hh(this, 4);
    };
    k.vc = function() {
        this.Tb();
    };
    k.rc = function() {
        this.status = 200;
        Hh(this, 1);
    };
    function Hh(a, b) {
        a.readyState = b;
        if (a.onreadystatechange) a.onreadystatechange();
    }
    k.getAllResponseHeaders = function() {
        return "content-type: " + this.a.contentType;
    };
    function Ih(a, b, c) {
        this.reset(a, b, c, void 0, void 0);
    }
    Ih.prototype.a = null;
    var Jh = 0;
    Ih.prototype.reset = function(a, b, c, d, e) {
        "number" == typeof e || Jh++;
        d || va();
        delete this.a;
    };
    function Kh(a) {
        this.f = a;
        this.b = this.c = this.a = null;
    }
    function Lh(a, b) {
        this.name = a;
        this.value = b;
    }
    Lh.prototype.toString = function() {
        return this.name;
    };
    var Mh = new Lh("SEVERE", 1000), Nh = new Lh("WARNING", 900), Oh = new Lh("CONFIG", 700), Ph = new Lh("FINE", 500);
    function Qh(a) {
        if (a.c) return a.c;
        if (a.a) return Qh(a.a);
        Ga("Root logger has no level set.");
        return null;
    }
    Kh.prototype.log = function(a, b, c) {
        if (a.value >= Qh(this).value) for(oa(b) && (b = b()), a = new Ih(a, String(b), this.f), c && (a.a = c), c = this; c;)c = c.a;
    };
    var Rh = {
    }, Sh = null;
    function Th(a) {
        Sh || (Sh = new Kh(""), Rh[""] = Sh, Sh.c = Oh);
        var b;
        if (!(b = Rh[a])) {
            b = new Kh(a);
            var c = a.lastIndexOf("."), d = a.substr(c + 1);
            c = Th(a.substr(0, c));
            c.b || (c.b = {
            });
            c.b[d] = b;
            b.a = c;
            Rh[a] = b;
        }
        return b;
    }
    function Uh(a, b) {
        a && a.log(Ph, b, void 0);
    }
    function Vh(a) {
        this.f = a;
    }
    r(Vh, Ah);
    Vh.prototype.a = function() {
        return new Wh(this.f);
    };
    Vh.prototype.b = (function(a) {
        return function() {
            return a;
        };
    })({
    });
    function Wh(a) {
        H.call(this);
        this.u = a;
        this.h = void 0;
        this.readyState = Xh;
        this.status = 0;
        this.responseType = this.responseText = this.response = this.statusText = "";
        this.onreadystatechange = null;
        this.l = new Headers;
        this.b = null;
        this.s = "GET";
        this.f = "";
        this.a = false;
        this.i = Th("goog.net.FetchXmlHttp");
        this.m = this.c = this.g = null;
    }
    r(Wh, H);
    var Xh = 0;
    k = Wh.prototype;
    k.open = function(a, b) {
        if (this.readyState != Xh) throw this.abort(), Error("Error reopening a connection");
        this.s = a;
        this.f = b;
        this.readyState = 1;
        Yh(this);
    };
    k.send = function(a) {
        if (1 != this.readyState) throw this.abort(), Error("need to call open() first. ");
        this.a = true;
        var b = {
            headers: this.l,
            method: this.s,
            credentials: this.h,
            cache: void 0
        };
        a && (b.body = a);
        this.u.fetch(new Request(this.f, b)).then(this.uc.bind(this), this.Va.bind(this));
    };
    k.abort = function() {
        this.response = this.responseText = "";
        this.l = new Headers;
        this.status = 0;
        this.c && this.c.cancel("Request was aborted.");
        1 <= this.readyState && this.a && 4 != this.readyState && (this.a = false, Zh(this));
        this.readyState = Xh;
    };
    k.uc = function(a) {
        this.a && (this.g = a, this.b || (this.status = this.g.status, this.statusText = this.g.statusText, this.b = a.headers, this.readyState = 2, Yh(this)), this.a && (this.readyState = 3, Yh(this), this.a && ("arraybuffer" === this.responseType ? a.arrayBuffer().then(this.sc.bind(this), this.Va.bind(this)) : "undefined" !== typeof l.ReadableStream && "body" in a ? (this.response = this.responseText = "", this.c = a.body.getReader(), this.m = new TextDecoder, $h(this)) : a.text().then(this.tc.bind(this), this.Va.bind(this)))));
    };
    function $h(a) {
        a.c.read().then(a.pc.bind(a)).catch(a.Va.bind(a));
    }
    k.pc = function(a) {
        if (this.a) {
            var b = this.m.decode(a.value ? a.value : new Uint8Array(0), {
                stream: !a.done
            });
            b && (this.response = this.responseText += b);
            a.done ? Zh(this) : Yh(this);
            3 == this.readyState && $h(this);
        }
    };
    k.tc = function(a) {
        this.a && (this.response = this.responseText = a, Zh(this));
    };
    k.sc = function(a) {
        this.a && (this.response = a, Zh(this));
    };
    k.Va = function(a) {
        var b = this.i;
        b && b.log(Nh, "Failed to fetch url " + this.f, a instanceof Error ? a : Error(a));
        this.a && Zh(this);
    };
    function Zh(a) {
        a.readyState = 4;
        a.g = null;
        a.c = null;
        a.m = null;
        Yh(a);
    }
    k.setRequestHeader = function(a, b) {
        this.l.append(a, b);
    };
    k.getResponseHeader = function(a) {
        return this.b ? this.b.get(a.toLowerCase()) || "" : ((a = this.i) && a.log(Nh, "Attempting to get response header but no headers have been received for url: " + this.f, void 0), "");
    };
    k.getAllResponseHeaders = function() {
        if (!this.b) {
            var a = this.i;
            a && a.log(Nh, "Attempting to get all response headers but no headers have been received for url: " + this.f, void 0);
            return "";
        }
        a = [];
        for(var b = this.b.entries(), c = b.next(); !c.done;)c = c.value, a.push(c[0] + ": " + c[1]), c = b.next();
        return a.join("\r\n");
    };
    function Yh(a) {
        a.onreadystatechange && a.onreadystatechange.call(a);
    }
    Object.defineProperty(Wh.prototype, "withCredentials", {
        get: function() {
            return "include" === this.h;
        },
        set: function(a) {
            this.h = a ? "include" : "same-origin";
        }
    });
    function ai(a) {
        H.call(this);
        this.headers = new Jd;
        this.D = a || null;
        this.c = false;
        this.C = this.a = null;
        this.h = this.P = this.l = "";
        this.f = this.N = this.i = this.J = false;
        this.g = 0;
        this.s = null;
        this.m = bi;
        this.u = this.S = false;
    }
    r(ai, H);
    var bi = "";
    ai.prototype.b = Th("goog.net.XhrIo");
    var ci = /^https?$/i, di = [
        "POST",
        "PUT"
    ];
    function ei(a, b, c, d, e) {
        if (a.a) throw Error("[goog.net.XhrIo] Object is active with another request=" + a.l + "; newUri=" + b);
        c = c ? c.toUpperCase() : "GET";
        a.l = b;
        a.h = "";
        a.P = c;
        a.J = false;
        a.c = true;
        a.a = a.D ? a.D.a() : Ch.a();
        a.C = a.D ? Bh(a.D) : Bh(Ch);
        a.a.onreadystatechange = q(a.Wb, a);
        try {
            Uh(a.b, fi(a, "Opening Xhr")), a.N = true, a.a.open(c, String(b), true), a.N = false;
        } catch (g) {
            Uh(a.b, fi(a, "Error opening Xhr: " + g.message));
            gi(a, g);
            return;
        }
        b = d || "";
        var f = new Jd(a.headers);
        e && Id(e, function(g, h) {
            f.set(h, g);
        });
        e = Ta(f.Y());
        d = l.FormData && b instanceof l.FormData;
        !Va(di, c) || e || d || f.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
        f.forEach(function(g, h) {
            this.a.setRequestHeader(h, g);
        }, a);
        a.m && (a.a.responseType = a.m);
        "withCredentials" in a.a && a.a.withCredentials !== a.S && (a.a.withCredentials = a.S);
        try {
            hi(a), 0 < a.g && (a.u = ii(a.a), Uh(a.b, fi(a, "Will abort after " + a.g + "ms if incomplete, xhr2 " + a.u)), a.u ? (a.a.timeout = a.g, a.a.ontimeout = q(a.Ma, a)) : a.s = Ed(a.Ma, a.g, a)), Uh(a.b, fi(a, "Sending request")), a.i = true, a.a.send(b), a.i = false;
        } catch (g) {
            Uh(a.b, fi(a, "Send error: " + g.message)), gi(a, g);
        }
    }
    function ii(a) {
        return Wb && fc(9) && "number" === typeof a.timeout && (void 0) !== a.ontimeout;
    }
    function Ua(a) {
        return "content-type" == a.toLowerCase();
    }
    k = ai.prototype;
    k.Ma = function() {
        "undefined" != typeof ha && this.a && (this.h = "Timed out after " + this.g + "ms, aborting", Uh(this.b, fi(this, this.h)), this.dispatchEvent("timeout"), this.abort(8));
    };
    function gi(a, b) {
        a.c = false;
        a.a && (a.f = true, a.a.abort(), a.f = false);
        a.h = b;
        ji(a);
        ki(a);
    }
    function ji(a) {
        a.J || (a.J = true, a.dispatchEvent("complete"), a.dispatchEvent("error"));
    }
    k.abort = function() {
        this.a && this.c && (Uh(this.b, fi(this, "Aborting")), this.c = false, this.f = true, this.a.abort(), this.f = false, this.dispatchEvent("complete"), this.dispatchEvent("abort"), ki(this));
    };
    k.Da = function() {
        this.a && (this.c && (this.c = false, this.f = true, this.a.abort(), this.f = false), ki(this, true));
        ai.bb.Da.call(this);
    };
    k.Wb = function() {
        this.ya || (this.N || this.i || this.f ? li(this) : this.Jc());
    };
    k.Jc = function() {
        li(this);
    };
    function li(a) {
        if (a.c && "undefined" != typeof ha) {
            if (a.C[1] && 4 == mi(a) && 2 == ni(a)) Uh(a.b, fi(a, "Local request error detected and ignored"));
            else if (a.i && 4 == mi(a)) Ed(a.Wb, 0, a);
            else if (a.dispatchEvent("readystatechange"), 4 == mi(a)) {
                Uh(a.b, fi(a, "Request complete"));
                a.c = false;
                try {
                    var b = ni(a);
                    a: switch(b){
                        case 200:
                        case 201:
                        case 202:
                        case 204:
                        case 206:
                        case 304:
                        case 1223:
                            var c = true;
                            break a;
                        default:
                            c = false;
                    }
                    var d;
                    if (!(d = c)) {
                        var e;
                        if (e = 0 === b) {
                            var f = String(a.l).match(Md)[1] || null;
                            if (!f && l.self && l.self.location) {
                                var g = l.self.location.protocol;
                                f = g.substr(0, g.length - 1);
                            }
                            e = !ci.test(f ? f.toLowerCase() : "");
                        }
                        d = e;
                    }
                    if (d) a.dispatchEvent("complete"), a.dispatchEvent("success");
                    else {
                        try {
                            var h = 2 < mi(a) ? a.a.statusText : "";
                        } catch (m) {
                            Uh(a.b, "Can not get status: " + m.message), h = "";
                        }
                        a.h = h + " [" + ni(a) + "]";
                        ji(a);
                    }
                } finally{
                    ki(a);
                }
            }
        }
    }
    function ki(a, b) {
        if (a.a) {
            hi(a);
            var c = a.a, d = a.C[0] ? la : null;
            a.a = null;
            a.C = null;
            b || a.dispatchEvent("ready");
            try {
                c.onreadystatechange = d;
            } catch (e) {
                (a = a.b) && a.log(Mh, "Problem encountered resetting onreadystatechange: " + e.message, void 0);
            }
        }
    }
    function hi(a) {
        a.a && a.u && (a.a.ontimeout = null);
        a.s && (l.clearTimeout(a.s), a.s = null);
    }
    function mi(a) {
        return a.a ? a.a.readyState : 0;
    }
    function ni(a) {
        try {
            return 2 < mi(a) ? a.a.status : -1;
        } catch (b) {
            return -1;
        }
    }
    function oi(a) {
        try {
            return a.a ? a.a.responseText : "";
        } catch (b) {
            return Uh(a.b, "Can not get responseText: " + b.message), "";
        }
    }
    k.getResponse = function() {
        try {
            if (!this.a) return null;
            if ("response" in this.a) return this.a.response;
            switch(this.m){
                case bi:
                case "text":
                    return this.a.responseText;
                case "arraybuffer":
                    if ("mozResponseArrayBuffer" in this.a) return this.a.mozResponseArrayBuffer;
            }
            var a = this.b;
            a && a.log(Mh, "Response type " + this.m + " is not supported on this browser", void 0);
            return null;
        } catch (b) {
            return Uh(this.b, "Can not get response: " + b.message), null;
        }
    };
    function fi(a, b) {
        return b + " [" + a.P + " " + a.l + " " + ni(a) + "]";
    }
    function pi(a) {
        var b = qi;
        this.g = [];
        this.u = b;
        this.s = a || null;
        this.f = this.a = false;
        this.c = void 0;
        this.v = this.C = this.i = false;
        this.h = 0;
        this.b = null;
        this.l = 0;
    }
    pi.prototype.cancel = function(a) {
        if (this.a) this.c instanceof pi && this.c.cancel();
        else {
            if (this.b) {
                var b = this.b;
                delete this.b;
                a ? b.cancel(a) : (b.l--, 0 >= b.l && b.cancel());
            }
            this.u ? this.u.call(this.s, this) : this.v = true;
            this.a || (a = new ri(this), si(this), ti(this, false, a));
        }
    };
    pi.prototype.m = function(a, b) {
        this.i = false;
        ti(this, a, b);
    };
    function ti(a, b, c) {
        a.a = true;
        a.c = c;
        a.f = !b;
        ui(a);
    }
    function si(a) {
        if (a.a) {
            if (!a.v) throw new vi(a);
            a.v = false;
        }
    }
    function wi(a, b) {
        xi(a, null, b, void 0);
    }
    function xi(a, b, c, d) {
        a.g.push([
            b,
            c,
            d
        ]);
        a.a && ui(a);
    }
    pi.prototype.then = function(a, b, c) {
        var d, e, f = new D(function(g, h) {
            d = g;
            e = h;
        });
        xi(this, d, function(g) {
            g instanceof ri ? f.cancel() : e(g);
        });
        return f.then(a, b, c);
    };
    pi.prototype.$goog_Thenable = true;
    function yi(a) {
        return Sa(a.g, function(b) {
            return oa(b[1]);
        });
    }
    function ui(a) {
        if (a.h && a.a && yi(a)) {
            var b = a.h, c = zi[b];
            c && (l.clearTimeout(c.a), delete zi[b]);
            a.h = 0;
        }
        a.b && (a.b.l--, delete a.b);
        b = a.c;
        for(var d = c = false; a.g.length && !a.i;){
            var e = a.g.shift(), f = e[0], g = e[1];
            e = e[2];
            if (f = a.f ? g : f) try {
                var h = f.call(e || a.s, b);
                (void 0) !== h && (a.f = a.f && (h == b || h instanceof Error), a.c = b = h);
                if (Ea(b) || "function" === typeof l.Promise && b instanceof l.Promise) d = true, a.i = true;
            } catch (m) {
                b = m, a.f = true, yi(a) || (c = true);
            }
        }
        a.c = b;
        d && (h = q(a.m, a, true), d = q(a.m, a, false), b instanceof pi ? (xi(b, h, d), b.C = true) : b.then(h, d));
        c && (b = new Ai(b), zi[b.a] = b, a.h = b.a);
    }
    function vi() {
        u.call(this);
    }
    r(vi, u);
    vi.prototype.message = "Deferred has already fired";
    vi.prototype.name = "AlreadyCalledError";
    function ri() {
        u.call(this);
    }
    r(ri, u);
    ri.prototype.message = "Deferred was canceled";
    ri.prototype.name = "CanceledError";
    function Ai(a) {
        this.a = l.setTimeout(q(this.c, this), 0);
        this.b = a;
    }
    Ai.prototype.c = function() {
        delete zi[this.a];
        throw this.b;
    };
    var zi = {
    };
    function Bi(a) {
        var b = {
        }, c = b.document || document, d = yb(a).toString(), e = oc(document, "SCRIPT"), f = {
            Xb: e,
            Ma: void 0
        }, g = new pi(f), h = null, m = null != b.timeout ? b.timeout : 5000;
        0 < m && (h = window.setTimeout(function() {
            Ci(e, true);
            var p = new Di(Ei, "Timeout reached for loading script " + d);
            si(g);
            ti(g, false, p);
        }, m), f.Ma = h);
        e.onload = e.onreadystatechange = function() {
            e.readyState && "loaded" != e.readyState && "complete" != e.readyState || (Ci(e, b.xd || false, h), si(g), ti(g, true, null));
        };
        e.onerror = function() {
            Ci(e, true, h);
            var p = new Di(Fi, "Error while loading script " + d);
            si(g);
            ti(g, false, p);
        };
        f = b.attributes || {
        };
        z(f, {
            type: "text/javascript",
            charset: "UTF-8"
        });
        lc(e, f);
        Ob(e, a);
        Gi(c).appendChild(e);
        return g;
    }
    function Gi(a) {
        var b;
        return (b = (a || document).getElementsByTagName("HEAD")) && 0 != b.length ? b[0] : a.documentElement;
    }
    function qi() {
        if (this && this.Xb) {
            var a = this.Xb;
            a && "SCRIPT" == a.tagName && Ci(a, true, this.Ma);
        }
    }
    function Ci(a, b, c) {
        null != c && l.clearTimeout(c);
        a.onload = la;
        a.onerror = la;
        a.onreadystatechange = la;
        b && window.setTimeout(function() {
            a && a.parentNode && a.parentNode.removeChild(a);
        }, 0);
    }
    var Fi = 0, Ei = 1;
    function Di(a, b) {
        var c = "Jsloader error (code #" + a + ")";
        b && (c += ": " + b);
        u.call(this, c);
        this.code = a;
    }
    r(Di, u);
    function Hi(a) {
        this.f = a;
    }
    r(Hi, Ah);
    Hi.prototype.a = function() {
        return new this.f;
    };
    Hi.prototype.b = function() {
        return {
        };
    };
    function Ii(a, b, c) {
        this.c = a;
        a = b || {
        };
        this.l = a.secureTokenEndpoint || "https://securetoken.googleapis.com/v1/token";
        this.m = a.secureTokenTimeout || Ji;
        this.g = nb(a.secureTokenHeaders || Ki);
        this.h = a.firebaseEndpoint || "https://www.googleapis.com/identitytoolkit/v3/relyingparty/";
        this.i = a.identityPlatformEndpoint || "https://identitytoolkit.googleapis.com/v2/";
        this.v = a.firebaseTimeout || Li;
        this.a = nb(a.firebaseHeaders || Mi);
        c && (this.a["X-Client-Version"] = c, this.g["X-Client-Version"] = c);
        c = "Node" == Ke();
        c = l.XMLHttpRequest || c && _appDefault.default.INTERNAL.node && _appDefault.default.INTERNAL.node.XMLHttpRequest;
        if (!c && !Je()) throw new t("internal-error", "The XMLHttpRequest compatibility library was not found.");
        this.f = void 0;
        Je() ? this.f = new Vh(self) : Le() ? this.f = new Hi(c) : this.f = new Fh;
        this.b = null;
    }
    var Ni, Dg = "idToken", Ji = new Ze(30000, 60000), Ki = {
        "Content-Type": "application/x-www-form-urlencoded"
    }, Li = new Ze(30000, 60000), Mi = {
        "Content-Type": "application/json"
    };
    function Oi(a, b) {
        b ? a.a["X-Firebase-Locale"] = b : delete a.a["X-Firebase-Locale"];
    }
    function Pi(a, b) {
        b && (a.l = Qi("https://securetoken.googleapis.com/v1/token", b), a.h = Qi("https://www.googleapis.com/identitytoolkit/v3/relyingparty/", b), a.i = Qi("https://identitytoolkit.googleapis.com/v2/", b));
    }
    function Qi(a, b) {
        a = J(a);
        b = J(b.url);
        a.f = a.a + a.f;
        Pd(a, b.c);
        a.a = b.a;
        Qd(a, b.g);
        return a.toString();
    }
    function Ri(a, b) {
        b ? (a.a["X-Client-Version"] = b, a.g["X-Client-Version"] = b) : (delete a.a["X-Client-Version"], delete a.g["X-Client-Version"]);
    }
    Ii.prototype.T = function() {
        return this.b;
    };
    function Si(a, b, c, d, e, f, g) {
        ue() || Je() ? a = q(a.u, a) : (Ni || (Ni = new D(function(h, m) {
            Ti(h, m);
        })), a = q(a.s, a));
        a(b, c, d, e, f, g);
    }
    Ii.prototype.u = function(a, b, c, d, e, f) {
        if (Je() && ("undefined" === typeof l.fetch || "undefined" === typeof l.Headers || "undefined" === typeof l.Request)) throw new t("operation-not-supported-in-this-environment", "fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");
        var g = new ai(this.f);
        if (f) {
            g.g = Math.max(0, f);
            var h = setTimeout(function() {
                g.dispatchEvent("timeout");
            }, f);
        }
        qd(g, "complete", function() {
            h && clearTimeout(h);
            var m = null;
            try {
                m = JSON.parse(oi(this)) || null;
            } catch (p) {
                m = null;
            }
            b && b(m);
        });
        wd(g, "ready", function() {
            h && clearTimeout(h);
            Xc(this);
        });
        wd(g, "timeout", function() {
            h && clearTimeout(h);
            Xc(this);
            b && b(null);
        });
        ei(g, a, c, d, e);
    };
    var Ui = new qb(rb, "https://apis.google.com/js/client.js?onload=%{onload}"), Vi = "__fcb" + Math.floor(1000000 * Math.random()).toString();
    function Ti(a, b) {
        if (((window.gapi || {
        }).client || {
        }).request) a();
        else {
            l[Vi] = function() {
                ((window.gapi || {
                }).client || {
                }).request ? a() : b(Error("CORS_UNSUPPORTED"));
            };
            var c = zb(Ui, {
                onload: Vi
            });
            wi(Bi(c), function() {
                b(Error("CORS_UNSUPPORTED"));
            });
        }
    }
    Ii.prototype.s = function(a, b, c, d, e) {
        var f = this;
        Ni.then(function() {
            window.gapi.client.setApiKey(f.c);
            var g = window.gapi.auth.getToken();
            window.gapi.auth.setToken(null);
            window.gapi.client.request({
                path: a,
                method: c,
                body: d,
                headers: e,
                authType: "none",
                callback: function(h) {
                    window.gapi.auth.setToken(g);
                    b && b(h);
                }
            });
        }).o(function(g) {
            b && b({
                error: {
                    message: g && g.message || "CORS_UNSUPPORTED"
                }
            });
        });
    };
    function Wi(a, b) {
        return new D(function(c, d) {
            "refresh_token" == b.grant_type && b.refresh_token || "authorization_code" == b.grant_type && b.code ? Si(a, a.l + "?key=" + encodeURIComponent(a.c), function(e) {
                e ? e.error ? d(Xi(e)) : e.access_token && e.refresh_token ? c(e) : d(new t("internal-error")) : d(new t("network-request-failed"));
            }, "POST", fe(b).toString(), a.g, a.m.get()) : d(new t("internal-error"));
        });
    }
    function Yi(a, b, c, d, e, f, g) {
        var h = J(b + c);
        I(h, "key", a.c);
        g && I(h, "cb", Date.now().toString());
        var m = "GET" == d;
        if (m) for(var p in e)e.hasOwnProperty(p) && I(h, p, e[p]);
        return new D(function(v, B) {
            Si(a, h.toString(), function(A) {
                A ? A.error ? B(Xi(A, f || {
                })) : v(A) : B(new t("network-request-failed"));
            }, d, m ? void 0 : ke(Ve(e)), a.a, a.v.get());
        });
    }
    function Zi(a) {
        a = a.email;
        if ("string" !== typeof a || !De.test(a)) throw new t("invalid-email");
    }
    function $i(a) {
        "email" in a && Zi(a);
    }
    function aj(a, b) {
        return O(a, bj, {
            identifier: b,
            continueUri: Se() ? re() : "http://localhost"
        }).then(function(c) {
            return c.signinMethods || [];
        });
    }
    function cj(a) {
        return O(a, dj, {
        }).then(function(b) {
            return b.authorizedDomains || [];
        });
    }
    function P(a) {
        if (!a[Dg]) {
            if (a.mfaPendingCredential) throw new t("multi-factor-auth-required", null, nb(a));
            throw new t("internal-error");
        }
    }
    function ej(a) {
        if (a.phoneNumber || a.temporaryProof) {
            if (!a.phoneNumber || !a.temporaryProof) throw new t("internal-error");
        } else {
            if (!a.sessionInfo) throw new t("missing-verification-id");
            if (!a.code) throw new t("missing-verification-code");
        }
    }
    Ii.prototype.Ab = function() {
        return O(this, fj, {
        });
    };
    Ii.prototype.Cb = function(a, b) {
        return O(this, gj, {
            idToken: a,
            email: b
        });
    };
    Ii.prototype.Db = function(a, b) {
        return O(this, ch, {
            idToken: a,
            password: b
        });
    };
    var hj = {
        displayName: "DISPLAY_NAME",
        photoUrl: "PHOTO_URL"
    };
    k = Ii.prototype;
    k.Eb = function(a, b) {
        var c = {
            idToken: a
        }, d = [];
        lb(hj, function(e, f) {
            var g = b[f];
            null === g ? d.push(e) : f in b && (c[f] = g);
        });
        d.length && (c.deleteAttribute = d);
        return O(this, gj, c);
    };
    k.wb = function(a, b) {
        a = {
            requestType: "PASSWORD_RESET",
            email: a
        };
        z(a, b);
        return O(this, ij, a);
    };
    k.xb = function(a, b) {
        a = {
            requestType: "EMAIL_SIGNIN",
            email: a
        };
        z(a, b);
        return O(this, jj, a);
    };
    k.vb = function(a, b) {
        a = {
            requestType: "VERIFY_EMAIL",
            idToken: a
        };
        z(a, b);
        return O(this, kj, a);
    };
    k.Fb = function(a, b, c) {
        a = {
            requestType: "VERIFY_AND_CHANGE_EMAIL",
            idToken: a,
            newEmail: b
        };
        z(a, c);
        return O(this, lj, a);
    };
    function oh(a, b) {
        return O(a, mj, b);
    }
    k.gb = function(a) {
        return O(this, nj, a);
    };
    function mh(a, b) {
        return O(a, oj, b).then(function(c) {
            return c.phoneSessionInfo.sessionInfo;
        });
    }
    function pj(a) {
        if (!a.phoneVerificationInfo) throw new t("internal-error");
        if (!a.phoneVerificationInfo.sessionInfo) throw new t("missing-verification-id");
        if (!a.phoneVerificationInfo.code) throw new t("missing-verification-code");
    }
    function nh(a, b) {
        return O(a, qj, b).then(function(c) {
            return c.phoneResponseInfo.sessionInfo;
        });
    }
    function rj(a, b, c) {
        return O(a, sj, {
            idToken: b,
            deleteProvider: c
        });
    }
    function tj(a) {
        if (!a.requestUri || !a.sessionId && !a.postBody && !a.pendingToken) throw new t("internal-error");
    }
    function uj(a, b) {
        b.oauthIdToken && b.providerId && 0 == b.providerId.indexOf("oidc.") && !b.pendingToken && (a.sessionId ? b.nonce = a.sessionId : a.postBody && (a = new Ud(a.postBody), je(a, "nonce") && (b.nonce = a.get("nonce"))));
        return b;
    }
    function vj(a) {
        var b = null;
        a.needConfirmation ? (a.code = "account-exists-with-different-credential", b = zh(a)) : "FEDERATED_USER_ID_ALREADY_LINKED" == a.errorMessage ? (a.code = "credential-already-in-use", b = zh(a)) : "EMAIL_EXISTS" == a.errorMessage ? (a.code = "email-already-in-use", b = zh(a)) : a.errorMessage && (b = wj(a.errorMessage));
        if (b) throw b;
        P(a);
    }
    function Fg(a, b) {
        b.returnIdpCredential = true;
        return O(a, xj, b);
    }
    function Hg(a, b) {
        b.returnIdpCredential = true;
        return O(a, yj, b);
    }
    function Ig(a, b) {
        b.returnIdpCredential = true;
        b.autoCreate = false;
        return O(a, zj, b);
    }
    function Aj(a) {
        if (!a.oobCode) throw new t("invalid-action-code");
    }
    k.ob = function(a, b) {
        return O(this, Bj, {
            oobCode: a,
            newPassword: b
        });
    };
    k.Sa = function(a) {
        return O(this, Cj, {
            oobCode: a
        });
    };
    k.kb = function(a) {
        return O(this, Dj, {
            oobCode: a
        });
    };
    var Dj = {
        endpoint: "setAccountInfo",
        A: Aj,
        Z: "email",
        B: true
    }, Cj = {
        endpoint: "resetPassword",
        A: Aj,
        G: function(a) {
            var b = a.requestType;
            if (!b || !a.email && "EMAIL_SIGNIN" != b && "VERIFY_AND_CHANGE_EMAIL" != b) throw new t("internal-error");
        },
        B: true
    }, Ej = {
        endpoint: "signupNewUser",
        A: function(a) {
            Zi(a);
            if (!a.password) throw new t("weak-password");
        },
        G: P,
        V: true,
        B: true
    }, bj = {
        endpoint: "createAuthUri",
        B: true
    }, Fj = {
        endpoint: "deleteAccount",
        O: [
            "idToken"
        ]
    }, sj = {
        endpoint: "setAccountInfo",
        O: [
            "idToken",
            "deleteProvider"
        ],
        A: function(a) {
            if (!Array.isArray(a.deleteProvider)) throw new t("internal-error");
        }
    }, $g = {
        endpoint: "emailLinkSignin",
        O: [
            "email",
            "oobCode"
        ],
        A: Zi,
        G: P,
        V: true,
        B: true
    }, bh = {
        endpoint: "emailLinkSignin",
        O: [
            "idToken",
            "email",
            "oobCode"
        ],
        A: Zi,
        G: P,
        V: true
    }, Gj = {
        endpoint: "accounts/mfaEnrollment:finalize",
        O: [
            "idToken",
            "phoneVerificationInfo"
        ],
        A: pj,
        G: P,
        B: true,
        Na: true
    }, Hj = {
        endpoint: "accounts/mfaSignIn:finalize",
        O: [
            "mfaPendingCredential",
            "phoneVerificationInfo"
        ],
        A: pj,
        G: P,
        B: true,
        Na: true
    }, Ij = {
        endpoint: "getAccountInfo"
    }, jj = {
        endpoint: "getOobConfirmationCode",
        O: [
            "requestType"
        ],
        A: function(a) {
            if ("EMAIL_SIGNIN" != a.requestType) throw new t("internal-error");
            Zi(a);
        },
        Z: "email",
        B: true
    }, kj = {
        endpoint: "getOobConfirmationCode",
        O: [
            "idToken",
            "requestType"
        ],
        A: function(a) {
            if ("VERIFY_EMAIL" != a.requestType) throw new t("internal-error");
        },
        Z: "email",
        B: true
    }, lj = {
        endpoint: "getOobConfirmationCode",
        O: [
            "idToken",
            "newEmail",
            "requestType"
        ],
        A: function(a) {
            if ("VERIFY_AND_CHANGE_EMAIL" != a.requestType) throw new t("internal-error");
        },
        Z: "email",
        B: true
    }, ij = {
        endpoint: "getOobConfirmationCode",
        O: [
            "requestType"
        ],
        A: function(a) {
            if ("PASSWORD_RESET" != a.requestType) throw new t("internal-error");
            Zi(a);
        },
        Z: "email",
        B: true
    }, dj = {
        mb: true,
        endpoint: "getProjectConfig",
        Vb: "GET"
    }, Jj = {
        mb: true,
        endpoint: "getRecaptchaParam",
        Vb: "GET",
        G: function(a) {
            if (!a.recaptchaSiteKey) throw new t("internal-error");
        }
    }, Bj = {
        endpoint: "resetPassword",
        A: Aj,
        Z: "email",
        B: true
    }, mj = {
        endpoint: "sendVerificationCode",
        O: [
            "phoneNumber",
            "recaptchaToken"
        ],
        Z: "sessionInfo",
        B: true
    }, gj = {
        endpoint: "setAccountInfo",
        O: [
            "idToken"
        ],
        A: $i,
        V: true
    }, ch = {
        endpoint: "setAccountInfo",
        O: [
            "idToken"
        ],
        A: function(a) {
            $i(a);
            if (!a.password) throw new t("weak-password");
        },
        G: P,
        V: true
    }, fj = {
        endpoint: "signupNewUser",
        G: P,
        V: true,
        B: true
    }, oj = {
        endpoint: "accounts/mfaEnrollment:start",
        O: [
            "idToken",
            "phoneEnrollmentInfo"
        ],
        A: function(a) {
            if (!a.phoneEnrollmentInfo) throw new t("internal-error");
            if (!a.phoneEnrollmentInfo.phoneNumber) throw new t("missing-phone-number");
            if (!a.phoneEnrollmentInfo.recaptchaToken) throw new t("missing-app-credential");
        },
        G: function(a) {
            if (!a.phoneSessionInfo || !a.phoneSessionInfo.sessionInfo) throw new t("internal-error");
        },
        B: true,
        Na: true
    }, qj = {
        endpoint: "accounts/mfaSignIn:start",
        O: [
            "mfaPendingCredential",
            "mfaEnrollmentId",
            "phoneSignInInfo"
        ],
        A: function(a) {
            if (!a.phoneSignInInfo || !a.phoneSignInInfo.recaptchaToken) throw new t("missing-app-credential");
        },
        G: function(a) {
            if (!a.phoneResponseInfo || !a.phoneResponseInfo.sessionInfo) throw new t("internal-error");
        },
        B: true,
        Na: true
    }, xj = {
        endpoint: "verifyAssertion",
        A: tj,
        Za: uj,
        G: vj,
        V: true,
        B: true
    }, zj = {
        endpoint: "verifyAssertion",
        A: tj,
        Za: uj,
        G: function(a) {
            if (a.errorMessage && "USER_NOT_FOUND" == a.errorMessage) throw new t("user-not-found");
            if (a.errorMessage) throw wj(a.errorMessage);
            P(a);
        },
        V: true,
        B: true
    }, yj = {
        endpoint: "verifyAssertion",
        A: function(a) {
            tj(a);
            if (!a.idToken) throw new t("internal-error");
        },
        Za: uj,
        G: vj,
        V: true
    }, Kj = {
        endpoint: "verifyCustomToken",
        A: function(a) {
            if (!a.token) throw new t("invalid-custom-token");
        },
        G: P,
        V: true,
        B: true
    }, ah = {
        endpoint: "verifyPassword",
        A: function(a) {
            Zi(a);
            if (!a.password) throw new t("wrong-password");
        },
        G: P,
        V: true,
        B: true
    }, nj = {
        endpoint: "verifyPhoneNumber",
        A: ej,
        G: P,
        B: true
    }, ih = {
        endpoint: "verifyPhoneNumber",
        A: function(a) {
            if (!a.idToken) throw new t("internal-error");
            ej(a);
        },
        G: function(a) {
            if (a.temporaryProof) throw a.code = "credential-already-in-use", zh(a);
            P(a);
        }
    }, jh = {
        Ib: {
            USER_NOT_FOUND: "user-not-found"
        },
        endpoint: "verifyPhoneNumber",
        A: ej,
        G: P,
        B: true
    }, Lj = {
        endpoint: "accounts/mfaEnrollment:withdraw",
        O: [
            "idToken",
            "mfaEnrollmentId"
        ],
        G: function(a) {
            if (!!a[Dg] ^ !!a.refreshToken) throw new t("internal-error");
        },
        B: true,
        Na: true
    };
    function O(a, b, c) {
        if (!mf(c, b.O)) return F(new t("internal-error"));
        var d = !!b.Na, e = b.Vb || "POST", f;
        return E(c).then(b.A).then(function() {
            b.V && (c.returnSecureToken = true);
            b.B && a.b && "undefined" === typeof c.tenantId && (c.tenantId = a.b);
            return d ? Yi(a, a.i, b.endpoint, e, c, b.Ib, b.mb || false) : Yi(a, a.h, b.endpoint, e, c, b.Ib, b.mb || false);
        }).then(function(g) {
            f = g;
            return b.Za ? b.Za(c, f) : f;
        }).then(b.G).then(function() {
            if (!b.Z) return f;
            if (!(b.Z in f)) throw new t("internal-error");
            return f[b.Z];
        });
    }
    function wj(a) {
        return Xi({
            error: {
                errors: [
                    {
                        message: a
                    }
                ],
                code: 400,
                message: a
            }
        });
    }
    function Xi(a, b) {
        var c = (a.error && a.error.errors && a.error.errors[0] || {
        }).reason || "";
        var d = {
            keyInvalid: "invalid-api-key",
            ipRefererBlocked: "app-not-authorized"
        };
        if (c = d[c] ? new t(d[c]) : null) return c;
        c = a.error && a.error.message || "";
        d = {
            INVALID_CUSTOM_TOKEN: "invalid-custom-token",
            CREDENTIAL_MISMATCH: "custom-token-mismatch",
            MISSING_CUSTOM_TOKEN: "internal-error",
            INVALID_IDENTIFIER: "invalid-email",
            MISSING_CONTINUE_URI: "internal-error",
            INVALID_EMAIL: "invalid-email",
            INVALID_PASSWORD: "wrong-password",
            USER_DISABLED: "user-disabled",
            MISSING_PASSWORD: "internal-error",
            EMAIL_EXISTS: "email-already-in-use",
            PASSWORD_LOGIN_DISABLED: "operation-not-allowed",
            INVALID_IDP_RESPONSE: "invalid-credential",
            INVALID_PENDING_TOKEN: "invalid-credential",
            FEDERATED_USER_ID_ALREADY_LINKED: "credential-already-in-use",
            MISSING_OR_INVALID_NONCE: "missing-or-invalid-nonce",
            INVALID_MESSAGE_PAYLOAD: "invalid-message-payload",
            INVALID_RECIPIENT_EMAIL: "invalid-recipient-email",
            INVALID_SENDER: "invalid-sender",
            EMAIL_NOT_FOUND: "user-not-found",
            RESET_PASSWORD_EXCEED_LIMIT: "too-many-requests",
            EXPIRED_OOB_CODE: "expired-action-code",
            INVALID_OOB_CODE: "invalid-action-code",
            MISSING_OOB_CODE: "internal-error",
            INVALID_PROVIDER_ID: "invalid-provider-id",
            CREDENTIAL_TOO_OLD_LOGIN_AGAIN: "requires-recent-login",
            INVALID_ID_TOKEN: "invalid-user-token",
            TOKEN_EXPIRED: "user-token-expired",
            USER_NOT_FOUND: "user-token-expired",
            CORS_UNSUPPORTED: "cors-unsupported",
            DYNAMIC_LINK_NOT_ACTIVATED: "dynamic-link-not-activated",
            INVALID_APP_ID: "invalid-app-id",
            TOO_MANY_ATTEMPTS_TRY_LATER: "too-many-requests",
            WEAK_PASSWORD: "weak-password",
            OPERATION_NOT_ALLOWED: "operation-not-allowed",
            USER_CANCELLED: "user-cancelled",
            CAPTCHA_CHECK_FAILED: "captcha-check-failed",
            INVALID_APP_CREDENTIAL: "invalid-app-credential",
            INVALID_CODE: "invalid-verification-code",
            INVALID_PHONE_NUMBER: "invalid-phone-number",
            INVALID_SESSION_INFO: "invalid-verification-id",
            INVALID_TEMPORARY_PROOF: "invalid-credential",
            MISSING_APP_CREDENTIAL: "missing-app-credential",
            MISSING_CODE: "missing-verification-code",
            MISSING_PHONE_NUMBER: "missing-phone-number",
            MISSING_SESSION_INFO: "missing-verification-id",
            QUOTA_EXCEEDED: "quota-exceeded",
            SESSION_EXPIRED: "code-expired",
            REJECTED_CREDENTIAL: "rejected-credential",
            INVALID_CONTINUE_URI: "invalid-continue-uri",
            MISSING_ANDROID_PACKAGE_NAME: "missing-android-pkg-name",
            MISSING_IOS_BUNDLE_ID: "missing-ios-bundle-id",
            UNAUTHORIZED_DOMAIN: "unauthorized-continue-uri",
            INVALID_DYNAMIC_LINK_DOMAIN: "invalid-dynamic-link-domain",
            INVALID_OAUTH_CLIENT_ID: "invalid-oauth-client-id",
            INVALID_CERT_HASH: "invalid-cert-hash",
            UNSUPPORTED_TENANT_OPERATION: "unsupported-tenant-operation",
            INVALID_TENANT_ID: "invalid-tenant-id",
            TENANT_ID_MISMATCH: "tenant-id-mismatch",
            ADMIN_ONLY_OPERATION: "admin-restricted-operation",
            INVALID_MFA_PENDING_CREDENTIAL: "invalid-multi-factor-session",
            MFA_ENROLLMENT_NOT_FOUND: "multi-factor-info-not-found",
            MISSING_MFA_PENDING_CREDENTIAL: "missing-multi-factor-session",
            MISSING_MFA_ENROLLMENT_ID: "missing-multi-factor-info",
            EMAIL_CHANGE_NEEDS_VERIFICATION: "email-change-needs-verification",
            SECOND_FACTOR_EXISTS: "second-factor-already-in-use",
            SECOND_FACTOR_LIMIT_EXCEEDED: "maximum-second-factor-count-exceeded",
            UNSUPPORTED_FIRST_FACTOR: "unsupported-first-factor",
            UNVERIFIED_EMAIL: "unverified-email"
        };
        z(d, b || {
        });
        b = (b = c.match(/^[^\s]+\s*:\s*([\s\S]*)$/)) && 1 < b.length ? b[1] : void 0;
        for(var e in d)if (0 === c.indexOf(e)) return new t(d[e], b);
        !b && a && (b = Ue(a));
        return new t("internal-error", b);
    }
    function Mj(a) {
        this.b = a;
        this.a = null;
        this.sb = Nj(this);
    }
    function Nj(a) {
        return Oj().then(function() {
            return new D(function(b, c) {
                L("gapi.iframes.getContext")().open({
                    where: document.body,
                    url: a.b,
                    messageHandlersFilter: L("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),
                    attributes: {
                        style: {
                            position: "absolute",
                            top: "-100px",
                            width: "1px",
                            height: "1px"
                        }
                    },
                    dontclear: true
                }, function(d) {
                    function e() {
                        clearTimeout(f);
                        b();
                    }
                    a.a = d;
                    a.a.restyle({
                        setHideOnLeave: false
                    });
                    var f = setTimeout(function() {
                        c(Error("Network Error"));
                    }, Pj.get());
                    d.ping(e).then(e, function() {
                        c(Error("Network Error"));
                    });
                });
            });
        });
    }
    function Qj(a, b) {
        return a.sb.then(function() {
            return new D(function(c) {
                a.a.send(b.type, b, c, L("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));
            });
        });
    }
    function Rj(a, b) {
        a.sb.then(function() {
            a.a.register("authEvent", b, L("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));
        });
    }
    var Sj = new qb(rb, "https://apis.google.com/js/api.js?onload=%{onload}"), Tj = new Ze(30000, 60000), Pj = new Ze(5000, 15000), Uj = null;
    function Oj() {
        return Uj ? Uj : Uj = new D(function(a, b) {
            function c() {
                Ye();
                L("gapi.load")("gapi.iframes", {
                    callback: a,
                    ontimeout: function() {
                        Ye();
                        b(Error("Network Error"));
                    },
                    timeout: Tj.get()
                });
            }
            if (L("gapi.iframes.Iframe")) a();
            else if (L("gapi.load")) c();
            else {
                var d = "__iframefcb" + Math.floor(1000000 * Math.random()).toString();
                l[d] = function() {
                    L("gapi.load") ? c() : b(Error("Network Error"));
                };
                d = zb(Sj, {
                    onload: d
                });
                E(Bi(d)).o(function() {
                    b(Error("Network Error"));
                });
            }
        }).o(function(a) {
            Uj = null;
            throw a;
        });
    }
    function Vj(a, b, c, d) {
        this.l = a;
        this.h = b;
        this.i = c;
        this.g = d;
        this.f = null;
        this.g ? (a = J(this.g.url), a = ce(a.c, a.a, a.g, "/emulator/auth/iframe")) : a = ce("https", this.l, null, "/__/auth/iframe");
        this.a = a;
        I(this.a, "apiKey", this.h);
        I(this.a, "appName", this.i);
        this.b = null;
        this.c = [];
    }
    Vj.prototype.toString = function() {
        this.f ? I(this.a, "v", this.f) : ie(this.a.b, "v");
        this.b ? I(this.a, "eid", this.b) : ie(this.a.b, "eid");
        this.c.length ? I(this.a, "fw", this.c.join(",")) : ie(this.a.b, "fw");
        return this.a.toString();
    };
    function Wj(a, b, c, d, e, f) {
        this.u = a;
        this.s = b;
        this.c = c;
        this.m = d;
        this.v = f;
        this.i = this.g = this.l = null;
        this.a = e;
        this.h = this.f = null;
    }
    Wj.prototype.zb = function(a) {
        this.h = a;
        return this;
    };
    Wj.prototype.toString = function() {
        if (this.v) {
            var a = J(this.v.url);
            a = ce(a.c, a.a, a.g, "/emulator/auth/handler");
        } else a = ce("https", this.u, null, "/__/auth/handler");
        I(a, "apiKey", this.s);
        I(a, "appName", this.c);
        I(a, "authType", this.m);
        if (this.a.isOAuthProvider) {
            var b = this.a;
            try {
                var c = _appDefault.default.app(this.c).auth().la();
            } catch (h) {
                c = null;
            }
            b.pb = c;
            I(a, "providerId", this.a.providerId);
            c = this.a;
            b = Ve(c.Jb);
            for(var d in b)b[d] = b[d].toString();
            d = c.Qc;
            b = nb(b);
            for(var e = 0; e < d.length; e++){
                var f = d[e];
                f in b && delete b[f];
            }
            c.qb && c.pb && !b[c.qb] && (b[c.qb] = c.pb);
            mb(b) || I(a, "customParameters", Ue(b));
        }
        "function" === typeof this.a.Rb && (c = this.a.Rb(), c.length && I(a, "scopes", c.join(",")));
        this.l ? I(a, "redirectUrl", this.l) : ie(a.b, "redirectUrl");
        this.g ? I(a, "eventId", this.g) : ie(a.b, "eventId");
        this.i ? I(a, "v", this.i) : ie(a.b, "v");
        if (this.b) for(var g in this.b)this.b.hasOwnProperty(g) && !be(a, g) && I(a, g, this.b[g]);
        this.h ? I(a, "tid", this.h) : ie(a.b, "tid");
        this.f ? I(a, "eid", this.f) : ie(a.b, "eid");
        g = Xj(this.c);
        g.length && I(a, "fw", g.join(","));
        return a.toString();
    };
    function Xj(a) {
        try {
            return _appDefault.default.app(a).auth().Ga();
        } catch (b) {
            return [];
        }
    }
    function Yj(a, b, c, d, e, f) {
        this.s = a;
        this.g = b;
        this.b = c;
        this.f = f;
        this.c = d || null;
        this.i = e || null;
        this.l = this.u = this.C = null;
        this.h = [];
        this.m = this.a = null;
    }
    function Zj(a) {
        var b = re();
        return cj(a).then(function(c) {
            a: {
                var d = J(b), e = d.c;
                d = d.a;
                for(var f = 0; f < c.length; f++){
                    var g = c[f];
                    var h = d;
                    var m = e;
                    0 == g.indexOf("chrome-extension://") ? h = J(g).a == h && "chrome-extension" == m : "http" != m && "https" != m ? h = false : Ce.test(g) ? h = h == g : (g = g.split(".").join("\\."), h = new RegExp("^(.+\\." + g + "|" + g + ")$", "i").test(h));
                    if (h) {
                        c = true;
                        break a;
                    }
                }
                c = false;
            }
            if (!c) throw new xh(re());
        });
    }
    function ak(a) {
        if (a.m) return a.m;
        a.m = Ee().then(function() {
            if (!a.u) {
                var b = a.c, c = a.i, d = Xj(a.b), e = new Vj(a.s, a.g, a.b, a.f);
                e.f = b;
                e.b = c;
                e.c = Za(d || []);
                a.u = e.toString();
            }
            a.v = new Mj(a.u);
            bk(a);
        });
        return a.m;
    }
    k = Yj.prototype;
    k.Pb = function(a, b, c) {
        var d = new t("popup-closed-by-user"), e = new t("web-storage-unsupported"), f = this, g = false;
        return this.ma().then(function() {
            ck(f).then(function(h) {
                h || (a && ye(a), b(e), g = true);
            });
        }).o(function() {
        }).then(function() {
            if (!g) return Be(a);
        }).then(function() {
            if (!g) return Fd(c).then(function() {
                b(d);
            });
        });
    };
    k.Yb = function() {
        var a = K();
        return !Te(a) && !Xe(a);
    };
    k.Ub = function() {
        return false;
    };
    k.Nb = function(a, b, c, d, e, f, g, h) {
        if (!a) return F(new t("popup-blocked"));
        if (g && !Te()) return this.ma().o(function(p) {
            ye(a);
            e(p);
        }), d(), E();
        this.a || (this.a = Zj(dk(this)));
        var m = this;
        return this.a.then(function() {
            var p = m.ma().o(function(v) {
                ye(a);
                e(v);
                throw v;
            });
            d();
            return p;
        }).then(function() {
            rh(c);
            if (!g) {
                var p = ek(m.s, m.g, m.b, b, c, null, f, m.c, void 0, m.i, h, m.f);
                se(p, a);
            }
        }).o(function(p) {
            "auth/network-request-failed" == p.code && (m.a = null);
            throw p;
        });
    };
    function dk(a) {
        a.l || (a.C = a.c ? Oe(a.c, Xj(a.b)) : null, a.l = new Ii(a.g, Ca(a.i), a.C), a.f && Pi(a.l, a.f));
        return a.l;
    }
    k.Ob = function(a, b, c, d) {
        this.a || (this.a = Zj(dk(this)));
        var e = this;
        return this.a.then(function() {
            rh(b);
            var f = ek(e.s, e.g, e.b, a, b, re(), c, e.c, void 0, e.i, d, e.f);
            se(f);
        }).o(function(f) {
            "auth/network-request-failed" == f.code && (e.a = null);
            throw f;
        });
    };
    k.ma = function() {
        var a = this;
        return ak(this).then(function() {
            return a.v.sb;
        }).o(function() {
            a.a = null;
            throw new t("network-request-failed");
        });
    };
    k.ac = function() {
        return true;
    };
    function ek(a, b, c, d, e, f, g, h, m, p, v, B) {
        a = new Wj(a, b, c, d, e, B);
        a.l = f;
        a.g = g;
        a.i = h;
        a.b = nb(m || null);
        a.f = p;
        return a.zb(v).toString();
    }
    function bk(a) {
        if (!a.v) throw Error("IfcHandler must be initialized!");
        Rj(a.v, function(b) {
            var c = {
            };
            if (b && b.authEvent) {
                var d = false;
                b = th(b.authEvent);
                for(c = 0; c < a.h.length; c++)d = a.h[c](b) || d;
                c = {
                };
                c.status = d ? "ACK" : "ERROR";
                return E(c);
            }
            c.status = "ERROR";
            return E(c);
        });
    }
    function ck(a) {
        var b = {
            type: "webStorageSupport"
        };
        return ak(a).then(function() {
            return Qj(a.v, b);
        }).then(function(c) {
            if (c && c.length && "undefined" !== typeof c[0].webStorageSupport) return c[0].webStorageSupport;
            throw Error();
        });
    }
    k.Ea = function(a) {
        this.h.push(a);
    };
    k.Ta = function(a) {
        Xa(this.h, function(b) {
            return b == a;
        });
    };
    function fk(a) {
        this.a = a || _appDefault.default.INTERNAL.reactNative && _appDefault.default.INTERNAL.reactNative.AsyncStorage;
        if (!this.a) throw new t("internal-error", "The React Native compatibility library was not found.");
        this.type = "asyncStorage";
    }
    k = fk.prototype;
    k.get = function(a) {
        return E(this.a.getItem(a)).then(function(b) {
            return b && We(b);
        });
    };
    k.set = function(a, b) {
        return E(this.a.setItem(a, Ue(b)));
    };
    k.U = function(a) {
        return E(this.a.removeItem(a));
    };
    k.ca = function() {
    };
    k.ia = function() {
    };
    function gk(a) {
        this.b = a;
        this.a = {
        };
        this.f = q(this.c, this);
    }
    var hk = [];
    function ik() {
        var a = Je() ? self : null;
        w(hk, function(c) {
            c.b == a && (b = c);
        });
        if (!b) {
            var b = new gk(a);
            hk.push(b);
        }
        return b;
    }
    gk.prototype.c = function(a) {
        var b = a.data.eventType, c = a.data.eventId, d = this.a[b];
        if (d && 0 < d.length) {
            a.ports[0].postMessage({
                status: "ack",
                eventId: c,
                eventType: b,
                response: null
            });
            var e = [];
            w(d, function(f) {
                e.push(E().then(function() {
                    return f(a.origin, a.data.data);
                }));
            });
            Jc(e).then(function(f) {
                var g = [];
                w(f, function(h) {
                    g.push({
                        fulfilled: h.Qb,
                        value: h.value,
                        reason: h.reason ? h.reason.message : void 0
                    });
                });
                w(g, function(h) {
                    for(var m in h)"undefined" === typeof h[m] && delete h[m];
                });
                a.ports[0].postMessage({
                    status: "done",
                    eventId: c,
                    eventType: b,
                    response: g
                });
            });
        }
    };
    function jk(a, b, c) {
        mb(a.a) && a.b.addEventListener("message", a.f);
        "undefined" === typeof a.a[b] && (a.a[b] = []);
        a.a[b].push(c);
    }
    function kk(a) {
        this.a = a;
    }
    kk.prototype.postMessage = function(a, b) {
        this.a.postMessage(a, b);
    };
    function lk(a) {
        this.c = a;
        this.b = false;
        this.a = [];
    }
    function mk(a, b, c, d) {
        var e, f = c || {
        }, g, h, m, p = null;
        if (a.b) return F(Error("connection_unavailable"));
        var v = d ? 800 : 50, B = "undefined" !== typeof MessageChannel ? new MessageChannel : null;
        return new D(function(A, Q) {
            B ? (e = Math.floor(Math.random() * Math.pow(10, 20)).toString(), B.port1.start(), h = setTimeout(function() {
                Q(Error("unsupported_event"));
            }, v), g = function(ya) {
                ya.data.eventId === e && ("ack" === ya.data.status ? (clearTimeout(h), m = setTimeout(function() {
                    Q(Error("timeout"));
                }, 3000)) : "done" === ya.data.status ? (clearTimeout(m), "undefined" !== typeof ya.data.response ? A(ya.data.response) : Q(Error("unknown_error"))) : (clearTimeout(h), clearTimeout(m), Q(Error("invalid_response"))));
            }, p = {
                messageChannel: B,
                onMessage: g
            }, a.a.push(p), B.port1.addEventListener("message", g), a.c.postMessage({
                eventType: b,
                eventId: e,
                data: f
            }, [
                B.port2
            ])) : Q(Error("connection_unavailable"));
        }).then(function(A) {
            nk(a, p);
            return A;
        }).o(function(A) {
            nk(a, p);
            throw A;
        });
    }
    function nk(a, b) {
        if (b) {
            var c = b.messageChannel, d = b.onMessage;
            c && (c.port1.removeEventListener("message", d), c.port1.close());
            Xa(a.a, function(e) {
                return e == b;
            });
        }
    }
    lk.prototype.close = function() {
        for(; 0 < this.a.length;)nk(this, this.a[0]);
        this.b = true;
    };
    function ok() {
        if (!pk()) throw new t("web-storage-unsupported");
        this.c = {
        };
        this.a = [];
        this.b = 0;
        this.m = l.indexedDB;
        this.type = "indexedDB";
        this.g = this.v = this.f = this.l = null;
        this.s = false;
        this.h = null;
        var a = this;
        Je() && self ? (this.v = ik(), jk(this.v, "keyChanged", function(b, c) {
            return qk(a).then(function(d) {
                0 < d.length && w(a.a, function(e) {
                    e(d);
                });
                return {
                    keyProcessed: Va(d, c.key)
                };
            });
        }), jk(this.v, "ping", function() {
            return E([
                "keyChanged"
            ]);
        })) : ef().then(function(b) {
            if (a.h = b) a.g = new lk(new kk(b)), mk(a.g, "ping", null, true).then(function(c) {
                c[0].fulfilled && Va(c[0].value, "keyChanged") && (a.s = true);
            }).o(function() {
            });
        });
    }
    var rk;
    function sk(a) {
        return new D(function(b, c) {
            var d = a.m.deleteDatabase("firebaseLocalStorageDb");
            d.onsuccess = function() {
                b();
            };
            d.onerror = function(e) {
                c(Error(e.target.error));
            };
        });
    }
    function tk(a) {
        return new D(function(b, c) {
            var d = a.m.open("firebaseLocalStorageDb", 1);
            d.onerror = function(e) {
                try {
                    e.preventDefault();
                } catch (f) {
                }
                c(Error(e.target.error));
            };
            d.onupgradeneeded = function(e) {
                e = e.target.result;
                try {
                    e.createObjectStore("firebaseLocalStorage", {
                        keyPath: "fbase_key"
                    });
                } catch (f) {
                    c(f);
                }
            };
            d.onsuccess = function(e) {
                e = e.target.result;
                e.objectStoreNames.contains("firebaseLocalStorage") ? b(e) : sk(a).then(function() {
                    return tk(a);
                }).then(function(f) {
                    b(f);
                }).o(function(f) {
                    c(f);
                });
            };
        });
    }
    function uk(a) {
        a.i || (a.i = tk(a));
        return a.i;
    }
    function vk(a, b) {
        function c(e, f) {
            uk(a).then(b).then(e).o(function(g) {
                if (3 < ++d) f(g);
                else return uk(a).then(function(h) {
                    h.close();
                    a.i = void 0;
                    return c(e, f);
                }).o(function(h) {
                    f(h);
                });
            });
        }
        var d = 0;
        return new D(c);
    }
    function pk() {
        try {
            return !!l.indexedDB;
        } catch (a) {
            return false;
        }
    }
    function wk(a) {
        return a.objectStore("firebaseLocalStorage");
    }
    function xk(a, b) {
        return a.transaction([
            "firebaseLocalStorage"
        ], b ? "readwrite" : "readonly");
    }
    function yk(a) {
        return new D(function(b, c) {
            a.onsuccess = function(d) {
                d && d.target ? b(d.target.result) : b();
            };
            a.onerror = function(d) {
                c(d.target.error);
            };
        });
    }
    k = ok.prototype;
    k.set = function(a, b) {
        var c = this, d = false;
        return vk(this, function(e) {
            e = wk(xk(e, true));
            return yk(e.get(a));
        }).then(function(e) {
            return vk(c, function(f) {
                f = wk(xk(f, true));
                if (e) return e.value = b, yk(f.put(e));
                c.b++;
                d = true;
                var g = {
                };
                g.fbase_key = a;
                g.value = b;
                return yk(f.add(g));
            });
        }).then(function() {
            c.c[a] = b;
            return zk(c, a);
        }).oa(function() {
            d && c.b--;
        });
    };
    function zk(a, b) {
        return a.g && a.h && df() === a.h ? mk(a.g, "keyChanged", {
            key: b
        }, a.s).then(function() {
        }).o(function() {
        }) : E();
    }
    k.get = function(a) {
        return vk(this, function(b) {
            return yk(wk(xk(b, false)).get(a));
        }).then(function(b) {
            return b && b.value;
        });
    };
    k.U = function(a) {
        var b = this, c = false;
        return vk(this, function(d) {
            c = true;
            b.b++;
            return yk(wk(xk(d, true))["delete"](a));
        }).then(function() {
            delete b.c[a];
            return zk(b, a);
        }).oa(function() {
            c && b.b--;
        });
    };
    function qk(a) {
        return uk(a).then(function(b) {
            var c = wk(xk(b, false));
            return c.getAll ? yk(c.getAll()) : new D(function(d, e) {
                var f = [], g = c.openCursor();
                g.onsuccess = function(h) {
                    (h = h.target.result) ? (f.push(h.value), h["continue"]()) : d(f);
                };
                g.onerror = function(h) {
                    e(h.target.error);
                };
            });
        }).then(function(b) {
            var c = {
            }, d = [];
            if (0 == a.b) {
                for(d = 0; d < b.length; d++)c[b[d].fbase_key] = b[d].value;
                d = te(a.c, c);
                a.c = c;
            }
            return d;
        });
    }
    k.ca = function(a) {
        0 == this.a.length && Ak(this);
        this.a.push(a);
    };
    k.ia = function(a) {
        Xa(this.a, function(b) {
            return b == a;
        });
        0 == this.a.length && Bk(this);
    };
    function Ak(a) {
        function b() {
            a.f = setTimeout(function() {
                a.l = qk(a).then(function(c) {
                    0 < c.length && w(a.a, function(d) {
                        d(c);
                    });
                }).then(function() {
                    b();
                }).o(function(c) {
                    "STOP_EVENT" != c.message && b();
                });
            }, 800);
        }
        Bk(a);
        b();
    }
    function Bk(a) {
        a.l && a.l.cancel("STOP_EVENT");
        a.f && (clearTimeout(a.f), a.f = null);
    }
    function Ck(a) {
        var b = this, c = null;
        this.a = [];
        this.type = "indexedDB";
        this.c = a;
        this.b = E().then(function() {
            if (pk()) {
                var d = Qe(), e = "__sak" + d;
                rk || (rk = new ok);
                c = rk;
                return c.set(e, d).then(function() {
                    return c.get(e);
                }).then(function(f) {
                    if (f !== d) throw Error("indexedDB not supported!");
                    return c.U(e);
                }).then(function() {
                    return c;
                }).o(function() {
                    return b.c;
                });
            }
            return b.c;
        }).then(function(d) {
            b.type = d.type;
            d.ca(function(e) {
                w(b.a, function(f) {
                    f(e);
                });
            });
            return d;
        });
    }
    k = Ck.prototype;
    k.get = function(a) {
        return this.b.then(function(b) {
            return b.get(a);
        });
    };
    k.set = function(a, b) {
        return this.b.then(function(c) {
            return c.set(a, b);
        });
    };
    k.U = function(a) {
        return this.b.then(function(b) {
            return b.U(a);
        });
    };
    k.ca = function(a) {
        this.a.push(a);
    };
    k.ia = function(a) {
        Xa(this.a, function(b) {
            return b == a;
        });
    };
    function Dk() {
        this.a = {
        };
        this.type = "inMemory";
    }
    k = Dk.prototype;
    k.get = function(a) {
        return E(this.a[a]);
    };
    k.set = function(a, b) {
        this.a[a] = b;
        return E();
    };
    k.U = function(a) {
        delete this.a[a];
        return E();
    };
    k.ca = function() {
    };
    k.ia = function() {
    };
    function Ek() {
        if (!Fk()) {
            if ("Node" == Ke()) throw new t("internal-error", "The LocalStorage compatibility library was not found.");
            throw new t("web-storage-unsupported");
        }
        this.a = Gk() || _appDefault.default.INTERNAL.node.localStorage;
        this.type = "localStorage";
    }
    function Gk() {
        try {
            var a = l.localStorage, b = Qe();
            a && (a.setItem(b, "1"), a.removeItem(b));
            return a;
        } catch (c) {
            return null;
        }
    }
    function Fk() {
        var a = "Node" == Ke();
        a = Gk() || a && _appDefault.default.INTERNAL.node && _appDefault.default.INTERNAL.node.localStorage;
        if (!a) return false;
        try {
            return a.setItem("__sak", "1"), a.removeItem("__sak"), true;
        } catch (b) {
            return false;
        }
    }
    k = Ek.prototype;
    k.get = function(a) {
        var b = this;
        return E().then(function() {
            var c = b.a.getItem(a);
            return We(c);
        });
    };
    k.set = function(a, b) {
        var c = this;
        return E().then(function() {
            var d = Ue(b);
            null === d ? c.U(a) : c.a.setItem(a, d);
        });
    };
    k.U = function(a) {
        var b = this;
        return E().then(function() {
            b.a.removeItem(a);
        });
    };
    k.ca = function(a) {
        l.window && nd(l.window, "storage", a);
    };
    k.ia = function(a) {
        l.window && xd(l.window, "storage", a);
    };
    function Hk() {
        this.type = "nullStorage";
    }
    k = Hk.prototype;
    k.get = function() {
        return E(null);
    };
    k.set = function() {
        return E();
    };
    k.U = function() {
        return E();
    };
    k.ca = function() {
    };
    k.ia = function() {
    };
    function Ik() {
        if (!Jk()) {
            if ("Node" == Ke()) throw new t("internal-error", "The SessionStorage compatibility library was not found.");
            throw new t("web-storage-unsupported");
        }
        this.a = Kk() || _appDefault.default.INTERNAL.node.sessionStorage;
        this.type = "sessionStorage";
    }
    function Kk() {
        try {
            var a = l.sessionStorage, b = Qe();
            a && (a.setItem(b, "1"), a.removeItem(b));
            return a;
        } catch (c) {
            return null;
        }
    }
    function Jk() {
        var a = "Node" == Ke();
        a = Kk() || a && _appDefault.default.INTERNAL.node && _appDefault.default.INTERNAL.node.sessionStorage;
        if (!a) return false;
        try {
            return a.setItem("__sak", "1"), a.removeItem("__sak"), true;
        } catch (b) {
            return false;
        }
    }
    k = Ik.prototype;
    k.get = function(a) {
        var b = this;
        return E().then(function() {
            var c = b.a.getItem(a);
            return We(c);
        });
    };
    k.set = function(a, b) {
        var c = this;
        return E().then(function() {
            var d = Ue(b);
            null === d ? c.U(a) : c.a.setItem(a, d);
        });
    };
    k.U = function(a) {
        var b = this;
        return E().then(function() {
            b.a.removeItem(a);
        });
    };
    k.ca = function() {
    };
    k.ia = function() {
    };
    function Lk() {
        var a = {
        };
        a.Browser = Mk;
        a.Node = Nk;
        a.ReactNative = Ok;
        a.Worker = Pk;
        this.a = a[Ke()];
    }
    var Qk, Mk = {
        F: Ek,
        cb: Ik
    }, Nk = {
        F: Ek,
        cb: Ik
    }, Ok = {
        F: fk,
        cb: Hk
    }, Pk = {
        F: Ek,
        cb: Hk
    };
    var Rk = {
        rd: "local",
        NONE: "none",
        td: "session"
    };
    function Sk(a) {
        var b = new t("invalid-persistence-type"), c = new t("unsupported-persistence-type");
        a: {
            for(d in Rk)if (Rk[d] == a) {
                var d = true;
                break a;
            }
            d = false;
        }
        if (!d || "string" !== typeof a) throw b;
        switch(Ke()){
            case "ReactNative":
                if ("session" === a) throw c;
                break;
            case "Node":
                if ("none" !== a) throw c;
                break;
            case "Worker":
                if ("session" === a || !pk() && "none" !== a) throw c;
                break;
            default:
                if (!Pe() && "none" !== a) throw c;
        }
    }
    function Tk() {
        var a = !Xe(K()) && Ie() ? true : false, b = Te(), c = Pe();
        this.m = a;
        this.h = b;
        this.l = c;
        this.a = {
        };
        Qk || (Qk = new Lk);
        a = Qk;
        try {
            this.g = !qe() && cf() || !l.indexedDB ? new a.a.F : new Ck(Je() ? new Dk : new a.a.F);
        } catch (d) {
            this.g = new Dk, this.h = true;
        }
        try {
            this.i = new a.a.cb;
        } catch (d) {
            this.i = new Dk;
        }
        this.v = new Dk;
        this.f = q(this.Zb, this);
        this.b = {
        };
    }
    var Uk;
    function Vk() {
        Uk || (Uk = new Tk);
        return Uk;
    }
    function Wk(a, b) {
        switch(b){
            case "session":
                return a.i;
            case "none":
                return a.v;
            default:
                return a.g;
        }
    }
    function Xk(a, b) {
        return "firebase:" + a.name + (b ? ":" + b : "");
    }
    function Yk(a, b, c) {
        var d = Xk(b, c), e = Wk(a, b.F);
        return a.get(b, c).then(function(f) {
            var g = null;
            try {
                g = We(l.localStorage.getItem(d));
            } catch (h) {
            }
            if (g && !f) return l.localStorage.removeItem(d), a.set(b, g, c);
            g && f && "localStorage" != e.type && l.localStorage.removeItem(d);
        });
    }
    k = Tk.prototype;
    k.get = function(a, b) {
        return Wk(this, a.F).get(Xk(a, b));
    };
    function Zk(a, b, c) {
        c = Xk(b, c);
        "local" == b.F && (a.b[c] = null);
        return Wk(a, b.F).U(c);
    }
    k.set = function(a, b, c) {
        var d = Xk(a, c), e = this, f = Wk(this, a.F);
        return f.set(d, b).then(function() {
            return f.get(d);
        }).then(function(g) {
            "local" == a.F && (e.b[d] = g);
        });
    };
    k.addListener = function(a, b, c) {
        a = Xk(a, b);
        this.l && (this.b[a] = l.localStorage.getItem(a));
        mb(this.a) && (Wk(this, "local").ca(this.f), this.h || (qe() || !cf()) && l.indexedDB || !this.l || $k(this));
        this.a[a] || (this.a[a] = []);
        this.a[a].push(c);
    };
    k.removeListener = function(a, b, c) {
        a = Xk(a, b);
        this.a[a] && (Xa(this.a[a], function(d) {
            return d == c;
        }), 0 == this.a[a].length && delete this.a[a]);
        mb(this.a) && (Wk(this, "local").ia(this.f), al(this));
    };
    function $k(a) {
        al(a);
        a.c = setInterval(function() {
            for(var b in a.a){
                var c = l.localStorage.getItem(b), d = a.b[b];
                c != d && (a.b[b] = c, c = new bd({
                    type: "storage",
                    key: b,
                    target: window,
                    oldValue: d,
                    newValue: c,
                    a: true
                }), a.Zb(c));
            }
        }, 1000);
    }
    function al(a) {
        a.c && (clearInterval(a.c), a.c = null);
    }
    k.Zb = function(a) {
        if (a && a.g) {
            var b = a.a.key;
            if (null == b) for(var c in this.a){
                var d = this.b[c];
                "undefined" === typeof d && (d = null);
                var e = l.localStorage.getItem(c);
                e !== d && (this.b[c] = e, this.nb(c));
            }
            else if (0 == b.indexOf("firebase:") && this.a[b]) {
                "undefined" !== typeof a.a.a ? Wk(this, "local").ia(this.f) : al(this);
                if (this.m) {
                    if (c = l.localStorage.getItem(b), d = a.a.newValue, d !== c) null !== d ? l.localStorage.setItem(b, d) : l.localStorage.removeItem(b);
                    else if (this.b[b] === d && "undefined" === typeof a.a.a) return;
                }
                var f = this;
                c = function() {
                    if ("undefined" !== typeof a.a.a || f.b[b] !== l.localStorage.getItem(b)) f.b[b] = l.localStorage.getItem(b), f.nb(b);
                };
                Wb && ic && 10 == ic && l.localStorage.getItem(b) !== a.a.newValue && a.a.newValue !== a.a.oldValue ? setTimeout(c, 10) : c();
            }
        } else w(a, q(this.nb, this));
    };
    k.nb = function(a) {
        this.a[a] && w(this.a[a], function(b) {
            b();
        });
    };
    function bl(a) {
        this.a = a;
        this.b = Vk();
    }
    var cl = {
        name: "authEvent",
        F: "local"
    };
    function dl(a) {
        return a.b.get(cl, a.a).then(function(b) {
            return th(b);
        });
    }
    function el() {
        this.a = Vk();
    }
    function fl() {
        this.b = -1;
    }
    function gl(a, b) {
        this.b = hl;
        this.f = l.Uint8Array ? new Uint8Array(this.b) : Array(this.b);
        this.g = this.c = 0;
        this.a = [];
        this.i = a;
        this.h = b;
        this.l = l.Int32Array ? new Int32Array(64) : Array(64);
        (void 0) === il && (l.Int32Array ? il = new Int32Array(jl) : il = jl);
        this.reset();
    }
    var il;
    r(gl, fl);
    for(var hl = 64, kl = hl - 1, ll = [], ml = 0; ml < kl; ml++)ll[ml] = 0;
    var nl = Ya(128, ll);
    gl.prototype.reset = function() {
        this.g = this.c = 0;
        this.a = l.Int32Array ? new Int32Array(this.h) : Za(this.h);
    };
    function ol(a) {
        for(var b = a.f, c = a.l, d = 0, e = 0; e < b.length;)c[d++] = b[e] << 24 | b[e + 1] << 16 | b[e + 2] << 8 | b[e + 3], e = 4 * d;
        for(b = 16; 64 > b; b++){
            e = c[b - 15] | 0;
            d = c[b - 2] | 0;
            var f = (c[b - 16] | 0) + ((e >>> 7 | e << 25) ^ (e >>> 18 | e << 14) ^ e >>> 3) | 0, g = (c[b - 7] | 0) + ((d >>> 17 | d << 15) ^ (d >>> 19 | d << 13) ^ d >>> 10) | 0;
            c[b] = f + g | 0;
        }
        d = a.a[0] | 0;
        e = a.a[1] | 0;
        var h = a.a[2] | 0, m = a.a[3] | 0, p = a.a[4] | 0, v = a.a[5] | 0, B = a.a[6] | 0;
        f = a.a[7] | 0;
        for(b = 0; 64 > b; b++){
            var A = ((d >>> 2 | d << 30) ^ (d >>> 13 | d << 19) ^ (d >>> 22 | d << 10)) + (d & e ^ d & h ^ e & h) | 0;
            g = p & v ^ ~p & B;
            f = f + ((p >>> 6 | p << 26) ^ (p >>> 11 | p << 21) ^ (p >>> 25 | p << 7)) | 0;
            g = g + (il[b] | 0) | 0;
            g = f + (g + (c[b] | 0) | 0) | 0;
            f = B;
            B = v;
            v = p;
            p = m + g | 0;
            m = h;
            h = e;
            e = d;
            d = g + A | 0;
        }
        a.a[0] = a.a[0] + d | 0;
        a.a[1] = a.a[1] + e | 0;
        a.a[2] = a.a[2] + h | 0;
        a.a[3] = a.a[3] + m | 0;
        a.a[4] = a.a[4] + p | 0;
        a.a[5] = a.a[5] + v | 0;
        a.a[6] = a.a[6] + B | 0;
        a.a[7] = a.a[7] + f | 0;
    }
    function pl(a, b, c) {
        (void 0) === c && (c = b.length);
        var d = 0, e = a.c;
        if ("string" === typeof b) for(; d < c;)a.f[e++] = b.charCodeAt(d++), e == a.b && (ol(a), e = 0);
        else if (na(b)) for(; d < c;){
            var f = b[d++];
            if (!("number" == typeof f && 0 <= f && 255 >= f && f == (f | 0))) throw Error("message must be a byte array");
            a.f[e++] = f;
            e == a.b && (ol(a), e = 0);
        }
        else throw Error("message must be string or array");
        a.c = e;
        a.g += c;
    }
    var jl = [
        1116352408,
        1899447441,
        3049323471,
        3921009573,
        961987163,
        1508970993,
        2453635748,
        2870763221,
        3624381080,
        310598401,
        607225278,
        1426881987,
        1925078388,
        2162078206,
        2614888103,
        3248222580,
        3835390401,
        4022224774,
        264347078,
        604807628,
        770255983,
        1249150122,
        1555081692,
        1996064986,
        2554220882,
        2821834349,
        2952996808,
        3210313671,
        3336571891,
        3584528711,
        113926993,
        338241895,
        666307205,
        773529912,
        1294757372,
        1396182291,
        1695183700,
        1986661051,
        2177026350,
        2456956037,
        2730485921,
        2820302411,
        3259730800,
        3345764771,
        3516065817,
        3600352804,
        4094571909,
        275423344,
        430227734,
        506948616,
        659060556,
        883997877,
        958139571,
        1322822218,
        1537002063,
        1747873779,
        1955562222,
        2024104815,
        2227730452,
        2361852424,
        2428436474,
        2756734187,
        3204031479,
        3329325298
    ];
    function ql() {
        gl.call(this, 8, rl);
    }
    r(ql, gl);
    var rl = [
        1779033703,
        3144134277,
        1013904242,
        2773480762,
        1359893119,
        2600822924,
        528734635,
        1541459225
    ];
    function sl(a, b, c, d, e, f) {
        this.v = a;
        this.i = b;
        this.l = c;
        this.m = d || null;
        this.u = e || null;
        this.s = f;
        this.h = b + ":" + c;
        this.C = new el;
        this.g = new bl(this.h);
        this.f = null;
        this.b = [];
        this.a = this.c = null;
    }
    function tl(a) {
        return new t("invalid-cordova-configuration", a);
    }
    k = sl.prototype;
    k.ma = function() {
        return this.Ia ? this.Ia : this.Ia = Fe().then(function() {
            if ("function" !== typeof L("universalLinks.subscribe", l)) throw tl("cordova-universal-links-plugin-fix is not installed");
            if ("undefined" === typeof L("BuildInfo.packageName", l)) throw tl("cordova-plugin-buildinfo is not installed");
            if ("function" !== typeof L("cordova.plugins.browsertab.openUrl", l)) throw tl("cordova-plugin-browsertab is not installed");
            if ("function" !== typeof L("cordova.InAppBrowser.open", l)) throw tl("cordova-plugin-inappbrowser is not installed");
        }, function() {
            throw new t("cordova-not-ready");
        });
    };
    function ul() {
        for(var a = 20, b = []; 0 < a;)b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62 * Math.random()))), a--;
        return b.join("");
    }
    function vl(a) {
        var b = new ql;
        pl(b, a);
        a = [];
        var c = 8 * b.g;
        56 > b.c ? pl(b, nl, 56 - b.c) : pl(b, nl, b.b - (b.c - 56));
        for(var d = 63; 56 <= d; d--)b.f[d] = c & 255, c /= 256;
        ol(b);
        for(d = c = 0; d < b.i; d++)for(var e = 24; 0 <= e; e -= 8)a[c++] = b.a[d] >> e & 255;
        return cg(a);
    }
    k.Pb = function(a, b) {
        b(new t("operation-not-supported-in-this-environment"));
        return E();
    };
    k.Nb = function() {
        return F(new t("operation-not-supported-in-this-environment"));
    };
    k.ac = function() {
        return false;
    };
    k.Yb = function() {
        return true;
    };
    k.Ub = function() {
        return true;
    };
    k.Ob = function(a, b, c, d) {
        if (this.c) return F(new t("redirect-operation-pending"));
        var e = this, f = l.document, g = null, h = null, m = null, p = null;
        return this.c = E().then(function() {
            rh(b);
            return wl(e);
        }).then(function() {
            return xl(e, a, b, c, d);
        }).then(function() {
            return new D(function(v, B) {
                h = function() {
                    var A = L("cordova.plugins.browsertab.close", l);
                    v();
                    "function" === typeof A && A();
                    e.a && "function" === typeof e.a.close && (e.a.close(), e.a = null);
                    return false;
                };
                e.Ea(h);
                m = function() {
                    g || (g = Fd(2000).then(function() {
                        B(new t("redirect-cancelled-by-user"));
                    }));
                };
                p = function() {
                    $e() && m();
                };
                f.addEventListener("resume", m, false);
                K().toLowerCase().match(/android/) || f.addEventListener("visibilitychange", p, false);
            }).o(function(v) {
                return yl(e).then(function() {
                    throw v;
                });
            });
        }).oa(function() {
            m && f.removeEventListener("resume", m, false);
            p && f.removeEventListener("visibilitychange", p, false);
            g && g.cancel();
            h && e.Ta(h);
            e.c = null;
        });
    };
    function xl(a, b, c, d, e) {
        var f = ul(), g = new sh(b, d, null, f, new t("no-auth-event"), null, e), h = L("BuildInfo.packageName", l);
        if ("string" !== typeof h) throw new t("invalid-cordova-configuration");
        var m = L("BuildInfo.displayName", l), p = {
        };
        if (K().toLowerCase().match(/iphone|ipad|ipod/)) p.ibi = h;
        else if (K().toLowerCase().match(/android/)) p.apn = h;
        else return F(new t("operation-not-supported-in-this-environment"));
        m && (p.appDisplayName = m);
        f = vl(f);
        p.sessionId = f;
        var v = ek(a.v, a.i, a.l, b, c, null, d, a.m, p, a.u, e, a.s);
        return a.ma().then(function() {
            var B = a.h;
            return a.C.a.set(cl, g.w(), B);
        }).then(function() {
            var B = L("cordova.plugins.browsertab.isAvailable", l);
            if ("function" !== typeof B) throw new t("invalid-cordova-configuration");
            var A = null;
            B(function(Q) {
                if (Q) {
                    A = L("cordova.plugins.browsertab.openUrl", l);
                    if ("function" !== typeof A) throw new t("invalid-cordova-configuration");
                    A(v);
                } else {
                    A = L("cordova.InAppBrowser.open", l);
                    if ("function" !== typeof A) throw new t("invalid-cordova-configuration");
                    Q = K();
                    a.a = A(v, Q.match(/(iPad|iPhone|iPod).*OS 7_\d/i) || Q.match(/(iPad|iPhone|iPod).*OS 8_\d/i) ? "_blank" : "_system", "location=yes");
                }
            });
        });
    }
    function zl(a, b) {
        for(var c = 0; c < a.b.length; c++)try {
            a.b[c](b);
        } catch (d) {
        }
    }
    function wl(a) {
        a.f || (a.f = a.ma().then(function() {
            return new D(function(b) {
                function c(d) {
                    b(d);
                    a.Ta(c);
                    return false;
                }
                a.Ea(c);
                Al(a);
            });
        }));
        return a.f;
    }
    function yl(a) {
        var b = null;
        return dl(a.g).then(function(c) {
            b = c;
            c = a.g;
            return Zk(c.b, cl, c.a);
        }).then(function() {
            return b;
        });
    }
    function Al(a) {
        function b(g) {
            d = true;
            e && e.cancel();
            yl(a).then(function(h) {
                var m = c;
                if (h && g && g.url) {
                    var p = null;
                    m = xg(g.url);
                    -1 != m.indexOf("/__/auth/callback") && (p = J(m), p = We(be(p, "firebaseError") || null), p = (p = "object" === typeof p ? Aa(p) : null) ? new sh(h.c, h.b, null, null, p, null, h.T()) : new sh(h.c, h.b, m, h.f, null, null, h.T()));
                    m = p || c;
                }
                zl(a, m);
            });
        }
        var c = new sh("unknown", null, null, null, new t("no-auth-event")), d = false, e = Fd(500).then(function() {
            return yl(a).then(function() {
                d || zl(a, c);
            });
        }), f = l.handleOpenURL;
        l.handleOpenURL = function(g) {
            0 == g.toLowerCase().indexOf(L("BuildInfo.packageName", l).toLowerCase() + "://") && b({
                url: g
            });
            if ("function" === typeof f) try {
                f(g);
            } catch (h) {
                console.error(h);
            }
        };
        vh || (vh = new uh);
        wh(b);
    }
    k.Ea = function(a) {
        this.b.push(a);
        wl(this).o(function(b) {
            "auth/invalid-cordova-configuration" === b.code && (b = new sh("unknown", null, null, null, new t("no-auth-event")), a(b));
        });
    };
    k.Ta = function(a) {
        Xa(this.b, function(b) {
            return b == a;
        });
    };
    function Bl(a) {
        this.a = a;
        this.b = Vk();
    }
    var Cl = {
        name: "pendingRedirect",
        F: "session"
    };
    function Dl(a) {
        return a.b.set(Cl, "pending", a.a);
    }
    function El(a) {
        return Zk(a.b, Cl, a.a);
    }
    function Fl(a) {
        return a.b.get(Cl, a.a).then(function(b) {
            return "pending" == b;
        });
    }
    function Gl(a, b, c, d) {
        this.i = {
        };
        this.u = 0;
        this.D = a;
        this.v = b;
        this.m = c;
        this.J = d;
        this.h = [];
        this.f = false;
        this.l = q(this.s, this);
        this.b = new Hl;
        this.C = new Il;
        this.g = new Bl(Jl(this.v, this.m));
        this.c = {
        };
        this.c.unknown = this.b;
        this.c.signInViaRedirect = this.b;
        this.c.linkViaRedirect = this.b;
        this.c.reauthViaRedirect = this.b;
        this.c.signInViaPopup = this.C;
        this.c.linkViaPopup = this.C;
        this.c.reauthViaPopup = this.C;
        this.a = Kl(this.D, this.v, this.m, Da, this.J);
    }
    function Kl(a, b, c, d, e) {
        var f = _appDefault.default.SDK_VERSION || null;
        return Ge() ? new sl(a, b, c, f, d, e) : new Yj(a, b, c, f, d, e);
    }
    Gl.prototype.reset = function() {
        this.f = false;
        this.a.Ta(this.l);
        this.a = Kl(this.D, this.v, this.m, null, this.J);
        this.i = {
        };
    };
    function Ll(a) {
        a.f || (a.f = true, a.a.Ea(a.l));
        var b = a.a;
        return a.a.ma().o(function(c) {
            a.a == b && a.reset();
            throw c;
        });
    }
    function Ml(a) {
        a.a.Yb() && Ll(a).o(function(b) {
            var c = new sh("unknown", null, null, null, new t("operation-not-supported-in-this-environment"));
            Nl(b) && a.s(c);
        });
        a.a.Ub() || Ol(a.b);
    }
    function Pl(a, b) {
        Va(a.h, b) || a.h.push(b);
        a.f || Fl(a.g).then(function(c) {
            c ? El(a.g).then(function() {
                Ll(a).o(function(d) {
                    var e = new sh("unknown", null, null, null, new t("operation-not-supported-in-this-environment"));
                    Nl(d) && a.s(e);
                });
            }) : Ml(a);
        }).o(function() {
            Ml(a);
        });
    }
    function Ql(a, b) {
        Xa(a.h, function(c) {
            return c == b;
        });
    }
    Gl.prototype.s = function(a) {
        if (!a) throw new t("invalid-auth-event");
        600000 <= Date.now() - this.u && (this.i = {
        }, this.u = 0);
        if (a && a.getUid() && this.i.hasOwnProperty(a.getUid())) return false;
        for(var b = false, c = 0; c < this.h.length; c++){
            var d = this.h[c];
            if (d.Gb(a.c, a.b)) {
                if (b = this.c[a.c]) b.h(a, d), a && (a.f || a.b) && (this.i[a.getUid()] = true, this.u = Date.now());
                b = true;
                break;
            }
        }
        Ol(this.b);
        return b;
    };
    var Rl = new Ze(2000, 10000), Sl = new Ze(30000, 60000);
    Gl.prototype.ra = function() {
        return this.b.ra();
    };
    function Tl(a, b, c, d, e, f, g) {
        return a.a.Nb(b, c, d, function() {
            a.f || (a.f = true, a.a.Ea(a.l));
        }, function() {
            a.reset();
        }, e, f, g);
    }
    function Nl(a) {
        return a && "auth/cordova-not-ready" == a.code ? true : false;
    }
    function Ul(a, b, c, d, e) {
        var f;
        return Dl(a.g).then(function() {
            return a.a.Ob(b, c, d, e).o(function(g) {
                if (Nl(g)) throw new t("operation-not-supported-in-this-environment");
                f = g;
                return El(a.g).then(function() {
                    throw f;
                });
            }).then(function() {
                return a.a.ac() ? new D(function() {
                }) : El(a.g).then(function() {
                    return a.ra();
                }).then(function() {
                }).o(function() {
                });
            });
        });
    }
    function Vl(a, b, c, d, e) {
        return a.a.Pb(d, function(f) {
            b.na(c, null, f, e);
        }, Rl.get());
    }
    var Wl = {
    };
    function Jl(a, b, c) {
        a = a + ":" + b;
        c && (a = a + ":" + c.url);
        return a;
    }
    function Xl(a, b, c, d) {
        var e = Jl(b, c, d);
        Wl[e] || (Wl[e] = new Gl(a, b, c, d));
        return Wl[e];
    }
    function Hl() {
        this.b = null;
        this.f = [];
        this.c = [];
        this.a = null;
        this.i = this.g = false;
    }
    Hl.prototype.reset = function() {
        this.b = null;
        this.a && (this.a.cancel(), this.a = null);
    };
    Hl.prototype.h = function(a, b) {
        if (a) {
            this.reset();
            this.g = true;
            var c = a.c, d = a.b, e = a.a && "auth/web-storage-unsupported" == a.a.code, f = a.a && "auth/operation-not-supported-in-this-environment" == a.a.code;
            this.i = !(!e && !f);
            "unknown" != c || e || f ? a.a ? (Yl(this, true, null, a.a), E()) : b.Fa(c, d) ? Zl(this, a, b) : F(new t("invalid-auth-event")) : (Yl(this, false, null, null), E());
        } else F(new t("invalid-auth-event"));
    };
    function Ol(a) {
        a.g || (a.g = true, Yl(a, false, null, null));
    }
    function $l(a) {
        a.g && !a.i && Yl(a, false, null, null);
    }
    function Zl(a, b, c) {
        c = c.Fa(b.c, b.b);
        var d = b.g, e = b.f, f = b.i, g = b.T(), h = !!b.c.match(/Redirect$/);
        c(d, e, g, f).then(function(m) {
            Yl(a, h, m, null);
        }).o(function(m) {
            Yl(a, h, null, m);
        });
    }
    function am(a, b) {
        a.b = function() {
            return F(b);
        };
        if (a.c.length) for(var c = 0; c < a.c.length; c++)a.c[c](b);
    }
    function bm(a, b) {
        a.b = function() {
            return E(b);
        };
        if (a.f.length) for(var c = 0; c < a.f.length; c++)a.f[c](b);
    }
    function Yl(a, b, c, d) {
        b ? d ? am(a, d) : bm(a, c) : bm(a, {
            user: null
        });
        a.f = [];
        a.c = [];
    }
    Hl.prototype.ra = function() {
        var a = this;
        return new D(function(b, c) {
            a.b ? a.b().then(b, c) : (a.f.push(b), a.c.push(c), cm(a));
        });
    };
    function cm(a) {
        var b = new t("timeout");
        a.a && a.a.cancel();
        a.a = Fd(Sl.get()).then(function() {
            a.b || (a.g = true, Yl(a, true, null, b));
        });
    }
    function Il() {
    }
    Il.prototype.h = function(a, b) {
        if (a) {
            var c = a.c, d = a.b;
            a.a ? (b.na(a.c, null, a.a, a.b), E()) : b.Fa(c, d) ? dm(a, b) : F(new t("invalid-auth-event"));
        } else F(new t("invalid-auth-event"));
    };
    function dm(a, b) {
        var c = a.b, d = a.c;
        b.Fa(d, c)(a.g, a.f, a.T(), a.i).then(function(e) {
            b.na(d, e, null, c);
        }).o(function(e) {
            b.na(d, null, e, c);
        });
    }
    function em() {
        this.jb = false;
        Object.defineProperty(this, "appVerificationDisabled", {
            get: function() {
                return this.jb;
            },
            set: function(a) {
                this.jb = a;
            },
            enumerable: false
        });
    }
    function fm(a, b) {
        this.a = b;
        M(this, "verificationId", a);
    }
    fm.prototype.confirm = function(a) {
        a = ph(this.verificationId, a);
        return this.a(a);
    };
    function gm(a, b, c, d) {
        return new lh(a).gb(b, c).then(function(e) {
            return new fm(e, d);
        });
    }
    function hm(a) {
        var b = ig(a);
        if (!(b && b.exp && b.auth_time && b.iat)) throw new t("internal-error", "An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");
        N(this, {
            token: a,
            expirationTime: bf(1000 * b.exp),
            authTime: bf(1000 * b.auth_time),
            issuedAtTime: bf(1000 * b.iat),
            signInProvider: b.firebase && b.firebase.sign_in_provider ? b.firebase.sign_in_provider : null,
            signInSecondFactor: b.firebase && b.firebase.sign_in_second_factor ? b.firebase.sign_in_second_factor : null,
            claims: b
        });
    }
    function im(a, b, c) {
        var d = b && b[jm];
        if (!d) throw new t("argument-error", "Internal assert: Invalid MultiFactorResolver");
        this.a = a;
        this.f = nb(b);
        this.g = c;
        this.c = new yg(null, d);
        this.b = [];
        var e = this;
        w(b[km] || [], function(f) {
            (f = tf(f)) && e.b.push(f);
        });
        M(this, "auth", this.a);
        M(this, "session", this.c);
        M(this, "hints", this.b);
    }
    var km = "mfaInfo", jm = "mfaPendingCredential";
    im.prototype.Rc = function(a) {
        var b = this;
        return a.tb(this.a.a, this.c).then(function(c) {
            var d = nb(b.f);
            delete d[km];
            delete d[jm];
            z(d, c);
            return b.g(d);
        });
    };
    function lm(a, b, c, d) {
        t.call(this, "multi-factor-auth-required", d, b);
        this.b = new im(a, b, c);
        M(this, "resolver", this.b);
    }
    r(lm, t);
    function mm(a, b, c) {
        if (a && n(a.serverResponse) && "auth/multi-factor-auth-required" === a.code) try {
            return new lm(b, a.serverResponse, c, a.message);
        } catch (d) {
        }
        return null;
    }
    function nm() {
    }
    nm.prototype.tb = function(a, b, c) {
        return b.type == zg ? om(this, a, b, c) : pm(this, a, b);
    };
    function om(a, b, c, d) {
        return c.Ha().then(function(e) {
            e = {
                idToken: e
            };
            "undefined" !== typeof d && (e.displayName = d);
            z(e, {
                phoneVerificationInfo: hh(a.a)
            });
            return O(b, Gj, e);
        });
    }
    function pm(a, b, c) {
        return c.Ha().then(function(d) {
            d = {
                mfaPendingCredential: d
            };
            z(d, {
                phoneVerificationInfo: hh(a.a)
            });
            return O(b, Hj, d);
        });
    }
    function qm(a) {
        M(this, "factorId", a.fa);
        this.a = a;
    }
    r(qm, nm);
    function rm(a) {
        qm.call(this, a);
        if (this.a.fa != lh.PROVIDER_ID) throw new t("argument-error", "firebase.auth.PhoneMultiFactorAssertion requires a valid firebase.auth.PhoneAuthCredential");
    }
    r(rm, qm);
    function sm(a, b) {
        G.call(this, a);
        for(var c in b)this[c] = b[c];
    }
    r(sm, G);
    function tm(a, b) {
        this.a = a;
        this.b = [];
        this.c = q(this.yc, this);
        nd(this.a, "userReloaded", this.c);
        var c = [];
        b && b.multiFactor && b.multiFactor.enrolledFactors && w(b.multiFactor.enrolledFactors, function(d) {
            var e = null, f = {
            };
            if (d) {
                d.uid && (f[qf] = d.uid);
                d.displayName && (f[rf] = d.displayName);
                d.enrollmentTime && (f[sf] = new Date(d.enrollmentTime).toISOString());
                d.phoneNumber && (f[pf] = d.phoneNumber);
                try {
                    e = new uf(f);
                } catch (g) {
                }
                d = e;
            } else d = null;
            d && c.push(d);
        });
        um(this, c);
    }
    function vm(a) {
        var b = [];
        w(a.mfaInfo || [], function(c) {
            (c = tf(c)) && b.push(c);
        });
        return b;
    }
    k = tm.prototype;
    k.yc = function(a) {
        um(this, vm(a.hd));
    };
    function um(a, b) {
        a.b = b;
        M(a, "enrolledFactors", b);
    }
    k.Sb = function() {
        return this.a.I().then(function(a) {
            return new yg(a, null);
        });
    };
    k.fc = function(a, b) {
        var c = this, d = this.a.a;
        return this.Sb().then(function(e) {
            return a.tb(d, e, b);
        }).then(function(e) {
            wm(c.a, e);
            return c.a.reload();
        });
    };
    k.bd = function(a) {
        var b = this, c = "string" === typeof a ? a : a.uid, d = this.a.a;
        return this.a.I().then(function(e) {
            return O(d, Lj, {
                idToken: e,
                mfaEnrollmentId: c
            });
        }).then(function(e) {
            var f = Qa(b.b, function(g) {
                return g.uid != c;
            });
            um(b, f);
            wm(b.a, e);
            return b.a.reload().o(function(g) {
                if ("auth/user-token-expired" != g.code) throw g;
            });
        });
    };
    k.w = function() {
        return {
            multiFactor: {
                enrolledFactors: Ra(this.b, function(a) {
                    return a.w();
                })
            }
        };
    };
    function xm(a, b, c) {
        this.h = a;
        this.i = b;
        this.g = c;
        this.c = 30000;
        this.f = 960000;
        this.b = null;
        this.a = this.c;
        if (this.f < this.c) throw Error("Proactive refresh lower bound greater than upper bound!");
    }
    xm.prototype.start = function() {
        this.a = this.c;
        ym(this, true);
    };
    function zm(a, b) {
        if (b) return a.a = a.c, a.g();
        b = a.a;
        a.a *= 2;
        a.a > a.f && (a.a = a.f);
        return b;
    }
    function ym(a, b) {
        a.stop();
        a.b = Fd(zm(a, b)).then(function() {
            return af();
        }).then(function() {
            return a.h();
        }).then(function() {
            ym(a, true);
        }).o(function(c) {
            a.i(c) && ym(a, false);
        });
    }
    xm.prototype.stop = function() {
        this.b && (this.b.cancel(), this.b = null);
    };
    function Am(a) {
        this.f = a;
        this.b = this.a = null;
        this.c = Date.now();
    }
    Am.prototype.w = function() {
        return {
            apiKey: this.f.c,
            refreshToken: this.a,
            accessToken: this.b && this.b.toString(),
            expirationTime: this.c
        };
    };
    function Bm(a, b) {
        "undefined" === typeof b && (a.b ? (b = a.b, b = b.a - b.g) : b = 0);
        a.c = Date.now() + 1000 * b;
    }
    function Cm(a, b) {
        a.b = jg(b[Dg] || "");
        a.a = b.refreshToken;
        b = b.expiresIn;
        Bm(a, "undefined" !== typeof b ? Number(b) : void 0);
    }
    function Dm(a, b) {
        a.b = b.b;
        a.a = b.a;
        a.c = b.c;
    }
    function Em(a, b) {
        return Wi(a.f, b).then(function(c) {
            a.b = jg(c.access_token);
            a.a = c.refresh_token;
            Bm(a, c.expires_in);
            return {
                accessToken: a.b.toString(),
                refreshToken: a.a
            };
        }).o(function(c) {
            "auth/user-token-expired" == c.code && (a.a = null);
            throw c;
        });
    }
    Am.prototype.getToken = function(a) {
        a = !!a;
        return this.b && !this.a ? F(new t("user-token-expired")) : a || !this.b || Date.now() > this.c - 30000 ? this.a ? Em(this, {
            grant_type: "refresh_token",
            refresh_token: this.a
        }) : E(null) : E({
            accessToken: this.b.toString(),
            refreshToken: this.a
        });
    };
    function Fm(a, b) {
        this.a = a || null;
        this.b = b || null;
        N(this, {
            lastSignInTime: bf(b || null),
            creationTime: bf(a || null)
        });
    }
    function Gm(a) {
        return new Fm(a.a, a.b);
    }
    Fm.prototype.w = function() {
        return {
            lastLoginAt: this.b,
            createdAt: this.a
        };
    };
    function Hm(a, b, c, d, e, f) {
        N(this, {
            uid: a,
            displayName: d || null,
            photoURL: e || null,
            email: c || null,
            phoneNumber: f || null,
            providerId: b
        });
    }
    function Im(a, b, c) {
        this.N = [];
        this.l = a.apiKey;
        this.m = a.appName;
        this.s = a.authDomain || null;
        var d = _appDefault.default.SDK_VERSION ? Oe(_appDefault.default.SDK_VERSION) : null;
        this.a = new Ii(this.l, Ca(Da), d);
        (this.u = a.emulatorConfig || null) && Pi(this.a, this.u);
        this.h = new Am(this.a);
        Jm(this, b[Dg]);
        Cm(this.h, b);
        M(this, "refreshToken", this.h.a);
        Km(this, c || {
        });
        H.call(this);
        this.P = false;
        this.s && Re() && (this.b = Xl(this.s, this.l, this.m, this.u));
        this.W = [];
        this.i = null;
        this.D = Lm(this);
        this.ba = q(this.ib, this);
        var e = this;
        this.za = null;
        this.Pa = function(f) {
            e.xa(f.h);
        };
        this.qa = null;
        this.Ba = function(f) {
            Mm(e, f.c);
        };
        this.$ = null;
        this.aa = [];
        this.Oa = function(f) {
            Nm(e, f.f);
        };
        this.ja = null;
        this.S = new tm(this, c);
        M(this, "multiFactor", this.S);
    }
    r(Im, H);
    Im.prototype.xa = function(a) {
        this.za = a;
        Oi(this.a, a);
    };
    function Mm(a, b) {
        a.u = b;
        Pi(a.a, b);
        a.b && (b = a.b, a.b = Xl(a.s, a.l, a.m, a.u), a.P && (Ql(b, a), Pl(a.b, a)));
    }
    Im.prototype.la = function() {
        return this.za;
    };
    function Om(a, b) {
        a.qa && xd(a.qa, "languageCodeChanged", a.Pa);
        (a.qa = b) && nd(b, "languageCodeChanged", a.Pa);
    }
    function Pm(a, b) {
        a.$ && xd(a.$, "emulatorConfigChanged", a.Ba);
        (a.$ = b) && nd(b, "emulatorConfigChanged", a.Ba);
    }
    function Nm(a, b) {
        a.aa = b;
        Ri(a.a, _appDefault.default.SDK_VERSION ? Oe(_appDefault.default.SDK_VERSION, a.aa) : null);
    }
    Im.prototype.Ga = function() {
        return Za(this.aa);
    };
    function Qm(a, b) {
        a.ja && xd(a.ja, "frameworkChanged", a.Oa);
        (a.ja = b) && nd(b, "frameworkChanged", a.Oa);
    }
    Im.prototype.ib = function() {
        this.D.b && (this.D.stop(), this.D.start());
    };
    function Rm(a) {
        try {
            return _appDefault.default.app(a.m).auth();
        } catch (b) {
            throw new t("internal-error", "No firebase.auth.Auth instance is available for the Firebase App '" + a.m + "'!");
        }
    }
    function Lm(a) {
        return new xm(function() {
            return a.I(true);
        }, function(b) {
            return b && "auth/network-request-failed" == b.code ? true : false;
        }, function() {
            var b = a.h.c - Date.now() - 300000;
            return 0 < b ? b : 0;
        });
    }
    function Sm(a) {
        a.J || a.D.b || (a.D.start(), xd(a, "tokenChanged", a.ba), nd(a, "tokenChanged", a.ba));
    }
    function Tm(a) {
        xd(a, "tokenChanged", a.ba);
        a.D.stop();
    }
    function Jm(a, b) {
        a.Aa = b;
        M(a, "_lat", b);
    }
    function Um(a, b) {
        Xa(a.W, function(c) {
            return c == b;
        });
    }
    function Vm(a) {
        for(var b = [], c = 0; c < a.W.length; c++)b.push(a.W[c](a));
        return Jc(b).then(function() {
            return a;
        });
    }
    function Wm(a) {
        a.b && !a.P && (a.P = true, Pl(a.b, a));
    }
    function Km(a, b) {
        N(a, {
            uid: b.uid,
            displayName: b.displayName || null,
            photoURL: b.photoURL || null,
            email: b.email || null,
            emailVerified: b.emailVerified || false,
            phoneNumber: b.phoneNumber || null,
            isAnonymous: b.isAnonymous || false,
            tenantId: b.tenantId || null,
            metadata: new Fm(b.createdAt, b.lastLoginAt),
            providerData: []
        });
        a.a.b = a.tenantId;
    }
    M(Im.prototype, "providerId", "firebase");
    function Xm() {
    }
    function Ym(a) {
        return E().then(function() {
            if (a.J) throw new t("app-deleted");
        });
    }
    function Zm(a) {
        return Ra(a.providerData, function(b) {
            return b.providerId;
        });
    }
    function $m(a, b) {
        b && (an(a, b.providerId), a.providerData.push(b));
    }
    function an(a, b) {
        Xa(a.providerData, function(c) {
            return c.providerId == b;
        });
    }
    function bn(a, b, c) {
        ("uid" != b || c) && a.hasOwnProperty(b) && M(a, b, c);
    }
    function cn(a, b) {
        a != b && (N(a, {
            uid: b.uid,
            displayName: b.displayName,
            photoURL: b.photoURL,
            email: b.email,
            emailVerified: b.emailVerified,
            phoneNumber: b.phoneNumber,
            isAnonymous: b.isAnonymous,
            tenantId: b.tenantId,
            providerData: []
        }), b.metadata ? M(a, "metadata", Gm(b.metadata)) : M(a, "metadata", new Fm), w(b.providerData, function(c) {
            $m(a, c);
        }), Dm(a.h, b.h), M(a, "refreshToken", a.h.a), um(a.S, b.S.b));
    }
    k = Im.prototype;
    k.reload = function() {
        var a = this;
        return R(this, Ym(this).then(function() {
            return dn(a).then(function() {
                return Vm(a);
            }).then(Xm);
        }));
    };
    function dn(a) {
        return a.I().then(function(b) {
            var c = a.isAnonymous;
            return en(a, b).then(function() {
                c || bn(a, "isAnonymous", false);
                return b;
            });
        });
    }
    k.oc = function(a) {
        return this.I(a).then(function(b) {
            return new hm(b);
        });
    };
    k.I = function(a) {
        var b = this;
        return R(this, Ym(this).then(function() {
            return b.h.getToken(a);
        }).then(function(c) {
            if (!c) throw new t("internal-error");
            c.accessToken != b.Aa && (Jm(b, c.accessToken), b.dispatchEvent(new sm("tokenChanged")));
            bn(b, "refreshToken", c.refreshToken);
            return c.accessToken;
        }));
    };
    function wm(a, b) {
        b[Dg] && a.Aa != b[Dg] && (Cm(a.h, b), a.dispatchEvent(new sm("tokenChanged")), Jm(a, b[Dg]), bn(a, "refreshToken", a.h.a));
    }
    function en(a, b) {
        return O(a.a, Ij, {
            idToken: b
        }).then(q(a.Kc, a));
    }
    k.Kc = function(a) {
        a = a.users;
        if (!a || !a.length) throw new t("internal-error");
        a = a[0];
        Km(this, {
            uid: a.localId,
            displayName: a.displayName,
            photoURL: a.photoUrl,
            email: a.email,
            emailVerified: !!a.emailVerified,
            phoneNumber: a.phoneNumber,
            lastLoginAt: a.lastLoginAt,
            createdAt: a.createdAt,
            tenantId: a.tenantId
        });
        for(var b = fn(a), c = 0; c < b.length; c++)$m(this, b[c]);
        bn(this, "isAnonymous", !(this.email && a.passwordHash) && !(this.providerData && this.providerData.length));
        this.dispatchEvent(new sm("userReloaded", {
            hd: a
        }));
    };
    function fn(a) {
        return (a = a.providerUserInfo) && a.length ? Ra(a, function(b) {
            return new Hm(b.rawId, b.providerId, b.email, b.displayName, b.photoUrl, b.phoneNumber);
        }) : [];
    }
    k.Lc = function(a) {
        gf("firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateWithCredential instead.");
        return this.ub(a);
    };
    k.ub = function(a) {
        var b = this, c = null;
        return R(this, a.c(this.a, this.uid).then(function(d) {
            wm(b, d);
            c = gn(b, d, "reauthenticate");
            b.i = null;
            return b.reload();
        }).then(function() {
            return c;
        }), true);
    };
    function hn(a, b) {
        return dn(a).then(function() {
            if (Va(Zm(a), b)) return Vm(a).then(function() {
                throw new t("provider-already-linked");
            });
        });
    }
    k.Cc = function(a) {
        gf("firebase.User.prototype.linkAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.linkWithCredential instead.");
        return this.rb(a);
    };
    k.rb = function(a) {
        var b = this, c = null;
        return R(this, hn(this, a.providerId).then(function() {
            return b.I();
        }).then(function(d) {
            return a.b(b.a, d);
        }).then(function(d) {
            c = gn(b, d, "link");
            return jn(b, d);
        }).then(function() {
            return c;
        }));
    };
    k.Dc = function(a, b) {
        var c = this;
        return R(this, hn(this, "phone").then(function() {
            return gm(Rm(c), a, b, q(c.rb, c));
        }));
    };
    k.Mc = function(a, b) {
        var c = this;
        return R(this, E().then(function() {
            return gm(Rm(c), a, b, q(c.ub, c));
        }), true);
    };
    function gn(a, b, c) {
        var d = qh(b);
        b = og(b);
        return kf({
            user: a,
            credential: d,
            additionalUserInfo: b,
            operationType: c
        });
    }
    function jn(a, b) {
        wm(a, b);
        return a.reload().then(function() {
            return a;
        });
    }
    k.Cb = function(a) {
        var b = this;
        return R(this, this.I().then(function(c) {
            return b.a.Cb(c, a);
        }).then(function(c) {
            wm(b, c);
            return b.reload();
        }));
    };
    k.ed = function(a) {
        var b = this;
        return R(this, this.I().then(function(c) {
            return a.b(b.a, c);
        }).then(function(c) {
            wm(b, c);
            return b.reload();
        }));
    };
    k.Db = function(a) {
        var b = this;
        return R(this, this.I().then(function(c) {
            return b.a.Db(c, a);
        }).then(function(c) {
            wm(b, c);
            return b.reload();
        }));
    };
    k.Eb = function(a) {
        if ((void 0) === a.displayName && (void 0) === a.photoURL) return Ym(this);
        var b = this;
        return R(this, this.I().then(function(c) {
            return b.a.Eb(c, {
                displayName: a.displayName,
                photoUrl: a.photoURL
            });
        }).then(function(c) {
            wm(b, c);
            bn(b, "displayName", c.displayName || null);
            bn(b, "photoURL", c.photoUrl || null);
            w(b.providerData, function(d) {
                "password" === d.providerId && (M(d, "displayName", b.displayName), M(d, "photoURL", b.photoURL));
            });
            return Vm(b);
        }).then(Xm));
    };
    k.cd = function(a) {
        var b = this;
        return R(this, dn(this).then(function(c) {
            return Va(Zm(b), a) ? rj(b.a, c, [
                a
            ]).then(function(d) {
                var e = {
                };
                w(d.providerUserInfo || [], function(f) {
                    e[f.providerId] = true;
                });
                w(Zm(b), function(f) {
                    e[f] || an(b, f);
                });
                e[lh.PROVIDER_ID] || M(b, "phoneNumber", null);
                return Vm(b);
            }) : Vm(b).then(function() {
                throw new t("no-such-provider");
            });
        }));
    };
    k.delete = function() {
        var a = this;
        return R(this, this.I().then(function(b) {
            return O(a.a, Fj, {
                idToken: b
            });
        }).then(function() {
            a.dispatchEvent(new sm("userDeleted"));
        })).then(function() {
            for(var b = 0; b < a.N.length; b++)a.N[b].cancel("app-deleted");
            Om(a, null);
            Pm(a, null);
            Qm(a, null);
            a.N = [];
            a.J = true;
            Tm(a);
            M(a, "refreshToken", null);
            a.b && Ql(a.b, a);
        });
    };
    k.Gb = function(a, b) {
        return "linkViaPopup" == a && (this.g || null) == b && this.f || "reauthViaPopup" == a && (this.g || null) == b && this.f || "linkViaRedirect" == a && (this.ga || null) == b || "reauthViaRedirect" == a && (this.ga || null) == b ? true : false;
    };
    k.na = function(a, b, c, d) {
        "linkViaPopup" != a && "reauthViaPopup" != a || d != (this.g || null) || (c && this.C ? this.C(c) : b && !c && this.f && this.f(b), this.c && (this.c.cancel(), this.c = null), delete this.f, delete this.C);
    };
    k.Fa = function(a, b) {
        return "linkViaPopup" == a && b == (this.g || null) ? q(this.Lb, this) : "reauthViaPopup" == a && b == (this.g || null) ? q(this.Mb, this) : "linkViaRedirect" == a && (this.ga || null) == b ? q(this.Lb, this) : "reauthViaRedirect" == a && (this.ga || null) == b ? q(this.Mb, this) : null;
    };
    k.Ec = function(a) {
        var b = this;
        return kn(this, "linkViaPopup", a, function() {
            return hn(b, a.providerId).then(function() {
                return Vm(b);
            });
        }, false);
    };
    k.Nc = function(a) {
        return kn(this, "reauthViaPopup", a, function() {
            return E();
        }, true);
    };
    function kn(a, b, c, d, e) {
        if (!Re()) return F(new t("operation-not-supported-in-this-environment"));
        if (a.i && !e) return F(a.i);
        var f = ng(c.providerId), g = Qe(a.uid + ":::"), h = null;
        (!Te() || Ie()) && a.s && c.isOAuthProvider && (h = ek(a.s, a.l, a.m, b, c, null, g, _appDefault.default.SDK_VERSION || null, null, null, a.tenantId, a.u));
        var m = ze(h, f && f.va, f && f.ua);
        d = d().then(function() {
            ln(a);
            if (!e) return a.I().then(function() {
            });
        }).then(function() {
            return Tl(a.b, m, b, c, g, !!h, a.tenantId);
        }).then(function() {
            return new D(function(p, v) {
                a.na(b, null, new t("cancelled-popup-request"), a.g || null);
                a.f = p;
                a.C = v;
                a.g = g;
                a.c = Vl(a.b, a, b, m, g);
            });
        }).then(function(p) {
            m && ye(m);
            return p ? kf(p) : null;
        }).o(function(p) {
            m && ye(m);
            throw p;
        });
        return R(a, d, e);
    }
    k.Fc = function(a) {
        var b = this;
        return mn(this, "linkViaRedirect", a, function() {
            return hn(b, a.providerId);
        }, false);
    };
    k.Oc = function(a) {
        return mn(this, "reauthViaRedirect", a, function() {
            return E();
        }, true);
    };
    function mn(a, b, c, d, e) {
        if (!Re()) return F(new t("operation-not-supported-in-this-environment"));
        if (a.i && !e) return F(a.i);
        var f = null, g = Qe(a.uid + ":::");
        d = d().then(function() {
            ln(a);
            if (!e) return a.I().then(function() {
            });
        }).then(function() {
            a.ga = g;
            return Vm(a);
        }).then(function(h) {
            a.ha && (h = a.ha, h = h.b.set(nn, a.w(), h.a));
            return h;
        }).then(function() {
            return Ul(a.b, b, c, g, a.tenantId);
        }).o(function(h) {
            f = h;
            if (a.ha) return on(a.ha);
            throw f;
        }).then(function() {
            if (f) throw f;
        });
        return R(a, d, e);
    }
    function ln(a) {
        if (!a.b || !a.P) {
            if (a.b && !a.P) throw new t("internal-error");
            throw new t("auth-domain-config-required");
        }
    }
    k.Lb = function(a, b, c, d) {
        var e = this;
        this.c && (this.c.cancel(), this.c = null);
        var f = null;
        c = this.I().then(function(g) {
            return Hg(e.a, {
                requestUri: a,
                postBody: d,
                sessionId: b,
                idToken: g
            });
        }).then(function(g) {
            f = gn(e, g, "link");
            return jn(e, g);
        }).then(function() {
            return f;
        });
        return R(this, c);
    };
    k.Mb = function(a, b, c, d) {
        var e = this;
        this.c && (this.c.cancel(), this.c = null);
        var f = null, g = E().then(function() {
            return Cg(Ig(e.a, {
                requestUri: a,
                sessionId: b,
                postBody: d,
                tenantId: c
            }), e.uid);
        }).then(function(h) {
            f = gn(e, h, "reauthenticate");
            wm(e, h);
            e.i = null;
            return e.reload();
        }).then(function() {
            return f;
        });
        return R(this, g, true);
    };
    k.vb = function(a) {
        var b = this, c = null;
        return R(this, this.I().then(function(d) {
            c = d;
            return "undefined" === typeof a || mb(a) ? {
            } : bg(new Sf(a));
        }).then(function(d) {
            return b.a.vb(c, d);
        }).then(function(d) {
            if (b.email != d) return b.reload();
        }).then(function() {
        }));
    };
    k.Fb = function(a, b) {
        var c = this, d = null;
        return R(this, this.I().then(function(e) {
            d = e;
            return "undefined" === typeof b || mb(b) ? {
            } : bg(new Sf(b));
        }).then(function(e) {
            return c.a.Fb(d, a, e);
        }).then(function(e) {
            if (c.email != e) return c.reload();
        }).then(function() {
        }));
    };
    function R(a, b, c) {
        var d = pn(a, b, c);
        a.N.push(d);
        d.oa(function() {
            Wa(a.N, d);
        });
        return d.o(function(e) {
            var f = null;
            e && "auth/multi-factor-auth-required" === e.code && (f = mm(e.w(), Rm(a), q(a.jc, a)));
            throw f || e;
        });
    }
    k.jc = function(a) {
        var b = null, c = this;
        a = Cg(E(a), c.uid).then(function(d) {
            b = gn(c, d, "reauthenticate");
            wm(c, d);
            c.i = null;
            return c.reload();
        }).then(function() {
            return b;
        });
        return R(this, a, true);
    };
    function pn(a, b, c) {
        return a.i && !c ? (b.cancel(), F(a.i)) : b.o(function(d) {
            !d || "auth/user-disabled" != d.code && "auth/user-token-expired" != d.code || (a.i || a.dispatchEvent(new sm("userInvalidated")), a.i = d);
            throw d;
        });
    }
    k.toJSON = function() {
        return this.w();
    };
    k.w = function() {
        var a = {
            uid: this.uid,
            displayName: this.displayName,
            photoURL: this.photoURL,
            email: this.email,
            emailVerified: this.emailVerified,
            phoneNumber: this.phoneNumber,
            isAnonymous: this.isAnonymous,
            tenantId: this.tenantId,
            providerData: [],
            apiKey: this.l,
            appName: this.m,
            authDomain: this.s,
            stsTokenManager: this.h.w(),
            redirectEventId: this.ga || null
        };
        this.metadata && z(a, this.metadata.w());
        w(this.providerData, function(b) {
            a.providerData.push(lf(b));
        });
        z(a, this.S.w());
        return a;
    };
    function qn(a) {
        if (!a.apiKey) return null;
        var b = {
            apiKey: a.apiKey,
            authDomain: a.authDomain,
            appName: a.appName,
            emulatorConfig: a.emulatorConfig
        }, c = {
        };
        if (a.stsTokenManager && a.stsTokenManager.accessToken) {
            c[Dg] = a.stsTokenManager.accessToken;
            c.refreshToken = a.stsTokenManager.refreshToken || null;
            var d = a.stsTokenManager.expirationTime;
            d && (c.expiresIn = (d - Date.now()) / 1000);
        } else return null;
        var e = new Im(b, c, a);
        a.providerData && w(a.providerData, function(f) {
            f && $m(e, kf(f));
        });
        a.redirectEventId && (e.ga = a.redirectEventId);
        return e;
    }
    function rn(a, b, c, d) {
        var e = new Im(a, b);
        c && (e.ha = c);
        d && Nm(e, d);
        return e.reload().then(function() {
            return e;
        });
    }
    function sn(a, b, c, d) {
        var e = a.h, f = {
        };
        f[Dg] = e.b && e.b.toString();
        f.refreshToken = e.a;
        b = new Im(b || {
            apiKey: a.l,
            authDomain: a.s,
            appName: a.m
        }, f);
        c && (b.ha = c);
        d && Nm(b, d);
        cn(b, a);
        return b;
    }
    function tn(a) {
        this.a = a;
        this.b = Vk();
    }
    var nn = {
        name: "redirectUser",
        F: "session"
    };
    function on(a) {
        return Zk(a.b, nn, a.a);
    }
    function un(a, b) {
        return a.b.get(nn, a.a).then(function(c) {
            c && b && (c.authDomain = b);
            return qn(c || {
            });
        });
    }
    function vn(a) {
        this.a = a;
        this.b = Vk();
        this.c = null;
        this.f = wn(this);
        this.b.addListener(xn("local"), this.a, q(this.g, this));
    }
    vn.prototype.g = function() {
        var a = this, b = xn("local");
        yn(this, function() {
            return E().then(function() {
                return a.c && "local" != a.c.F ? a.b.get(b, a.a) : null;
            }).then(function(c) {
                if (c) return zn(a, "local").then(function() {
                    a.c = b;
                });
            });
        });
    };
    function zn(a, b) {
        var c = [], d;
        for(d in Rk)Rk[d] !== b && c.push(Zk(a.b, xn(Rk[d]), a.a));
        c.push(Zk(a.b, An, a.a));
        return Ic(c);
    }
    function wn(a) {
        var b = xn("local"), c = xn("session"), d = xn("none");
        return Yk(a.b, b, a.a).then(function() {
            return a.b.get(c, a.a);
        }).then(function(e) {
            return e ? c : a.b.get(d, a.a).then(function(f) {
                return f ? d : a.b.get(b, a.a).then(function(g) {
                    return g ? b : a.b.get(An, a.a).then(function(h) {
                        return h ? xn(h) : b;
                    });
                });
            });
        }).then(function(e) {
            a.c = e;
            return zn(a, e.F);
        }).o(function() {
            a.c || (a.c = b);
        });
    }
    var An = {
        name: "persistence",
        F: "session"
    };
    function xn(a) {
        return {
            name: "authUser",
            F: a
        };
    }
    vn.prototype.yb = function(a) {
        var b = null, c = this;
        Sk(a);
        return yn(this, function() {
            return a != c.c.F ? c.b.get(c.c, c.a).then(function(d) {
                b = d;
                return zn(c, a);
            }).then(function() {
                c.c = xn(a);
                if (b) return c.b.set(c.c, b, c.a);
            }) : E();
        });
    };
    function Bn(a) {
        return yn(a, function() {
            return a.b.set(An, a.c.F, a.a);
        });
    }
    function Cn(a, b) {
        return yn(a, function() {
            return a.b.set(a.c, b.w(), a.a);
        });
    }
    function Dn(a) {
        return yn(a, function() {
            return Zk(a.b, a.c, a.a);
        });
    }
    function En(a, b, c) {
        return yn(a, function() {
            return a.b.get(a.c, a.a).then(function(d) {
                d && b && (d.authDomain = b);
                d && c && (d.emulatorConfig = c);
                return qn(d || {
                });
            });
        });
    }
    function yn(a, b) {
        a.f = a.f.then(b, b);
        return a.f;
    }
    function Fn(a) {
        this.l = false;
        M(this, "settings", new em);
        M(this, "app", a);
        if (S(this).options && S(this).options.apiKey) a = _appDefault.default.SDK_VERSION ? Oe(_appDefault.default.SDK_VERSION) : null, this.a = new Ii(S(this).options && S(this).options.apiKey, Ca(Da), a);
        else throw new t("invalid-api-key");
        this.P = [];
        this.s = [];
        this.N = [];
        this.Pa = _appDefault.default.INTERNAL.createSubscribe(q(this.zc, this));
        this.W = void 0;
        this.ib = _appDefault.default.INTERNAL.createSubscribe(q(this.Ac, this));
        Gn(this, null);
        this.i = new vn(S(this).options.apiKey + ":" + S(this).name);
        this.D = new tn(S(this).options.apiKey + ":" + S(this).name);
        this.$ = T(this, Hn(this));
        this.h = T(this, In(this));
        this.ba = false;
        this.ja = q(this.Zc, this);
        this.Ba = q(this.da, this);
        this.qa = q(this.mc, this);
        this.za = q(this.wc, this);
        this.Aa = q(this.xc, this);
        this.b = null;
        Jn(this);
        this.INTERNAL = {
        };
        this.INTERNAL["delete"] = q(this.delete, this);
        this.INTERNAL.logFramework = q(this.Gc, this);
        this.u = 0;
        H.call(this);
        Kn(this);
        this.J = [];
        this.R = null;
    }
    r(Fn, H);
    function Ln(a) {
        G.call(this, "languageCodeChanged");
        this.h = a;
    }
    r(Ln, G);
    function Mn(a) {
        G.call(this, "emulatorConfigChanged");
        this.c = a;
    }
    r(Mn, G);
    function Nn(a) {
        G.call(this, "frameworkChanged");
        this.f = a;
    }
    r(Nn, G);
    k = Fn.prototype;
    k.yb = function(a) {
        a = this.i.yb(a);
        return T(this, a);
    };
    k.xa = function(a) {
        this.aa === a || this.l || (this.aa = a, Oi(this.a, this.aa), this.dispatchEvent(new Ln(this.la())));
    };
    k.la = function() {
        return this.aa;
    };
    k.fd = function() {
        var a = l.navigator;
        this.xa(a ? a.languages && a.languages[0] || a.language || a.userLanguage || null : null);
    };
    k.gd = function(a, b) {
        if (!this.R) {
            if (!/^https?:\/\//.test(a)) throw new t("argument-error", "Emulator URL must start with a valid scheme (http:// or https://).");
            b = b ? !!b.disableWarnings : false;
            On(b);
            this.R = {
                url: a,
                ec: b
            };
            this.settings.jb = true;
            Pi(this.a, this.R);
            this.dispatchEvent(new Mn(this.R));
        }
    };
    function On(a) {
        "undefined" !== typeof console && "function" === typeof console.info && console.info("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials.");
        l.document && !a && Ee().then(function() {
            var b = l.document.createElement("div");
            b.innerText = "Running in emulator mode. Do not use with production credentials.";
            b.style.position = "fixed";
            b.style.width = "100%";
            b.style.backgroundColor = "#ffffff";
            b.style.border = ".1em solid #000000";
            b.style.color = "#b50000";
            b.style.bottom = "0px";
            b.style.left = "0px";
            b.style.margin = "0px";
            b.style.zIndex = 10000;
            b.style.textAlign = "center";
            b.classList.add("firebase-emulator-warning");
            l.document.body.appendChild(b);
        });
    }
    k.Gc = function(a) {
        this.J.push(a);
        Ri(this.a, _appDefault.default.SDK_VERSION ? Oe(_appDefault.default.SDK_VERSION, this.J) : null);
        this.dispatchEvent(new Nn(this.J));
    };
    k.Ga = function() {
        return Za(this.J);
    };
    k.zb = function(a) {
        this.S === a || this.l || (this.S = a, this.a.b = this.S);
    };
    k.T = function() {
        return this.S;
    };
    function Kn(a) {
        Object.defineProperty(a, "lc", {
            get: function() {
                return this.la();
            },
            set: function(b) {
                this.xa(b);
            },
            enumerable: false
        });
        a.aa = null;
        Object.defineProperty(a, "ti", {
            get: function() {
                return this.T();
            },
            set: function(b) {
                this.zb(b);
            },
            enumerable: false
        });
        a.S = null;
        Object.defineProperty(a, "emulatorConfig", {
            get: function() {
                if (this.R) {
                    var b = J(this.R.url);
                    b = kf({
                        protocol: b.c,
                        host: b.a,
                        port: b.g,
                        options: kf({
                            disableWarnings: this.R.ec
                        })
                    });
                } else b = null;
                return b;
            },
            enumerable: false
        });
    }
    k.toJSON = function() {
        return {
            apiKey: S(this).options.apiKey,
            authDomain: S(this).options.authDomain,
            appName: S(this).name,
            currentUser: U(this) && U(this).w()
        };
    };
    function Pn(a) {
        return a.Oa || F(new t("auth-domain-config-required"));
    }
    function Jn(a) {
        var b = S(a).options.authDomain, c = S(a).options.apiKey;
        b && Re() && (a.Oa = a.$.then(function() {
            if (!a.l) {
                a.b = Xl(b, c, S(a).name, a.R);
                Pl(a.b, a);
                U(a) && Wm(U(a));
                if (a.m) {
                    Wm(a.m);
                    var d = a.m;
                    d.xa(a.la());
                    Om(d, a);
                    d = a.m;
                    Nm(d, a.J);
                    Qm(d, a);
                    d = a.m;
                    Mm(d, a.R);
                    Pm(d, a);
                    a.m = null;
                }
                return a.b;
            }
        }));
    }
    k.Gb = function(a, b) {
        switch(a){
            case "unknown":
            case "signInViaRedirect":
                return true;
            case "signInViaPopup":
                return this.g == b && !!this.f;
            default:
                return false;
        }
    };
    k.na = function(a, b, c, d) {
        "signInViaPopup" == a && this.g == d && (c && this.C ? this.C(c) : b && !c && this.f && this.f(b), this.c && (this.c.cancel(), this.c = null), delete this.f, delete this.C);
    };
    k.Fa = function(a, b) {
        return "signInViaRedirect" == a || "signInViaPopup" == a && this.g == b && this.f ? q(this.ic, this) : null;
    };
    k.ic = function(a, b, c, d) {
        var e = this, f = {
            requestUri: a,
            postBody: d,
            sessionId: b,
            tenantId: c
        };
        this.c && (this.c.cancel(), this.c = null);
        return e.$.then(function() {
            return Qn(e, Fg(e.a, f));
        });
    };
    k.Xc = function(a) {
        if (!Re()) return F(new t("operation-not-supported-in-this-environment"));
        var b = this, c = ng(a.providerId), d = Qe(), e = null;
        (!Te() || Ie()) && S(this).options.authDomain && a.isOAuthProvider && (e = ek(S(this).options.authDomain, S(this).options.apiKey, S(this).name, "signInViaPopup", a, null, d, _appDefault.default.SDK_VERSION || null, null, null, this.T(), this.R));
        var f = ze(e, c && c.va, c && c.ua);
        c = Pn(this).then(function(g) {
            return Tl(g, f, "signInViaPopup", a, d, !!e, b.T());
        }).then(function() {
            return new D(function(g, h) {
                b.na("signInViaPopup", null, new t("cancelled-popup-request"), b.g);
                b.f = g;
                b.C = h;
                b.g = d;
                b.c = Vl(b.b, b, "signInViaPopup", f, d);
            });
        }).then(function(g) {
            f && ye(f);
            return g ? kf(g) : null;
        }).o(function(g) {
            f && ye(f);
            throw g;
        });
        return T(this, c);
    };
    k.Yc = function(a) {
        if (!Re()) return F(new t("operation-not-supported-in-this-environment"));
        var b = this, c = Pn(this).then(function() {
            return Bn(b.i);
        }).then(function() {
            return Ul(b.b, "signInViaRedirect", a, void 0, b.T());
        });
        return T(this, c);
    };
    function Rn(a) {
        if (!Re()) return F(new t("operation-not-supported-in-this-environment"));
        var b = Pn(a).then(function() {
            return a.b.ra();
        }).then(function(c) {
            return c ? kf(c) : null;
        });
        return T(a, b);
    }
    k.ra = function() {
        var a = this;
        return Rn(this).then(function(b) {
            a.b && $l(a.b.b);
            return b;
        }).o(function(b) {
            a.b && $l(a.b.b);
            throw b;
        });
    };
    k.dd = function(a) {
        if (!a) return F(new t("null-user"));
        if (this.S != a.tenantId) return F(new t("tenant-id-mismatch"));
        var b = this, c = {
        };
        c.apiKey = S(this).options.apiKey;
        c.authDomain = S(this).options.authDomain;
        c.appName = S(this).name;
        var d = sn(a, c, b.D, b.Ga());
        return T(this, this.h.then(function() {
            if (S(b).options.apiKey != a.l) return d.reload();
        }).then(function() {
            if (U(b) && a.uid == U(b).uid) return cn(U(b), a), b.da(a);
            Gn(b, d);
            Wm(d);
            return b.da(d);
        }).then(function() {
            Sn(b);
        }));
    };
    function Tn(a, b) {
        var c = {
        };
        c.apiKey = S(a).options.apiKey;
        c.authDomain = S(a).options.authDomain;
        c.appName = S(a).name;
        a.R && (c.emulatorConfig = a.R);
        return a.$.then(function() {
            return rn(c, b, a.D, a.Ga());
        }).then(function(d) {
            if (U(a) && d.uid == U(a).uid) return cn(U(a), d), a.da(d);
            Gn(a, d);
            Wm(d);
            return a.da(d);
        }).then(function() {
            Sn(a);
        });
    }
    function Gn(a, b) {
        U(a) && (Um(U(a), a.Ba), xd(U(a), "tokenChanged", a.qa), xd(U(a), "userDeleted", a.za), xd(U(a), "userInvalidated", a.Aa), Tm(U(a)));
        b && (b.W.push(a.Ba), nd(b, "tokenChanged", a.qa), nd(b, "userDeleted", a.za), nd(b, "userInvalidated", a.Aa), 0 < a.u && Sm(b));
        M(a, "currentUser", b);
        b && (b.xa(a.la()), Om(b, a), Nm(b, a.J), Qm(b, a), Mm(b, a.R), Pm(b, a));
    }
    k.Bb = function() {
        var a = this, b = this.h.then(function() {
            a.b && $l(a.b.b);
            if (!U(a)) return E();
            Gn(a, null);
            return Dn(a.i).then(function() {
                Sn(a);
            });
        });
        return T(this, b);
    };
    function Un(a) {
        var b = un(a.D, S(a).options.authDomain).then(function(c) {
            if (a.m = c) c.ha = a.D;
            return on(a.D);
        });
        return T(a, b);
    }
    function Hn(a) {
        var b = S(a).options.authDomain, c = Un(a).then(function() {
            return En(a.i, b, a.R);
        }).then(function(d) {
            return d ? (d.ha = a.D, a.m && (a.m.ga || null) == (d.ga || null) ? d : d.reload().then(function() {
                return Cn(a.i, d).then(function() {
                    return d;
                });
            }).o(function(e) {
                return "auth/network-request-failed" == e.code ? d : Dn(a.i);
            })) : null;
        }).then(function(d) {
            Gn(a, d || null);
        });
        return T(a, c);
    }
    function In(a) {
        return a.$.then(function() {
            return Rn(a);
        }).o(function() {
        }).then(function() {
            if (!a.l) return a.ja();
        }).o(function() {
        }).then(function() {
            if (!a.l) {
                a.ba = true;
                var b = a.i;
                b.b.addListener(xn("local"), b.a, a.ja);
            }
        });
    }
    k.Zc = function() {
        var a = this;
        return En(this.i, S(this).options.authDomain).then(function(b) {
            if (!a.l) {
                var c;
                if (c = U(a) && b) {
                    c = U(a).uid;
                    var d = b.uid;
                    c = (void 0) === c || null === c || "" === c || (void 0) === d || null === d || "" === d ? false : c == d;
                }
                if (c) return cn(U(a), b), U(a).I();
                if (U(a) || b) Gn(a, b), b && (Wm(b), b.ha = a.D), a.b && Pl(a.b, a), Sn(a);
            }
        });
    };
    k.da = function(a) {
        return Cn(this.i, a);
    };
    k.mc = function() {
        Sn(this);
        this.da(U(this));
    };
    k.wc = function() {
        this.Bb();
    };
    k.xc = function() {
        this.Bb();
    };
    function Qn(a, b) {
        var c = null, d = null;
        return T(a, b.then(function(e) {
            c = qh(e);
            d = og(e);
            return Tn(a, e);
        }, function(e) {
            var f = null;
            e && "auth/multi-factor-auth-required" === e.code && (f = mm(e.w(), a, q(a.kc, a)));
            throw f || e;
        }).then(function() {
            return kf({
                user: U(a),
                credential: c,
                additionalUserInfo: d,
                operationType: "signIn"
            });
        }));
    }
    k.kc = function(a) {
        var b = this;
        return this.h.then(function() {
            return Qn(b, E(a));
        });
    };
    k.zc = function(a) {
        var b = this;
        this.addAuthTokenListener(function() {
            a.next(U(b));
        });
    };
    k.Ac = function(a) {
        var b = this;
        Vn(this, function() {
            a.next(U(b));
        });
    };
    k.Ic = function(a, b, c) {
        var d = this;
        this.ba && Promise.resolve().then(function() {
            "function" === typeof a ? a(U(d)) : "function" === typeof a.next && a.next(U(d));
        });
        return this.Pa(a, b, c);
    };
    k.Hc = function(a, b, c) {
        var d = this;
        this.ba && Promise.resolve().then(function() {
            d.W = d.getUid();
            "function" === typeof a ? a(U(d)) : "function" === typeof a.next && a.next(U(d));
        });
        return this.ib(a, b, c);
    };
    k.nc = function(a) {
        var b = this, c = this.h.then(function() {
            return U(b) ? U(b).I(a).then(function(d) {
                return {
                    accessToken: d
                };
            }) : null;
        });
        return T(this, c);
    };
    k.Tc = function(a) {
        var b = this;
        return this.h.then(function() {
            return Qn(b, O(b.a, Kj, {
                token: a
            }));
        }).then(function(c) {
            var d = c.user;
            bn(d, "isAnonymous", false);
            b.da(d);
            return c;
        });
    };
    k.Uc = function(a, b) {
        var c = this;
        return this.h.then(function() {
            return Qn(c, O(c.a, ah, {
                email: a,
                password: b
            }));
        });
    };
    k.dc = function(a, b) {
        var c = this;
        return this.h.then(function() {
            return Qn(c, O(c.a, Ej, {
                email: a,
                password: b
            }));
        });
    };
    k.ab = function(a) {
        var b = this;
        return this.h.then(function() {
            return Qn(b, a.ka(b.a));
        });
    };
    k.Sc = function(a) {
        gf("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInWithCredential instead.");
        return this.ab(a);
    };
    k.Ab = function() {
        var a = this;
        return this.h.then(function() {
            var b = U(a);
            if (b && b.isAnonymous) {
                var c = kf({
                    providerId: null,
                    isNewUser: false
                });
                return kf({
                    user: b,
                    credential: null,
                    additionalUserInfo: c,
                    operationType: "signIn"
                });
            }
            return Qn(a, a.a.Ab()).then(function(d) {
                var e = d.user;
                bn(e, "isAnonymous", true);
                a.da(e);
                return d;
            });
        });
    };
    function S(a) {
        return a.app;
    }
    function U(a) {
        return a.currentUser;
    }
    k.getUid = function() {
        return U(this) && U(this).uid || null;
    };
    function Wn(a) {
        return U(a) && U(a)._lat || null;
    }
    function Sn(a) {
        if (a.ba) {
            for(var b = 0; b < a.s.length; b++)if (a.s[b]) a.s[b](Wn(a));
            if (a.W !== a.getUid() && a.N.length) for(a.W = a.getUid(), b = 0; b < a.N.length; b++)if (a.N[b]) a.N[b](Wn(a));
        }
    }
    k.cc = function(a) {
        this.addAuthTokenListener(a);
        this.u++;
        0 < this.u && U(this) && Sm(U(this));
    };
    k.Pc = function(a) {
        var b = this;
        w(this.s, function(c) {
            c == a && b.u--;
        });
        0 > this.u && (this.u = 0);
        0 == this.u && U(this) && Tm(U(this));
        this.removeAuthTokenListener(a);
    };
    k.addAuthTokenListener = function(a) {
        var b = this;
        this.s.push(a);
        T(this, this.h.then(function() {
            b.l || Va(b.s, a) && a(Wn(b));
        }));
    };
    k.removeAuthTokenListener = function(a) {
        Xa(this.s, function(b) {
            return b == a;
        });
    };
    function Vn(a, b) {
        a.N.push(b);
        T(a, a.h.then(function() {
            !a.l && Va(a.N, b) && a.W !== a.getUid() && (a.W = a.getUid(), b(Wn(a)));
        }));
    }
    k.delete = function() {
        this.l = true;
        for(var a = 0; a < this.P.length; a++)this.P[a].cancel("app-deleted");
        this.P = [];
        this.i && (a = this.i, a.b.removeListener(xn("local"), a.a, this.ja));
        this.b && (Ql(this.b, this), $l(this.b.b));
        return Promise.resolve();
    };
    function T(a, b) {
        a.P.push(b);
        b.oa(function() {
            Wa(a.P, b);
        });
        return b;
    }
    k.hc = function(a) {
        return T(this, aj(this.a, a));
    };
    k.Bc = function(a) {
        return !!fh(a);
    };
    k.xb = function(a, b) {
        var c = this;
        return T(this, E().then(function() {
            var d = new Sf(b);
            if (!d.c) throw new t("argument-error", $f + " must be true when sending sign in link to email");
            return bg(d);
        }).then(function(d) {
            return c.a.xb(a, d);
        }).then(function() {
        }));
    };
    k.jd = function(a) {
        return this.Sa(a).then(function(b) {
            return b.data.email;
        });
    };
    k.ob = function(a, b) {
        return T(this, this.a.ob(a, b).then(function() {
        }));
    };
    k.Sa = function(a) {
        return T(this, this.a.Sa(a).then(function(b) {
            return new vf(b);
        }));
    };
    k.kb = function(a) {
        return T(this, this.a.kb(a).then(function() {
        }));
    };
    k.wb = function(a, b) {
        var c = this;
        return T(this, E().then(function() {
            return "undefined" === typeof b || mb(b) ? {
            } : bg(new Sf(b));
        }).then(function(d) {
            return c.a.wb(a, d);
        }).then(function() {
        }));
    };
    k.Wc = function(a, b) {
        return T(this, gm(this, a, b, q(this.ab, this)));
    };
    k.Vc = function(a, b) {
        var c = this;
        return T(this, E().then(function() {
            var d = b || re(), e = eh(a, d);
            d = fh(d);
            if (!d) throw new t("argument-error", "Invalid email link!");
            if (d.tenantId !== c.T()) throw new t("tenant-id-mismatch");
            return c.ab(e);
        }));
    };
    function Xn() {
    }
    Xn.prototype.render = function() {
    };
    Xn.prototype.reset = function() {
    };
    Xn.prototype.getResponse = function() {
    };
    Xn.prototype.execute = function() {
    };
    function Yn() {
        this.a = {
        };
        this.b = 1000000000000;
    }
    var Zn = null;
    Yn.prototype.render = function(a, b) {
        this.a[this.b.toString()] = new $n(a, b);
        return this.b++;
    };
    Yn.prototype.reset = function(a) {
        var b = ao(this, a);
        a = bo(a);
        b && a && (b.delete(), delete this.a[a]);
    };
    Yn.prototype.getResponse = function(a) {
        return (a = ao(this, a)) ? a.getResponse() : null;
    };
    Yn.prototype.execute = function(a) {
        (a = ao(this, a)) && a.execute();
    };
    function ao(a, b) {
        return (b = bo(b)) ? a.a[b] || null : null;
    }
    function bo(a) {
        return (a = "undefined" === typeof a ? 1000000000000 : a) ? a.toString() : null;
    }
    function $n(a, b) {
        this.g = false;
        this.c = b;
        this.a = this.b = null;
        this.h = "invisible" !== this.c.size;
        this.f = kc(a);
        var c = this;
        this.i = function() {
            c.execute();
        };
        this.h ? this.execute() : nd(this.f, "click", this.i);
    }
    $n.prototype.getResponse = function() {
        co(this);
        return this.b;
    };
    $n.prototype.execute = function() {
        co(this);
        var a = this;
        this.a || (this.a = setTimeout(function() {
            a.b = Me();
            var b = a.c.callback, c = a.c["expired-callback"];
            if (b) try {
                b(a.b);
            } catch (d) {
            }
            a.a = setTimeout(function() {
                a.a = null;
                a.b = null;
                if (c) try {
                    c();
                } catch (d) {
                }
                a.h && a.execute();
            }, 60000);
        }, 500));
    };
    $n.prototype.delete = function() {
        co(this);
        this.g = true;
        clearTimeout(this.a);
        this.a = null;
        xd(this.f, "click", this.i);
    };
    function co(a) {
        if (a.g) throw Error("reCAPTCHA mock was already deleted!");
    }
    function eo() {
    }
    M(eo, "FACTOR_ID", "phone");
    function fo() {
    }
    fo.prototype.g = function() {
        Zn || (Zn = new Yn);
        return E(Zn);
    };
    fo.prototype.c = function() {
    };
    var go = null;
    function ho() {
        this.b = l.grecaptcha ? Infinity : 0;
        this.f = null;
        this.a = "__rcb" + Math.floor(1000000 * Math.random()).toString();
    }
    var io = new qb(rb, "https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"), jo = new Ze(30000, 60000);
    ho.prototype.g = function(a) {
        var b = this;
        return new D(function(c, d) {
            var e = setTimeout(function() {
                d(new t("network-request-failed"));
            }, jo.get());
            if (!l.grecaptcha || a !== b.f && !b.b) {
                l[b.a] = function() {
                    if (l.grecaptcha) {
                        b.f = a;
                        var g = l.grecaptcha.render;
                        l.grecaptcha.render = function(h, m) {
                            h = g(h, m);
                            b.b++;
                            return h;
                        };
                        clearTimeout(e);
                        c(l.grecaptcha);
                    } else clearTimeout(e), d(new t("internal-error"));
                    delete l[b.a];
                };
                var f = zb(io, {
                    onload: b.a,
                    hl: a || ""
                });
                E(Bi(f)).o(function() {
                    clearTimeout(e);
                    d(new t("internal-error", "Unable to load external reCAPTCHA dependencies!"));
                });
            } else clearTimeout(e), c(l.grecaptcha);
        });
    };
    ho.prototype.c = function() {
        this.b--;
    };
    var ko = null;
    function lo(a, b, c, d, e, f, g) {
        M(this, "type", "recaptcha");
        this.c = this.f = null;
        this.J = false;
        this.v = b;
        this.g = null;
        g ? (go || (go = new fo), g = go) : (ko || (ko = new ho), g = ko);
        this.m = g;
        this.a = c || {
            theme: "light",
            type: "image"
        };
        this.h = [];
        if (this.a[mo]) throw new t("argument-error", "sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");
        this.i = "invisible" === this.a[no];
        if (!l.document) throw new t("operation-not-supported-in-this-environment", "RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");
        if (!kc(b) || !this.i && kc(b).hasChildNodes()) throw new t("argument-error", "reCAPTCHA container is either not found or already contains inner elements!");
        this.s = new Ii(a, f || null, e || null);
        this.u = d || function() {
            return null;
        };
        var h = this;
        this.l = [];
        var m = this.a[oo];
        this.a[oo] = function(v) {
            po(h, v);
            if ("function" === typeof m) m(v);
            else if ("string" === typeof m) {
                var B = L(m, l);
                "function" === typeof B && B(v);
            }
        };
        var p = this.a[qo];
        this.a[qo] = function() {
            po(h, null);
            if ("function" === typeof p) p();
            else if ("string" === typeof p) {
                var v = L(p, l);
                "function" === typeof v && v();
            }
        };
    }
    var oo = "callback", qo = "expired-callback", mo = "sitekey", no = "size";
    function po(a, b) {
        for(var c = 0; c < a.l.length; c++)try {
            a.l[c](b);
        } catch (d) {
        }
    }
    function ro(a, b) {
        Xa(a.l, function(c) {
            return c == b;
        });
    }
    function so(a, b) {
        a.h.push(b);
        b.oa(function() {
            Wa(a.h, b);
        });
        return b;
    }
    k = lo.prototype;
    k.Ia = function() {
        var a = this;
        return this.f ? this.f : this.f = so(this, E().then(function() {
            if (Se() && !Je()) return Ee();
            throw new t("operation-not-supported-in-this-environment", "RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.");
        }).then(function() {
            return a.m.g(a.u());
        }).then(function(b) {
            a.g = b;
            return O(a.s, Jj, {
            });
        }).then(function(b) {
            a.a[mo] = b.recaptchaSiteKey;
        }).o(function(b) {
            a.f = null;
            throw b;
        }));
    };
    k.render = function() {
        to(this);
        var a = this;
        return so(this, this.Ia().then(function() {
            if (null === a.c) {
                var b = a.v;
                if (!a.i) {
                    var c = kc(b);
                    b = nc("DIV");
                    c.appendChild(b);
                }
                a.c = a.g.render(b, a.a);
            }
            return a.c;
        }));
    };
    k.verify = function() {
        to(this);
        var a = this;
        return so(this, this.render().then(function(b) {
            return new D(function(c) {
                var d = a.g.getResponse(b);
                if (d) c(d);
                else {
                    var e = function(f) {
                        f && (ro(a, e), c(f));
                    };
                    a.l.push(e);
                    a.i && a.g.execute(a.c);
                }
            });
        }));
    };
    k.reset = function() {
        to(this);
        null !== this.c && this.g.reset(this.c);
    };
    function to(a) {
        if (a.J) throw new t("internal-error", "RecaptchaVerifier instance has been destroyed.");
    }
    k.clear = function() {
        to(this);
        this.J = true;
        this.m.c();
        for(var a = 0; a < this.h.length; a++)this.h[a].cancel("RecaptchaVerifier instance has been destroyed.");
        if (!this.i) {
            a = kc(this.v);
            for(var b; b = a.firstChild;)a.removeChild(b);
        }
    };
    function uo(a, b, c) {
        var d = false;
        try {
            this.b = c || _appDefault.default.app();
        } catch (g) {
            throw new t("argument-error", "No firebase.app.App instance is currently initialized.");
        }
        if (this.b.options && this.b.options.apiKey) c = this.b.options.apiKey;
        else throw new t("invalid-api-key");
        var e = this, f = null;
        try {
            f = this.b.auth().Ga();
        } catch (g) {
        }
        try {
            d = this.b.auth().settings.appVerificationDisabledForTesting;
        } catch (g) {
        }
        f = _appDefault.default.SDK_VERSION ? Oe(_appDefault.default.SDK_VERSION, f) : null;
        lo.call(this, c, a, b, function() {
            try {
                var g = e.b.auth().la();
            } catch (h) {
                g = null;
            }
            return g;
        }, f, Ca(Da), d);
    }
    r(uo, lo);
    function vo(a, b, c, d) {
        a: {
            c = Array.prototype.slice.call(c);
            var e = 0;
            for(var f = false, g = 0; g < b.length; g++)if (b[g].optional) f = true;
            else {
                if (f) throw new t("internal-error", "Argument validator encountered a required argument after an optional argument.");
                e++;
            }
            f = b.length;
            if (c.length < e || f < c.length) d = "Expected " + (e == f ? 1 == e ? "1 argument" : e + " arguments" : e + "-" + f + " arguments") + " but got " + c.length + ".";
            else {
                for(e = 0; e < c.length; e++)if (f = b[e].optional && (void 0) === c[e], !b[e].M(c[e]) && !f) {
                    b = b[e];
                    if (0 > e || e >= wo.length) throw new t("internal-error", "Argument validator received an unsupported number of arguments.");
                    c = wo[e];
                    d = (d ? "" : c + " argument ") + (b.name ? '"' + b.name + '" ' : "") + "must be " + b.K + ".";
                    break a;
                }
                d = null;
            }
        }
        if (d) throw new t("argument-error", a + " failed: " + d);
    }
    var wo = "First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");
    function V(a, b) {
        return {
            name: a || "",
            K: "a valid string",
            optional: !!b,
            M: function(c) {
                return "string" === typeof c;
            }
        };
    }
    function xo(a, b) {
        return {
            name: a || "",
            K: "a boolean",
            optional: !!b,
            M: function(c) {
                return "boolean" === typeof c;
            }
        };
    }
    function W(a, b) {
        return {
            name: a || "",
            K: "a valid object",
            optional: !!b,
            M: n
        };
    }
    function yo(a, b) {
        return {
            name: a || "",
            K: "a function",
            optional: !!b,
            M: function(c) {
                return "function" === typeof c;
            }
        };
    }
    function zo(a, b) {
        return {
            name: a || "",
            K: "null",
            optional: !!b,
            M: function(c) {
                return null === c;
            }
        };
    }
    function Ao() {
        return {
            name: "",
            K: "an HTML element",
            optional: false,
            M: function(a) {
                return !!(a && a instanceof Element);
            }
        };
    }
    function Bo() {
        return {
            name: "auth",
            K: "an instance of Firebase Auth",
            optional: true,
            M: function(a) {
                return !!(a && a instanceof Fn);
            }
        };
    }
    function Co() {
        return {
            name: "app",
            K: "an instance of Firebase App",
            optional: true,
            M: function(a) {
                return !!(a && a instanceof _appDefault.default.app.App);
            }
        };
    }
    function Do(a) {
        return {
            name: a ? a + "Credential" : "credential",
            K: a ? "a valid " + a + " credential" : "a valid credential",
            optional: false,
            M: function(b) {
                if (!b) return false;
                var c = !a || b.providerId === a;
                return !(!b.ka || !c);
            }
        };
    }
    function Eo() {
        return {
            name: "multiFactorAssertion",
            K: "a valid multiFactorAssertion",
            optional: false,
            M: function(a) {
                return a ? !!a.tb : false;
            }
        };
    }
    function Fo() {
        return {
            name: "authProvider",
            K: "a valid Auth provider",
            optional: false,
            M: function(a) {
                return !!(a && a.providerId && a.hasOwnProperty && a.hasOwnProperty("isOAuthProvider"));
            }
        };
    }
    function Go(a, b) {
        return n(a) && "string" === typeof a.type && a.type === b && "function" === typeof a.Ha;
    }
    function Ho(a) {
        return n(a) && "string" === typeof a.uid;
    }
    function Io() {
        return {
            name: "applicationVerifier",
            K: "an implementation of firebase.auth.ApplicationVerifier",
            optional: false,
            M: function(a) {
                return !(!a || "string" !== typeof a.type || "function" !== typeof a.verify);
            }
        };
    }
    function X(a, b, c, d) {
        return {
            name: c || "",
            K: a.K + " or " + b.K,
            optional: !!d,
            M: function(e) {
                return a.M(e) || b.M(e);
            }
        };
    }
    function Y(a, b) {
        for(var c in b){
            var d = b[c].name;
            a[d] = Jo(d, a[c], b[c].j);
        }
    }
    function Ko(a, b) {
        for(var c in b){
            var d = b[c].name;
            d !== c && Object.defineProperty(a, d, {
                get: ua(function(e) {
                    return this[e];
                }, c),
                set: ua(function(e, f, g, h) {
                    vo(e, [
                        g
                    ], [
                        h
                    ], true);
                    this[f] = h;
                }, d, c, b[c].lb),
                enumerable: true
            });
        }
    }
    function Z(a, b, c, d) {
        a[b] = Jo(b, c, d);
    }
    function Jo(a, b, c) {
        function d() {
            var g = Array.prototype.slice.call(arguments);
            vo(e, c, g);
            return b.apply(this, g);
        }
        if (!c) return b;
        var e = Lo(a), f;
        for(f in b)d[f] = b[f];
        for(f in b.prototype)d.prototype[f] = b.prototype[f];
        return d;
    }
    function Lo(a) {
        a = a.split(".");
        return a[a.length - 1];
    }
    Y(Fn.prototype, {
        kb: {
            name: "applyActionCode",
            j: [
                V("code")
            ]
        },
        Sa: {
            name: "checkActionCode",
            j: [
                V("code")
            ]
        },
        ob: {
            name: "confirmPasswordReset",
            j: [
                V("code"),
                V("newPassword")
            ]
        },
        dc: {
            name: "createUserWithEmailAndPassword",
            j: [
                V("email"),
                V("password")
            ]
        },
        hc: {
            name: "fetchSignInMethodsForEmail",
            j: [
                V("email")
            ]
        },
        ra: {
            name: "getRedirectResult",
            j: []
        },
        Bc: {
            name: "isSignInWithEmailLink",
            j: [
                V("emailLink")
            ]
        },
        Hc: {
            name: "onAuthStateChanged",
            j: [
                X(W(), yo(), "nextOrObserver"),
                yo("opt_error", true),
                yo("opt_completed", true)
            ]
        },
        Ic: {
            name: "onIdTokenChanged",
            j: [
                X(W(), yo(), "nextOrObserver"),
                yo("opt_error", true),
                yo("opt_completed", true)
            ]
        },
        wb: {
            name: "sendPasswordResetEmail",
            j: [
                V("email"),
                X(W("opt_actionCodeSettings", true), zo(null, true), "opt_actionCodeSettings", true)
            ]
        },
        xb: {
            name: "sendSignInLinkToEmail",
            j: [
                V("email"),
                W("actionCodeSettings")
            ]
        },
        yb: {
            name: "setPersistence",
            j: [
                V("persistence")
            ]
        },
        Sc: {
            name: "signInAndRetrieveDataWithCredential",
            j: [
                Do()
            ]
        },
        Ab: {
            name: "signInAnonymously",
            j: []
        },
        ab: {
            name: "signInWithCredential",
            j: [
                Do()
            ]
        },
        Tc: {
            name: "signInWithCustomToken",
            j: [
                V("token")
            ]
        },
        Uc: {
            name: "signInWithEmailAndPassword",
            j: [
                V("email"),
                V("password")
            ]
        },
        Vc: {
            name: "signInWithEmailLink",
            j: [
                V("email"),
                V("emailLink", true)
            ]
        },
        Wc: {
            name: "signInWithPhoneNumber",
            j: [
                V("phoneNumber"),
                Io()
            ]
        },
        Xc: {
            name: "signInWithPopup",
            j: [
                Fo()
            ]
        },
        Yc: {
            name: "signInWithRedirect",
            j: [
                Fo()
            ]
        },
        dd: {
            name: "updateCurrentUser",
            j: [
                X(function(a) {
                    return {
                        name: "user",
                        K: "an instance of Firebase User",
                        optional: !!a,
                        M: function(b) {
                            return !!(b && b instanceof Im);
                        }
                    };
                }(), zo(), "user")
            ]
        },
        Bb: {
            name: "signOut",
            j: []
        },
        toJSON: {
            name: "toJSON",
            j: [
                V(null, true)
            ]
        },
        fd: {
            name: "useDeviceLanguage",
            j: []
        },
        gd: {
            name: "useEmulator",
            j: [
                V("url"),
                W("options", true)
            ]
        },
        jd: {
            name: "verifyPasswordResetCode",
            j: [
                V("code")
            ]
        }
    });
    Ko(Fn.prototype, {
        lc: {
            name: "languageCode",
            lb: X(V(), zo(), "languageCode")
        },
        ti: {
            name: "tenantId",
            lb: X(V(), zo(), "tenantId")
        }
    });
    Fn.Persistence = Rk;
    Fn.Persistence.LOCAL = "local";
    Fn.Persistence.SESSION = "session";
    Fn.Persistence.NONE = "none";
    Y(Im.prototype, {
        "delete": {
            name: "delete",
            j: []
        },
        oc: {
            name: "getIdTokenResult",
            j: [
                xo("opt_forceRefresh", true)
            ]
        },
        I: {
            name: "getIdToken",
            j: [
                xo("opt_forceRefresh", true)
            ]
        },
        Cc: {
            name: "linkAndRetrieveDataWithCredential",
            j: [
                Do()
            ]
        },
        rb: {
            name: "linkWithCredential",
            j: [
                Do()
            ]
        },
        Dc: {
            name: "linkWithPhoneNumber",
            j: [
                V("phoneNumber"),
                Io()
            ]
        },
        Ec: {
            name: "linkWithPopup",
            j: [
                Fo()
            ]
        },
        Fc: {
            name: "linkWithRedirect",
            j: [
                Fo()
            ]
        },
        Lc: {
            name: "reauthenticateAndRetrieveDataWithCredential",
            j: [
                Do()
            ]
        },
        ub: {
            name: "reauthenticateWithCredential",
            j: [
                Do()
            ]
        },
        Mc: {
            name: "reauthenticateWithPhoneNumber",
            j: [
                V("phoneNumber"),
                Io()
            ]
        },
        Nc: {
            name: "reauthenticateWithPopup",
            j: [
                Fo()
            ]
        },
        Oc: {
            name: "reauthenticateWithRedirect",
            j: [
                Fo()
            ]
        },
        reload: {
            name: "reload",
            j: []
        },
        vb: {
            name: "sendEmailVerification",
            j: [
                X(W("opt_actionCodeSettings", true), zo(null, true), "opt_actionCodeSettings", true)
            ]
        },
        toJSON: {
            name: "toJSON",
            j: [
                V(null, true)
            ]
        },
        cd: {
            name: "unlink",
            j: [
                V("provider")
            ]
        },
        Cb: {
            name: "updateEmail",
            j: [
                V("email")
            ]
        },
        Db: {
            name: "updatePassword",
            j: [
                V("password")
            ]
        },
        ed: {
            name: "updatePhoneNumber",
            j: [
                Do("phone")
            ]
        },
        Eb: {
            name: "updateProfile",
            j: [
                W("profile")
            ]
        },
        Fb: {
            name: "verifyBeforeUpdateEmail",
            j: [
                V("email"),
                X(W("opt_actionCodeSettings", true), zo(null, true), "opt_actionCodeSettings", true)
            ]
        }
    });
    Y(Yn.prototype, {
        execute: {
            name: "execute"
        },
        render: {
            name: "render"
        },
        reset: {
            name: "reset"
        },
        getResponse: {
            name: "getResponse"
        }
    });
    Y(Xn.prototype, {
        execute: {
            name: "execute"
        },
        render: {
            name: "render"
        },
        reset: {
            name: "reset"
        },
        getResponse: {
            name: "getResponse"
        }
    });
    Y(D.prototype, {
        oa: {
            name: "finally"
        },
        o: {
            name: "catch"
        },
        then: {
            name: "then"
        }
    });
    Ko(em.prototype, {
        appVerificationDisabled: {
            name: "appVerificationDisabledForTesting",
            lb: xo("appVerificationDisabledForTesting")
        }
    });
    Y(fm.prototype, {
        confirm: {
            name: "confirm",
            j: [
                V("verificationCode")
            ]
        }
    });
    Z(Bg, "fromJSON", function(a) {
        a = "string" === typeof a ? JSON.parse(a) : a;
        for(var b, c = [
            Mg,
            dh,
            kh,
            Jg
        ], d = 0; d < c.length; d++)if (b = c[d](a)) return b;
        return null;
    }, [
        X(V(), W(), "json")
    ]);
    Z(Zg, "credential", function(a, b) {
        return new Yg(a, b);
    }, [
        V("email"),
        V("password")
    ]);
    Y(Yg.prototype, {
        w: {
            name: "toJSON",
            j: [
                V(null, true)
            ]
        }
    });
    Y(Qg.prototype, {
        Ca: {
            name: "addScope",
            j: [
                V("scope")
            ]
        },
        Ka: {
            name: "setCustomParameters",
            j: [
                W("customOAuthParameters")
            ]
        }
    });
    Z(Qg, "credential", Rg, [
        X(V(), W(), "token")
    ]);
    Z(Zg, "credentialWithLink", eh, [
        V("email"),
        V("emailLink")
    ]);
    Y(Sg.prototype, {
        Ca: {
            name: "addScope",
            j: [
                V("scope")
            ]
        },
        Ka: {
            name: "setCustomParameters",
            j: [
                W("customOAuthParameters")
            ]
        }
    });
    Z(Sg, "credential", Tg, [
        X(V(), W(), "token")
    ]);
    Y(Ug.prototype, {
        Ca: {
            name: "addScope",
            j: [
                V("scope")
            ]
        },
        Ka: {
            name: "setCustomParameters",
            j: [
                W("customOAuthParameters")
            ]
        }
    });
    Z(Ug, "credential", Vg, [
        X(V(), X(W(), zo()), "idToken"),
        X(V(), zo(), "accessToken", true)
    ]);
    Y(Wg.prototype, {
        Ka: {
            name: "setCustomParameters",
            j: [
                W("customOAuthParameters")
            ]
        }
    });
    Z(Wg, "credential", Xg, [
        X(V(), W(), "token"),
        V("secret", true)
    ]);
    Y(Pg.prototype, {
        Ca: {
            name: "addScope",
            j: [
                V("scope")
            ]
        },
        credential: {
            name: "credential",
            j: [
                X(V(), X(W(), zo()), "optionsOrIdToken"),
                X(V(), zo(), "accessToken", true)
            ]
        },
        Ka: {
            name: "setCustomParameters",
            j: [
                W("customOAuthParameters")
            ]
        }
    });
    Y(Kg.prototype, {
        w: {
            name: "toJSON",
            j: [
                V(null, true)
            ]
        }
    });
    Y(Eg.prototype, {
        w: {
            name: "toJSON",
            j: [
                V(null, true)
            ]
        }
    });
    Z(lh, "credential", ph, [
        V("verificationId"),
        V("verificationCode")
    ]);
    Y(lh.prototype, {
        gb: {
            name: "verifyPhoneNumber",
            j: [
                X(V(), function(a, b) {
                    return {
                        name: a || "phoneInfoOptions",
                        K: "valid phone info options",
                        optional: !!b,
                        M: function(c) {
                            return c ? c.session && c.phoneNumber ? Go(c.session, zg) && "string" === typeof c.phoneNumber : c.session && c.multiFactorHint ? Go(c.session, Ag) && Ho(c.multiFactorHint) : c.session && c.multiFactorUid ? Go(c.session, Ag) && "string" === typeof c.multiFactorUid : c.phoneNumber ? "string" === typeof c.phoneNumber : false : false;
                        }
                    };
                }(), "phoneInfoOptions"),
                Io()
            ]
        }
    });
    Y(gh.prototype, {
        w: {
            name: "toJSON",
            j: [
                V(null, true)
            ]
        }
    });
    Y(t.prototype, {
        toJSON: {
            name: "toJSON",
            j: [
                V(null, true)
            ]
        }
    });
    Y(yh.prototype, {
        toJSON: {
            name: "toJSON",
            j: [
                V(null, true)
            ]
        }
    });
    Y(xh.prototype, {
        toJSON: {
            name: "toJSON",
            j: [
                V(null, true)
            ]
        }
    });
    Y(lm.prototype, {
        toJSON: {
            name: "toJSON",
            j: [
                V(null, true)
            ]
        }
    });
    Y(im.prototype, {
        Rc: {
            name: "resolveSignIn",
            j: [
                Eo()
            ]
        }
    });
    Y(tm.prototype, {
        Sb: {
            name: "getSession",
            j: []
        },
        fc: {
            name: "enroll",
            j: [
                Eo(),
                V("displayName", true)
            ]
        },
        bd: {
            name: "unenroll",
            j: [
                X({
                    name: "multiFactorInfo",
                    K: "a valid multiFactorInfo",
                    optional: false,
                    M: Ho
                }, V(), "multiFactorInfoIdentifier")
            ]
        }
    });
    Y(uo.prototype, {
        clear: {
            name: "clear",
            j: []
        },
        render: {
            name: "render",
            j: []
        },
        verify: {
            name: "verify",
            j: []
        }
    });
    Z(Jf, "parseLink", Rf, [
        V("link")
    ]);
    Z(eo, "assertion", function(a) {
        return new rm(a);
    }, [
        Do("phone")
    ]);
    (function() {
        if ("undefined" !== typeof _appDefault.default && _appDefault.default.INTERNAL && _appDefault.default.INTERNAL.registerComponent) {
            var a = {
                ActionCodeInfo: {
                    Operation: {
                        EMAIL_SIGNIN: Af,
                        PASSWORD_RESET: "PASSWORD_RESET",
                        RECOVER_EMAIL: "RECOVER_EMAIL",
                        REVERT_SECOND_FACTOR_ADDITION: Cf,
                        VERIFY_AND_CHANGE_EMAIL: Bf,
                        VERIFY_EMAIL: "VERIFY_EMAIL"
                    }
                },
                Auth: Fn,
                AuthCredential: Bg,
                Error: t
            };
            Z(a, "EmailAuthProvider", Zg, []);
            Z(a, "FacebookAuthProvider", Qg, []);
            Z(a, "GithubAuthProvider", Sg, []);
            Z(a, "GoogleAuthProvider", Ug, []);
            Z(a, "TwitterAuthProvider", Wg, []);
            Z(a, "OAuthProvider", Pg, [
                V("providerId")
            ]);
            Z(a, "SAMLAuthProvider", Og, [
                V("providerId")
            ]);
            Z(a, "PhoneAuthProvider", lh, [
                Bo()
            ]);
            Z(a, "RecaptchaVerifier", uo, [
                X(V(), Ao(), "recaptchaContainer"),
                W("recaptchaParameters", true),
                Co()
            ]);
            Z(a, "ActionCodeURL", Jf, []);
            Z(a, "PhoneMultiFactorGenerator", eo, []);
            _appDefault.default.INTERNAL.registerComponent({
                name: "auth",
                instanceFactory: function(b) {
                    b = b.getProvider("app").getImmediate();
                    return new Fn(b);
                },
                multipleInstances: false,
                serviceProps: a,
                instantiationMode: "LAZY",
                type: "PUBLIC",
                onInstanceCreated: function(b) {
                    b.getProvider("auth-internal").initialize();
                }
            });
            _appDefault.default.INTERNAL.registerComponent({
                name: "auth-internal",
                instanceFactory: function(b) {
                    b = b.getProvider("auth").getImmediate();
                    return {
                        getUid: q(b.getUid, b),
                        getToken: q(b.nc, b),
                        addAuthTokenListener: q(b.cc, b),
                        removeAuthTokenListener: q(b.Pc, b)
                    };
                },
                multipleInstances: false,
                instantiationMode: "LAZY",
                type: "PRIVATE"
            });
            _appDefault.default.registerVersion("@firebase/auth", "0.16.8");
            _appDefault.default.INTERNAL.extendNamespace({
                User: Im
            });
        } else throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");
    })();
}).apply(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {
});

},{"@firebase/app":"6IUA5","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"RnLqB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DataSnapshot", ()=>DataSnapshot
);
parcelHelpers.export(exports, "Database", ()=>Database
);
parcelHelpers.export(exports, "OnDisconnect", ()=>OnDisconnect
);
parcelHelpers.export(exports, "Query", ()=>Query
);
parcelHelpers.export(exports, "Reference", ()=>Reference1
);
parcelHelpers.export(exports, "ServerValue", ()=>ServerValue
);
parcelHelpers.export(exports, "enableLogging", ()=>enableLogging
);
parcelHelpers.export(exports, "registerDatabase", ()=>registerDatabase
);
var _app = require("@firebase/app");
var _appDefault = parcelHelpers.interopDefault(_app);
var _component = require("@firebase/component");
var _util = require("@firebase/util");
var _tslib = require("tslib");
var _logger = require("@firebase/logger");
var process = require("process");
var name = "@firebase/database";
var version = "0.11.0";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** The semver (www.semver.org) version of the SDK. */ var SDK_VERSION = '';
// SDK_VERSION should be set before any database instance is created
function setSDKVersion(version1) {
    SDK_VERSION = version1;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Wraps a DOM Storage object and:
 * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.
 * - prefixes names with "firebase:" to avoid collisions with app data.
 *
 * We automatically (see storage.js) create two such wrappers, one for sessionStorage,
 * and one for localStorage.
 *
 */ var DOMStorageWrapper = function() {
    /**
     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)
     */ function DOMStorageWrapper1(domStorage_) {
        this.domStorage_ = domStorage_;
        // Use a prefix to avoid collisions with other stuff saved by the app.
        this.prefix_ = 'firebase:';
    }
    /**
     * @param key - The key to save the value under
     * @param value - The value being stored, or null to remove the key.
     */ DOMStorageWrapper1.prototype.set = function(key, value) {
        if (value == null) this.domStorage_.removeItem(this.prefixedName_(key));
        else this.domStorage_.setItem(this.prefixedName_(key), _util.stringify(value));
    };
    /**
     * @returns The value that was stored under this key, or null
     */ DOMStorageWrapper1.prototype.get = function(key) {
        var storedVal = this.domStorage_.getItem(this.prefixedName_(key));
        if (storedVal == null) return null;
        else return _util.jsonEval(storedVal);
    };
    DOMStorageWrapper1.prototype.remove = function(key) {
        this.domStorage_.removeItem(this.prefixedName_(key));
    };
    DOMStorageWrapper1.prototype.prefixedName_ = function(name1) {
        return this.prefix_ + name1;
    };
    DOMStorageWrapper1.prototype.toString = function() {
        return this.domStorage_.toString();
    };
    return DOMStorageWrapper1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An in-memory storage implementation that matches the API of DOMStorageWrapper
 * (TODO: create interface for both to implement).
 */ var MemoryStorage = function() {
    function MemoryStorage1() {
        this.cache_ = {
        };
        this.isInMemoryStorage = true;
    }
    MemoryStorage1.prototype.set = function(key, value) {
        if (value == null) delete this.cache_[key];
        else this.cache_[key] = value;
    };
    MemoryStorage1.prototype.get = function(key) {
        if (_util.contains(this.cache_, key)) return this.cache_[key];
        return null;
    };
    MemoryStorage1.prototype.remove = function(key) {
        delete this.cache_[key];
    };
    return MemoryStorage1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.
 * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change
 * to reflect this type
 *
 * @param domStorageName - Name of the underlying storage object
 *   (e.g. 'localStorage' or 'sessionStorage').
 * @returns Turning off type information until a common interface is defined.
 */ var createStoragefor = function(domStorageName) {
    try {
        // NOTE: just accessing "localStorage" or "window['localStorage']" may throw a security exception,
        // so it must be inside the try/catch.
        if (typeof window !== 'undefined' && typeof window[domStorageName] !== 'undefined') {
            // Need to test cache. Just because it's here doesn't mean it works
            var domStorage = window[domStorageName];
            domStorage.setItem('firebase:sentinel', 'cache');
            domStorage.removeItem('firebase:sentinel');
            return new DOMStorageWrapper(domStorage);
        }
    } catch (e) {
    }
    // Failed to create wrapper.  Just return in-memory storage.
    // TODO: log?
    return new MemoryStorage();
};
/** A storage object that lasts across sessions */ var PersistentStorage = createStoragefor('localStorage');
/** A storage object that only lasts one session */ var SessionStorage = createStoragefor('sessionStorage');
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var logClient = new _logger.Logger('@firebase/database');
/**
 * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).
 */ var LUIDGenerator = function() {
    var id = 1;
    return function() {
        return id++;
    };
}();
/**
 * Sha1 hash of the input string
 * @param str - The string to hash
 * @returns {!string} The resulting hash
 */ var sha1 = function(str) {
    var utf8Bytes = _util.stringToByteArray(str);
    var sha11 = new _util.Sha1();
    sha11.update(utf8Bytes);
    var sha1Bytes = sha11.digest();
    return _util.base64.encodeByteArray(sha1Bytes);
};
var buildLogMessage_ = function() {
    var varArgs = [];
    for(var _i = 0; _i < arguments.length; _i++)varArgs[_i] = arguments[_i];
    var message = '';
    for(var i = 0; i < varArgs.length; i++){
        var arg = varArgs[i];
        if (Array.isArray(arg) || arg && typeof arg === 'object' && // eslint-disable-next-line @typescript-eslint/no-explicit-any
        typeof arg.length === 'number') message += buildLogMessage_.apply(null, arg);
        else if (typeof arg === 'object') message += _util.stringify(arg);
        else message += arg;
        message += ' ';
    }
    return message;
};
/**
 * Use this for all debug messages in Firebase.
 */ var logger = null;
/**
 * Flag to check for log availability on first log message
 */ var firstLog_ = true;
/**
 * The implementation of Firebase.enableLogging (defined here to break dependencies)
 * @param logger_ - A flag to turn on logging, or a custom logger
 * @param persistent - Whether or not to persist logging settings across refreshes
 */ var enableLogging = function(logger_, persistent) {
    _util.assert(!persistent || logger_ === true || logger_ === false, "Can't turn on custom loggers persistently.");
    if (logger_ === true) {
        logClient.logLevel = _logger.LogLevel.VERBOSE;
        logger = logClient.log.bind(logClient);
        if (persistent) SessionStorage.set('logging_enabled', true);
    } else if (typeof logger_ === 'function') logger = logger_;
    else {
        logger = null;
        SessionStorage.remove('logging_enabled');
    }
};
var log = function() {
    var varArgs = [];
    for(var _i = 0; _i < arguments.length; _i++)varArgs[_i] = arguments[_i];
    if (firstLog_ === true) {
        firstLog_ = false;
        if (logger === null && SessionStorage.get('logging_enabled') === true) enableLogging(true);
    }
    if (logger) {
        var message = buildLogMessage_.apply(null, varArgs);
        logger(message);
    }
};
var logWrapper = function(prefix) {
    return function() {
        var varArgs = [];
        for(var _i = 0; _i < arguments.length; _i++)varArgs[_i] = arguments[_i];
        log.apply(void 0, _tslib.__spreadArray([
            prefix
        ], _tslib.__read(varArgs)));
    };
};
var error = function() {
    var varArgs = [];
    for(var _i = 0; _i < arguments.length; _i++)varArgs[_i] = arguments[_i];
    var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, _tslib.__spreadArray([], _tslib.__read(varArgs)));
    logClient.error(message);
};
var fatal = function() {
    var varArgs = [];
    for(var _i = 0; _i < arguments.length; _i++)varArgs[_i] = arguments[_i];
    var message = "FIREBASE FATAL ERROR: " + buildLogMessage_.apply(void 0, _tslib.__spreadArray([], _tslib.__read(varArgs)));
    logClient.error(message);
    throw new Error(message);
};
var warn = function() {
    var varArgs = [];
    for(var _i = 0; _i < arguments.length; _i++)varArgs[_i] = arguments[_i];
    var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, _tslib.__spreadArray([], _tslib.__read(varArgs)));
    logClient.warn(message);
};
/**
 * Logs a warning if the containing page uses https. Called when a call to new Firebase
 * does not use https.
 */ var warnIfPageIsSecure = function() {
    // Be very careful accessing browser globals. Who knows what may or may not exist.
    if (typeof window !== 'undefined' && window.location && window.location.protocol && window.location.protocol.indexOf('https:') !== -1) warn("Insecure Firebase access from a secure page. Please use https in calls to new Firebase().");
};
/**
 * Returns true if data is NaN, or +/- Infinity.
 */ var isInvalidJSONNumber = function(data) {
    return typeof data === 'number' && (data !== data || data === Number.POSITIVE_INFINITY || data === Number.NEGATIVE_INFINITY);
};
var executeWhenDOMReady = function(fn) {
    if (_util.isNodeSdk() || document.readyState === 'complete') fn();
    else {
        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which
        // fire before onload), but fall back to onload.
        var called_1 = false;
        var wrappedFn_1 = function() {
            if (!document.body) {
                setTimeout(wrappedFn_1, Math.floor(10));
                return;
            }
            if (!called_1) {
                called_1 = true;
                fn();
            }
        };
        if (document.addEventListener) {
            document.addEventListener('DOMContentLoaded', wrappedFn_1, false);
            // fallback to onload.
            window.addEventListener('load', wrappedFn_1, false);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        } else if (document.attachEvent) {
            // IE.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            document.attachEvent('onreadystatechange', function() {
                if (document.readyState === 'complete') wrappedFn_1();
            });
            // fallback to onload.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            window.attachEvent('onload', wrappedFn_1);
        // jQuery has an extra hack for IE that we could employ (based on
        // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.
        // I'm hoping we don't need it.
        }
    }
};
/**
 * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names
 */ var MIN_NAME = '[MIN_NAME]';
/**
 * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names
 */ var MAX_NAME = '[MAX_NAME]';
/**
 * Compares valid Firebase key names, plus min and max name
 */ var nameCompare = function(a, b) {
    if (a === b) return 0;
    else if (a === MIN_NAME || b === MAX_NAME) return -1;
    else if (b === MIN_NAME || a === MAX_NAME) return 1;
    else {
        var aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);
        if (aAsInt !== null) {
            if (bAsInt !== null) return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;
            else return -1;
        } else if (bAsInt !== null) return 1;
        else return a < b ? -1 : 1;
    }
};
/**
 * @returns {!number} comparison result.
 */ var stringCompare = function(a, b) {
    if (a === b) return 0;
    else if (a < b) return -1;
    else return 1;
};
var requireKey = function(key, obj) {
    if (obj && key in obj) return obj[key];
    else throw new Error('Missing required key (' + key + ') in object: ' + _util.stringify(obj));
};
var ObjectToUniqueKey = function(obj) {
    if (typeof obj !== 'object' || obj === null) return _util.stringify(obj);
    var keys = [];
    // eslint-disable-next-line guard-for-in
    for(var k in obj)keys.push(k);
    // Export as json, but with the keys sorted.
    keys.sort();
    var key = '{';
    for(var i = 0; i < keys.length; i++){
        if (i !== 0) key += ',';
        key += _util.stringify(keys[i]);
        key += ':';
        key += ObjectToUniqueKey(obj[keys[i]]);
    }
    key += '}';
    return key;
};
/**
 * Splits a string into a number of smaller segments of maximum size
 * @param str - The string
 * @param segsize - The maximum number of chars in the string.
 * @returns The string, split into appropriately-sized chunks
 */ var splitStringBySize = function(str, segsize) {
    var len = str.length;
    if (len <= segsize) return [
        str
    ];
    var dataSegs = [];
    for(var c = 0; c < len; c += segsize)if (c + segsize > len) dataSegs.push(str.substring(c, len));
    else dataSegs.push(str.substring(c, c + segsize));
    return dataSegs;
};
/**
 * Apply a function to each (key, value) pair in an object or
 * apply a function to each (index, value) pair in an array
 * @param obj - The object or array to iterate over
 * @param fn - The function to apply
 */ function each(obj, fn) {
    for(var key in obj)if (obj.hasOwnProperty(key)) fn(key, obj[key]);
}
/**
 * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)
 * I made one modification at the end and removed the NaN / Infinity
 * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.
 * @param v - A double
 *
 */ var doubleToIEEE754String = function(v) {
    _util.assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL
    var ebits = 11, fbits = 52;
    var bias = (1 << ebits - 1) - 1;
    var s, e, f, ln, i;
    // Compute sign, exponent, fraction
    // Skip NaN / Infinity handling --MJL.
    if (v === 0) {
        e = 0;
        f = 0;
        s = 1 / v === -Infinity ? 1 : 0;
    } else {
        s = v < 0;
        v = Math.abs(v);
        if (v >= Math.pow(2, 1 - bias)) {
            // Normalized
            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);
            e = ln + bias;
            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));
        } else {
            // Denormalized
            e = 0;
            f = Math.round(v / Math.pow(2, 1 - bias - fbits));
        }
    }
    // Pack sign, exponent, fraction
    var bits = [];
    for(i = fbits; i; i -= 1){
        bits.push(f % 2 ? 1 : 0);
        f = Math.floor(f / 2);
    }
    for(i = ebits; i; i -= 1){
        bits.push(e % 2 ? 1 : 0);
        e = Math.floor(e / 2);
    }
    bits.push(s ? 1 : 0);
    bits.reverse();
    var str = bits.join('');
    // Return the data as a hex string. --MJL
    var hexByteString = '';
    for(i = 0; i < 64; i += 8){
        var hexByte = parseInt(str.substr(i, 8), 2).toString(16);
        if (hexByte.length === 1) hexByte = '0' + hexByte;
        hexByteString = hexByteString + hexByte;
    }
    return hexByteString.toLowerCase();
};
/**
 * Used to detect if we're in a Chrome content script (which executes in an
 * isolated environment where long-polling doesn't work).
 */ var isChromeExtensionContentScript = function() {
    return !!(typeof window === 'object' && window['chrome'] && window['chrome']['extension'] && !/^chrome/.test(window.location.href));
};
/**
 * Used to detect if we're in a Windows 8 Store app.
 */ var isWindowsStoreApp = function() {
    // Check for the presence of a couple WinRT globals
    return typeof Windows === 'object' && typeof Windows.UI === 'object';
};
/**
 * Converts a server error code to a Javascript Error
 */ function errorForServerCode(code, query) {
    var reason = 'Unknown Error';
    if (code === 'too_big') reason = "The data requested exceeds the maximum size that can be accessed with a single request.";
    else if (code === 'permission_denied') reason = "Client doesn't have permission to access the desired data.";
    else if (code === 'unavailable') reason = 'The service is unavailable';
    var error1 = new Error(code + ' at ' + query._path.toString() + ': ' + reason);
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    error1.code = code.toUpperCase();
    return error1;
}
/**
 * Used to test for integer-looking strings
 */ var INTEGER_REGEXP_ = new RegExp('^-?(0*)\\d{1,10}$');
/**
 * For use in keys, the minimum possible 32-bit integer.
 */ var INTEGER_32_MIN = -2147483648;
/**
 * For use in kyes, the maximum possible 32-bit integer.
 */ var INTEGER_32_MAX = 2147483647;
/**
 * If the string contains a 32-bit integer, return it.  Else return null.
 */ var tryParseInt = function(str) {
    if (INTEGER_REGEXP_.test(str)) {
        var intVal = Number(str);
        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) return intVal;
    }
    return null;
};
/**
 * Helper to run some code but catch any exceptions and re-throw them later.
 * Useful for preventing user callbacks from breaking internal code.
 *
 * Re-throwing the exception from a setTimeout is a little evil, but it's very
 * convenient (we don't have to try to figure out when is a safe point to
 * re-throw it), and the behavior seems reasonable:
 *
 * * If you aren't pausing on exceptions, you get an error in the console with
 *   the correct stack trace.
 * * If you're pausing on all exceptions, the debugger will pause on your
 *   exception and then again when we rethrow it.
 * * If you're only pausing on uncaught exceptions, the debugger will only pause
 *   on us re-throwing it.
 *
 * @param fn - The code to guard.
 */ var exceptionGuard = function(fn) {
    try {
        fn();
    } catch (e) {
        // Re-throw exception when it's safe.
        setTimeout(function() {
            // It used to be that "throw e" would result in a good console error with
            // relevant context, but as of Chrome 39, you just get the firebase.js
            // file/line number where we re-throw it, which is useless. So we log
            // e.stack explicitly.
            var stack = e.stack || '';
            warn('Exception was thrown by user callback.', stack);
            throw e;
        }, Math.floor(0));
    }
};
/**
 * @returns {boolean} true if we think we're currently being crawled.
 */ var beingCrawled = function() {
    var userAgent = typeof window === 'object' && window['navigator'] && window['navigator']['userAgent'] || '';
    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we
    // believe to support JavaScript/AJAX rendering.
    // NOTE: Google Webmaster Tools doesn't really belong, but their "This is how a visitor to your website
    // would have seen the page" is flaky if we don't treat it as a crawler.
    return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;
};
/**
 * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.
 *
 * It is removed with clearTimeout() as normal.
 *
 * @param fn - Function to run.
 * @param time - Milliseconds to wait before running.
 * @returns The setTimeout() return value.
 */ var setTimeoutNonBlocking = function(fn, time) {
    var timeout = setTimeout(fn, time);
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    if (typeof timeout === 'object' && timeout['unref']) // eslint-disable-next-line @typescript-eslint/no-explicit-any
    timeout['unref']();
    return timeout;
};
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Abstraction around AppCheck's token fetching capabilities.
 */ var AppCheckTokenProvider = function() {
    function AppCheckTokenProvider1(appName_, appCheckProvider) {
        var _this = this;
        this.appName_ = appName_;
        this.appCheckProvider = appCheckProvider;
        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({
            optional: true
        });
        if (!this.appCheck) appCheckProvider === null || appCheckProvider === void 0 || appCheckProvider.get().then(function(appCheck) {
            return _this.appCheck = appCheck;
        });
    }
    AppCheckTokenProvider1.prototype.getToken = function(forceRefresh) {
        var _this = this;
        if (!this.appCheck) return new Promise(function(resolve, reject) {
            // Support delayed initialization of FirebaseAppCheck. This allows our
            // customers to initialize the RTDB SDK before initializing Firebase
            // AppCheck and ensures that all requests are authenticated if a token
            // becomes available before the timoeout below expires.
            setTimeout(function() {
                if (_this.appCheck) _this.getToken(forceRefresh).then(resolve, reject);
                else resolve(null);
            }, 0);
        });
        return this.appCheck.getToken(forceRefresh);
    };
    AppCheckTokenProvider1.prototype.addTokenChangeListener = function(listener) {
        var _a;
        (_a = this.appCheckProvider) === null || _a === void 0 || _a.get().then(function(appCheck) {
            return appCheck.addTokenListener(listener);
        });
    };
    AppCheckTokenProvider1.prototype.notifyForInvalidToken = function() {
        warn("Provided AppCheck credentials for the app named \"" + this.appName_ + "\" " + 'are invalid. This usually indicates your app was not initialized correctly.');
    };
    return AppCheckTokenProvider1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Abstraction around FirebaseApp's token fetching capabilities.
 */ var FirebaseAuthTokenProvider = function() {
    function FirebaseAuthTokenProvider1(appName_, firebaseOptions_, authProvider_) {
        var _this = this;
        this.appName_ = appName_;
        this.firebaseOptions_ = firebaseOptions_;
        this.authProvider_ = authProvider_;
        this.auth_ = null;
        this.auth_ = authProvider_.getImmediate({
            optional: true
        });
        if (!this.auth_) authProvider_.onInit(function(auth) {
            return _this.auth_ = auth;
        });
    }
    FirebaseAuthTokenProvider1.prototype.getToken = function(forceRefresh) {
        var _this = this;
        if (!this.auth_) return new Promise(function(resolve, reject) {
            // Support delayed initialization of FirebaseAuth. This allows our
            // customers to initialize the RTDB SDK before initializing Firebase
            // Auth and ensures that all requests are authenticated if a token
            // becomes available before the timoeout below expires.
            setTimeout(function() {
                if (_this.auth_) _this.getToken(forceRefresh).then(resolve, reject);
                else resolve(null);
            }, 0);
        });
        return this.auth_.getToken(forceRefresh).catch(function(error1) {
            // TODO: Need to figure out all the cases this is raised and whether
            // this makes sense.
            if (error1 && error1.code === 'auth/token-not-initialized') {
                log('Got auth/token-not-initialized error.  Treating as null token.');
                return null;
            } else return Promise.reject(error1);
        });
    };
    FirebaseAuthTokenProvider1.prototype.addTokenChangeListener = function(listener) {
        // TODO: We might want to wrap the listener and call it with no args to
        // avoid a leaky abstraction, but that makes removing the listener harder.
        if (this.auth_) this.auth_.addAuthTokenListener(listener);
        else this.authProvider_.get().then(function(auth) {
            return auth.addAuthTokenListener(listener);
        });
    };
    FirebaseAuthTokenProvider1.prototype.removeTokenChangeListener = function(listener) {
        this.authProvider_.get().then(function(auth) {
            return auth.removeAuthTokenListener(listener);
        });
    };
    FirebaseAuthTokenProvider1.prototype.notifyForInvalidToken = function() {
        var errorMessage = 'Provided authentication credentials for the app named "' + this.appName_ + '" are invalid. This usually indicates your app was not ' + 'initialized correctly. ';
        if ('credential' in this.firebaseOptions_) errorMessage += "Make sure the \"credential\" property provided to initializeApp() is authorized to access the specified \"databaseURL\" and is from the correct project.";
        else if ('serviceAccount' in this.firebaseOptions_) errorMessage += "Make sure the \"serviceAccount\" property provided to initializeApp() is authorized to access the specified \"databaseURL\" and is from the correct project.";
        else errorMessage += "Make sure the \"apiKey\" and \"databaseURL\" properties provided to initializeApp() match the values provided for your app at https://console.firebase.google.com/.";
        warn(errorMessage);
    };
    return FirebaseAuthTokenProvider1;
}();
/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */ var EmulatorTokenProvider = function() {
    function EmulatorTokenProvider1(accessToken) {
        this.accessToken = accessToken;
    }
    EmulatorTokenProvider1.prototype.getToken = function(forceRefresh) {
        return Promise.resolve({
            accessToken: this.accessToken
        });
    };
    EmulatorTokenProvider1.prototype.addTokenChangeListener = function(listener) {
        // Invoke the listener immediately to match the behavior in Firebase Auth
        // (see packages/auth/src/auth.js#L1807)
        listener(this.accessToken);
    };
    EmulatorTokenProvider1.prototype.removeTokenChangeListener = function(listener) {
    };
    EmulatorTokenProvider1.prototype.notifyForInvalidToken = function() {
    };
    /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */ EmulatorTokenProvider1.OWNER = 'owner';
    return EmulatorTokenProvider1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var PROTOCOL_VERSION = '5';
var VERSION_PARAM = 'v';
var TRANSPORT_SESSION_PARAM = 's';
var REFERER_PARAM = 'r';
var FORGE_REF = 'f';
// Matches console.firebase.google.com, firebase-console-*.corp.google.com and
// firebase.corp.google.com
var FORGE_DOMAIN_RE = /(console\.firebase|firebase-console-\w+\.corp|firebase\.corp)\.google\.com/;
var LAST_SESSION_PARAM = 'ls';
var APPLICATION_ID_PARAM = 'p';
var APP_CHECK_TOKEN_PARAM = 'ac';
var WEBSOCKET = 'websocket';
var LONG_POLLING = 'long_polling';
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A class that holds metadata about a Repo object
 */ var RepoInfo = function() {
    /**
     * @param host - Hostname portion of the url for the repo
     * @param secure - Whether or not this repo is accessed over ssl
     * @param namespace - The namespace represented by the repo
     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).
     * @param nodeAdmin - Whether this instance uses Admin SDK credentials
     * @param persistenceKey - Override the default session persistence storage key
     */ function RepoInfo1(host, secure, namespace, webSocketOnly, nodeAdmin, persistenceKey, includeNamespaceInQueryParams) {
        if (nodeAdmin === void 0) nodeAdmin = false;
        if (persistenceKey === void 0) persistenceKey = '';
        if (includeNamespaceInQueryParams === void 0) includeNamespaceInQueryParams = false;
        this.secure = secure;
        this.namespace = namespace;
        this.webSocketOnly = webSocketOnly;
        this.nodeAdmin = nodeAdmin;
        this.persistenceKey = persistenceKey;
        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;
        this._host = host.toLowerCase();
        this._domain = this._host.substr(this._host.indexOf('.') + 1);
        this.internalHost = PersistentStorage.get('host:' + host) || this._host;
    }
    RepoInfo1.prototype.isCacheableHost = function() {
        return this.internalHost.substr(0, 2) === 's-';
    };
    RepoInfo1.prototype.isCustomHost = function() {
        return this._domain !== 'firebaseio.com' && this._domain !== 'firebaseio-demo.com';
    };
    Object.defineProperty(RepoInfo1.prototype, "host", {
        get: function() {
            return this._host;
        },
        set: function(newHost) {
            if (newHost !== this.internalHost) {
                this.internalHost = newHost;
                if (this.isCacheableHost()) PersistentStorage.set('host:' + this._host, this.internalHost);
            }
        },
        enumerable: false,
        configurable: true
    });
    RepoInfo1.prototype.toString = function() {
        var str = this.toURLString();
        if (this.persistenceKey) str += '<' + this.persistenceKey + '>';
        return str;
    };
    RepoInfo1.prototype.toURLString = function() {
        var protocol = this.secure ? 'https://' : 'http://';
        var query = this.includeNamespaceInQueryParams ? "?ns=" + this.namespace : '';
        return "" + protocol + this.host + "/" + query;
    };
    return RepoInfo1;
}();
function repoInfoNeedsQueryParam(repoInfo) {
    return repoInfo.host !== repoInfo.internalHost || repoInfo.isCustomHost() || repoInfo.includeNamespaceInQueryParams;
}
/**
 * Returns the websocket URL for this repo
 * @param repoInfo - RepoInfo object
 * @param type - of connection
 * @param params - list
 * @returns The URL for this repo
 */ function repoInfoConnectionURL(repoInfo, type, params) {
    _util.assert(typeof type === 'string', 'typeof type must == string');
    _util.assert(typeof params === 'object', 'typeof params must == object');
    var connURL;
    if (type === WEBSOCKET) connURL = (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';
    else if (type === LONG_POLLING) connURL = (repoInfo.secure ? 'https://' : 'http://') + repoInfo.internalHost + '/.lp?';
    else throw new Error('Unknown connection type: ' + type);
    if (repoInfoNeedsQueryParam(repoInfo)) params['ns'] = repoInfo.namespace;
    var pairs = [];
    each(params, function(key, value) {
        pairs.push(key + '=' + value);
    });
    return connURL + pairs.join('&');
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Tracks a collection of stats.
 */ var StatsCollection = function() {
    function StatsCollection1() {
        this.counters_ = {
        };
    }
    StatsCollection1.prototype.incrementCounter = function(name1, amount) {
        if (amount === void 0) amount = 1;
        if (!_util.contains(this.counters_, name1)) this.counters_[name1] = 0;
        this.counters_[name1] += amount;
    };
    StatsCollection1.prototype.get = function() {
        return _util.deepCopy(this.counters_);
    };
    return StatsCollection1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var collections = {
};
var reporters = {
};
function statsManagerGetCollection(repoInfo) {
    var hashString = repoInfo.toString();
    if (!collections[hashString]) collections[hashString] = new StatsCollection();
    return collections[hashString];
}
function statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {
    var hashString = repoInfo.toString();
    if (!reporters[hashString]) reporters[hashString] = creatorFunction();
    return reporters[hashString];
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * This class ensures the packets from the server arrive in order
 * This class takes data from the server and ensures it gets passed into the callbacks in order.
 */ var PacketReceiver = function() {
    /**
     * @param onMessage_
     */ function PacketReceiver1(onMessage_) {
        this.onMessage_ = onMessage_;
        this.pendingResponses = [];
        this.currentResponseNum = 0;
        this.closeAfterResponse = -1;
        this.onClose = null;
    }
    PacketReceiver1.prototype.closeAfter = function(responseNum, callback) {
        this.closeAfterResponse = responseNum;
        this.onClose = callback;
        if (this.closeAfterResponse < this.currentResponseNum) {
            this.onClose();
            this.onClose = null;
        }
    };
    /**
     * Each message from the server comes with a response number, and an array of data. The responseNumber
     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all
     * browsers will respond in the same order as the requests we sent
     */ PacketReceiver1.prototype.handleResponse = function(requestNum, data) {
        var _this = this;
        this.pendingResponses[requestNum] = data;
        var _loop_1 = function() {
            var toProcess = this_1.pendingResponses[this_1.currentResponseNum];
            delete this_1.pendingResponses[this_1.currentResponseNum];
            var _loop_2 = function(i) {
                if (toProcess[i]) exceptionGuard(function() {
                    _this.onMessage_(toProcess[i]);
                });
            };
            for(var i = 0; i < toProcess.length; ++i)_loop_2(i);
            if (this_1.currentResponseNum === this_1.closeAfterResponse) {
                if (this_1.onClose) {
                    this_1.onClose();
                    this_1.onClose = null;
                }
                return "break";
            }
            this_1.currentResponseNum++;
        };
        var this_1 = this;
        while(this.pendingResponses[this.currentResponseNum]){
            var state_1 = _loop_1();
            if (state_1 === "break") break;
        }
    };
    return PacketReceiver1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // URL query parameters associated with longpolling
var FIREBASE_LONGPOLL_START_PARAM = 'start';
var FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';
var FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';
var FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';
var FIREBASE_LONGPOLL_ID_PARAM = 'id';
var FIREBASE_LONGPOLL_PW_PARAM = 'pw';
var FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';
var FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';
var FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';
var FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';
var FIREBASE_LONGPOLL_DATA_PARAM = 'd';
var FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';
//Data size constants.
//TODO: Perf: the maximum length actually differs from browser to browser.
// We should check what browser we're on and set accordingly.
var MAX_URL_DATA_SIZE = 1870;
var SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=
var MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;
/**
 * Keepalive period
 * send a fresh request at minimum every 25 seconds. Opera has a maximum request
 * length of 30 seconds that we can't exceed.
 */ var KEEPALIVE_REQUEST_INTERVAL = 25000;
/**
 * How long to wait before aborting a long-polling connection attempt.
 */ var LP_CONNECT_TIMEOUT = 30000;
/**
 * This class manages a single long-polling connection.
 */ var BrowserPollConnection = function() {
    /**
     * @param connId An identifier for this connection, used for logging
     * @param repoInfo The info for the endpoint to send data to.
     * @param applicationId The Firebase App ID for this project.
     * @param appCheckToken The AppCheck token for this client.
     * @param authToken The AuthToken to use for this connection.
     * @param transportSessionId Optional transportSessionid if we are
     * reconnecting for an existing transport session
     * @param lastSessionId Optional lastSessionId if the PersistentConnection has
     * already created a connection previously
     */ function BrowserPollConnection1(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {
        var _this = this;
        this.connId = connId;
        this.repoInfo = repoInfo;
        this.applicationId = applicationId;
        this.appCheckToken = appCheckToken;
        this.authToken = authToken;
        this.transportSessionId = transportSessionId;
        this.lastSessionId = lastSessionId;
        this.bytesSent = 0;
        this.bytesReceived = 0;
        this.everConnected_ = false;
        this.log_ = logWrapper(connId);
        this.stats_ = statsManagerGetCollection(repoInfo);
        this.urlFn = function(params) {
            // Always add the token if we have one.
            if (_this.appCheckToken) params[APP_CHECK_TOKEN_PARAM] = _this.appCheckToken;
            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);
        };
    }
    /**
     * @param onMessage - Callback when messages arrive
     * @param onDisconnect - Callback with connection lost.
     */ BrowserPollConnection1.prototype.open = function(onMessage, onDisconnect) {
        var _this = this;
        this.curSegmentNum = 0;
        this.onDisconnect_ = onDisconnect;
        this.myPacketOrderer = new PacketReceiver(onMessage);
        this.isClosed_ = false;
        this.connectTimeoutTimer_ = setTimeout(function() {
            _this.log_('Timed out trying to connect.');
            // Make sure we clear the host cache
            _this.onClosed_();
            _this.connectTimeoutTimer_ = null;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        }, Math.floor(LP_CONNECT_TIMEOUT));
        // Ensure we delay the creation of the iframe until the DOM is loaded.
        executeWhenDOMReady(function() {
            if (_this.isClosed_) return;
            //Set up a callback that gets triggered once a connection is set up.
            _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function() {
                var args = [];
                for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
                var _a = _tslib.__read(args, 5), command = _a[0], arg1 = _a[1], arg2 = _a[2];
                _a[3];
                _a[4];
                _this.incrementIncomingBytes_(args);
                if (!_this.scriptTagHolder) return; // we closed the connection.
                if (_this.connectTimeoutTimer_) {
                    clearTimeout(_this.connectTimeoutTimer_);
                    _this.connectTimeoutTimer_ = null;
                }
                _this.everConnected_ = true;
                if (command === FIREBASE_LONGPOLL_START_PARAM) {
                    _this.id = arg1;
                    _this.password = arg2;
                } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {
                    // Don't clear the host cache. We got a response from the server, so we know it's reachable
                    if (arg1) {
                        // We aren't expecting any more data (other than what the server's already in the process of sending us
                        // through our already open polls), so don't send any more.
                        _this.scriptTagHolder.sendNewPolls = false;
                        // arg1 in this case is the last response number sent by the server. We should try to receive
                        // all of the responses up to this one before closing
                        _this.myPacketOrderer.closeAfter(arg1, function() {
                            _this.onClosed_();
                        });
                    } else _this.onClosed_();
                } else throw new Error('Unrecognized command received: ' + command);
            }, function() {
                var args = [];
                for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
                var _a = _tslib.__read(args, 2), pN = _a[0], data = _a[1];
                _this.incrementIncomingBytes_(args);
                _this.myPacketOrderer.handleResponse(pN, data);
            }, function() {
                _this.onClosed_();
            }, _this.urlFn);
            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results
            //from cache.
            var urlParams = {
            };
            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';
            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);
            if (_this.scriptTagHolder.uniqueCallbackIdentifier) urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;
            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
            if (_this.transportSessionId) urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;
            if (_this.lastSessionId) urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;
            if (_this.applicationId) urlParams[APPLICATION_ID_PARAM] = _this.applicationId;
            if (_this.appCheckToken) urlParams[APP_CHECK_TOKEN_PARAM] = _this.appCheckToken;
            if (typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) urlParams[REFERER_PARAM] = FORGE_REF;
            var connectURL = _this.urlFn(urlParams);
            _this.log_('Connecting via long-poll to ' + connectURL);
            _this.scriptTagHolder.addTag(connectURL, function() {
            /* do nothing */ });
        });
    };
    /**
     * Call this when a handshake has completed successfully and we want to consider the connection established
     */ BrowserPollConnection1.prototype.start = function() {
        this.scriptTagHolder.startLongPoll(this.id, this.password);
        this.addDisconnectPingFrame(this.id, this.password);
    };
    /**
     * Forces long polling to be considered as a potential transport
     */ BrowserPollConnection1.forceAllow = function() {
        BrowserPollConnection1.forceAllow_ = true;
    };
    /**
     * Forces longpolling to not be considered as a potential transport
     */ BrowserPollConnection1.forceDisallow = function() {
        BrowserPollConnection1.forceDisallow_ = true;
    };
    // Static method, use string literal so it can be accessed in a generic way
    BrowserPollConnection1.isAvailable = function() {
        if (_util.isNodeSdk()) return false;
        else if (BrowserPollConnection1.forceAllow_) return true;
        else // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in
        // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).
        return !BrowserPollConnection1.forceDisallow_ && typeof document !== 'undefined' && document.createElement != null && !isChromeExtensionContentScript() && !isWindowsStoreApp();
    };
    /**
     * No-op for polling
     */ BrowserPollConnection1.prototype.markConnectionHealthy = function() {
    };
    /**
     * Stops polling and cleans up the iframe
     */ BrowserPollConnection1.prototype.shutdown_ = function() {
        this.isClosed_ = true;
        if (this.scriptTagHolder) {
            this.scriptTagHolder.close();
            this.scriptTagHolder = null;
        }
        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.
        if (this.myDisconnFrame) {
            document.body.removeChild(this.myDisconnFrame);
            this.myDisconnFrame = null;
        }
        if (this.connectTimeoutTimer_) {
            clearTimeout(this.connectTimeoutTimer_);
            this.connectTimeoutTimer_ = null;
        }
    };
    /**
     * Triggered when this transport is closed
     */ BrowserPollConnection1.prototype.onClosed_ = function() {
        if (!this.isClosed_) {
            this.log_('Longpoll is closing itself');
            this.shutdown_();
            if (this.onDisconnect_) {
                this.onDisconnect_(this.everConnected_);
                this.onDisconnect_ = null;
            }
        }
    };
    /**
     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server
     * that we've left.
     */ BrowserPollConnection1.prototype.close = function() {
        if (!this.isClosed_) {
            this.log_('Longpoll is being closed.');
            this.shutdown_();
        }
    };
    /**
     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then
     * broken into chunks (since URLs have a small maximum length).
     * @param data - The JSON data to transmit.
     */ BrowserPollConnection1.prototype.send = function(data) {
        var dataStr = _util.stringify(data);
        this.bytesSent += dataStr.length;
        this.stats_.incrementCounter('bytes_sent', dataStr.length);
        //first, lets get the base64-encoded data
        var base64data = _util.base64Encode(dataStr);
        //We can only fit a certain amount in each URL, so we need to split this request
        //up into multiple pieces if it doesn't fit in one request.
        var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);
        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number
        //of segments so that we can reassemble the packet on the server.
        for(var i = 0; i < dataSegs.length; i++){
            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);
            this.curSegmentNum++;
        }
    };
    /**
     * This is how we notify the server that we're leaving.
     * We aren't able to send requests with DHTML on a window close event, but we can
     * trigger XHR requests in some browsers (everything but Opera basically).
     */ BrowserPollConnection1.prototype.addDisconnectPingFrame = function(id, pw) {
        if (_util.isNodeSdk()) return;
        this.myDisconnFrame = document.createElement('iframe');
        var urlParams = {
        };
        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';
        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;
        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;
        this.myDisconnFrame.src = this.urlFn(urlParams);
        this.myDisconnFrame.style.display = 'none';
        document.body.appendChild(this.myDisconnFrame);
    };
    /**
     * Used to track the bytes received by this client
     */ BrowserPollConnection1.prototype.incrementIncomingBytes_ = function(args) {
        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.
        var bytesReceived = _util.stringify(args).length;
        this.bytesReceived += bytesReceived;
        this.stats_.incrementCounter('bytes_received', bytesReceived);
    };
    return BrowserPollConnection1;
}();
/*********************************************************************************************
 * A wrapper around an iframe that is used as a long-polling script holder.
 *********************************************************************************************/ var FirebaseIFrameScriptHolder = function() {
    /**
     * @param commandCB - The callback to be called when control commands are recevied from the server.
     * @param onMessageCB - The callback to be triggered when responses arrive from the server.
     * @param onDisconnect - The callback to be triggered when this tag holder is closed
     * @param urlFn - A function that provides the URL of the endpoint to send data to.
     */ function FirebaseIFrameScriptHolder1(commandCB, onMessageCB, onDisconnect, urlFn) {
        this.onDisconnect = onDisconnect;
        this.urlFn = urlFn;
        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause
        //problems in some browsers.
        this.outstandingRequests = new Set();
        //A queue of the pending segments waiting for transmission to the server.
        this.pendingSegs = [];
        //A serial number. We use this for two things:
        // 1) A way to ensure the browser doesn't cache responses to polls
        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The
        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute
        //    JSONP code in the order it was added to the iframe.
        this.currentSerial = Math.floor(Math.random() * 100000000);
        // This gets set to false when we're "closing down" the connection (e.g. we're switching transports but there's still
        // incoming data from the server that we're waiting for).
        this.sendNewPolls = true;
        if (!_util.isNodeSdk()) {
            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the
            //iframes where we put the long-polling script tags. We have two callbacks:
            //   1) Command Callback - Triggered for control issues, like starting a connection.
            //   2) Message Callback - Triggered when new data arrives.
            this.uniqueCallbackIdentifier = LUIDGenerator();
            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;
            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;
            //Create an iframe for us to add script tags to.
            this.myIFrame = FirebaseIFrameScriptHolder1.createIFrame_();
            // Set the iframe's contents.
            var script = '';
            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient
            // for ie9, but ie8 needs to do it again in the document itself.
            if (this.myIFrame.src && this.myIFrame.src.substr(0, 11) === 'javascript:') {
                var currentDomain = document.domain;
                script = '<script>document.domain="' + currentDomain + '";</script>';
            }
            var iframeContents = '<html><body>' + script + '</body></html>';
            try {
                this.myIFrame.doc.open();
                this.myIFrame.doc.write(iframeContents);
                this.myIFrame.doc.close();
            } catch (e) {
                log('frame writing exception');
                if (e.stack) log(e.stack);
                log(e);
            }
        } else {
            this.commandCB = commandCB;
            this.onMessageCB = onMessageCB;
        }
    }
    /**
     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can
     * actually use.
     */ FirebaseIFrameScriptHolder1.createIFrame_ = function() {
        var iframe = document.createElement('iframe');
        iframe.style.display = 'none';
        // This is necessary in order to initialize the document inside the iframe
        if (document.body) {
            document.body.appendChild(iframe);
            try {
                // If document.domain has been modified in IE, this will throw an error, and we need to set the
                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute
                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.
                var a = iframe.contentWindow.document;
                if (!a) // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.
                log('No IE domain setting required');
            } catch (e) {
                var domain = document.domain;
                iframe.src = "javascript:void((function(){document.open();document.domain='" + domain + "';document.close();})())";
            }
        } else // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this
        // never gets hit.
        throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';
        // Get the document of the iframe in a browser-specific way.
        if (iframe.contentDocument) iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari
        else if (iframe.contentWindow) iframe.doc = iframe.contentWindow.document; // Internet Explorer
        else if (iframe.document) // eslint-disable-next-line @typescript-eslint/no-explicit-any
        iframe.doc = iframe.document; //others?
        return iframe;
    };
    /**
     * Cancel all outstanding queries and remove the frame.
     */ FirebaseIFrameScriptHolder1.prototype.close = function() {
        var _this = this;
        //Mark this iframe as dead, so no new requests are sent.
        this.alive = false;
        if (this.myIFrame) {
            //We have to actually remove all of the html inside this iframe before removing it from the
            //window, or IE will continue loading and executing the script tags we've already added, which
            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.
            this.myIFrame.doc.body.innerHTML = '';
            setTimeout(function() {
                if (_this.myIFrame !== null) {
                    document.body.removeChild(_this.myIFrame);
                    _this.myIFrame = null;
                }
            }, Math.floor(0));
        }
        // Protect from being called recursively.
        var onDisconnect = this.onDisconnect;
        if (onDisconnect) {
            this.onDisconnect = null;
            onDisconnect();
        }
    };
    /**
     * Actually start the long-polling session by adding the first script tag(s) to the iframe.
     * @param id - The ID of this connection
     * @param pw - The password for this connection
     */ FirebaseIFrameScriptHolder1.prototype.startLongPoll = function(id, pw) {
        this.myID = id;
        this.myPW = pw;
        this.alive = true;
        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.
        while(this.newRequest_());
    };
    /**
     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't
     * too many outstanding requests and we are still alive.
     *
     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if
     * needed.
     */ FirebaseIFrameScriptHolder1.prototype.newRequest_ = function() {
        // We keep one outstanding request open all the time to receive data, but if we need to send data
        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically
        // close the old request.
        if (this.alive && this.sendNewPolls && this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {
            //construct our url
            this.currentSerial++;
            var urlParams = {
            };
            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;
            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;
            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;
            var theURL = this.urlFn(urlParams);
            //Now add as much data as we can.
            var curDataString = '';
            var i = 0;
            while(this.pendingSegs.length > 0){
                //first, lets see if the next segment will fit.
                var nextSeg = this.pendingSegs[0];
                if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <= MAX_URL_DATA_SIZE) {
                    //great, the segment will fit. Lets append it.
                    var theSeg = this.pendingSegs.shift();
                    curDataString = curDataString + '&' + FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i + '=' + theSeg.seg + '&' + FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i + '=' + theSeg.ts + '&' + FIREBASE_LONGPOLL_DATA_PARAM + i + '=' + theSeg.d;
                    i++;
                } else break;
            }
            theURL = theURL + curDataString;
            this.addLongPollTag_(theURL, this.currentSerial);
            return true;
        } else return false;
    };
    /**
     * Queue a packet for transmission to the server.
     * @param segnum - A sequential id for this packet segment used for reassembly
     * @param totalsegs - The total number of segments in this packet
     * @param data - The data for this segment.
     */ FirebaseIFrameScriptHolder1.prototype.enqueueSegment = function(segnum, totalsegs, data) {
        //add this to the queue of segments to send.
        this.pendingSegs.push({
            seg: segnum,
            ts: totalsegs,
            d: data
        });
        //send the data immediately if there isn't already data being transmitted, unless
        //startLongPoll hasn't been called yet.
        if (this.alive) this.newRequest_();
    };
    /**
     * Add a script tag for a regular long-poll request.
     * @param url - The URL of the script tag.
     * @param serial - The serial number of the request.
     */ FirebaseIFrameScriptHolder1.prototype.addLongPollTag_ = function(url, serial) {
        var _this = this;
        //remember that we sent this request.
        this.outstandingRequests.add(serial);
        var doNewRequest = function() {
            _this.outstandingRequests.delete(serial);
            _this.newRequest_();
        };
        // If this request doesn't return on its own accord (by the server sending us some data), we'll
        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.
        var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));
        var readyStateCB = function() {
            // Request completed.  Cancel the keepalive.
            clearTimeout(keepaliveTimeout);
            // Trigger a new request so we can continue receiving data.
            doNewRequest();
        };
        this.addTag(url, readyStateCB);
    };
    /**
     * Add an arbitrary script tag to the iframe.
     * @param url - The URL for the script tag source.
     * @param loadCB - A callback to be triggered once the script has loaded.
     */ FirebaseIFrameScriptHolder1.prototype.addTag = function(url, loadCB) {
        var _this = this;
        if (_util.isNodeSdk()) // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.doNodeLongPoll(url, loadCB);
        else setTimeout(function() {
            try {
                // if we're already closed, don't add this poll
                if (!_this.sendNewPolls) return;
                var newScript_1 = _this.myIFrame.doc.createElement('script');
                newScript_1.type = 'text/javascript';
                newScript_1.async = true;
                newScript_1.src = url;
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                newScript_1.onload = newScript_1.onreadystatechange = function() {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    var rstate = newScript_1.readyState;
                    if (!rstate || rstate === 'loaded' || rstate === 'complete') {
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        newScript_1.onload = newScript_1.onreadystatechange = null;
                        if (newScript_1.parentNode) newScript_1.parentNode.removeChild(newScript_1);
                        loadCB();
                    }
                };
                newScript_1.onerror = function() {
                    log('Long-poll script failed to load: ' + url);
                    _this.sendNewPolls = false;
                    _this.close();
                };
                _this.myIFrame.doc.body.appendChild(newScript_1);
            } catch (e) {
            // TODO: we should make this error visible somehow
            }
        }, Math.floor(1));
    };
    return FirebaseIFrameScriptHolder1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var WEBSOCKET_MAX_FRAME_SIZE = 16384;
var WEBSOCKET_KEEPALIVE_INTERVAL = 45000;
var WebSocketImpl = null;
if (typeof MozWebSocket !== 'undefined') WebSocketImpl = MozWebSocket;
else if (typeof WebSocket !== 'undefined') WebSocketImpl = WebSocket;
/**
 * Create a new websocket connection with the given callbacks.
 */ var WebSocketConnection = function() {
    /**
     * @param connId identifier for this transport
     * @param repoInfo The info for the websocket endpoint.
     * @param applicationId The Firebase App ID for this project.
     * @param appCheckToken The App Check Token for this client.
     * @param authToken The Auth Token for this client.
     * @param transportSessionId Optional transportSessionId if this is connecting
     * to an existing transport session
     * @param lastSessionId Optional lastSessionId if there was a previous
     * connection
     */ function WebSocketConnection1(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {
        this.connId = connId;
        this.applicationId = applicationId;
        this.appCheckToken = appCheckToken;
        this.authToken = authToken;
        this.keepaliveTimer = null;
        this.frames = null;
        this.totalFrames = 0;
        this.bytesSent = 0;
        this.bytesReceived = 0;
        this.log_ = logWrapper(this.connId);
        this.stats_ = statsManagerGetCollection(repoInfo);
        this.connURL = WebSocketConnection1.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken);
        this.nodeAdmin = repoInfo.nodeAdmin;
    }
    /**
     * @param repoInfo - The info for the websocket endpoint.
     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport
     *                                         session
     * @param lastSessionId - Optional lastSessionId if there was a previous connection
     * @returns connection url
     */ WebSocketConnection1.connectionURL_ = function(repoInfo, transportSessionId, lastSessionId, appCheckToken) {
        var urlParams = {
        };
        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
        if (!_util.isNodeSdk() && typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) urlParams[REFERER_PARAM] = FORGE_REF;
        if (transportSessionId) urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;
        if (lastSessionId) urlParams[LAST_SESSION_PARAM] = lastSessionId;
        if (appCheckToken) urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;
        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);
    };
    /**
     * @param onMessage - Callback when messages arrive
     * @param onDisconnect - Callback with connection lost.
     */ WebSocketConnection1.prototype.open = function(onMessage, onDisconnect) {
        var _this = this;
        this.onDisconnect = onDisconnect;
        this.onMessage = onMessage;
        this.log_('Websocket connecting to ' + this.connURL);
        this.everConnected_ = false;
        // Assume failure until proven otherwise.
        PersistentStorage.set('previous_websocket_failure', true);
        try {
            if (_util.isNodeSdk()) {
                var device = this.nodeAdmin ? 'AdminNode' : 'Node';
                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>
                var options = {
                    headers: {
                        'User-Agent': "Firebase/" + PROTOCOL_VERSION + "/" + SDK_VERSION + "/" + process.platform + "/" + device,
                        'X-Firebase-GMPID': this.applicationId || ''
                    }
                };
                // If using Node with admin creds, AppCheck-related checks are unnecessary.
                // Note that we send the credentials here even if they aren't admin credentials, which is
                // not a problem.
                // Note that this header is just used to bypass appcheck, and the token should still be sent
                // through the websocket connection once it is established.
                if (this.authToken) options.headers['Authorization'] = "Bearer " + this.authToken;
                if (this.appCheckToken) options.headers['X-Firebase-AppCheck'] = this.appCheckToken;
                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.
                var env = process['env'];
                var proxy = this.connURL.indexOf('wss://') === 0 ? env['HTTPS_PROXY'] || env['https_proxy'] : env['HTTP_PROXY'] || env['http_proxy'];
                if (proxy) options['proxy'] = {
                    origin: proxy
                };
                this.mySock = new WebSocketImpl(this.connURL, [], options);
            } else {
                var options = {
                    headers: {
                        'X-Firebase-GMPID': this.applicationId || '',
                        'X-Firebase-AppCheck': this.appCheckToken || ''
                    }
                };
                this.mySock = new WebSocketImpl(this.connURL, [], options);
            }
        } catch (e) {
            this.log_('Error instantiating WebSocket.');
            var error1 = e.message || e.data;
            if (error1) this.log_(error1);
            this.onClosed_();
            return;
        }
        this.mySock.onopen = function() {
            _this.log_('Websocket connected.');
            _this.everConnected_ = true;
        };
        this.mySock.onclose = function() {
            _this.log_('Websocket connection was disconnected.');
            _this.mySock = null;
            _this.onClosed_();
        };
        this.mySock.onmessage = function(m) {
            _this.handleIncomingFrame(m);
        };
        this.mySock.onerror = function(e) {
            _this.log_('WebSocket error.  Closing connection.');
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var error2 = e.message || e.data;
            if (error2) _this.log_(error2);
            _this.onClosed_();
        };
    };
    /**
     * No-op for websockets, we don't need to do anything once the connection is confirmed as open
     */ WebSocketConnection1.prototype.start = function() {
    };
    WebSocketConnection1.forceDisallow = function() {
        WebSocketConnection1.forceDisallow_ = true;
    };
    WebSocketConnection1.isAvailable = function() {
        var isOldAndroid = false;
        if (typeof navigator !== 'undefined' && navigator.userAgent) {
            var oldAndroidRegex = /Android ([0-9]{0,}\.[0-9]{0,})/;
            var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);
            if (oldAndroidMatch && oldAndroidMatch.length > 1) {
                if (parseFloat(oldAndroidMatch[1]) < 4.4) isOldAndroid = true;
            }
        }
        return !isOldAndroid && WebSocketImpl !== null && !WebSocketConnection1.forceDisallow_;
    };
    /**
     * Returns true if we previously failed to connect with this transport.
     */ WebSocketConnection1.previouslyFailed = function() {
        // If our persistent storage is actually only in-memory storage,
        // we default to assuming that it previously failed to be safe.
        return PersistentStorage.isInMemoryStorage || PersistentStorage.get('previous_websocket_failure') === true;
    };
    WebSocketConnection1.prototype.markConnectionHealthy = function() {
        PersistentStorage.remove('previous_websocket_failure');
    };
    WebSocketConnection1.prototype.appendFrame_ = function(data) {
        this.frames.push(data);
        if (this.frames.length === this.totalFrames) {
            var fullMess = this.frames.join('');
            this.frames = null;
            var jsonMess = _util.jsonEval(fullMess);
            //handle the message
            this.onMessage(jsonMess);
        }
    };
    /**
     * @param frameCount - The number of frames we are expecting from the server
     */ WebSocketConnection1.prototype.handleNewFrameCount_ = function(frameCount) {
        this.totalFrames = frameCount;
        this.frames = [];
    };
    /**
     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1
     * @returns Any remaining data to be process, or null if there is none
     */ WebSocketConnection1.prototype.extractFrameCount_ = function(data) {
        _util.assert(this.frames === null, 'We already have a frame buffer');
        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced
        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508
        if (data.length <= 6) {
            var frameCount = Number(data);
            if (!isNaN(frameCount)) {
                this.handleNewFrameCount_(frameCount);
                return null;
            }
        }
        this.handleNewFrameCount_(1);
        return data;
    };
    /**
     * Process a websocket frame that has arrived from the server.
     * @param mess - The frame data
     */ WebSocketConnection1.prototype.handleIncomingFrame = function(mess) {
        if (this.mySock === null) return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.
        var data = mess['data'];
        this.bytesReceived += data.length;
        this.stats_.incrementCounter('bytes_received', data.length);
        this.resetKeepAlive();
        if (this.frames !== null) // we're buffering
        this.appendFrame_(data);
        else {
            // try to parse out a frame count, otherwise, assume 1 and process it
            var remainingData = this.extractFrameCount_(data);
            if (remainingData !== null) this.appendFrame_(remainingData);
        }
    };
    /**
     * Send a message to the server
     * @param data - The JSON object to transmit
     */ WebSocketConnection1.prototype.send = function(data) {
        this.resetKeepAlive();
        var dataStr = _util.stringify(data);
        this.bytesSent += dataStr.length;
        this.stats_.incrementCounter('bytes_sent', dataStr.length);
        //We can only fit a certain amount in each websocket frame, so we need to split this request
        //up into multiple pieces if it doesn't fit in one request.
        var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);
        //Send the length header
        if (dataSegs.length > 1) this.sendString_(String(dataSegs.length));
        //Send the actual data in segments.
        for(var i = 0; i < dataSegs.length; i++)this.sendString_(dataSegs[i]);
    };
    WebSocketConnection1.prototype.shutdown_ = function() {
        this.isClosed_ = true;
        if (this.keepaliveTimer) {
            clearInterval(this.keepaliveTimer);
            this.keepaliveTimer = null;
        }
        if (this.mySock) {
            this.mySock.close();
            this.mySock = null;
        }
    };
    WebSocketConnection1.prototype.onClosed_ = function() {
        if (!this.isClosed_) {
            this.log_('WebSocket is closing itself');
            this.shutdown_();
            // since this is an internal close, trigger the close listener
            if (this.onDisconnect) {
                this.onDisconnect(this.everConnected_);
                this.onDisconnect = null;
            }
        }
    };
    /**
     * External-facing close handler.
     * Close the websocket and kill the connection.
     */ WebSocketConnection1.prototype.close = function() {
        if (!this.isClosed_) {
            this.log_('WebSocket is being closed');
            this.shutdown_();
        }
    };
    /**
     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after
     * the last activity.
     */ WebSocketConnection1.prototype.resetKeepAlive = function() {
        var _this = this;
        clearInterval(this.keepaliveTimer);
        this.keepaliveTimer = setInterval(function() {
            //If there has been no websocket activity for a while, send a no-op
            if (_this.mySock) _this.sendString_('0');
            _this.resetKeepAlive();
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));
    };
    /**
     * Send a string over the websocket.
     *
     * @param str - String to send.
     */ WebSocketConnection1.prototype.sendString_ = function(str) {
        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()
        // calls for some unknown reason.  We treat these as an error and disconnect.
        // See https://app.asana.com/0/58926111402292/68021340250410
        try {
            this.mySock.send(str);
        } catch (e) {
            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');
            setTimeout(this.onClosed_.bind(this), 0);
        }
    };
    /**
     * Number of response before we consider the connection "healthy."
     */ WebSocketConnection1.responsesRequiredToBeHealthy = 2;
    /**
     * Time to wait for the connection te become healthy before giving up.
     */ WebSocketConnection1.healthyTimeout = 30000;
    return WebSocketConnection1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Currently simplistic, this class manages what transport a Connection should use at various stages of its
 * lifecycle.
 *
 * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if
 * they are available.
 */ var TransportManager = function() {
    /**
     * @param repoInfo - Metadata around the namespace we're connecting to
     */ function TransportManager1(repoInfo) {
        this.initTransports_(repoInfo);
    }
    Object.defineProperty(TransportManager1, "ALL_TRANSPORTS", {
        get: function() {
            return [
                BrowserPollConnection,
                WebSocketConnection
            ];
        },
        enumerable: false,
        configurable: true
    });
    TransportManager1.prototype.initTransports_ = function(repoInfo) {
        var e_1, _a;
        var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();
        var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();
        if (repoInfo.webSocketOnly) {
            if (!isWebSocketsAvailable) warn("wss:// URL used, but browser isn't known to support websockets.  Trying anyway.");
            isSkipPollConnection = true;
        }
        if (isSkipPollConnection) this.transports_ = [
            WebSocketConnection
        ];
        else {
            var transports = this.transports_ = [];
            try {
                for(var _b = _tslib.__values(TransportManager1.ALL_TRANSPORTS), _c = _b.next(); !_c.done; _c = _b.next()){
                    var transport = _c.value;
                    if (transport && transport['isAvailable']()) transports.push(transport);
                }
            } catch (e_1_1) {
                e_1 = {
                    error: e_1_1
                };
            } finally{
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                } finally{
                    if (e_1) throw e_1.error;
                }
            }
        }
    };
    /**
     * @returns The constructor for the initial transport to use
     */ TransportManager1.prototype.initialTransport = function() {
        if (this.transports_.length > 0) return this.transports_[0];
        else throw new Error('No transports available');
    };
    /**
     * @returns The constructor for the next transport, or null
     */ TransportManager1.prototype.upgradeTransport = function() {
        if (this.transports_.length > 1) return this.transports_[1];
        else return null;
    };
    return TransportManager1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Abort upgrade attempt if it takes longer than 60s.
var UPGRADE_TIMEOUT = 60000;
// For some transports (WebSockets), we need to "validate" the transport by exchanging a few requests and responses.
// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.
var DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;
// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)
// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout
// but we've sent/received enough bytes, we don't cancel the connection.
var BYTES_SENT_HEALTHY_OVERRIDE = 10240;
var BYTES_RECEIVED_HEALTHY_OVERRIDE = 102400;
var MESSAGE_TYPE = 't';
var MESSAGE_DATA = 'd';
var CONTROL_SHUTDOWN = 's';
var CONTROL_RESET = 'r';
var CONTROL_ERROR = 'e';
var CONTROL_PONG = 'o';
var SWITCH_ACK = 'a';
var END_TRANSMISSION = 'n';
var PING = 'p';
var SERVER_HELLO = 'h';
/**
 * Creates a new real-time connection to the server using whichever method works
 * best in the current browser.
 */ var Connection = function() {
    /**
     * @param id - an id for this connection
     * @param repoInfo_ - the info for the endpoint to connect to
     * @param applicationId_ - the Firebase App ID for this project
     * @param appCheckToken_ - The App Check Token for this device.
     * @param authToken_ - The auth token for this session.
     * @param onMessage_ - the callback to be triggered when a server-push message arrives
     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.
     * @param onDisconnect_ - the callback to be triggered when a connection was lost
     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.
     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server
     */ function Connection1(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {
        this.id = id;
        this.repoInfo_ = repoInfo_;
        this.applicationId_ = applicationId_;
        this.appCheckToken_ = appCheckToken_;
        this.authToken_ = authToken_;
        this.onMessage_ = onMessage_;
        this.onReady_ = onReady_;
        this.onDisconnect_ = onDisconnect_;
        this.onKill_ = onKill_;
        this.lastSessionId = lastSessionId;
        this.connectionCount = 0;
        this.pendingDataMessages = [];
        this.state_ = 0;
        this.log_ = logWrapper('c:' + this.id + ':');
        this.transportManager_ = new TransportManager(repoInfo_);
        this.log_('Connection created');
        this.start_();
    }
    /**
     * Starts a connection attempt
     */ Connection1.prototype.start_ = function() {
        var _this = this;
        var conn = this.transportManager_.initialTransport();
        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);
        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
        // can consider the transport healthy.
        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;
        var onMessageReceived = this.connReceiver_(this.conn_);
        var onConnectionLost = this.disconnReceiver_(this.conn_);
        this.tx_ = this.conn_;
        this.rx_ = this.conn_;
        this.secondaryConn_ = null;
        this.isHealthy_ = false;
        /*
         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.
         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.
         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should
         * still have the context of your originating frame.
         */ setTimeout(function() {
            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it
            _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);
        }, Math.floor(0));
        var healthyTimeoutMS = conn['healthyTimeout'] || 0;
        if (healthyTimeoutMS > 0) this.healthyTimeout_ = setTimeoutNonBlocking(function() {
            _this.healthyTimeout_ = null;
            if (!_this.isHealthy_) {
                if (_this.conn_ && _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {
                    _this.log_('Connection exceeded healthy timeout but has received ' + _this.conn_.bytesReceived + ' bytes.  Marking connection healthy.');
                    _this.isHealthy_ = true;
                    _this.conn_.markConnectionHealthy();
                } else if (_this.conn_ && _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) _this.log_('Connection exceeded healthy timeout but has sent ' + _this.conn_.bytesSent + ' bytes.  Leaving connection alive.');
                else {
                    _this.log_('Closing unhealthy connection after timeout.');
                    _this.close();
                }
            }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        }, Math.floor(healthyTimeoutMS));
    };
    Connection1.prototype.nextTransportId_ = function() {
        return 'c:' + this.id + ':' + this.connectionCount++;
    };
    Connection1.prototype.disconnReceiver_ = function(conn) {
        var _this = this;
        return function(everConnected) {
            if (conn === _this.conn_) _this.onConnectionLost_(everConnected);
            else if (conn === _this.secondaryConn_) {
                _this.log_('Secondary connection lost.');
                _this.onSecondaryConnectionLost_();
            } else _this.log_('closing an old connection');
        };
    };
    Connection1.prototype.connReceiver_ = function(conn) {
        var _this = this;
        return function(message) {
            if (_this.state_ !== 2) {
                if (conn === _this.rx_) _this.onPrimaryMessageReceived_(message);
                else if (conn === _this.secondaryConn_) _this.onSecondaryMessageReceived_(message);
                else _this.log_('message on old connection');
            }
        };
    };
    /**
     * @param dataMsg - An arbitrary data message to be sent to the server
     */ Connection1.prototype.sendRequest = function(dataMsg) {
        // wrap in a data message envelope and send it on
        var msg = {
            t: 'd',
            d: dataMsg
        };
        this.sendData_(msg);
    };
    Connection1.prototype.tryCleanupConnection = function() {
        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {
            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);
            this.conn_ = this.secondaryConn_;
            this.secondaryConn_ = null;
        // the server will shutdown the old connection
        }
    };
    Connection1.prototype.onSecondaryControl_ = function(controlData) {
        if (MESSAGE_TYPE in controlData) {
            var cmd = controlData[MESSAGE_TYPE];
            if (cmd === SWITCH_ACK) this.upgradeIfSecondaryHealthy_();
            else if (cmd === CONTROL_RESET) {
                // Most likely the session wasn't valid. Abandon the switch attempt
                this.log_('Got a reset on secondary, closing it');
                this.secondaryConn_.close();
                // If we were already using this connection for something, than we need to fully close
                if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) this.close();
            } else if (cmd === CONTROL_PONG) {
                this.log_('got pong on secondary.');
                this.secondaryResponsesRequired_--;
                this.upgradeIfSecondaryHealthy_();
            }
        }
    };
    Connection1.prototype.onSecondaryMessageReceived_ = function(parsedData) {
        var layer = requireKey('t', parsedData);
        var data = requireKey('d', parsedData);
        if (layer === 'c') this.onSecondaryControl_(data);
        else if (layer === 'd') // got a data message, but we're still second connection. Need to buffer it up
        this.pendingDataMessages.push(data);
        else throw new Error('Unknown protocol layer: ' + layer);
    };
    Connection1.prototype.upgradeIfSecondaryHealthy_ = function() {
        if (this.secondaryResponsesRequired_ <= 0) {
            this.log_('Secondary connection is healthy.');
            this.isHealthy_ = true;
            this.secondaryConn_.markConnectionHealthy();
            this.proceedWithUpgrade_();
        } else {
            // Send a ping to make sure the connection is healthy.
            this.log_('sending ping on secondary.');
            this.secondaryConn_.send({
                t: 'c',
                d: {
                    t: PING,
                    d: {
                    }
                }
            });
        }
    };
    Connection1.prototype.proceedWithUpgrade_ = function() {
        // tell this connection to consider itself open
        this.secondaryConn_.start();
        // send ack
        this.log_('sending client ack on secondary');
        this.secondaryConn_.send({
            t: 'c',
            d: {
                t: SWITCH_ACK,
                d: {
                }
            }
        });
        // send end packet on primary transport, switch to sending on this one
        // can receive on this one, buffer responses until end received on primary transport
        this.log_('Ending transmission on primary');
        this.conn_.send({
            t: 'c',
            d: {
                t: END_TRANSMISSION,
                d: {
                }
            }
        });
        this.tx_ = this.secondaryConn_;
        this.tryCleanupConnection();
    };
    Connection1.prototype.onPrimaryMessageReceived_ = function(parsedData) {
        // Must refer to parsedData properties in quotes, so closure doesn't touch them.
        var layer = requireKey('t', parsedData);
        var data = requireKey('d', parsedData);
        if (layer === 'c') this.onControl_(data);
        else if (layer === 'd') this.onDataMessage_(data);
    };
    Connection1.prototype.onDataMessage_ = function(message) {
        this.onPrimaryResponse_();
        // We don't do anything with data messages, just kick them up a level
        this.onMessage_(message);
    };
    Connection1.prototype.onPrimaryResponse_ = function() {
        if (!this.isHealthy_) {
            this.primaryResponsesRequired_--;
            if (this.primaryResponsesRequired_ <= 0) {
                this.log_('Primary connection is healthy.');
                this.isHealthy_ = true;
                this.conn_.markConnectionHealthy();
            }
        }
    };
    Connection1.prototype.onControl_ = function(controlData) {
        var cmd = requireKey(MESSAGE_TYPE, controlData);
        if (MESSAGE_DATA in controlData) {
            var payload = controlData[MESSAGE_DATA];
            if (cmd === SERVER_HELLO) this.onHandshake_(payload);
            else if (cmd === END_TRANSMISSION) {
                this.log_('recvd end transmission on primary');
                this.rx_ = this.secondaryConn_;
                for(var i = 0; i < this.pendingDataMessages.length; ++i)this.onDataMessage_(this.pendingDataMessages[i]);
                this.pendingDataMessages = [];
                this.tryCleanupConnection();
            } else if (cmd === CONTROL_SHUTDOWN) // This was previously the 'onKill' callback passed to the lower-level connection
            // payload in this case is the reason for the shutdown. Generally a human-readable error
            this.onConnectionShutdown_(payload);
            else if (cmd === CONTROL_RESET) // payload in this case is the host we should contact
            this.onReset_(payload);
            else if (cmd === CONTROL_ERROR) error('Server Error: ' + payload);
            else if (cmd === CONTROL_PONG) {
                this.log_('got pong on primary.');
                this.onPrimaryResponse_();
                this.sendPingOnPrimaryIfNecessary_();
            } else error('Unknown control packet command: ' + cmd);
        }
    };
    /**
     * @param handshake - The handshake data returned from the server
     */ Connection1.prototype.onHandshake_ = function(handshake) {
        var timestamp = handshake.ts;
        var version1 = handshake.v;
        var host = handshake.h;
        this.sessionId = handshake.s;
        this.repoInfo_.host = host;
        // if we've already closed the connection, then don't bother trying to progress further
        if (this.state_ === 0) {
            this.conn_.start();
            this.onConnectionEstablished_(this.conn_, timestamp);
            if (PROTOCOL_VERSION !== version1) warn('Protocol version mismatch detected');
            // TODO: do we want to upgrade? when? maybe a delay?
            this.tryStartUpgrade_();
        }
    };
    Connection1.prototype.tryStartUpgrade_ = function() {
        var conn = this.transportManager_.upgradeTransport();
        if (conn) this.startUpgrade_(conn);
    };
    Connection1.prototype.startUpgrade_ = function(conn) {
        var _this = this;
        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);
        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
        // can consider the transport healthy.
        this.secondaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;
        var onMessage = this.connReceiver_(this.secondaryConn_);
        var onDisconnect = this.disconnReceiver_(this.secondaryConn_);
        this.secondaryConn_.open(onMessage, onDisconnect);
        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.
        setTimeoutNonBlocking(function() {
            if (_this.secondaryConn_) {
                _this.log_('Timed out trying to upgrade.');
                _this.secondaryConn_.close();
            }
        }, Math.floor(UPGRADE_TIMEOUT));
    };
    Connection1.prototype.onReset_ = function(host) {
        this.log_('Reset packet received.  New host: ' + host);
        this.repoInfo_.host = host;
        // TODO: if we're already "connected", we need to trigger a disconnect at the next layer up.
        // We don't currently support resets after the connection has already been established
        if (this.state_ === 1) this.close();
        else {
            // Close whatever connections we have open and start again.
            this.closeConnections_();
            this.start_();
        }
    };
    Connection1.prototype.onConnectionEstablished_ = function(conn, timestamp) {
        var _this = this;
        this.log_('Realtime connection established.');
        this.conn_ = conn;
        this.state_ = 1;
        if (this.onReady_) {
            this.onReady_(timestamp, this.sessionId);
            this.onReady_ = null;
        }
        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,
        // send some pings.
        if (this.primaryResponsesRequired_ === 0) {
            this.log_('Primary connection is healthy.');
            this.isHealthy_ = true;
        } else setTimeoutNonBlocking(function() {
            _this.sendPingOnPrimaryIfNecessary_();
        }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));
    };
    Connection1.prototype.sendPingOnPrimaryIfNecessary_ = function() {
        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.
        if (!this.isHealthy_ && this.state_ === 1) {
            this.log_('sending ping on primary.');
            this.sendData_({
                t: 'c',
                d: {
                    t: PING,
                    d: {
                    }
                }
            });
        }
    };
    Connection1.prototype.onSecondaryConnectionLost_ = function() {
        var conn = this.secondaryConn_;
        this.secondaryConn_ = null;
        if (this.tx_ === conn || this.rx_ === conn) // we are relying on this connection already in some capacity. Therefore, a failure is real
        this.close();
    };
    /**
     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if
     * we should flush the host cache
     */ Connection1.prototype.onConnectionLost_ = function(everConnected) {
        this.conn_ = null;
        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting
        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.
        if (!everConnected && this.state_ === 0) {
            this.log_('Realtime connection failed.');
            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away
            if (this.repoInfo_.isCacheableHost()) {
                PersistentStorage.remove('host:' + this.repoInfo_.host);
                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com
                this.repoInfo_.internalHost = this.repoInfo_.host;
            }
        } else if (this.state_ === 1) this.log_('Realtime connection lost.');
        this.close();
    };
    Connection1.prototype.onConnectionShutdown_ = function(reason) {
        this.log_('Connection shutdown command received. Shutting down...');
        if (this.onKill_) {
            this.onKill_(reason);
            this.onKill_ = null;
        }
        // We intentionally don't want to fire onDisconnect (kill is a different case),
        // so clear the callback.
        this.onDisconnect_ = null;
        this.close();
    };
    Connection1.prototype.sendData_ = function(data) {
        if (this.state_ !== 1) throw 'Connection is not connected';
        else this.tx_.send(data);
    };
    /**
     * Cleans up this connection, calling the appropriate callbacks
     */ Connection1.prototype.close = function() {
        if (this.state_ !== 2) {
            this.log_('Closing realtime connection.');
            this.state_ = 2;
            this.closeConnections_();
            if (this.onDisconnect_) {
                this.onDisconnect_();
                this.onDisconnect_ = null;
            }
        }
    };
    Connection1.prototype.closeConnections_ = function() {
        this.log_('Shutting down all connections');
        if (this.conn_) {
            this.conn_.close();
            this.conn_ = null;
        }
        if (this.secondaryConn_) {
            this.secondaryConn_.close();
            this.secondaryConn_ = null;
        }
        if (this.healthyTimeout_) {
            clearTimeout(this.healthyTimeout_);
            this.healthyTimeout_ = null;
        }
    };
    return Connection1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Interface defining the set of actions that can be performed against the Firebase server
 * (basically corresponds to our wire protocol).
 *
 * @interface
 */ var ServerActions = function() {
    function ServerActions1() {
    }
    ServerActions1.prototype.put = function(pathString, data, onComplete, hash) {
    };
    ServerActions1.prototype.merge = function(pathString, data, onComplete, hash) {
    };
    /**
     * Refreshes the auth token for the current connection.
     * @param token - The authentication token
     */ ServerActions1.prototype.refreshAuthToken = function(token) {
    };
    /**
     * Refreshes the app check token for the current connection.
     * @param token The app check token
     */ ServerActions1.prototype.refreshAppCheckToken = function(token) {
    };
    ServerActions1.prototype.onDisconnectPut = function(pathString, data, onComplete) {
    };
    ServerActions1.prototype.onDisconnectMerge = function(pathString, data, onComplete) {
    };
    ServerActions1.prototype.onDisconnectCancel = function(pathString, onComplete) {
    };
    ServerActions1.prototype.reportStats = function(stats) {
    };
    return ServerActions1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Base class to be used if you want to emit events. Call the constructor with
 * the set of allowed event names.
 */ var EventEmitter = function() {
    function EventEmitter1(allowedEvents_) {
        this.allowedEvents_ = allowedEvents_;
        this.listeners_ = {
        };
        _util.assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');
    }
    /**
     * To be called by derived classes to trigger events.
     */ EventEmitter1.prototype.trigger = function(eventType) {
        var varArgs = [];
        for(var _i = 1; _i < arguments.length; _i++)varArgs[_i - 1] = arguments[_i];
        if (Array.isArray(this.listeners_[eventType])) {
            // Clone the list, since callbacks could add/remove listeners.
            var listeners = _tslib.__spreadArray([], _tslib.__read(this.listeners_[eventType]));
            for(var i = 0; i < listeners.length; i++)listeners[i].callback.apply(listeners[i].context, varArgs);
        }
    };
    EventEmitter1.prototype.on = function(eventType, callback, context) {
        this.validateEventType_(eventType);
        this.listeners_[eventType] = this.listeners_[eventType] || [];
        this.listeners_[eventType].push({
            callback: callback,
            context: context
        });
        var eventData = this.getInitialEvent(eventType);
        if (eventData) callback.apply(context, eventData);
    };
    EventEmitter1.prototype.off = function(eventType, callback, context) {
        this.validateEventType_(eventType);
        var listeners = this.listeners_[eventType] || [];
        for(var i = 0; i < listeners.length; i++)if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {
            listeners.splice(i, 1);
            return;
        }
    };
    EventEmitter1.prototype.validateEventType_ = function(eventType) {
        _util.assert(this.allowedEvents_.find(function(et) {
            return et === eventType;
        }), 'Unknown event: ' + eventType);
    };
    return EventEmitter1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Monitors online state (as reported by window.online/offline events).
 *
 * The expectation is that this could have many false positives (thinks we are online
 * when we're not), but no false negatives.  So we can safely use it to determine when
 * we definitely cannot reach the internet.
 */ var OnlineMonitor1 = function(_super) {
    _tslib.__extends(OnlineMonitor2, _super);
    function OnlineMonitor2() {
        var _this = _super.call(this, [
            'online'
        ]) || this;
        _this.online_ = true;
        // We've had repeated complaints that Cordova apps can get stuck "offline", e.g.
        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810
        // It would seem that the 'online' event does not always fire consistently. So we disable it
        // for Cordova.
        if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined' && !_util.isMobileCordova()) {
            window.addEventListener('online', function() {
                if (!_this.online_) {
                    _this.online_ = true;
                    _this.trigger('online', true);
                }
            }, false);
            window.addEventListener('offline', function() {
                if (_this.online_) {
                    _this.online_ = false;
                    _this.trigger('online', false);
                }
            }, false);
        }
        return _this;
    }
    OnlineMonitor2.getInstance = function() {
        return new OnlineMonitor2();
    };
    OnlineMonitor2.prototype.getInitialEvent = function(eventType) {
        _util.assert(eventType === 'online', 'Unknown event type: ' + eventType);
        return [
            this.online_
        ];
    };
    OnlineMonitor2.prototype.currentlyOnline = function() {
        return this.online_;
    };
    return OnlineMonitor2;
}(EventEmitter);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Maximum key depth. */ var MAX_PATH_DEPTH = 32;
/** Maximum number of (UTF8) bytes in a Firebase path. */ var MAX_PATH_LENGTH_BYTES = 768;
/**
 * An immutable object representing a parsed path.  It's immutable so that you
 * can pass them around to other functions without worrying about them changing
 * it.
 */ var Path = function() {
    /**
     * @param pathOrString - Path string to parse, or another path, or the raw
     * tokens array
     */ function Path1(pathOrString, pieceNum) {
        if (pieceNum === void 0) {
            this.pieces_ = pathOrString.split('/');
            // Remove empty pieces.
            var copyTo = 0;
            for(var i = 0; i < this.pieces_.length; i++)if (this.pieces_[i].length > 0) {
                this.pieces_[copyTo] = this.pieces_[i];
                copyTo++;
            }
            this.pieces_.length = copyTo;
            this.pieceNum_ = 0;
        } else {
            this.pieces_ = pathOrString;
            this.pieceNum_ = pieceNum;
        }
    }
    Path1.prototype.toString = function() {
        var pathString = '';
        for(var i = this.pieceNum_; i < this.pieces_.length; i++)if (this.pieces_[i] !== '') pathString += '/' + this.pieces_[i];
        return pathString || '/';
    };
    return Path1;
}();
function newEmptyPath() {
    return new Path('');
}
function pathGetFront(path) {
    if (path.pieceNum_ >= path.pieces_.length) return null;
    return path.pieces_[path.pieceNum_];
}
/**
 * @returns The number of segments in this path
 */ function pathGetLength(path) {
    return path.pieces_.length - path.pieceNum_;
}
function pathPopFront(path) {
    var pieceNum = path.pieceNum_;
    if (pieceNum < path.pieces_.length) pieceNum++;
    return new Path(path.pieces_, pieceNum);
}
function pathGetBack(path) {
    if (path.pieceNum_ < path.pieces_.length) return path.pieces_[path.pieces_.length - 1];
    return null;
}
function pathToUrlEncodedString(path) {
    var pathString = '';
    for(var i = path.pieceNum_; i < path.pieces_.length; i++)if (path.pieces_[i] !== '') pathString += '/' + encodeURIComponent(String(path.pieces_[i]));
    return pathString || '/';
}
/**
 * Shallow copy of the parts of the path.
 *
 */ function pathSlice(path, begin) {
    if (begin === void 0) begin = 0;
    return path.pieces_.slice(path.pieceNum_ + begin);
}
function pathParent(path) {
    if (path.pieceNum_ >= path.pieces_.length) return null;
    var pieces = [];
    for(var i = path.pieceNum_; i < path.pieces_.length - 1; i++)pieces.push(path.pieces_[i]);
    return new Path(pieces, 0);
}
function pathChild(path, childPathObj) {
    var pieces = [];
    for(var i = path.pieceNum_; i < path.pieces_.length; i++)pieces.push(path.pieces_[i]);
    if (childPathObj instanceof Path) for(var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++)pieces.push(childPathObj.pieces_[i]);
    else {
        var childPieces = childPathObj.split('/');
        for(var i = 0; i < childPieces.length; i++)if (childPieces[i].length > 0) pieces.push(childPieces[i]);
    }
    return new Path(pieces, 0);
}
/**
 * @returns True if there are no segments in this path
 */ function pathIsEmpty(path) {
    return path.pieceNum_ >= path.pieces_.length;
}
/**
 * @returns The path from outerPath to innerPath
 */ function newRelativePath(outerPath, innerPath) {
    var outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);
    if (outer === null) return innerPath;
    else if (outer === inner) return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));
    else throw new Error('INTERNAL ERROR: innerPath (' + innerPath + ') is not within ' + 'outerPath (' + outerPath + ')');
}
/**
 * @returns -1, 0, 1 if left is less, equal, or greater than the right.
 */ function pathCompare(left, right) {
    var leftKeys = pathSlice(left, 0);
    var rightKeys = pathSlice(right, 0);
    for(var i = 0; i < leftKeys.length && i < rightKeys.length; i++){
        var cmp = nameCompare(leftKeys[i], rightKeys[i]);
        if (cmp !== 0) return cmp;
    }
    if (leftKeys.length === rightKeys.length) return 0;
    return leftKeys.length < rightKeys.length ? -1 : 1;
}
/**
 * @returns true if paths are the same.
 */ function pathEquals(path, other) {
    if (pathGetLength(path) !== pathGetLength(other)) return false;
    for(var i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++){
        if (path.pieces_[i] !== other.pieces_[j]) return false;
    }
    return true;
}
/**
 * @returns True if this path is a parent (or the same as) other
 */ function pathContains(path, other) {
    var i = path.pieceNum_;
    var j = other.pieceNum_;
    if (pathGetLength(path) > pathGetLength(other)) return false;
    while(i < path.pieces_.length){
        if (path.pieces_[i] !== other.pieces_[j]) return false;
        ++i;
        ++j;
    }
    return true;
}
/**
 * Dynamic (mutable) path used to count path lengths.
 *
 * This class is used to efficiently check paths for valid
 * length (in UTF8 bytes) and depth (used in path validation).
 *
 * Throws Error exception if path is ever invalid.
 *
 * The definition of a path always begins with '/'.
 */ var ValidationPath = function() {
    /**
     * @param path - Initial Path.
     * @param errorPrefix_ - Prefix for any error messages.
     */ function ValidationPath1(path, errorPrefix_) {
        this.errorPrefix_ = errorPrefix_;
        this.parts_ = pathSlice(path, 0);
        /** Initialize to number of '/' chars needed in path. */ this.byteLength_ = Math.max(1, this.parts_.length);
        for(var i = 0; i < this.parts_.length; i++)this.byteLength_ += _util.stringLength(this.parts_[i]);
        validationPathCheckValid(this);
    }
    return ValidationPath1;
}();
function validationPathPush(validationPath, child) {
    // Count the needed '/'
    if (validationPath.parts_.length > 0) validationPath.byteLength_ += 1;
    validationPath.parts_.push(child);
    validationPath.byteLength_ += _util.stringLength(child);
    validationPathCheckValid(validationPath);
}
function validationPathPop(validationPath) {
    var last = validationPath.parts_.pop();
    validationPath.byteLength_ -= _util.stringLength(last);
    // Un-count the previous '/'
    if (validationPath.parts_.length > 0) validationPath.byteLength_ -= 1;
}
function validationPathCheckValid(validationPath) {
    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) throw new Error(validationPath.errorPrefix_ + 'has a key path longer than ' + MAX_PATH_LENGTH_BYTES + ' bytes (' + validationPath.byteLength_ + ').');
    if (validationPath.parts_.length > MAX_PATH_DEPTH) throw new Error(validationPath.errorPrefix_ + 'path specified exceeds the maximum depth that can be written (' + MAX_PATH_DEPTH + ') or object contains a cycle ' + validationPathToErrorString(validationPath));
}
/**
 * String for use in error messages - uses '.' notation for path.
 */ function validationPathToErrorString(validationPath) {
    if (validationPath.parts_.length === 0) return '';
    return "in property '" + validationPath.parts_.join('.') + "'";
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var VisibilityMonitor1 = function(_super) {
    _tslib.__extends(VisibilityMonitor2, _super);
    function VisibilityMonitor2() {
        var _this = _super.call(this, [
            'visible'
        ]) || this;
        var hidden;
        var visibilityChange;
        if (typeof document !== 'undefined' && typeof document.addEventListener !== 'undefined') {
            if (typeof document['hidden'] !== 'undefined') {
                // Opera 12.10 and Firefox 18 and later support
                visibilityChange = 'visibilitychange';
                hidden = 'hidden';
            } else if (typeof document['mozHidden'] !== 'undefined') {
                visibilityChange = 'mozvisibilitychange';
                hidden = 'mozHidden';
            } else if (typeof document['msHidden'] !== 'undefined') {
                visibilityChange = 'msvisibilitychange';
                hidden = 'msHidden';
            } else if (typeof document['webkitHidden'] !== 'undefined') {
                visibilityChange = 'webkitvisibilitychange';
                hidden = 'webkitHidden';
            }
        }
        // Initially, we always assume we are visible. This ensures that in browsers
        // without page visibility support or in cases where we are never visible
        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay
        // reconnects
        _this.visible_ = true;
        if (visibilityChange) document.addEventListener(visibilityChange, function() {
            var visible = !document[hidden];
            if (visible !== _this.visible_) {
                _this.visible_ = visible;
                _this.trigger('visible', visible);
            }
        }, false);
        return _this;
    }
    VisibilityMonitor2.getInstance = function() {
        return new VisibilityMonitor2();
    };
    VisibilityMonitor2.prototype.getInitialEvent = function(eventType) {
        _util.assert(eventType === 'visible', 'Unknown event type: ' + eventType);
        return [
            this.visible_
        ];
    };
    return VisibilityMonitor2;
}(EventEmitter);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var RECONNECT_MIN_DELAY = 1000;
var RECONNECT_MAX_DELAY_DEFAULT = 300000; // 5 minutes in milliseconds (Case: 1858)
var GET_CONNECT_TIMEOUT = 3000;
var RECONNECT_MAX_DELAY_FOR_ADMINS = 30000; // 30 seconds for admin clients (likely to be a backend server)
var RECONNECT_DELAY_MULTIPLIER = 1.3;
var RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.
var SERVER_KILL_INTERRUPT_REASON = 'server_kill';
// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.
var INVALID_TOKEN_THRESHOLD = 3;
/**
 * Firebase connection.  Abstracts wire protocol and handles reconnecting.
 *
 * NOTE: All JSON objects sent to the realtime connection must have property names enclosed
 * in quotes to make sure the closure compiler does not minify them.
 */ var PersistentConnection1 = function(_super) {
    _tslib.__extends(PersistentConnection2, _super);
    /**
     * @param repoInfo_ - Data about the namespace we are connecting to
     * @param applicationId_ - The Firebase App ID for this project
     * @param onDataUpdate_ - A callback for new data from the server
     */ function PersistentConnection2(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {
        var _this = _super.call(this) || this;
        _this.repoInfo_ = repoInfo_;
        _this.applicationId_ = applicationId_;
        _this.onDataUpdate_ = onDataUpdate_;
        _this.onConnectStatus_ = onConnectStatus_;
        _this.onServerInfoUpdate_ = onServerInfoUpdate_;
        _this.authTokenProvider_ = authTokenProvider_;
        _this.appCheckTokenProvider_ = appCheckTokenProvider_;
        _this.authOverride_ = authOverride_;
        // Used for diagnostic logging.
        _this.id = PersistentConnection2.nextPersistentConnectionId_++;
        _this.log_ = logWrapper('p:' + _this.id + ':');
        _this.interruptReasons_ = {
        };
        _this.listens = new Map();
        _this.outstandingPuts_ = [];
        _this.outstandingGets_ = [];
        _this.outstandingPutCount_ = 0;
        _this.outstandingGetCount_ = 0;
        _this.onDisconnectRequestQueue_ = [];
        _this.connected_ = false;
        _this.reconnectDelay_ = RECONNECT_MIN_DELAY;
        _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;
        _this.securityDebugCallback_ = null;
        _this.lastSessionId = null;
        _this.establishConnectionTimer_ = null;
        _this.visible_ = false;
        // Before we get connected, we keep a queue of pending messages to send.
        _this.requestCBHash_ = {
        };
        _this.requestNumber_ = 0;
        _this.realtime_ = null;
        _this.authToken_ = null;
        _this.appCheckToken_ = null;
        _this.forceTokenRefresh_ = false;
        _this.invalidAuthTokenCount_ = 0;
        _this.invalidAppCheckTokenCount_ = 0;
        _this.firstConnection_ = true;
        _this.lastConnectionAttemptTime_ = null;
        _this.lastConnectionEstablishedTime_ = null;
        if (authOverride_ && !_util.isNodeSdk()) throw new Error('Auth override specified in options, but not supported on non Node.js platforms');
        VisibilityMonitor1.getInstance().on('visible', _this.onVisible_, _this);
        if (repoInfo_.host.indexOf('fblocal') === -1) OnlineMonitor1.getInstance().on('online', _this.onOnline_, _this);
        return _this;
    }
    PersistentConnection2.prototype.sendRequest = function(action, body, onResponse) {
        var curReqNum = ++this.requestNumber_;
        var msg = {
            r: curReqNum,
            a: action,
            b: body
        };
        this.log_(_util.stringify(msg));
        _util.assert(this.connected_, "sendRequest call when we're not connected not allowed.");
        this.realtime_.sendRequest(msg);
        if (onResponse) this.requestCBHash_[curReqNum] = onResponse;
    };
    PersistentConnection2.prototype.get = function(query) {
        var _this = this;
        this.initConnection_();
        var deferred = new _util.Deferred();
        var request = {
            p: query._path.toString(),
            q: query._queryObject
        };
        var outstandingGet = {
            action: 'g',
            request: request,
            onComplete: function(message) {
                var payload = message['d'];
                if (message['s'] === 'ok') {
                    _this.onDataUpdate_(request['p'], payload, /*isMerge*/ false, /*tag*/ null);
                    deferred.resolve(payload);
                } else deferred.reject(payload);
            }
        };
        this.outstandingGets_.push(outstandingGet);
        this.outstandingGetCount_++;
        var index = this.outstandingGets_.length - 1;
        if (!this.connected_) setTimeout(function() {
            var get = _this.outstandingGets_[index];
            if (get === undefined || outstandingGet !== get) return;
            delete _this.outstandingGets_[index];
            _this.outstandingGetCount_--;
            if (_this.outstandingGetCount_ === 0) _this.outstandingGets_ = [];
            _this.log_('get ' + index + ' timed out on connection');
            deferred.reject(new Error('Client is offline.'));
        }, GET_CONNECT_TIMEOUT);
        if (this.connected_) this.sendGet_(index);
        return deferred.promise;
    };
    PersistentConnection2.prototype.listen = function(query, currentHashFn, tag, onComplete) {
        this.initConnection_();
        var queryId = query._queryIdentifier;
        var pathString = query._path.toString();
        this.log_('Listen called for ' + pathString + ' ' + queryId);
        if (!this.listens.has(pathString)) this.listens.set(pathString, new Map());
        _util.assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');
        _util.assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');
        var listenSpec = {
            onComplete: onComplete,
            hashFn: currentHashFn,
            query: query,
            tag: tag
        };
        this.listens.get(pathString).set(queryId, listenSpec);
        if (this.connected_) this.sendListen_(listenSpec);
    };
    PersistentConnection2.prototype.sendGet_ = function(index) {
        var _this = this;
        var get = this.outstandingGets_[index];
        this.sendRequest('g', get.request, function(message) {
            delete _this.outstandingGets_[index];
            _this.outstandingGetCount_--;
            if (_this.outstandingGetCount_ === 0) _this.outstandingGets_ = [];
            if (get.onComplete) get.onComplete(message);
        });
    };
    PersistentConnection2.prototype.sendListen_ = function(listenSpec) {
        var _this = this;
        var query = listenSpec.query;
        var pathString = query._path.toString();
        var queryId = query._queryIdentifier;
        this.log_('Listen on ' + pathString + ' for ' + queryId);
        var req = {
            p: pathString
        };
        var action = 'q';
        // Only bother to send query if it's non-default.
        if (listenSpec.tag) {
            req['q'] = query._queryObject;
            req['t'] = listenSpec.tag;
        }
        req[/*hash*/ 'h'] = listenSpec.hashFn();
        this.sendRequest(action, req, function(message) {
            var payload = message[/*data*/ 'd'];
            var status = message[/*status*/ 's'];
            // print warnings in any case...
            PersistentConnection2.warnOnListenWarnings_(payload, query);
            var currentListenSpec = _this.listens.get(pathString) && _this.listens.get(pathString).get(queryId);
            // only trigger actions if the listen hasn't been removed and readded
            if (currentListenSpec === listenSpec) {
                _this.log_('listen response', message);
                if (status !== 'ok') _this.removeListen_(pathString, queryId);
                if (listenSpec.onComplete) listenSpec.onComplete(status, payload);
            }
        });
    };
    PersistentConnection2.warnOnListenWarnings_ = function(payload, query) {
        if (payload && typeof payload === 'object' && _util.contains(payload, 'w')) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var warnings = _util.safeGet(payload, 'w');
            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {
                var indexSpec = '".indexOn": "' + query._queryParams.getIndex().toString() + '"';
                var indexPath = query._path.toString();
                warn("Using an unspecified index. Your data will be downloaded and " + ("filtered on the client. Consider adding " + indexSpec + " at ") + (indexPath + " to your security rules for better performance."));
            }
        }
    };
    PersistentConnection2.prototype.refreshAuthToken = function(token) {
        this.authToken_ = token;
        this.log_('Auth token refreshed');
        if (this.authToken_) this.tryAuth();
        else //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete
        //the credential so we dont become authenticated next time we connect.
        if (this.connected_) this.sendRequest('unauth', {
        }, function() {
        });
        this.reduceReconnectDelayIfAdminCredential_(token);
    };
    PersistentConnection2.prototype.reduceReconnectDelayIfAdminCredential_ = function(credential) {
        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).
        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.
        var isFirebaseSecret = credential && credential.length === 40;
        if (isFirebaseSecret || _util.isAdmin(credential)) {
            this.log_('Admin auth credential detected.  Reducing max reconnect time.');
            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
        }
    };
    PersistentConnection2.prototype.refreshAppCheckToken = function(token) {
        this.appCheckToken_ = token;
        this.log_('App check token refreshed');
        if (this.appCheckToken_) this.tryAppCheck();
        else //If we're connected we want to let the server know to unauthenticate us.
        //If we're not connected, simply delete the credential so we dont become
        // authenticated next time we connect.
        if (this.connected_) this.sendRequest('unappeck', {
        }, function() {
        });
    };
    /**
     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like
     * a auth revoked (the connection is closed).
     */ PersistentConnection2.prototype.tryAuth = function() {
        var _this = this;
        if (this.connected_ && this.authToken_) {
            var token_1 = this.authToken_;
            var authMethod = _util.isValidFormat(token_1) ? 'auth' : 'gauth';
            var requestData = {
                cred: token_1
            };
            if (this.authOverride_ === null) requestData['noauth'] = true;
            else if (typeof this.authOverride_ === 'object') requestData['authvar'] = this.authOverride_;
            this.sendRequest(authMethod, requestData, function(res) {
                var status = res[/*status*/ 's'];
                var data = res[/*data*/ 'd'] || 'error';
                if (_this.authToken_ === token_1) {
                    if (status === 'ok') _this.invalidAuthTokenCount_ = 0;
                    else // Triggers reconnect and force refresh for auth token
                    _this.onAuthRevoked_(status, data);
                }
            });
        }
    };
    /**
     * Attempts to authenticate with the given token. If the authentication
     * attempt fails, it's triggered like the token was revoked (the connection is
     * closed).
     */ PersistentConnection2.prototype.tryAppCheck = function() {
        var _this = this;
        if (this.connected_ && this.appCheckToken_) this.sendRequest('appcheck', {
            'token': this.appCheckToken_
        }, function(res) {
            var status = res[/*status*/ 's'];
            var data = res[/*data*/ 'd'] || 'error';
            if (status === 'ok') _this.invalidAppCheckTokenCount_ = 0;
            else _this.onAppCheckRevoked_(status, data);
        });
    };
    /**
     * @inheritDoc
     */ PersistentConnection2.prototype.unlisten = function(query, tag) {
        var pathString = query._path.toString();
        var queryId = query._queryIdentifier;
        this.log_('Unlisten called for ' + pathString + ' ' + queryId);
        _util.assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');
        var listen = this.removeListen_(pathString, queryId);
        if (listen && this.connected_) this.sendUnlisten_(pathString, queryId, query._queryObject, tag);
    };
    PersistentConnection2.prototype.sendUnlisten_ = function(pathString, queryId, queryObj, tag) {
        this.log_('Unlisten on ' + pathString + ' for ' + queryId);
        var req = {
            p: pathString
        };
        var action = 'n';
        // Only bother sending queryId if it's non-default.
        if (tag) {
            req['q'] = queryObj;
            req['t'] = tag;
        }
        this.sendRequest(action, req);
    };
    PersistentConnection2.prototype.onDisconnectPut = function(pathString, data, onComplete) {
        this.initConnection_();
        if (this.connected_) this.sendOnDisconnect_('o', pathString, data, onComplete);
        else this.onDisconnectRequestQueue_.push({
            pathString: pathString,
            action: 'o',
            data: data,
            onComplete: onComplete
        });
    };
    PersistentConnection2.prototype.onDisconnectMerge = function(pathString, data, onComplete) {
        this.initConnection_();
        if (this.connected_) this.sendOnDisconnect_('om', pathString, data, onComplete);
        else this.onDisconnectRequestQueue_.push({
            pathString: pathString,
            action: 'om',
            data: data,
            onComplete: onComplete
        });
    };
    PersistentConnection2.prototype.onDisconnectCancel = function(pathString, onComplete) {
        this.initConnection_();
        if (this.connected_) this.sendOnDisconnect_('oc', pathString, null, onComplete);
        else this.onDisconnectRequestQueue_.push({
            pathString: pathString,
            action: 'oc',
            data: null,
            onComplete: onComplete
        });
    };
    PersistentConnection2.prototype.sendOnDisconnect_ = function(action, pathString, data, onComplete) {
        var request = {
            p: pathString,
            /*data*/ d: data
        };
        this.log_('onDisconnect ' + action, request);
        this.sendRequest(action, request, function(response) {
            if (onComplete) setTimeout(function() {
                onComplete(response[/*status*/ 's'], response[/* data */ 'd']);
            }, Math.floor(0));
        });
    };
    PersistentConnection2.prototype.put = function(pathString, data, onComplete, hash) {
        this.putInternal('p', pathString, data, onComplete, hash);
    };
    PersistentConnection2.prototype.merge = function(pathString, data, onComplete, hash) {
        this.putInternal('m', pathString, data, onComplete, hash);
    };
    PersistentConnection2.prototype.putInternal = function(action, pathString, data, onComplete, hash) {
        this.initConnection_();
        var request = {
            /*path*/ p: pathString,
            /*data*/ d: data
        };
        if (hash !== undefined) request[/*hash*/ 'h'] = hash;
        // TODO: Only keep track of the most recent put for a given path?
        this.outstandingPuts_.push({
            action: action,
            request: request,
            onComplete: onComplete
        });
        this.outstandingPutCount_++;
        var index = this.outstandingPuts_.length - 1;
        if (this.connected_) this.sendPut_(index);
        else this.log_('Buffering put: ' + pathString);
    };
    PersistentConnection2.prototype.sendPut_ = function(index) {
        var _this = this;
        var action = this.outstandingPuts_[index].action;
        var request = this.outstandingPuts_[index].request;
        var onComplete = this.outstandingPuts_[index].onComplete;
        this.outstandingPuts_[index].queued = this.connected_;
        this.sendRequest(action, request, function(message) {
            _this.log_(action + ' response', message);
            delete _this.outstandingPuts_[index];
            _this.outstandingPutCount_--;
            // Clean up array occasionally.
            if (_this.outstandingPutCount_ === 0) _this.outstandingPuts_ = [];
            if (onComplete) onComplete(message[/*status*/ 's'], message[/* data */ 'd']);
        });
    };
    PersistentConnection2.prototype.reportStats = function(stats) {
        var _this = this;
        // If we're not connected, we just drop the stats.
        if (this.connected_) {
            var request = {
                c: stats
            };
            this.log_('reportStats', request);
            this.sendRequest(/*stats*/ 's', request, function(result) {
                var status = result[/*status*/ 's'];
                if (status !== 'ok') {
                    var errorReason = result[/* data */ 'd'];
                    _this.log_('reportStats', 'Error sending stats: ' + errorReason);
                }
            });
        }
    };
    PersistentConnection2.prototype.onDataMessage_ = function(message) {
        if ('r' in message) {
            // this is a response
            this.log_('from server: ' + _util.stringify(message));
            var reqNum = message['r'];
            var onResponse = this.requestCBHash_[reqNum];
            if (onResponse) {
                delete this.requestCBHash_[reqNum];
                onResponse(message[/*body*/ 'b']);
            }
        } else if ('error' in message) throw 'A server-side error has occurred: ' + message['error'];
        else if ('a' in message) // a and b are action and body, respectively
        this.onDataPush_(message['a'], message['b']);
    };
    PersistentConnection2.prototype.onDataPush_ = function(action, body) {
        this.log_('handleServerMessage', action, body);
        if (action === 'd') this.onDataUpdate_(body[/*path*/ 'p'], body[/*data*/ 'd'], /*isMerge*/ false, body['t']);
        else if (action === 'm') this.onDataUpdate_(body[/*path*/ 'p'], body[/*data*/ 'd'], /*isMerge=*/ true, body['t']);
        else if (action === 'c') this.onListenRevoked_(body[/*path*/ 'p'], body[/*query*/ 'q']);
        else if (action === 'ac') this.onAuthRevoked_(body[/*status code*/ 's'], body[/* explanation */ 'd']);
        else if (action === 'apc') this.onAppCheckRevoked_(body[/*status code*/ 's'], body[/* explanation */ 'd']);
        else if (action === 'sd') this.onSecurityDebugPacket_(body);
        else error('Unrecognized action received from server: ' + _util.stringify(action) + '\nAre you using the latest client?');
    };
    PersistentConnection2.prototype.onReady_ = function(timestamp, sessionId) {
        this.log_('connection ready');
        this.connected_ = true;
        this.lastConnectionEstablishedTime_ = new Date().getTime();
        this.handleTimestamp_(timestamp);
        this.lastSessionId = sessionId;
        if (this.firstConnection_) this.sendConnectStats_();
        this.restoreState_();
        this.firstConnection_ = false;
        this.onConnectStatus_(true);
    };
    PersistentConnection2.prototype.scheduleConnect_ = function(timeout) {
        var _this = this;
        _util.assert(!this.realtime_, "Scheduling a connect when we're already connected/ing?");
        if (this.establishConnectionTimer_) clearTimeout(this.establishConnectionTimer_);
        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating "Security Error" in
        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).
        this.establishConnectionTimer_ = setTimeout(function() {
            _this.establishConnectionTimer_ = null;
            _this.establishConnection_();
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        }, Math.floor(timeout));
    };
    PersistentConnection2.prototype.initConnection_ = function() {
        if (!this.realtime_ && this.firstConnection_) this.scheduleConnect_(0);
    };
    PersistentConnection2.prototype.onVisible_ = function(visible) {
        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.
        if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {
            this.log_('Window became visible.  Reducing delay.');
            this.reconnectDelay_ = RECONNECT_MIN_DELAY;
            if (!this.realtime_) this.scheduleConnect_(0);
        }
        this.visible_ = visible;
    };
    PersistentConnection2.prototype.onOnline_ = function(online) {
        if (online) {
            this.log_('Browser went online.');
            this.reconnectDelay_ = RECONNECT_MIN_DELAY;
            if (!this.realtime_) this.scheduleConnect_(0);
        } else {
            this.log_('Browser went offline.  Killing connection.');
            if (this.realtime_) this.realtime_.close();
        }
    };
    PersistentConnection2.prototype.onRealtimeDisconnect_ = function() {
        this.log_('data client disconnected');
        this.connected_ = false;
        this.realtime_ = null;
        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.
        this.cancelSentTransactions_();
        // Clear out the pending requests.
        this.requestCBHash_ = {
        };
        if (this.shouldReconnect_()) {
            if (!this.visible_) {
                this.log_("Window isn't visible.  Delaying reconnect.");
                this.reconnectDelay_ = this.maxReconnectDelay_;
                this.lastConnectionAttemptTime_ = new Date().getTime();
            } else if (this.lastConnectionEstablishedTime_) {
                // If we've been connected long enough, reset reconnect delay to minimum.
                var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;
                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) this.reconnectDelay_ = RECONNECT_MIN_DELAY;
                this.lastConnectionEstablishedTime_ = null;
            }
            var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;
            var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);
            reconnectDelay = Math.random() * reconnectDelay;
            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');
            this.scheduleConnect_(reconnectDelay);
            // Adjust reconnect delay for next time.
            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);
        }
        this.onConnectStatus_(false);
    };
    PersistentConnection2.prototype.establishConnection_ = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var onDataMessage, onReady, onDisconnect_1, connId, lastSessionId, canceled_1, connection_1, closeFn, sendRequestFn, forceRefresh, _a, authToken, appCheckToken, error_1;
            var _this = this;
            return _tslib.__generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        if (!this.shouldReconnect_()) return [
                            3,
                            4
                        ];
                        this.log_('Making a connection attempt');
                        this.lastConnectionAttemptTime_ = new Date().getTime();
                        this.lastConnectionEstablishedTime_ = null;
                        onDataMessage = this.onDataMessage_.bind(this);
                        onReady = this.onReady_.bind(this);
                        onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);
                        connId = this.id + ':' + PersistentConnection2.nextConnectionId_++;
                        lastSessionId = this.lastSessionId;
                        canceled_1 = false;
                        connection_1 = null;
                        closeFn = function() {
                            if (connection_1) connection_1.close();
                            else {
                                canceled_1 = true;
                                onDisconnect_1();
                            }
                        };
                        sendRequestFn = function(msg) {
                            _util.assert(connection_1, "sendRequest call when we're not connected not allowed.");
                            connection_1.sendRequest(msg);
                        };
                        this.realtime_ = {
                            close: closeFn,
                            sendRequest: sendRequestFn
                        };
                        forceRefresh = this.forceTokenRefresh_;
                        this.forceTokenRefresh_ = false;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4,
                            Promise.all([
                                this.authTokenProvider_.getToken(forceRefresh),
                                this.appCheckTokenProvider_.getToken(forceRefresh)
                            ])
                        ];
                    case 2:
                        _a = _tslib.__read.apply(void 0, [
                            _b.sent(),
                            2
                        ]), authToken = _a[0], appCheckToken = _a[1];
                        if (!canceled_1) {
                            log('getToken() completed. Creating connection.');
                            this.authToken_ = authToken && authToken.accessToken;
                            this.appCheckToken_ = appCheckToken && appCheckToken.token;
                            connection_1 = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect_1, /* onKill= */ function(reason) {
                                warn(reason + ' (' + _this.repoInfo_.toString() + ')');
                                _this.interrupt(SERVER_KILL_INTERRUPT_REASON);
                            }, lastSessionId);
                        } else log('getToken() completed but was canceled');
                        return [
                            3,
                            4
                        ];
                    case 3:
                        error_1 = _b.sent();
                        this.log_('Failed to get token: ' + error_1);
                        if (!canceled_1) {
                            if (this.repoInfo_.nodeAdmin) // This may be a critical error for the Admin Node.js SDK, so log a warning.
                            // But getToken() may also just have temporarily failed, so we still want to
                            // continue retrying.
                            warn(error_1);
                            closeFn();
                        }
                        return [
                            3,
                            4
                        ];
                    case 4:
                        return [
                            2
                        ];
                }
            });
        });
    };
    PersistentConnection2.prototype.interrupt = function(reason) {
        log('Interrupting connection for reason: ' + reason);
        this.interruptReasons_[reason] = true;
        if (this.realtime_) this.realtime_.close();
        else {
            if (this.establishConnectionTimer_) {
                clearTimeout(this.establishConnectionTimer_);
                this.establishConnectionTimer_ = null;
            }
            if (this.connected_) this.onRealtimeDisconnect_();
        }
    };
    PersistentConnection2.prototype.resume = function(reason) {
        log('Resuming connection for reason: ' + reason);
        delete this.interruptReasons_[reason];
        if (_util.isEmpty(this.interruptReasons_)) {
            this.reconnectDelay_ = RECONNECT_MIN_DELAY;
            if (!this.realtime_) this.scheduleConnect_(0);
        }
    };
    PersistentConnection2.prototype.handleTimestamp_ = function(timestamp) {
        var delta = timestamp - new Date().getTime();
        this.onServerInfoUpdate_({
            serverTimeOffset: delta
        });
    };
    PersistentConnection2.prototype.cancelSentTransactions_ = function() {
        for(var i = 0; i < this.outstandingPuts_.length; i++){
            var put = this.outstandingPuts_[i];
            if (put && /*hash*/ 'h' in put.request && put.queued) {
                if (put.onComplete) put.onComplete('disconnect');
                delete this.outstandingPuts_[i];
                this.outstandingPutCount_--;
            }
        }
        // Clean up array occasionally.
        if (this.outstandingPutCount_ === 0) this.outstandingPuts_ = [];
    };
    PersistentConnection2.prototype.onListenRevoked_ = function(pathString, query) {
        // Remove the listen and manufacture a "permission_denied" error for the failed listen.
        var queryId;
        if (!query) queryId = 'default';
        else queryId = query.map(function(q) {
            return ObjectToUniqueKey(q);
        }).join('$');
        var listen = this.removeListen_(pathString, queryId);
        if (listen && listen.onComplete) listen.onComplete('permission_denied');
    };
    PersistentConnection2.prototype.removeListen_ = function(pathString, queryId) {
        var normalizedPathString = new Path(pathString).toString(); // normalize path.
        var listen;
        if (this.listens.has(normalizedPathString)) {
            var map = this.listens.get(normalizedPathString);
            listen = map.get(queryId);
            map.delete(queryId);
            if (map.size === 0) this.listens.delete(normalizedPathString);
        } else // all listens for this path has already been removed
        listen = undefined;
        return listen;
    };
    PersistentConnection2.prototype.onAuthRevoked_ = function(statusCode, explanation) {
        log('Auth token revoked: ' + statusCode + '/' + explanation);
        this.authToken_ = null;
        this.forceTokenRefresh_ = true;
        this.realtime_.close();
        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {
            // We'll wait a couple times before logging the warning / increasing the
            // retry period since oauth tokens will report as "invalid" if they're
            // just expired. Plus there may be transient issues that resolve themselves.
            this.invalidAuthTokenCount_++;
            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {
                // Set a long reconnect delay because recovery is unlikely
                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
                // Notify the auth token provider that the token is invalid, which will log
                // a warning
                this.authTokenProvider_.notifyForInvalidToken();
            }
        }
    };
    PersistentConnection2.prototype.onAppCheckRevoked_ = function(statusCode, explanation) {
        log('App check token revoked: ' + statusCode + '/' + explanation);
        this.appCheckToken_ = null;
        this.forceTokenRefresh_ = true;
        // Note: We don't close the connection as the developer may not have
        // enforcement enabled. The backend closes connections with enforcements.
        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {
            // We'll wait a couple times before logging the warning / increasing the
            // retry period since oauth tokens will report as "invalid" if they're
            // just expired. Plus there may be transient issues that resolve themselves.
            this.invalidAppCheckTokenCount_++;
            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) this.appCheckTokenProvider_.notifyForInvalidToken();
        }
    };
    PersistentConnection2.prototype.onSecurityDebugPacket_ = function(body) {
        if (this.securityDebugCallback_) this.securityDebugCallback_(body);
        else if ('msg' in body) console.log('FIREBASE: ' + body['msg'].replace('\n', '\nFIREBASE: '));
    };
    PersistentConnection2.prototype.restoreState_ = function() {
        var e_1, _a, e_2, _b;
        //Re-authenticate ourselves if we have a credential stored.
        this.tryAuth();
        this.tryAppCheck();
        try {
            // Puts depend on having received the corresponding data update from the server before they complete, so we must
            // make sure to send listens before puts.
            for(var _c = _tslib.__values(this.listens.values()), _d = _c.next(); !_d.done; _d = _c.next()){
                var queries = _d.value;
                try {
                    for(var _e = (e_2 = void 0, _tslib.__values(queries.values())), _f = _e.next(); !_f.done; _f = _e.next()){
                        var listenSpec = _f.value;
                        this.sendListen_(listenSpec);
                    }
                } catch (e_2_1) {
                    e_2 = {
                        error: e_2_1
                    };
                } finally{
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    } finally{
                        if (e_2) throw e_2.error;
                    }
                }
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        for(var i = 0; i < this.outstandingPuts_.length; i++)if (this.outstandingPuts_[i]) this.sendPut_(i);
        while(this.onDisconnectRequestQueue_.length){
            var request = this.onDisconnectRequestQueue_.shift();
            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);
        }
        for(var i = 0; i < this.outstandingGets_.length; i++)if (this.outstandingGets_[i]) this.sendGet_(i);
    };
    /**
     * Sends client stats for first connection
     */ PersistentConnection2.prototype.sendConnectStats_ = function() {
        var stats = {
        };
        var clientName = 'js';
        if (_util.isNodeSdk()) {
            if (this.repoInfo_.nodeAdmin) clientName = 'admin_node';
            else clientName = 'node';
        }
        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\./g, '-')] = 1;
        if (_util.isMobileCordova()) stats['framework.cordova'] = 1;
        else if (_util.isReactNative()) stats['framework.reactnative'] = 1;
        this.reportStats(stats);
    };
    PersistentConnection2.prototype.shouldReconnect_ = function() {
        var online = OnlineMonitor1.getInstance().currentlyOnline();
        return _util.isEmpty(this.interruptReasons_) && online;
    };
    PersistentConnection2.nextPersistentConnectionId_ = 0;
    /**
     * Counter for number of connections created. Mainly used for tagging in the logs
     */ PersistentConnection2.nextConnectionId_ = 0;
    return PersistentConnection2;
}(ServerActions);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var NamedNode = function() {
    function NamedNode1(name1, node) {
        this.name = name1;
        this.node = node;
    }
    NamedNode1.Wrap = function(name1, node) {
        return new NamedNode1(name1, node);
    };
    return NamedNode1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var Index = function() {
    function Index1() {
    }
    /**
     * @returns A standalone comparison function for
     * this index
     */ Index1.prototype.getCompare = function() {
        return this.compare.bind(this);
    };
    /**
     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,
     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.
     *
     *
     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode
     */ Index1.prototype.indexedValueChanged = function(oldNode, newNode) {
        var oldWrapped = new NamedNode(MIN_NAME, oldNode);
        var newWrapped = new NamedNode(MIN_NAME, newNode);
        return this.compare(oldWrapped, newWrapped) !== 0;
    };
    /**
     * @returns a node wrapper that will sort equal to or less than
     * any other node wrapper, using this index
     */ Index1.prototype.minPost = function() {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return NamedNode.MIN;
    };
    return Index1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var __EMPTY_NODE;
var KeyIndex1 = function(_super) {
    _tslib.__extends(KeyIndex2, _super);
    function KeyIndex2() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(KeyIndex2, "__EMPTY_NODE", {
        get: function() {
            return __EMPTY_NODE;
        },
        set: function(val) {
            __EMPTY_NODE = val;
        },
        enumerable: false,
        configurable: true
    });
    KeyIndex2.prototype.compare = function(a, b) {
        return nameCompare(a.name, b.name);
    };
    KeyIndex2.prototype.isDefinedOn = function(node) {
        // We could probably return true here (since every node has a key), but it's never called
        // so just leaving unimplemented for now.
        throw _util.assertionError('KeyIndex.isDefinedOn not expected to be called.');
    };
    KeyIndex2.prototype.indexedValueChanged = function(oldNode, newNode) {
        return false; // The key for a node never changes.
    };
    KeyIndex2.prototype.minPost = function() {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return NamedNode.MIN;
    };
    KeyIndex2.prototype.maxPost = function() {
        // TODO: This should really be created once and cached in a static property, but
        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.
        return new NamedNode(MAX_NAME, __EMPTY_NODE);
    };
    KeyIndex2.prototype.makePost = function(indexValue, name1) {
        _util.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');
        // We just use empty node, but it'll never be compared, since our comparator only looks at name.
        return new NamedNode(indexValue, __EMPTY_NODE);
    };
    /**
     * @returns String representation for inclusion in a query spec
     */ KeyIndex2.prototype.toString = function() {
        return '.key';
    };
    return KeyIndex2;
}(Index);
var KEY_INDEX = new KeyIndex1();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An iterator over an LLRBNode.
 */ var SortedMapIterator = function() {
    /**
     * @param node - Node to iterate.
     * @param isReverse_ - Whether or not to iterate in reverse
     */ function SortedMapIterator1(node, startKey, comparator, isReverse_, resultGenerator_) {
        if (resultGenerator_ === void 0) resultGenerator_ = null;
        this.isReverse_ = isReverse_;
        this.resultGenerator_ = resultGenerator_;
        this.nodeStack_ = [];
        var cmp = 1;
        while(!node.isEmpty()){
            cmp = startKey ? comparator(node.key, startKey) : 1;
            // flip the comparison if we're going in reverse
            if (isReverse_) cmp *= -1;
            if (cmp < 0) {
                // This node is less than our start key. ignore it
                if (this.isReverse_) node = node.left;
                else node = node.right;
            } else if (cmp === 0) {
                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;
                this.nodeStack_.push(node);
                break;
            } else {
                // This node is greater than our start key, add it to the stack and move to the next one
                this.nodeStack_.push(node);
                if (this.isReverse_) node = node.right;
                else node = node.left;
            }
        }
    }
    SortedMapIterator1.prototype.getNext = function() {
        if (this.nodeStack_.length === 0) return null;
        var node = this.nodeStack_.pop();
        var result;
        if (this.resultGenerator_) result = this.resultGenerator_(node.key, node.value);
        else result = {
            key: node.key,
            value: node.value
        };
        if (this.isReverse_) {
            node = node.left;
            while(!node.isEmpty()){
                this.nodeStack_.push(node);
                node = node.right;
            }
        } else {
            node = node.right;
            while(!node.isEmpty()){
                this.nodeStack_.push(node);
                node = node.left;
            }
        }
        return result;
    };
    SortedMapIterator1.prototype.hasNext = function() {
        return this.nodeStack_.length > 0;
    };
    SortedMapIterator1.prototype.peek = function() {
        if (this.nodeStack_.length === 0) return null;
        var node = this.nodeStack_[this.nodeStack_.length - 1];
        if (this.resultGenerator_) return this.resultGenerator_(node.key, node.value);
        else return {
            key: node.key,
            value: node.value
        };
    };
    return SortedMapIterator1;
}();
/**
 * Represents a node in a Left-leaning Red-Black tree.
 */ var LLRBNode = function() {
    /**
     * @param key - Key associated with this node.
     * @param value - Value associated with this node.
     * @param color - Whether this node is red.
     * @param left - Left child.
     * @param right - Right child.
     */ function LLRBNode1(key, value, color, left, right) {
        this.key = key;
        this.value = value;
        this.color = color != null ? color : LLRBNode1.RED;
        this.left = left != null ? left : SortedMap.EMPTY_NODE;
        this.right = right != null ? right : SortedMap.EMPTY_NODE;
    }
    /**
     * Returns a copy of the current node, optionally replacing pieces of it.
     *
     * @param key - New key for the node, or null.
     * @param value - New value for the node, or null.
     * @param color - New color for the node, or null.
     * @param left - New left child for the node, or null.
     * @param right - New right child for the node, or null.
     * @returns The node copy.
     */ LLRBNode1.prototype.copy = function(key, value, color, left, right) {
        return new LLRBNode1(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);
    };
    /**
     * @returns The total number of nodes in the tree.
     */ LLRBNode1.prototype.count = function() {
        return this.left.count() + 1 + this.right.count();
    };
    /**
     * @returns True if the tree is empty.
     */ LLRBNode1.prototype.isEmpty = function() {
        return false;
    };
    /**
     * Traverses the tree in key order and calls the specified action function
     * for each node.
     *
     * @param action - Callback function to be called for each
     *   node.  If it returns true, traversal is aborted.
     * @returns The first truthy value returned by action, or the last falsey
     *   value returned by action
     */ LLRBNode1.prototype.inorderTraversal = function(action) {
        return this.left.inorderTraversal(action) || !!action(this.key, this.value) || this.right.inorderTraversal(action);
    };
    /**
     * Traverses the tree in reverse key order and calls the specified action function
     * for each node.
     *
     * @param action - Callback function to be called for each
     * node.  If it returns true, traversal is aborted.
     * @returns True if traversal was aborted.
     */ LLRBNode1.prototype.reverseTraversal = function(action) {
        return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);
    };
    /**
     * @returns The minimum node in the tree.
     */ LLRBNode1.prototype.min_ = function() {
        if (this.left.isEmpty()) return this;
        else return this.left.min_();
    };
    /**
     * @returns The maximum key in the tree.
     */ LLRBNode1.prototype.minKey = function() {
        return this.min_().key;
    };
    /**
     * @returns The maximum key in the tree.
     */ LLRBNode1.prototype.maxKey = function() {
        if (this.right.isEmpty()) return this.key;
        else return this.right.maxKey();
    };
    /**
     * @param key - Key to insert.
     * @param value - Value to insert.
     * @param comparator - Comparator.
     * @returns New tree, with the key/value added.
     */ LLRBNode1.prototype.insert = function(key, value, comparator) {
        var n = this;
        var cmp = comparator(key, n.key);
        if (cmp < 0) n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);
        else if (cmp === 0) n = n.copy(null, value, null, null, null);
        else n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));
        return n.fixUp_();
    };
    /**
     * @returns New tree, with the minimum key removed.
     */ LLRBNode1.prototype.removeMin_ = function() {
        if (this.left.isEmpty()) return SortedMap.EMPTY_NODE;
        var n = this;
        if (!n.left.isRed_() && !n.left.left.isRed_()) n = n.moveRedLeft_();
        n = n.copy(null, null, null, n.left.removeMin_(), null);
        return n.fixUp_();
    };
    /**
     * @param key - The key of the item to remove.
     * @param comparator - Comparator.
     * @returns New tree, with the specified item removed.
     */ LLRBNode1.prototype.remove = function(key, comparator) {
        var n, smallest;
        n = this;
        if (comparator(key, n.key) < 0) {
            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) n = n.moveRedLeft_();
            n = n.copy(null, null, null, n.left.remove(key, comparator), null);
        } else {
            if (n.left.isRed_()) n = n.rotateRight_();
            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) n = n.moveRedRight_();
            if (comparator(key, n.key) === 0) {
                if (n.right.isEmpty()) return SortedMap.EMPTY_NODE;
                else {
                    smallest = n.right.min_();
                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());
                }
            }
            n = n.copy(null, null, null, null, n.right.remove(key, comparator));
        }
        return n.fixUp_();
    };
    /**
     * @returns Whether this is a RED node.
     */ LLRBNode1.prototype.isRed_ = function() {
        return this.color;
    };
    /**
     * @returns New tree after performing any needed rotations.
     */ LLRBNode1.prototype.fixUp_ = function() {
        var n = this;
        if (n.right.isRed_() && !n.left.isRed_()) n = n.rotateLeft_();
        if (n.left.isRed_() && n.left.left.isRed_()) n = n.rotateRight_();
        if (n.left.isRed_() && n.right.isRed_()) n = n.colorFlip_();
        return n;
    };
    /**
     * @returns New tree, after moveRedLeft.
     */ LLRBNode1.prototype.moveRedLeft_ = function() {
        var n = this.colorFlip_();
        if (n.right.left.isRed_()) {
            n = n.copy(null, null, null, null, n.right.rotateRight_());
            n = n.rotateLeft_();
            n = n.colorFlip_();
        }
        return n;
    };
    /**
     * @returns New tree, after moveRedRight.
     */ LLRBNode1.prototype.moveRedRight_ = function() {
        var n = this.colorFlip_();
        if (n.left.left.isRed_()) {
            n = n.rotateRight_();
            n = n.colorFlip_();
        }
        return n;
    };
    /**
     * @returns New tree, after rotateLeft.
     */ LLRBNode1.prototype.rotateLeft_ = function() {
        var nl = this.copy(null, null, LLRBNode1.RED, null, this.right.left);
        return this.right.copy(null, null, this.color, nl, null);
    };
    /**
     * @returns New tree, after rotateRight.
     */ LLRBNode1.prototype.rotateRight_ = function() {
        var nr = this.copy(null, null, LLRBNode1.RED, this.left.right, null);
        return this.left.copy(null, null, this.color, null, nr);
    };
    /**
     * @returns Newt ree, after colorFlip.
     */ LLRBNode1.prototype.colorFlip_ = function() {
        var left = this.left.copy(null, null, !this.left.color, null, null);
        var right = this.right.copy(null, null, !this.right.color, null, null);
        return this.copy(null, null, !this.color, left, right);
    };
    /**
     * For testing.
     *
     * @returns True if all is well.
     */ LLRBNode1.prototype.checkMaxDepth_ = function() {
        var blackDepth = this.check_();
        return Math.pow(2, blackDepth) <= this.count() + 1;
    };
    LLRBNode1.prototype.check_ = function() {
        if (this.isRed_() && this.left.isRed_()) throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');
        if (this.right.isRed_()) throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');
        var blackDepth = this.left.check_();
        if (blackDepth !== this.right.check_()) throw new Error('Black depths differ');
        else return blackDepth + (this.isRed_() ? 0 : 1);
    };
    LLRBNode1.RED = true;
    LLRBNode1.BLACK = false;
    return LLRBNode1;
}();
/**
 * Represents an empty node (a leaf node in the Red-Black Tree).
 */ var LLRBEmptyNode = function() {
    function LLRBEmptyNode1() {
    }
    /**
     * Returns a copy of the current node.
     *
     * @returns The node copy.
     */ LLRBEmptyNode1.prototype.copy = function(key, value, color, left, right) {
        return this;
    };
    /**
     * Returns a copy of the tree, with the specified key/value added.
     *
     * @param key - Key to be added.
     * @param value - Value to be added.
     * @param comparator - Comparator.
     * @returns New tree, with item added.
     */ LLRBEmptyNode1.prototype.insert = function(key, value, comparator) {
        return new LLRBNode(key, value, null);
    };
    /**
     * Returns a copy of the tree, with the specified key removed.
     *
     * @param key - The key to remove.
     * @param comparator - Comparator.
     * @returns New tree, with item removed.
     */ LLRBEmptyNode1.prototype.remove = function(key, comparator) {
        return this;
    };
    /**
     * @returns The total number of nodes in the tree.
     */ LLRBEmptyNode1.prototype.count = function() {
        return 0;
    };
    /**
     * @returns True if the tree is empty.
     */ LLRBEmptyNode1.prototype.isEmpty = function() {
        return true;
    };
    /**
     * Traverses the tree in key order and calls the specified action function
     * for each node.
     *
     * @param action - Callback function to be called for each
     * node.  If it returns true, traversal is aborted.
     * @returns True if traversal was aborted.
     */ LLRBEmptyNode1.prototype.inorderTraversal = function(action) {
        return false;
    };
    /**
     * Traverses the tree in reverse key order and calls the specified action function
     * for each node.
     *
     * @param action - Callback function to be called for each
     * node.  If it returns true, traversal is aborted.
     * @returns True if traversal was aborted.
     */ LLRBEmptyNode1.prototype.reverseTraversal = function(action) {
        return false;
    };
    LLRBEmptyNode1.prototype.minKey = function() {
        return null;
    };
    LLRBEmptyNode1.prototype.maxKey = function() {
        return null;
    };
    LLRBEmptyNode1.prototype.check_ = function() {
        return 0;
    };
    /**
     * @returns Whether this node is red.
     */ LLRBEmptyNode1.prototype.isRed_ = function() {
        return false;
    };
    return LLRBEmptyNode1;
}();
/**
 * An immutable sorted map implementation, based on a Left-leaning Red-Black
 * tree.
 */ var SortedMap = function() {
    /**
     * @param comparator_ - Key comparator.
     * @param root_ - Optional root node for the map.
     */ function SortedMap1(comparator_, root_) {
        if (root_ === void 0) root_ = SortedMap1.EMPTY_NODE;
        this.comparator_ = comparator_;
        this.root_ = root_;
    }
    /**
     * Returns a copy of the map, with the specified key/value added or replaced.
     * (TODO: We should perhaps rename this method to 'put')
     *
     * @param key - Key to be added.
     * @param value - Value to be added.
     * @returns New map, with item added.
     */ SortedMap1.prototype.insert = function(key, value) {
        return new SortedMap1(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));
    };
    /**
     * Returns a copy of the map, with the specified key removed.
     *
     * @param key - The key to remove.
     * @returns New map, with item removed.
     */ SortedMap1.prototype.remove = function(key) {
        return new SortedMap1(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));
    };
    /**
     * Returns the value of the node with the given key, or null.
     *
     * @param key - The key to look up.
     * @returns The value of the node with the given key, or null if the
     * key doesn't exist.
     */ SortedMap1.prototype.get = function(key) {
        var cmp;
        var node = this.root_;
        while(!node.isEmpty()){
            cmp = this.comparator_(key, node.key);
            if (cmp === 0) return node.value;
            else if (cmp < 0) node = node.left;
            else if (cmp > 0) node = node.right;
        }
        return null;
    };
    /**
     * Returns the key of the item *before* the specified key, or null if key is the first item.
     * @param key - The key to find the predecessor of
     * @returns The predecessor key.
     */ SortedMap1.prototype.getPredecessorKey = function(key) {
        var cmp, node = this.root_, rightParent = null;
        while(!node.isEmpty()){
            cmp = this.comparator_(key, node.key);
            if (cmp === 0) {
                if (!node.left.isEmpty()) {
                    node = node.left;
                    while(!node.right.isEmpty())node = node.right;
                    return node.key;
                } else if (rightParent) return rightParent.key;
                else return null; // first item.
            } else if (cmp < 0) node = node.left;
            else if (cmp > 0) {
                rightParent = node;
                node = node.right;
            }
        }
        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');
    };
    /**
     * @returns True if the map is empty.
     */ SortedMap1.prototype.isEmpty = function() {
        return this.root_.isEmpty();
    };
    /**
     * @returns The total number of nodes in the map.
     */ SortedMap1.prototype.count = function() {
        return this.root_.count();
    };
    /**
     * @returns The minimum key in the map.
     */ SortedMap1.prototype.minKey = function() {
        return this.root_.minKey();
    };
    /**
     * @returns The maximum key in the map.
     */ SortedMap1.prototype.maxKey = function() {
        return this.root_.maxKey();
    };
    /**
     * Traverses the map in key order and calls the specified action function
     * for each key/value pair.
     *
     * @param action - Callback function to be called
     * for each key/value pair.  If action returns true, traversal is aborted.
     * @returns The first truthy value returned by action, or the last falsey
     *   value returned by action
     */ SortedMap1.prototype.inorderTraversal = function(action) {
        return this.root_.inorderTraversal(action);
    };
    /**
     * Traverses the map in reverse key order and calls the specified action function
     * for each key/value pair.
     *
     * @param action - Callback function to be called
     * for each key/value pair.  If action returns true, traversal is aborted.
     * @returns True if the traversal was aborted.
     */ SortedMap1.prototype.reverseTraversal = function(action) {
        return this.root_.reverseTraversal(action);
    };
    /**
     * Returns an iterator over the SortedMap.
     * @returns The iterator.
     */ SortedMap1.prototype.getIterator = function(resultGenerator) {
        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);
    };
    SortedMap1.prototype.getIteratorFrom = function(key, resultGenerator) {
        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);
    };
    SortedMap1.prototype.getReverseIteratorFrom = function(key, resultGenerator) {
        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);
    };
    SortedMap1.prototype.getReverseIterator = function(resultGenerator) {
        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);
    };
    /**
     * Always use the same empty node, to reduce memory.
     */ SortedMap1.EMPTY_NODE = new LLRBEmptyNode();
    return SortedMap1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function NAME_ONLY_COMPARATOR(left, right) {
    return nameCompare(left.name, right.name);
}
function NAME_COMPARATOR(left, right) {
    return nameCompare(left, right);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var MAX_NODE$2;
function setMaxNode$1(val) {
    MAX_NODE$2 = val;
}
var priorityHashText = function(priority) {
    if (typeof priority === 'number') return 'number:' + doubleToIEEE754String(priority);
    else return 'string:' + priority;
};
/**
 * Validates that a priority snapshot Node is valid.
 */ var validatePriorityNode = function(priorityNode) {
    if (priorityNode.isLeafNode()) {
        var val = priorityNode.val();
        _util.assert(typeof val === 'string' || typeof val === 'number' || typeof val === 'object' && _util.contains(val, '.sv'), 'Priority must be a string or number.');
    } else _util.assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');
    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.
    _util.assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), "Priority nodes can't have a priority of their own.");
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var __childrenNodeConstructor;
/**
 * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It
 * implements Node and stores the value of the node (a string,
 * number, or boolean) accessible via getValue().
 */ var LeafNode = function() {
    /**
     * @param value_ - The value to store in this leaf node. The object type is
     * possible in the event of a deferred value
     * @param priorityNode_ - The priority of this node.
     */ function LeafNode1(value_, priorityNode_) {
        if (priorityNode_ === void 0) priorityNode_ = LeafNode1.__childrenNodeConstructor.EMPTY_NODE;
        this.value_ = value_;
        this.priorityNode_ = priorityNode_;
        this.lazyHash_ = null;
        _util.assert(this.value_ !== undefined && this.value_ !== null, "LeafNode shouldn't be created with null/undefined value.");
        validatePriorityNode(this.priorityNode_);
    }
    Object.defineProperty(LeafNode1, "__childrenNodeConstructor", {
        get: function() {
            return __childrenNodeConstructor;
        },
        set: function(val) {
            __childrenNodeConstructor = val;
        },
        enumerable: false,
        configurable: true
    });
    /** @inheritDoc */ LeafNode1.prototype.isLeafNode = function() {
        return true;
    };
    /** @inheritDoc */ LeafNode1.prototype.getPriority = function() {
        return this.priorityNode_;
    };
    /** @inheritDoc */ LeafNode1.prototype.updatePriority = function(newPriorityNode) {
        return new LeafNode1(this.value_, newPriorityNode);
    };
    /** @inheritDoc */ LeafNode1.prototype.getImmediateChild = function(childName) {
        // Hack to treat priority as a regular child
        if (childName === '.priority') return this.priorityNode_;
        else return LeafNode1.__childrenNodeConstructor.EMPTY_NODE;
    };
    /** @inheritDoc */ LeafNode1.prototype.getChild = function(path) {
        if (pathIsEmpty(path)) return this;
        else if (pathGetFront(path) === '.priority') return this.priorityNode_;
        else return LeafNode1.__childrenNodeConstructor.EMPTY_NODE;
    };
    LeafNode1.prototype.hasChild = function() {
        return false;
    };
    /** @inheritDoc */ LeafNode1.prototype.getPredecessorChildName = function(childName, childNode) {
        return null;
    };
    /** @inheritDoc */ LeafNode1.prototype.updateImmediateChild = function(childName, newChildNode) {
        if (childName === '.priority') return this.updatePriority(newChildNode);
        else if (newChildNode.isEmpty() && childName !== '.priority') return this;
        else return LeafNode1.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);
    };
    /** @inheritDoc */ LeafNode1.prototype.updateChild = function(path, newChildNode) {
        var front = pathGetFront(path);
        if (front === null) return newChildNode;
        else if (newChildNode.isEmpty() && front !== '.priority') return this;
        else {
            _util.assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');
            return this.updateImmediateChild(front, LeafNode1.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));
        }
    };
    /** @inheritDoc */ LeafNode1.prototype.isEmpty = function() {
        return false;
    };
    /** @inheritDoc */ LeafNode1.prototype.numChildren = function() {
        return 0;
    };
    /** @inheritDoc */ LeafNode1.prototype.forEachChild = function(index, action) {
        return false;
    };
    LeafNode1.prototype.val = function(exportFormat) {
        if (exportFormat && !this.getPriority().isEmpty()) return {
            '.value': this.getValue(),
            '.priority': this.getPriority().val()
        };
        else return this.getValue();
    };
    /** @inheritDoc */ LeafNode1.prototype.hash = function() {
        if (this.lazyHash_ === null) {
            var toHash = '';
            if (!this.priorityNode_.isEmpty()) toHash += 'priority:' + priorityHashText(this.priorityNode_.val()) + ':';
            var type = typeof this.value_;
            toHash += type + ':';
            if (type === 'number') toHash += doubleToIEEE754String(this.value_);
            else toHash += this.value_;
            this.lazyHash_ = sha1(toHash);
        }
        return this.lazyHash_;
    };
    /**
     * Returns the value of the leaf node.
     * @returns The value of the node.
     */ LeafNode1.prototype.getValue = function() {
        return this.value_;
    };
    LeafNode1.prototype.compareTo = function(other) {
        if (other === LeafNode1.__childrenNodeConstructor.EMPTY_NODE) return 1;
        else if (other instanceof LeafNode1.__childrenNodeConstructor) return -1;
        else {
            _util.assert(other.isLeafNode(), 'Unknown node type');
            return this.compareToLeafNode_(other);
        }
    };
    /**
     * Comparison specifically for two leaf nodes
     */ LeafNode1.prototype.compareToLeafNode_ = function(otherLeaf) {
        var otherLeafType = typeof otherLeaf.value_;
        var thisLeafType = typeof this.value_;
        var otherIndex = LeafNode1.VALUE_TYPE_ORDER.indexOf(otherLeafType);
        var thisIndex = LeafNode1.VALUE_TYPE_ORDER.indexOf(thisLeafType);
        _util.assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);
        _util.assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);
        if (otherIndex === thisIndex) {
            // Same type, compare values
            if (thisLeafType === 'object') // Deferred value nodes are all equal, but we should also never get to this point...
            return 0;
            else {
                // Note that this works because true > false, all others are number or string comparisons
                if (this.value_ < otherLeaf.value_) return -1;
                else if (this.value_ === otherLeaf.value_) return 0;
                else return 1;
            }
        } else return thisIndex - otherIndex;
    };
    LeafNode1.prototype.withIndex = function() {
        return this;
    };
    LeafNode1.prototype.isIndexed = function() {
        return true;
    };
    LeafNode1.prototype.equals = function(other) {
        if (other === this) return true;
        else if (other.isLeafNode()) {
            var otherLeaf = other;
            return this.value_ === otherLeaf.value_ && this.priorityNode_.equals(otherLeaf.priorityNode_);
        } else return false;
    };
    /**
     * The sort order for comparing leaf nodes of different types. If two leaf nodes have
     * the same type, the comparison falls back to their value
     */ LeafNode1.VALUE_TYPE_ORDER = [
        'object',
        'boolean',
        'number',
        'string'
    ];
    return LeafNode1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var nodeFromJSON$1;
var MAX_NODE$1;
function setNodeFromJSON(val) {
    nodeFromJSON$1 = val;
}
function setMaxNode(val) {
    MAX_NODE$1 = val;
}
var PriorityIndex1 = function(_super) {
    _tslib.__extends(PriorityIndex2, _super);
    function PriorityIndex2() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PriorityIndex2.prototype.compare = function(a, b) {
        var aPriority = a.node.getPriority();
        var bPriority = b.node.getPriority();
        var indexCmp = aPriority.compareTo(bPriority);
        if (indexCmp === 0) return nameCompare(a.name, b.name);
        else return indexCmp;
    };
    PriorityIndex2.prototype.isDefinedOn = function(node) {
        return !node.getPriority().isEmpty();
    };
    PriorityIndex2.prototype.indexedValueChanged = function(oldNode, newNode) {
        return !oldNode.getPriority().equals(newNode.getPriority());
    };
    PriorityIndex2.prototype.minPost = function() {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return NamedNode.MIN;
    };
    PriorityIndex2.prototype.maxPost = function() {
        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));
    };
    PriorityIndex2.prototype.makePost = function(indexValue, name1) {
        var priorityNode = nodeFromJSON$1(indexValue);
        return new NamedNode(name1, new LeafNode('[PRIORITY-POST]', priorityNode));
    };
    /**
     * @returns String representation for inclusion in a query spec
     */ PriorityIndex2.prototype.toString = function() {
        return '.priority';
    };
    return PriorityIndex2;
}(Index);
var PRIORITY_INDEX = new PriorityIndex1();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var LOG_2 = Math.log(2);
var Base12Num = function() {
    function Base12Num1(length) {
        var logBase2 = function(num) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return parseInt(Math.log(num) / LOG_2, 10);
        };
        var bitMask = function(bits) {
            return parseInt(Array(bits + 1).join('1'), 2);
        };
        this.count = logBase2(length + 1);
        this.current_ = this.count - 1;
        var mask = bitMask(this.count);
        this.bits_ = length + 1 & mask;
    }
    Base12Num1.prototype.nextBitIsOne = function() {
        //noinspection JSBitwiseOperatorUsage
        var result = !(this.bits_ & 1 << this.current_);
        this.current_--;
        return result;
    };
    return Base12Num1;
}();
/**
 * Takes a list of child nodes and constructs a SortedSet using the given comparison
 * function
 *
 * Uses the algorithm described in the paper linked here:
 * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458
 *
 * @param childList - Unsorted list of children
 * @param cmp - The comparison method to be used
 * @param keyFn - An optional function to extract K from a node wrapper, if K's
 * type is not NamedNode
 * @param mapSortFn - An optional override for comparator used by the generated sorted map
 */ var buildChildSet = function(childList, cmp, keyFn, mapSortFn) {
    childList.sort(cmp);
    var buildBalancedTree = function(low, high) {
        var length = high - low;
        var namedNode;
        var key;
        if (length === 0) return null;
        else if (length === 1) {
            namedNode = childList[low];
            key = keyFn ? keyFn(namedNode) : namedNode;
            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);
        } else {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var middle = parseInt(length / 2, 10) + low;
            var left = buildBalancedTree(low, middle);
            var right = buildBalancedTree(middle + 1, high);
            namedNode = childList[middle];
            key = keyFn ? keyFn(namedNode) : namedNode;
            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);
        }
    };
    var buildFrom12Array = function(base12) {
        var node = null;
        var root = null;
        var index = childList.length;
        var buildPennant = function(chunkSize, color) {
            var low = index - chunkSize;
            var high = index;
            index -= chunkSize;
            var childTree = buildBalancedTree(low + 1, high);
            var namedNode = childList[low];
            var key = keyFn ? keyFn(namedNode) : namedNode;
            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));
        };
        var attachPennant = function(pennant) {
            if (node) {
                node.left = pennant;
                node = pennant;
            } else {
                root = pennant;
                node = pennant;
            }
        };
        for(var i = 0; i < base12.count; ++i){
            var isOne = base12.nextBitIsOne();
            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))
            var chunkSize = Math.pow(2, base12.count - (i + 1));
            if (isOne) buildPennant(chunkSize, LLRBNode.BLACK);
            else {
                // current == 2
                buildPennant(chunkSize, LLRBNode.BLACK);
                buildPennant(chunkSize, LLRBNode.RED);
            }
        }
        return root;
    };
    var base12 = new Base12Num(childList.length);
    var root = buildFrom12Array(base12);
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return new SortedMap(mapSortFn || cmp, root);
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _defaultIndexMap;
var fallbackObject = {
};
var IndexMap = function() {
    function IndexMap1(indexes_, indexSet_) {
        this.indexes_ = indexes_;
        this.indexSet_ = indexSet_;
    }
    Object.defineProperty(IndexMap1, "Default", {
        /**
         * The default IndexMap for nodes without a priority
         */ get: function() {
            _util.assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');
            _defaultIndexMap = _defaultIndexMap || new IndexMap1({
                '.priority': fallbackObject
            }, {
                '.priority': PRIORITY_INDEX
            });
            return _defaultIndexMap;
        },
        enumerable: false,
        configurable: true
    });
    IndexMap1.prototype.get = function(indexKey) {
        var sortedMap = _util.safeGet(this.indexes_, indexKey);
        if (!sortedMap) throw new Error('No index defined for ' + indexKey);
        if (sortedMap instanceof SortedMap) return sortedMap;
        else // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the
        // regular child map
        return null;
    };
    IndexMap1.prototype.hasIndex = function(indexDefinition) {
        return _util.contains(this.indexSet_, indexDefinition.toString());
    };
    IndexMap1.prototype.addIndex = function(indexDefinition, existingChildren) {
        _util.assert(indexDefinition !== KEY_INDEX, "KeyIndex always exists and isn't meant to be added to the IndexMap.");
        var childList = [];
        var sawIndexedValue = false;
        var iter = existingChildren.getIterator(NamedNode.Wrap);
        var next = iter.getNext();
        while(next){
            sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);
            childList.push(next);
            next = iter.getNext();
        }
        var newIndex;
        if (sawIndexedValue) newIndex = buildChildSet(childList, indexDefinition.getCompare());
        else newIndex = fallbackObject;
        var indexName = indexDefinition.toString();
        var newIndexSet = _tslib.__assign({
        }, this.indexSet_);
        newIndexSet[indexName] = indexDefinition;
        var newIndexes = _tslib.__assign({
        }, this.indexes_);
        newIndexes[indexName] = newIndex;
        return new IndexMap1(newIndexes, newIndexSet);
    };
    /**
     * Ensure that this node is properly tracked in any indexes that we're maintaining
     */ IndexMap1.prototype.addToIndexes = function(namedNode, existingChildren) {
        var _this = this;
        var newIndexes = _util.map(this.indexes_, function(indexedChildren, indexName) {
            var index = _util.safeGet(_this.indexSet_, indexName);
            _util.assert(index, 'Missing index implementation for ' + indexName);
            if (indexedChildren === fallbackObject) {
                // Check to see if we need to index everything
                if (index.isDefinedOn(namedNode.node)) {
                    // We need to build this index
                    var childList = [];
                    var iter = existingChildren.getIterator(NamedNode.Wrap);
                    var next = iter.getNext();
                    while(next){
                        if (next.name !== namedNode.name) childList.push(next);
                        next = iter.getNext();
                    }
                    childList.push(namedNode);
                    return buildChildSet(childList, index.getCompare());
                } else // No change, this remains a fallback
                return fallbackObject;
            } else {
                var existingSnap = existingChildren.get(namedNode.name);
                var newChildren = indexedChildren;
                if (existingSnap) newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));
                return newChildren.insert(namedNode, namedNode.node);
            }
        });
        return new IndexMap1(newIndexes, this.indexSet_);
    };
    /**
     * Create a new IndexMap instance with the given value removed
     */ IndexMap1.prototype.removeFromIndexes = function(namedNode, existingChildren) {
        var newIndexes = _util.map(this.indexes_, function(indexedChildren) {
            if (indexedChildren === fallbackObject) // This is the fallback. Just return it, nothing to do in this case
            return indexedChildren;
            else {
                var existingSnap = existingChildren.get(namedNode.name);
                if (existingSnap) return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));
                else // No record of this child
                return indexedChildren;
            }
        });
        return new IndexMap1(newIndexes, this.indexSet_);
    };
    return IndexMap1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // TODO: For memory savings, don't store priorityNode_ if it's empty.
var EMPTY_NODE;
/**
 * ChildrenNode is a class for storing internal nodes in a DataSnapshot
 * (i.e. nodes with children).  It implements Node and stores the
 * list of children in the children property, sorted by child name.
 */ var ChildrenNode = function() {
    /**
     * @param children_ - List of children of this node..
     * @param priorityNode_ - The priority of this node (as a snapshot node).
     */ function ChildrenNode1(children_, priorityNode_, indexMap_) {
        this.children_ = children_;
        this.priorityNode_ = priorityNode_;
        this.indexMap_ = indexMap_;
        this.lazyHash_ = null;
        /**
         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use
         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own
         * class instead of an empty ChildrenNode.
         */ if (this.priorityNode_) validatePriorityNode(this.priorityNode_);
        if (this.children_.isEmpty()) _util.assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');
    }
    Object.defineProperty(ChildrenNode1, "EMPTY_NODE", {
        get: function() {
            return EMPTY_NODE || (EMPTY_NODE = new ChildrenNode1(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default));
        },
        enumerable: false,
        configurable: true
    });
    /** @inheritDoc */ ChildrenNode1.prototype.isLeafNode = function() {
        return false;
    };
    /** @inheritDoc */ ChildrenNode1.prototype.getPriority = function() {
        return this.priorityNode_ || EMPTY_NODE;
    };
    /** @inheritDoc */ ChildrenNode1.prototype.updatePriority = function(newPriorityNode) {
        if (this.children_.isEmpty()) // Don't allow priorities on empty nodes
        return this;
        else return new ChildrenNode1(this.children_, newPriorityNode, this.indexMap_);
    };
    /** @inheritDoc */ ChildrenNode1.prototype.getImmediateChild = function(childName) {
        // Hack to treat priority as a regular child
        if (childName === '.priority') return this.getPriority();
        else {
            var child = this.children_.get(childName);
            return child === null ? EMPTY_NODE : child;
        }
    };
    /** @inheritDoc */ ChildrenNode1.prototype.getChild = function(path) {
        var front = pathGetFront(path);
        if (front === null) return this;
        return this.getImmediateChild(front).getChild(pathPopFront(path));
    };
    /** @inheritDoc */ ChildrenNode1.prototype.hasChild = function(childName) {
        return this.children_.get(childName) !== null;
    };
    /** @inheritDoc */ ChildrenNode1.prototype.updateImmediateChild = function(childName, newChildNode) {
        _util.assert(newChildNode, 'We should always be passing snapshot nodes');
        if (childName === '.priority') return this.updatePriority(newChildNode);
        else {
            var namedNode = new NamedNode(childName, newChildNode);
            var newChildren = void 0, newIndexMap = void 0;
            if (newChildNode.isEmpty()) {
                newChildren = this.children_.remove(childName);
                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);
            } else {
                newChildren = this.children_.insert(childName, newChildNode);
                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);
            }
            var newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;
            return new ChildrenNode1(newChildren, newPriority, newIndexMap);
        }
    };
    /** @inheritDoc */ ChildrenNode1.prototype.updateChild = function(path, newChildNode) {
        var front = pathGetFront(path);
        if (front === null) return newChildNode;
        else {
            _util.assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');
            var newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);
            return this.updateImmediateChild(front, newImmediateChild);
        }
    };
    /** @inheritDoc */ ChildrenNode1.prototype.isEmpty = function() {
        return this.children_.isEmpty();
    };
    /** @inheritDoc */ ChildrenNode1.prototype.numChildren = function() {
        return this.children_.count();
    };
    /** @inheritDoc */ ChildrenNode1.prototype.val = function(exportFormat) {
        if (this.isEmpty()) return null;
        var obj = {
        };
        var numKeys = 0, maxKey = 0, allIntegerKeys = true;
        this.forEachChild(PRIORITY_INDEX, function(key, childNode) {
            obj[key] = childNode.val(exportFormat);
            numKeys++;
            if (allIntegerKeys && ChildrenNode1.INTEGER_REGEXP_.test(key)) maxKey = Math.max(maxKey, Number(key));
            else allIntegerKeys = false;
        });
        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {
            // convert to array.
            var array = [];
            // eslint-disable-next-line guard-for-in
            for(var key in obj)array[key] = obj[key];
            return array;
        } else {
            if (exportFormat && !this.getPriority().isEmpty()) obj['.priority'] = this.getPriority().val();
            return obj;
        }
    };
    /** @inheritDoc */ ChildrenNode1.prototype.hash = function() {
        if (this.lazyHash_ === null) {
            var toHash_1 = '';
            if (!this.getPriority().isEmpty()) toHash_1 += 'priority:' + priorityHashText(this.getPriority().val()) + ':';
            this.forEachChild(PRIORITY_INDEX, function(key, childNode) {
                var childHash = childNode.hash();
                if (childHash !== '') toHash_1 += ':' + key + ':' + childHash;
            });
            this.lazyHash_ = toHash_1 === '' ? '' : sha1(toHash_1);
        }
        return this.lazyHash_;
    };
    /** @inheritDoc */ ChildrenNode1.prototype.getPredecessorChildName = function(childName, childNode, index) {
        var idx = this.resolveIndex_(index);
        if (idx) {
            var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));
            return predecessor ? predecessor.name : null;
        } else return this.children_.getPredecessorKey(childName);
    };
    ChildrenNode1.prototype.getFirstChildName = function(indexDefinition) {
        var idx = this.resolveIndex_(indexDefinition);
        if (idx) {
            var minKey = idx.minKey();
            return minKey && minKey.name;
        } else return this.children_.minKey();
    };
    ChildrenNode1.prototype.getFirstChild = function(indexDefinition) {
        var minKey = this.getFirstChildName(indexDefinition);
        if (minKey) return new NamedNode(minKey, this.children_.get(minKey));
        else return null;
    };
    /**
     * Given an index, return the key name of the largest value we have, according to that index
     */ ChildrenNode1.prototype.getLastChildName = function(indexDefinition) {
        var idx = this.resolveIndex_(indexDefinition);
        if (idx) {
            var maxKey = idx.maxKey();
            return maxKey && maxKey.name;
        } else return this.children_.maxKey();
    };
    ChildrenNode1.prototype.getLastChild = function(indexDefinition) {
        var maxKey = this.getLastChildName(indexDefinition);
        if (maxKey) return new NamedNode(maxKey, this.children_.get(maxKey));
        else return null;
    };
    ChildrenNode1.prototype.forEachChild = function(index, action) {
        var idx = this.resolveIndex_(index);
        if (idx) return idx.inorderTraversal(function(wrappedNode) {
            return action(wrappedNode.name, wrappedNode.node);
        });
        else return this.children_.inorderTraversal(action);
    };
    ChildrenNode1.prototype.getIterator = function(indexDefinition) {
        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);
    };
    ChildrenNode1.prototype.getIteratorFrom = function(startPost, indexDefinition) {
        var idx = this.resolveIndex_(indexDefinition);
        if (idx) return idx.getIteratorFrom(startPost, function(key) {
            return key;
        });
        else {
            var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);
            var next = iterator.peek();
            while(next != null && indexDefinition.compare(next, startPost) < 0){
                iterator.getNext();
                next = iterator.peek();
            }
            return iterator;
        }
    };
    ChildrenNode1.prototype.getReverseIterator = function(indexDefinition) {
        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);
    };
    ChildrenNode1.prototype.getReverseIteratorFrom = function(endPost, indexDefinition) {
        var idx = this.resolveIndex_(indexDefinition);
        if (idx) return idx.getReverseIteratorFrom(endPost, function(key) {
            return key;
        });
        else {
            var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);
            var next = iterator.peek();
            while(next != null && indexDefinition.compare(next, endPost) > 0){
                iterator.getNext();
                next = iterator.peek();
            }
            return iterator;
        }
    };
    ChildrenNode1.prototype.compareTo = function(other) {
        if (this.isEmpty()) {
            if (other.isEmpty()) return 0;
            else return -1;
        } else if (other.isLeafNode() || other.isEmpty()) return 1;
        else if (other === MAX_NODE) return -1;
        else // Must be another node with children.
        return 0;
    };
    ChildrenNode1.prototype.withIndex = function(indexDefinition) {
        if (indexDefinition === KEY_INDEX || this.indexMap_.hasIndex(indexDefinition)) return this;
        else {
            var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);
            return new ChildrenNode1(this.children_, this.priorityNode_, newIndexMap);
        }
    };
    ChildrenNode1.prototype.isIndexed = function(index) {
        return index === KEY_INDEX || this.indexMap_.hasIndex(index);
    };
    ChildrenNode1.prototype.equals = function(other) {
        if (other === this) return true;
        else if (other.isLeafNode()) return false;
        else {
            var otherChildrenNode = other;
            if (!this.getPriority().equals(otherChildrenNode.getPriority())) return false;
            else if (this.children_.count() === otherChildrenNode.children_.count()) {
                var thisIter = this.getIterator(PRIORITY_INDEX);
                var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);
                var thisCurrent = thisIter.getNext();
                var otherCurrent = otherIter.getNext();
                while(thisCurrent && otherCurrent){
                    if (thisCurrent.name !== otherCurrent.name || !thisCurrent.node.equals(otherCurrent.node)) return false;
                    thisCurrent = thisIter.getNext();
                    otherCurrent = otherIter.getNext();
                }
                return thisCurrent === null && otherCurrent === null;
            } else return false;
        }
    };
    /**
     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used
     * instead.
     *
     */ ChildrenNode1.prototype.resolveIndex_ = function(indexDefinition) {
        if (indexDefinition === KEY_INDEX) return null;
        else return this.indexMap_.get(indexDefinition.toString());
    };
    ChildrenNode1.INTEGER_REGEXP_ = /^(0|[1-9]\d*)$/;
    return ChildrenNode1;
}();
var MaxNode1 = function(_super) {
    _tslib.__extends(MaxNode2, _super);
    function MaxNode2() {
        return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;
    }
    MaxNode2.prototype.compareTo = function(other) {
        if (other === this) return 0;
        else return 1;
    };
    MaxNode2.prototype.equals = function(other) {
        // Not that we every compare it, but MAX_NODE is only ever equal to itself
        return other === this;
    };
    MaxNode2.prototype.getPriority = function() {
        return this;
    };
    MaxNode2.prototype.getImmediateChild = function(childName) {
        return ChildrenNode.EMPTY_NODE;
    };
    MaxNode2.prototype.isEmpty = function() {
        return false;
    };
    return MaxNode2;
}(ChildrenNode);
/**
 * Marker that will sort higher than any other snapshot.
 */ var MAX_NODE = new MaxNode1();
Object.defineProperties(NamedNode, {
    MIN: {
        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)
    },
    MAX: {
        value: new NamedNode(MAX_NAME, MAX_NODE)
    }
});
/**
 * Reference Extensions
 */ KeyIndex1.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;
LeafNode.__childrenNodeConstructor = ChildrenNode;
setMaxNode$1(MAX_NODE);
setMaxNode(MAX_NODE);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var USE_HINZE = true;
/**
 * Constructs a snapshot node representing the passed JSON and returns it.
 * @param json - JSON to create a node for.
 * @param priority - Optional priority to use.  This will be ignored if the
 * passed JSON contains a .priority property.
 */ function nodeFromJSON(json, priority) {
    if (priority === void 0) priority = null;
    if (json === null) return ChildrenNode.EMPTY_NODE;
    if (typeof json === 'object' && '.priority' in json) priority = json['.priority'];
    _util.assert(priority === null || typeof priority === 'string' || typeof priority === 'number' || typeof priority === 'object' && '.sv' in priority, 'Invalid priority type found: ' + typeof priority);
    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) json = json['.value'];
    // Valid leaf nodes include non-objects or server-value wrapper objects
    if (typeof json !== 'object' || '.sv' in json) {
        var jsonLeaf = json;
        return new LeafNode(jsonLeaf, nodeFromJSON(priority));
    }
    if (!(json instanceof Array) && USE_HINZE) {
        var children_1 = [];
        var childrenHavePriority_1 = false;
        var hinzeJsonObj = json;
        each(hinzeJsonObj, function(key, child) {
            if (key.substring(0, 1) !== '.') {
                // Ignore metadata nodes
                var childNode = nodeFromJSON(child);
                if (!childNode.isEmpty()) {
                    childrenHavePriority_1 = childrenHavePriority_1 || !childNode.getPriority().isEmpty();
                    children_1.push(new NamedNode(key, childNode));
                }
            }
        });
        if (children_1.length === 0) return ChildrenNode.EMPTY_NODE;
        var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function(namedNode) {
            return namedNode.name;
        }, NAME_COMPARATOR);
        if (childrenHavePriority_1) {
            var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());
            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({
                '.priority': sortedChildSet
            }, {
                '.priority': PRIORITY_INDEX
            }));
        } else return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);
    } else {
        var node_1 = ChildrenNode.EMPTY_NODE;
        each(json, function(key, childData) {
            if (_util.contains(json, key)) {
                if (key.substring(0, 1) !== '.') {
                    // ignore metadata nodes.
                    var childNode = nodeFromJSON(childData);
                    if (childNode.isLeafNode() || !childNode.isEmpty()) node_1 = node_1.updateImmediateChild(key, childNode);
                }
            }
        });
        return node_1.updatePriority(nodeFromJSON(priority));
    }
}
setNodeFromJSON(nodeFromJSON);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var PathIndex1 = function(_super) {
    _tslib.__extends(PathIndex2, _super);
    function PathIndex2(indexPath_) {
        var _this = _super.call(this) || this;
        _this.indexPath_ = indexPath_;
        _util.assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', "Can't create PathIndex with empty path or .priority key");
        return _this;
    }
    PathIndex2.prototype.extractChild = function(snap) {
        return snap.getChild(this.indexPath_);
    };
    PathIndex2.prototype.isDefinedOn = function(node) {
        return !node.getChild(this.indexPath_).isEmpty();
    };
    PathIndex2.prototype.compare = function(a, b) {
        var aChild = this.extractChild(a.node);
        var bChild = this.extractChild(b.node);
        var indexCmp = aChild.compareTo(bChild);
        if (indexCmp === 0) return nameCompare(a.name, b.name);
        else return indexCmp;
    };
    PathIndex2.prototype.makePost = function(indexValue, name1) {
        var valueNode = nodeFromJSON(indexValue);
        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);
        return new NamedNode(name1, node);
    };
    PathIndex2.prototype.maxPost = function() {
        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);
        return new NamedNode(MAX_NAME, node);
    };
    PathIndex2.prototype.toString = function() {
        return pathSlice(this.indexPath_, 0).join('/');
    };
    return PathIndex2;
}(Index);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var ValueIndex1 = function(_super) {
    _tslib.__extends(ValueIndex2, _super);
    function ValueIndex2() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ValueIndex2.prototype.compare = function(a, b) {
        var indexCmp = a.node.compareTo(b.node);
        if (indexCmp === 0) return nameCompare(a.name, b.name);
        else return indexCmp;
    };
    ValueIndex2.prototype.isDefinedOn = function(node) {
        return true;
    };
    ValueIndex2.prototype.indexedValueChanged = function(oldNode, newNode) {
        return !oldNode.equals(newNode);
    };
    ValueIndex2.prototype.minPost = function() {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return NamedNode.MIN;
    };
    ValueIndex2.prototype.maxPost = function() {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return NamedNode.MAX;
    };
    ValueIndex2.prototype.makePost = function(indexValue, name1) {
        var valueNode = nodeFromJSON(indexValue);
        return new NamedNode(name1, valueNode);
    };
    /**
     * @returns String representation for inclusion in a query spec
     */ ValueIndex2.prototype.toString = function() {
        return '.value';
    };
    return ValueIndex2;
}(Index);
var VALUE_INDEX = new ValueIndex1();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Modeled after base64 web-safe chars, but ordered by ASCII.
var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';
var MIN_PUSH_CHAR = '-';
var MAX_PUSH_CHAR = 'z';
var MAX_KEY_LEN = 786;
/**
 * Fancy ID generator that creates 20-character string identifiers with the
 * following properties:
 *
 * 1. They're based on timestamp so that they sort *after* any existing ids.
 * 2. They contain 72-bits of random data after the timestamp so that IDs won't
 *    collide with other clients' IDs.
 * 3. They sort *lexicographically* (so the timestamp is converted to characters
 *    that will sort properly).
 * 4. They're monotonically increasing. Even if you generate more than one in
 *    the same timestamp, the latter ones will sort after the former ones. We do
 *    this by using the previous random bits but "incrementing" them by 1 (only
 *    in the case of a timestamp collision).
 */ var nextPushId = function() {
    // Timestamp of last push, used to prevent local collisions if you push twice
    // in one ms.
    var lastPushTime = 0;
    // We generate 72-bits of randomness which get turned into 12 characters and
    // appended to the timestamp to prevent collisions with other clients. We
    // store the last characters we generated because in the event of a collision,
    // we'll use those same characters except "incremented" by one.
    var lastRandChars = [];
    return function(now) {
        var duplicateTime = now === lastPushTime;
        lastPushTime = now;
        var i;
        var timeStampChars = new Array(8);
        for(i = 7; i >= 0; i--){
            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);
            // NOTE: Can't use << here because javascript will convert to int and lose
            // the upper bits.
            now = Math.floor(now / 64);
        }
        _util.assert(now === 0, 'Cannot push at time == 0');
        var id = timeStampChars.join('');
        if (!duplicateTime) for(i = 0; i < 12; i++)lastRandChars[i] = Math.floor(Math.random() * 64);
        else {
            // If the timestamp hasn't changed since last push, use the same random
            // number, except incremented by 1.
            for(i = 11; i >= 0 && lastRandChars[i] === 63; i--)lastRandChars[i] = 0;
            lastRandChars[i]++;
        }
        for(i = 0; i < 12; i++)id += PUSH_CHARS.charAt(lastRandChars[i]);
        _util.assert(id.length === 20, 'nextPushId: Length should be 20.');
        return id;
    };
}();
var successor = function(key) {
    if (key === '' + INTEGER_32_MAX) // See https://firebase.google.com/docs/database/web/lists-of-data#data-order
    return MIN_PUSH_CHAR;
    var keyAsInt = tryParseInt(key);
    if (keyAsInt != null) return '' + (keyAsInt + 1);
    var next = new Array(key.length);
    for(var i_1 = 0; i_1 < next.length; i_1++)next[i_1] = key.charAt(i_1);
    if (next.length < MAX_KEY_LEN) {
        next.push(MIN_PUSH_CHAR);
        return next.join('');
    }
    var i = next.length - 1;
    while(i >= 0 && next[i] === MAX_PUSH_CHAR)i--;
    // `successor` was called on the largest possible key, so return the
    // MAX_NAME, which sorts larger than all keys.
    if (i === -1) return MAX_NAME;
    var source = next[i];
    var sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);
    next[i] = sourcePlusOne;
    return next.slice(0, i + 1).join('');
};
// `key` is assumed to be non-empty.
var predecessor = function(key) {
    if (key === '' + INTEGER_32_MIN) return MIN_NAME;
    var keyAsInt = tryParseInt(key);
    if (keyAsInt != null) return '' + (keyAsInt - 1);
    var next = new Array(key.length);
    for(var i = 0; i < next.length; i++)next[i] = key.charAt(i);
    // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically
    // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller
    // than that, `predecessor(predecessor(key))`, is
    //
    // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \
    //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }
    //
    // analogous to increment/decrement for base-10 integers.
    //
    // This works because lexigographic comparison works character-by-character,
    // using length as a tie-breaker if one key is a prefix of the other.
    if (next[next.length - 1] === MIN_PUSH_CHAR) {
        if (next.length === 1) // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey
        return '' + INTEGER_32_MAX;
        delete next[next.length - 1];
        return next.join('');
    }
    // Replace the last character with it's immediate predecessor, and
    // fill the suffix of the key with MAX_PUSH_CHAR. This is the
    // lexicographically largest possible key smaller than `key`.
    next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);
    return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function changeValue(snapshotNode) {
    return {
        type: "value",
        snapshotNode: snapshotNode
    };
}
function changeChildAdded(childName, snapshotNode) {
    return {
        type: "child_added",
        snapshotNode: snapshotNode,
        childName: childName
    };
}
function changeChildRemoved(childName, snapshotNode) {
    return {
        type: "child_removed",
        snapshotNode: snapshotNode,
        childName: childName
    };
}
function changeChildChanged(childName, snapshotNode, oldSnap) {
    return {
        type: "child_changed",
        snapshotNode: snapshotNode,
        childName: childName,
        oldSnap: oldSnap
    };
}
function changeChildMoved(childName, snapshotNode) {
    return {
        type: "child_moved",
        snapshotNode: snapshotNode,
        childName: childName
    };
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Doesn't really filter nodes but applies an index to the node and keeps track of any changes
 */ var IndexedFilter = function() {
    function IndexedFilter1(index_) {
        this.index_ = index_;
    }
    IndexedFilter1.prototype.updateChild = function(snap, key, newChild, affectedPath, source, optChangeAccumulator) {
        _util.assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');
        var oldChild = snap.getImmediateChild(key);
        // Check if anything actually changed.
        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {
            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.
            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need
            // to avoid treating these cases as "nothing changed."
            if (oldChild.isEmpty() === newChild.isEmpty()) // Nothing changed.
            // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.
            //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');
            return snap;
        }
        if (optChangeAccumulator != null) {
            if (newChild.isEmpty()) {
                if (snap.hasChild(key)) optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));
                else _util.assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');
            } else if (oldChild.isEmpty()) optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));
            else optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));
        }
        if (snap.isLeafNode() && newChild.isEmpty()) return snap;
        else // Make sure the node is indexed
        return snap.updateImmediateChild(key, newChild).withIndex(this.index_);
    };
    IndexedFilter1.prototype.updateFullNode = function(oldSnap, newSnap, optChangeAccumulator) {
        if (optChangeAccumulator != null) {
            if (!oldSnap.isLeafNode()) oldSnap.forEachChild(PRIORITY_INDEX, function(key, childNode) {
                if (!newSnap.hasChild(key)) optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));
            });
            if (!newSnap.isLeafNode()) newSnap.forEachChild(PRIORITY_INDEX, function(key, childNode) {
                if (oldSnap.hasChild(key)) {
                    var oldChild = oldSnap.getImmediateChild(key);
                    if (!oldChild.equals(childNode)) optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));
                } else optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));
            });
        }
        return newSnap.withIndex(this.index_);
    };
    IndexedFilter1.prototype.updatePriority = function(oldSnap, newPriority) {
        if (oldSnap.isEmpty()) return ChildrenNode.EMPTY_NODE;
        else return oldSnap.updatePriority(newPriority);
    };
    IndexedFilter1.prototype.filtersNodes = function() {
        return false;
    };
    IndexedFilter1.prototype.getIndexedFilter = function() {
        return this;
    };
    IndexedFilter1.prototype.getIndex = function() {
        return this.index_;
    };
    return IndexedFilter1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node
 */ var RangedFilter = function() {
    function RangedFilter1(params) {
        this.indexedFilter_ = new IndexedFilter(params.getIndex());
        this.index_ = params.getIndex();
        this.startPost_ = RangedFilter1.getStartPost_(params);
        this.endPost_ = RangedFilter1.getEndPost_(params);
    }
    RangedFilter1.prototype.getStartPost = function() {
        return this.startPost_;
    };
    RangedFilter1.prototype.getEndPost = function() {
        return this.endPost_;
    };
    RangedFilter1.prototype.matches = function(node) {
        return this.index_.compare(this.getStartPost(), node) <= 0 && this.index_.compare(node, this.getEndPost()) <= 0;
    };
    RangedFilter1.prototype.updateChild = function(snap, key, newChild, affectedPath, source, optChangeAccumulator) {
        if (!this.matches(new NamedNode(key, newChild))) newChild = ChildrenNode.EMPTY_NODE;
        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
    };
    RangedFilter1.prototype.updateFullNode = function(oldSnap, newSnap, optChangeAccumulator) {
        if (newSnap.isLeafNode()) // Make sure we have a children node with the correct index, not a leaf node;
        newSnap = ChildrenNode.EMPTY_NODE;
        var filtered = newSnap.withIndex(this.index_);
        // Don't support priorities on queries
        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
        var self = this;
        newSnap.forEachChild(PRIORITY_INDEX, function(key, childNode) {
            if (!self.matches(new NamedNode(key, childNode))) filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);
        });
        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);
    };
    RangedFilter1.prototype.updatePriority = function(oldSnap, newPriority) {
        // Don't support priorities on queries
        return oldSnap;
    };
    RangedFilter1.prototype.filtersNodes = function() {
        return true;
    };
    RangedFilter1.prototype.getIndexedFilter = function() {
        return this.indexedFilter_;
    };
    RangedFilter1.prototype.getIndex = function() {
        return this.index_;
    };
    RangedFilter1.getStartPost_ = function(params) {
        if (params.hasStart()) {
            var startName = params.getIndexStartName();
            return params.getIndex().makePost(params.getIndexStartValue(), startName);
        } else return params.getIndex().minPost();
    };
    RangedFilter1.getEndPost_ = function(params) {
        if (params.hasEnd()) {
            var endName = params.getIndexEndName();
            return params.getIndex().makePost(params.getIndexEndValue(), endName);
        } else return params.getIndex().maxPost();
    };
    return RangedFilter1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible
 */ var LimitedFilter = function() {
    function LimitedFilter1(params) {
        this.rangedFilter_ = new RangedFilter(params);
        this.index_ = params.getIndex();
        this.limit_ = params.getLimit();
        this.reverse_ = !params.isViewFromLeft();
    }
    LimitedFilter1.prototype.updateChild = function(snap, key, newChild, affectedPath, source, optChangeAccumulator) {
        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) newChild = ChildrenNode.EMPTY_NODE;
        if (snap.getImmediateChild(key).equals(newChild)) // No change
        return snap;
        else if (snap.numChildren() < this.limit_) return this.rangedFilter_.getIndexedFilter().updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
        else return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);
    };
    LimitedFilter1.prototype.updateFullNode = function(oldSnap, newSnap, optChangeAccumulator) {
        var filtered;
        if (newSnap.isLeafNode() || newSnap.isEmpty()) // Make sure we have a children node with the correct index, not a leaf node;
        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
        else if (this.limit_ * 2 < newSnap.numChildren() && newSnap.isIndexed(this.index_)) {
            // Easier to build up a snapshot, since what we're given has more than twice the elements we want
            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
            // anchor to the startPost, endPost, or last element as appropriate
            var iterator = void 0;
            if (this.reverse_) iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);
            else iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);
            var count = 0;
            while(iterator.hasNext() && count < this.limit_){
                var next = iterator.getNext();
                var inRange = void 0;
                if (this.reverse_) inRange = this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;
                else inRange = this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;
                if (inRange) {
                    filtered = filtered.updateImmediateChild(next.name, next.node);
                    count++;
                } else break;
            }
        } else {
            // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one
            filtered = newSnap.withIndex(this.index_);
            // Don't support priorities on queries
            filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
            var startPost = void 0;
            var endPost = void 0;
            var cmp = void 0;
            var iterator = void 0;
            if (this.reverse_) {
                iterator = filtered.getReverseIterator(this.index_);
                startPost = this.rangedFilter_.getEndPost();
                endPost = this.rangedFilter_.getStartPost();
                var indexCompare_1 = this.index_.getCompare();
                cmp = function(a, b) {
                    return indexCompare_1(b, a);
                };
            } else {
                iterator = filtered.getIterator(this.index_);
                startPost = this.rangedFilter_.getStartPost();
                endPost = this.rangedFilter_.getEndPost();
                cmp = this.index_.getCompare();
            }
            var count = 0;
            var foundStartPost = false;
            while(iterator.hasNext()){
                var next = iterator.getNext();
                if (!foundStartPost && cmp(startPost, next) <= 0) // start adding
                foundStartPost = true;
                var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;
                if (inRange) count++;
                else filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);
            }
        }
        return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap, filtered, optChangeAccumulator);
    };
    LimitedFilter1.prototype.updatePriority = function(oldSnap, newPriority) {
        // Don't support priorities on queries
        return oldSnap;
    };
    LimitedFilter1.prototype.filtersNodes = function() {
        return true;
    };
    LimitedFilter1.prototype.getIndexedFilter = function() {
        return this.rangedFilter_.getIndexedFilter();
    };
    LimitedFilter1.prototype.getIndex = function() {
        return this.index_;
    };
    LimitedFilter1.prototype.fullLimitUpdateChild_ = function(snap, childKey, childSnap, source, changeAccumulator) {
        // TODO: rename all cache stuff etc to general snap terminology
        var cmp;
        if (this.reverse_) {
            var indexCmp_1 = this.index_.getCompare();
            cmp = function(a, b) {
                return indexCmp_1(b, a);
            };
        } else cmp = this.index_.getCompare();
        var oldEventCache = snap;
        _util.assert(oldEventCache.numChildren() === this.limit_, '');
        var newChildNamedNode = new NamedNode(childKey, childSnap);
        var windowBoundary = this.reverse_ ? oldEventCache.getFirstChild(this.index_) : oldEventCache.getLastChild(this.index_);
        var inRange = this.rangedFilter_.matches(newChildNamedNode);
        if (oldEventCache.hasChild(childKey)) {
            var oldChildSnap = oldEventCache.getImmediateChild(childKey);
            var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);
            while(nextChild != null && (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name)))// There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't
            // been applied to the limited filter yet. Ignore this next child which will be updated later in
            // the limited filter...
            nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);
            var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);
            var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;
            if (remainsInWindow) {
                if (changeAccumulator != null) changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));
                return oldEventCache.updateImmediateChild(childKey, childSnap);
            } else {
                if (changeAccumulator != null) changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));
                var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);
                var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);
                if (nextChildInRange) {
                    if (changeAccumulator != null) changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));
                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);
                } else return newEventCache;
            }
        } else if (childSnap.isEmpty()) // we're deleting a node, but it was not in the window, so ignore it
        return snap;
        else if (inRange) {
            if (cmp(windowBoundary, newChildNamedNode) >= 0) {
                if (changeAccumulator != null) {
                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));
                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));
                }
                return oldEventCache.updateImmediateChild(childKey, childSnap).updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);
            } else return snap;
        } else return snap;
    };
    return LimitedFilter1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a
 * range to be returned for a particular location. It is assumed that validation of parameters is done at the
 * user-facing API level, so it is not done here.
 */ var QueryParams = function() {
    function QueryParams1() {
        this.limitSet_ = false;
        this.startSet_ = false;
        this.startNameSet_ = false;
        this.startAfterSet_ = false;
        this.endSet_ = false;
        this.endNameSet_ = false;
        this.endBeforeSet_ = false;
        this.limit_ = 0;
        this.viewFrom_ = '';
        this.indexStartValue_ = null;
        this.indexStartName_ = '';
        this.indexEndValue_ = null;
        this.indexEndName_ = '';
        this.index_ = PRIORITY_INDEX;
    }
    QueryParams1.prototype.hasStart = function() {
        return this.startSet_;
    };
    QueryParams1.prototype.hasStartAfter = function() {
        return this.startAfterSet_;
    };
    QueryParams1.prototype.hasEndBefore = function() {
        return this.endBeforeSet_;
    };
    /**
     * @returns True if it would return from left.
     */ QueryParams1.prototype.isViewFromLeft = function() {
        if (this.viewFrom_ === '') // limit(), rather than limitToFirst or limitToLast was called.
        // This means that only one of startSet_ and endSet_ is true. Use them
        // to calculate which side of the view to anchor to. If neither is set,
        // anchor to the end.
        return this.startSet_;
        else return this.viewFrom_ === "l";
    };
    /**
     * Only valid to call if hasStart() returns true
     */ QueryParams1.prototype.getIndexStartValue = function() {
        _util.assert(this.startSet_, 'Only valid if start has been set');
        return this.indexStartValue_;
    };
    /**
     * Only valid to call if hasStart() returns true.
     * Returns the starting key name for the range defined by these query parameters
     */ QueryParams1.prototype.getIndexStartName = function() {
        _util.assert(this.startSet_, 'Only valid if start has been set');
        if (this.startNameSet_) return this.indexStartName_;
        else return MIN_NAME;
    };
    QueryParams1.prototype.hasEnd = function() {
        return this.endSet_;
    };
    /**
     * Only valid to call if hasEnd() returns true.
     */ QueryParams1.prototype.getIndexEndValue = function() {
        _util.assert(this.endSet_, 'Only valid if end has been set');
        return this.indexEndValue_;
    };
    /**
     * Only valid to call if hasEnd() returns true.
     * Returns the end key name for the range defined by these query parameters
     */ QueryParams1.prototype.getIndexEndName = function() {
        _util.assert(this.endSet_, 'Only valid if end has been set');
        if (this.endNameSet_) return this.indexEndName_;
        else return MAX_NAME;
    };
    QueryParams1.prototype.hasLimit = function() {
        return this.limitSet_;
    };
    /**
     * @returns True if a limit has been set and it has been explicitly anchored
     */ QueryParams1.prototype.hasAnchoredLimit = function() {
        return this.limitSet_ && this.viewFrom_ !== '';
    };
    /**
     * Only valid to call if hasLimit() returns true
     */ QueryParams1.prototype.getLimit = function() {
        _util.assert(this.limitSet_, 'Only valid if limit has been set');
        return this.limit_;
    };
    QueryParams1.prototype.getIndex = function() {
        return this.index_;
    };
    QueryParams1.prototype.loadsAllData = function() {
        return !(this.startSet_ || this.endSet_ || this.limitSet_);
    };
    QueryParams1.prototype.isDefault = function() {
        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;
    };
    QueryParams1.prototype.copy = function() {
        var copy = new QueryParams1();
        copy.limitSet_ = this.limitSet_;
        copy.limit_ = this.limit_;
        copy.startSet_ = this.startSet_;
        copy.indexStartValue_ = this.indexStartValue_;
        copy.startNameSet_ = this.startNameSet_;
        copy.indexStartName_ = this.indexStartName_;
        copy.endSet_ = this.endSet_;
        copy.indexEndValue_ = this.indexEndValue_;
        copy.endNameSet_ = this.endNameSet_;
        copy.indexEndName_ = this.indexEndName_;
        copy.index_ = this.index_;
        copy.viewFrom_ = this.viewFrom_;
        return copy;
    };
    return QueryParams1;
}();
function queryParamsGetNodeFilter(queryParams) {
    if (queryParams.loadsAllData()) return new IndexedFilter(queryParams.getIndex());
    else if (queryParams.hasLimit()) return new LimitedFilter(queryParams);
    else return new RangedFilter(queryParams);
}
function queryParamsLimitToFirst(queryParams, newLimit) {
    var newParams = queryParams.copy();
    newParams.limitSet_ = true;
    newParams.limit_ = newLimit;
    newParams.viewFrom_ = "l";
    return newParams;
}
function queryParamsLimitToLast(queryParams, newLimit) {
    var newParams = queryParams.copy();
    newParams.limitSet_ = true;
    newParams.limit_ = newLimit;
    newParams.viewFrom_ = "r";
    return newParams;
}
function queryParamsStartAt(queryParams, indexValue, key) {
    var newParams = queryParams.copy();
    newParams.startSet_ = true;
    if (indexValue === undefined) indexValue = null;
    newParams.indexStartValue_ = indexValue;
    if (key != null) {
        newParams.startNameSet_ = true;
        newParams.indexStartName_ = key;
    } else {
        newParams.startNameSet_ = false;
        newParams.indexStartName_ = '';
    }
    return newParams;
}
function queryParamsStartAfter(queryParams, indexValue, key) {
    var params;
    if (queryParams.index_ === KEY_INDEX) {
        if (typeof indexValue === 'string') indexValue = successor(indexValue);
        params = queryParamsStartAt(queryParams, indexValue, key);
    } else {
        var childKey = void 0;
        if (key == null) childKey = MAX_NAME;
        else childKey = successor(key);
        params = queryParamsStartAt(queryParams, indexValue, childKey);
    }
    params.startAfterSet_ = true;
    return params;
}
function queryParamsEndAt(queryParams, indexValue, key) {
    var newParams = queryParams.copy();
    newParams.endSet_ = true;
    if (indexValue === undefined) indexValue = null;
    newParams.indexEndValue_ = indexValue;
    if (key !== undefined) {
        newParams.endNameSet_ = true;
        newParams.indexEndName_ = key;
    } else {
        newParams.endNameSet_ = false;
        newParams.indexEndName_ = '';
    }
    return newParams;
}
function queryParamsEndBefore(queryParams, indexValue, key) {
    var childKey;
    var params;
    if (queryParams.index_ === KEY_INDEX) {
        if (typeof indexValue === 'string') indexValue = predecessor(indexValue);
        params = queryParamsEndAt(queryParams, indexValue, key);
    } else {
        if (key == null) childKey = MIN_NAME;
        else childKey = predecessor(key);
        params = queryParamsEndAt(queryParams, indexValue, childKey);
    }
    params.endBeforeSet_ = true;
    return params;
}
function queryParamsOrderBy(queryParams, index) {
    var newParams = queryParams.copy();
    newParams.index_ = index;
    return newParams;
}
/**
 * Returns a set of REST query string parameters representing this query.
 *
 * @returns query string parameters
 */ function queryParamsToRestQueryStringParameters(queryParams) {
    var qs = {
    };
    if (queryParams.isDefault()) return qs;
    var orderBy;
    if (queryParams.index_ === PRIORITY_INDEX) orderBy = "$priority";
    else if (queryParams.index_ === VALUE_INDEX) orderBy = "$value";
    else if (queryParams.index_ === KEY_INDEX) orderBy = "$key";
    else {
        _util.assert(queryParams.index_ instanceof PathIndex1, 'Unrecognized index type!');
        orderBy = queryParams.index_.toString();
    }
    qs["orderBy"] = _util.stringify(orderBy);
    if (queryParams.startSet_) {
        qs["startAt"] = _util.stringify(queryParams.indexStartValue_);
        if (queryParams.startNameSet_) qs["startAt"] += ',' + _util.stringify(queryParams.indexStartName_);
    }
    if (queryParams.endSet_) {
        qs["endAt"] = _util.stringify(queryParams.indexEndValue_);
        if (queryParams.endNameSet_) qs["endAt"] += ',' + _util.stringify(queryParams.indexEndName_);
    }
    if (queryParams.limitSet_) {
        if (queryParams.isViewFromLeft()) qs["limitToFirst"] = queryParams.limit_;
        else qs["limitToLast"] = queryParams.limit_;
    }
    return qs;
}
function queryParamsGetQueryObject(queryParams) {
    var obj = {
    };
    if (queryParams.startSet_) {
        obj["sp"] = queryParams.indexStartValue_;
        if (queryParams.startNameSet_) obj["sn"] = queryParams.indexStartName_;
    }
    if (queryParams.endSet_) {
        obj["ep"] = queryParams.indexEndValue_;
        if (queryParams.endNameSet_) obj["en"] = queryParams.indexEndName_;
    }
    if (queryParams.limitSet_) {
        obj["l"] = queryParams.limit_;
        var viewFrom = queryParams.viewFrom_;
        if (viewFrom === '') {
            if (queryParams.isViewFromLeft()) viewFrom = "l";
            else viewFrom = "r";
        }
        obj["vf"] = viewFrom;
    }
    // For now, priority index is the default, so we only specify if it's some other index
    if (queryParams.index_ !== PRIORITY_INDEX) obj["i"] = queryParams.index_.toString();
    return obj;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An implementation of ServerActions that communicates with the server via REST requests.
 * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full
 * persistent connection (using WebSockets or long-polling)
 */ var ReadonlyRestClient1 = function(_super) {
    _tslib.__extends(ReadonlyRestClient2, _super);
    /**
     * @param repoInfo_ - Data about the namespace we are connecting to
     * @param onDataUpdate_ - A callback for new data from the server
     */ function ReadonlyRestClient2(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {
        var _this = _super.call(this) || this;
        _this.repoInfo_ = repoInfo_;
        _this.onDataUpdate_ = onDataUpdate_;
        _this.authTokenProvider_ = authTokenProvider_;
        _this.appCheckTokenProvider_ = appCheckTokenProvider_;
        /** @private {function(...[*])} */ _this.log_ = logWrapper('p:rest:');
        /**
         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen
         * that's been removed. :-/
         */ _this.listens_ = {
        };
        return _this;
    }
    ReadonlyRestClient2.prototype.reportStats = function(stats) {
        throw new Error('Method not implemented.');
    };
    ReadonlyRestClient2.getListenId_ = function(query, tag) {
        if (tag !== undefined) return 'tag$' + tag;
        else {
            _util.assert(query._queryParams.isDefault(), "should have a tag if it's not a default query.");
            return query._path.toString();
        }
    };
    /** @inheritDoc */ ReadonlyRestClient2.prototype.listen = function(query, currentHashFn, tag, onComplete) {
        var _this = this;
        var pathString = query._path.toString();
        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);
        // Mark this listener so we can tell if it's removed.
        var listenId = ReadonlyRestClient2.getListenId_(query, tag);
        var thisListen = {
        };
        this.listens_[listenId] = thisListen;
        var queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);
        this.restRequest_(pathString + '.json', queryStringParameters, function(error2, result) {
            var data = result;
            if (error2 === 404) {
                data = null;
                error2 = null;
            }
            if (error2 === null) _this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);
            if (_util.safeGet(_this.listens_, listenId) === thisListen) {
                var status_1;
                if (!error2) status_1 = 'ok';
                else if (error2 === 401) status_1 = 'permission_denied';
                else status_1 = 'rest_error:' + error2;
                onComplete(status_1, null);
            }
        });
    };
    /** @inheritDoc */ ReadonlyRestClient2.prototype.unlisten = function(query, tag) {
        var listenId = ReadonlyRestClient2.getListenId_(query, tag);
        delete this.listens_[listenId];
    };
    ReadonlyRestClient2.prototype.get = function(query) {
        var _this = this;
        var queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);
        var pathString = query._path.toString();
        var deferred = new _util.Deferred();
        this.restRequest_(pathString + '.json', queryStringParameters, function(error2, result) {
            var data = result;
            if (error2 === 404) {
                data = null;
                error2 = null;
            }
            if (error2 === null) {
                _this.onDataUpdate_(pathString, data, /*isMerge=*/ false, /*tag=*/ null);
                deferred.resolve(data);
            } else deferred.reject(new Error(data));
        });
        return deferred.promise;
    };
    /** @inheritDoc */ ReadonlyRestClient2.prototype.refreshAuthToken = function(token) {
    // no-op since we just always call getToken.
    };
    /**
     * Performs a REST request to the given path, with the provided query string parameters,
     * and any auth credentials we have.
     */ ReadonlyRestClient2.prototype.restRequest_ = function(pathString, queryStringParameters, callback) {
        var _this = this;
        if (queryStringParameters === void 0) queryStringParameters = {
        };
        queryStringParameters['format'] = 'export';
        return Promise.all([
            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),
            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)
        ]).then(function(_a) {
            var _b = _tslib.__read(_a, 2), authToken = _b[0], appCheckToken = _b[1];
            if (authToken && authToken.accessToken) queryStringParameters['auth'] = authToken.accessToken;
            if (appCheckToken && appCheckToken.token) queryStringParameters['ac'] = appCheckToken.token;
            var url = (_this.repoInfo_.secure ? 'https://' : 'http://') + _this.repoInfo_.host + pathString + '?' + 'ns=' + _this.repoInfo_.namespace + _util.querystring(queryStringParameters);
            _this.log_('Sending REST request for ' + url);
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function() {
                if (callback && xhr.readyState === 4) {
                    _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);
                    var res = null;
                    if (xhr.status >= 200 && xhr.status < 300) {
                        try {
                            res = _util.jsonEval(xhr.responseText);
                        } catch (e) {
                            warn('Failed to parse JSON response for ' + url + ': ' + xhr.responseText);
                        }
                        callback(null, res);
                    } else {
                        // 401 and 404 are expected.
                        if (xhr.status !== 401 && xhr.status !== 404) warn('Got unsuccessful REST response for ' + url + ' Status: ' + xhr.status);
                        callback(xhr.status);
                    }
                    callback = null;
                }
            };
            xhr.open('GET', url, /*asynchronous=*/ true);
            xhr.send();
        });
    };
    return ReadonlyRestClient2;
}(ServerActions);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Mutable object which basically just stores a reference to the "latest" immutable snapshot.
 */ var SnapshotHolder = function() {
    function SnapshotHolder1() {
        this.rootNode_ = ChildrenNode.EMPTY_NODE;
    }
    SnapshotHolder1.prototype.getNode = function(path) {
        return this.rootNode_.getChild(path);
    };
    SnapshotHolder1.prototype.updateSnapshot = function(path, newSnapshotNode) {
        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);
    };
    return SnapshotHolder1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function newSparseSnapshotTree() {
    return {
        value: null,
        children: new Map()
    };
}
/**
 * Stores the given node at the specified path. If there is already a node
 * at a shallower path, it merges the new data into that snapshot node.
 *
 * @param path - Path to look up snapshot for.
 * @param data - The new data, or null.
 */ function sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {
    if (pathIsEmpty(path)) {
        sparseSnapshotTree.value = data;
        sparseSnapshotTree.children.clear();
    } else if (sparseSnapshotTree.value !== null) sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);
    else {
        var childKey = pathGetFront(path);
        if (!sparseSnapshotTree.children.has(childKey)) sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());
        var child = sparseSnapshotTree.children.get(childKey);
        path = pathPopFront(path);
        sparseSnapshotTreeRemember(child, path, data);
    }
}
/**
 * Purge the data at path from the cache.
 *
 * @param path - Path to look up snapshot for.
 * @returns True if this node should now be removed.
 */ function sparseSnapshotTreeForget(sparseSnapshotTree, path) {
    if (pathIsEmpty(path)) {
        sparseSnapshotTree.value = null;
        sparseSnapshotTree.children.clear();
        return true;
    } else {
        if (sparseSnapshotTree.value !== null) {
            if (sparseSnapshotTree.value.isLeafNode()) // We're trying to forget a node that doesn't exist
            return false;
            else {
                var value = sparseSnapshotTree.value;
                sparseSnapshotTree.value = null;
                value.forEachChild(PRIORITY_INDEX, function(key, tree) {
                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);
                });
                return sparseSnapshotTreeForget(sparseSnapshotTree, path);
            }
        } else if (sparseSnapshotTree.children.size > 0) {
            var childKey = pathGetFront(path);
            path = pathPopFront(path);
            if (sparseSnapshotTree.children.has(childKey)) {
                var safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);
                if (safeToRemove) sparseSnapshotTree.children.delete(childKey);
            }
            return sparseSnapshotTree.children.size === 0;
        } else return true;
    }
}
/**
 * Recursively iterates through all of the stored tree and calls the
 * callback on each one.
 *
 * @param prefixPath - Path to look up node for.
 * @param func - The function to invoke for each tree.
 */ function sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {
    if (sparseSnapshotTree.value !== null) func(prefixPath, sparseSnapshotTree.value);
    else sparseSnapshotTreeForEachChild(sparseSnapshotTree, function(key, tree) {
        var path = new Path(prefixPath.toString() + '/' + key);
        sparseSnapshotTreeForEachTree(tree, path, func);
    });
}
/**
 * Iterates through each immediate child and triggers the callback.
 * Only seems to be used in tests.
 *
 * @param func - The function to invoke for each child.
 */ function sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {
    sparseSnapshotTree.children.forEach(function(tree, key) {
        func(key, tree);
    });
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns the delta from the previous call to get stats.
 *
 * @param collection_ - The collection to "listen" to.
 */ var StatsListener = function() {
    function StatsListener1(collection_) {
        this.collection_ = collection_;
        this.last_ = null;
    }
    StatsListener1.prototype.get = function() {
        var newStats = this.collection_.get();
        var delta = _tslib.__assign({
        }, newStats);
        if (this.last_) each(this.last_, function(stat, value) {
            delta[stat] = delta[stat] - value;
        });
        this.last_ = newStats;
        return delta;
    };
    return StatsListener1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably
// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10
// seconds to try to ensure the Firebase connection is established / settled.
var FIRST_STATS_MIN_TIME = 10000;
var FIRST_STATS_MAX_TIME = 30000;
// We'll continue to report stats on average every 5 minutes.
var REPORT_STATS_INTERVAL = 300000;
var StatsReporter = function() {
    function StatsReporter1(collection, server_) {
        this.server_ = server_;
        this.statsToReport_ = {
        };
        this.statsListener_ = new StatsListener(collection);
        var timeout = FIRST_STATS_MIN_TIME + (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();
        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));
    }
    StatsReporter1.prototype.reportStats_ = function() {
        var _this = this;
        var stats = this.statsListener_.get();
        var reportedStats = {
        };
        var haveStatsToReport = false;
        each(stats, function(stat, value) {
            if (value > 0 && _util.contains(_this.statsToReport_, stat)) {
                reportedStats[stat] = value;
                haveStatsToReport = true;
            }
        });
        if (haveStatsToReport) this.server_.reportStats(reportedStats);
        // queue our next run.
        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));
    };
    return StatsReporter1;
}();
function statsReporterIncludeStat(reporter, stat) {
    reporter.statsToReport_[stat] = true;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 *
 * @enum
 */ var OperationType;
(function(OperationType1) {
    OperationType1[OperationType1["OVERWRITE"] = 0] = "OVERWRITE";
    OperationType1[OperationType1["MERGE"] = 1] = "MERGE";
    OperationType1[OperationType1["ACK_USER_WRITE"] = 2] = "ACK_USER_WRITE";
    OperationType1[OperationType1["LISTEN_COMPLETE"] = 3] = "LISTEN_COMPLETE";
})(OperationType || (OperationType = {
}));
function newOperationSourceUser() {
    return {
        fromUser: true,
        fromServer: false,
        queryId: null,
        tagged: false
    };
}
function newOperationSourceServer() {
    return {
        fromUser: false,
        fromServer: true,
        queryId: null,
        tagged: false
    };
}
function newOperationSourceServerTaggedQuery(queryId) {
    return {
        fromUser: false,
        fromServer: true,
        queryId: queryId,
        tagged: true
    };
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var AckUserWrite = function() {
    /**
     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.
     */ function AckUserWrite1(/** @inheritDoc */ path, /** @inheritDoc */ affectedTree, /** @inheritDoc */ revert) {
        this.path = path;
        this.affectedTree = affectedTree;
        this.revert = revert;
        /** @inheritDoc */ this.type = OperationType.ACK_USER_WRITE;
        /** @inheritDoc */ this.source = newOperationSourceUser();
    }
    AckUserWrite1.prototype.operationForChild = function(childName) {
        if (!pathIsEmpty(this.path)) {
            _util.assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');
            return new AckUserWrite1(pathPopFront(this.path), this.affectedTree, this.revert);
        } else if (this.affectedTree.value != null) {
            _util.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');
            // All child locations are affected as well; just return same operation.
            return this;
        } else {
            var childTree = this.affectedTree.subtree(new Path(childName));
            return new AckUserWrite1(newEmptyPath(), childTree, this.revert);
        }
    };
    return AckUserWrite1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var ListenComplete = function() {
    function ListenComplete1(source, path) {
        this.source = source;
        this.path = path;
        /** @inheritDoc */ this.type = OperationType.LISTEN_COMPLETE;
    }
    ListenComplete1.prototype.operationForChild = function(childName) {
        if (pathIsEmpty(this.path)) return new ListenComplete1(this.source, newEmptyPath());
        else return new ListenComplete1(this.source, pathPopFront(this.path));
    };
    return ListenComplete1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var Overwrite = function() {
    function Overwrite1(source, path, snap) {
        this.source = source;
        this.path = path;
        this.snap = snap;
        /** @inheritDoc */ this.type = OperationType.OVERWRITE;
    }
    Overwrite1.prototype.operationForChild = function(childName) {
        if (pathIsEmpty(this.path)) return new Overwrite1(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));
        else return new Overwrite1(this.source, pathPopFront(this.path), this.snap);
    };
    return Overwrite1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var Merge = function() {
    function Merge1(/** @inheritDoc */ source, /** @inheritDoc */ path, /** @inheritDoc */ children) {
        this.source = source;
        this.path = path;
        this.children = children;
        /** @inheritDoc */ this.type = OperationType.MERGE;
    }
    Merge1.prototype.operationForChild = function(childName) {
        if (pathIsEmpty(this.path)) {
            var childTree = this.children.subtree(new Path(childName));
            if (childTree.isEmpty()) // This child is unaffected
            return null;
            else if (childTree.value) // We have a snapshot for the child in question.  This becomes an overwrite of the child.
            return new Overwrite(this.source, newEmptyPath(), childTree.value);
            else // This is a merge at a deeper level
            return new Merge1(this.source, newEmptyPath(), childTree);
        } else {
            _util.assert(pathGetFront(this.path) === childName, "Can't get a merge for a child not on the path of the operation");
            return new Merge1(this.source, pathPopFront(this.path), this.children);
        }
    };
    Merge1.prototype.toString = function() {
        return 'Operation(' + this.path + ': ' + this.source.toString() + ' merge: ' + this.children.toString() + ')';
    };
    return Merge1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully
 * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.
 * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks
 * whether a node potentially had children removed due to a filter.
 */ var CacheNode = function() {
    function CacheNode1(node_, fullyInitialized_, filtered_) {
        this.node_ = node_;
        this.fullyInitialized_ = fullyInitialized_;
        this.filtered_ = filtered_;
    }
    /**
     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client
     */ CacheNode1.prototype.isFullyInitialized = function() {
        return this.fullyInitialized_;
    };
    /**
     * Returns whether this node is potentially missing children due to a filter applied to the node
     */ CacheNode1.prototype.isFiltered = function() {
        return this.filtered_;
    };
    CacheNode1.prototype.isCompleteForPath = function(path) {
        if (pathIsEmpty(path)) return this.isFullyInitialized() && !this.filtered_;
        var childKey = pathGetFront(path);
        return this.isCompleteForChild(childKey);
    };
    CacheNode1.prototype.isCompleteForChild = function(key) {
        return this.isFullyInitialized() && !this.filtered_ || this.node_.hasChild(key);
    };
    CacheNode1.prototype.getNode = function() {
        return this.node_;
    };
    return CacheNode1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An EventGenerator is used to convert "raw" changes (Change) as computed by the
 * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()
 * for details.
 *
 */ var EventGenerator = function() {
    function EventGenerator1(query_) {
        this.query_ = query_;
        this.index_ = this.query_._queryParams.getIndex();
    }
    return EventGenerator1;
}();
/**
 * Given a set of raw changes (no moved events and prevName not specified yet), and a set of
 * EventRegistrations that should be notified of these changes, generate the actual events to be raised.
 *
 * Notes:
 *  - child_moved events will be synthesized at this time for any child_changed events that affect
 *    our index.
 *  - prevName will be calculated based on the index ordering.
 */ function eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {
    var events = [];
    var moves = [];
    changes.forEach(function(change) {
        if (change.type === "child_changed" && eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) moves.push(changeChildMoved(change.childName, change.snapshotNode));
    });
    eventGeneratorGenerateEventsForType(eventGenerator, events, "child_removed"/* CHILD_REMOVED */ , changes, eventRegistrations, eventCache);
    eventGeneratorGenerateEventsForType(eventGenerator, events, "child_added"/* CHILD_ADDED */ , changes, eventRegistrations, eventCache);
    eventGeneratorGenerateEventsForType(eventGenerator, events, "child_moved"/* CHILD_MOVED */ , moves, eventRegistrations, eventCache);
    eventGeneratorGenerateEventsForType(eventGenerator, events, "child_changed"/* CHILD_CHANGED */ , changes, eventRegistrations, eventCache);
    eventGeneratorGenerateEventsForType(eventGenerator, events, "value"/* VALUE */ , changes, eventRegistrations, eventCache);
    return events;
}
/**
 * Given changes of a single change type, generate the corresponding events.
 */ function eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {
    var filteredChanges = changes.filter(function(change) {
        return change.type === eventType;
    });
    filteredChanges.sort(function(a, b) {
        return eventGeneratorCompareChanges(eventGenerator, a, b);
    });
    filteredChanges.forEach(function(change) {
        var materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);
        registrations.forEach(function(registration) {
            if (registration.respondsTo(change.type)) events.push(registration.createEvent(materializedChange, eventGenerator.query_));
        });
    });
}
function eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {
    if (change.type === 'value' || change.type === 'child_removed') return change;
    else {
        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);
        return change;
    }
}
function eventGeneratorCompareChanges(eventGenerator, a, b) {
    if (a.childName == null || b.childName == null) throw _util.assertionError('Should only compare child_ events.');
    var aWrapped = new NamedNode(a.childName, a.snapshotNode);
    var bWrapped = new NamedNode(b.childName, b.snapshotNode);
    return eventGenerator.index_.compare(aWrapped, bWrapped);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function newViewCache(eventCache, serverCache) {
    return {
        eventCache: eventCache,
        serverCache: serverCache
    };
}
function viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {
    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);
}
function viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {
    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));
}
function viewCacheGetCompleteEventSnap(viewCache) {
    return viewCache.eventCache.isFullyInitialized() ? viewCache.eventCache.getNode() : null;
}
function viewCacheGetCompleteServerSnap(viewCache) {
    return viewCache.serverCache.isFullyInitialized() ? viewCache.serverCache.getNode() : null;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var emptyChildrenSingleton;
/**
 * Singleton empty children collection.
 *
 */ var EmptyChildren = function() {
    if (!emptyChildrenSingleton) emptyChildrenSingleton = new SortedMap(stringCompare);
    return emptyChildrenSingleton;
};
/**
 * A tree with immutable elements.
 */ var ImmutableTree = function() {
    function ImmutableTree1(value, children) {
        if (children === void 0) children = EmptyChildren();
        this.value = value;
        this.children = children;
    }
    ImmutableTree1.fromObject = function(obj) {
        var tree = new ImmutableTree1(null);
        each(obj, function(childPath, childSnap) {
            tree = tree.set(new Path(childPath), childSnap);
        });
        return tree;
    };
    /**
     * True if the value is empty and there are no children
     */ ImmutableTree1.prototype.isEmpty = function() {
        return this.value === null && this.children.isEmpty();
    };
    /**
     * Given a path and predicate, return the first node and the path to that node
     * where the predicate returns true.
     *
     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`
     * objects on the way back out, it may be better to pass down a pathSoFar obj.
     *
     * @param relativePath - The remainder of the path
     * @param predicate - The predicate to satisfy to return a node
     */ ImmutableTree1.prototype.findRootMostMatchingPathAndValue = function(relativePath, predicate) {
        if (this.value != null && predicate(this.value)) return {
            path: newEmptyPath(),
            value: this.value
        };
        else {
            if (pathIsEmpty(relativePath)) return null;
            else {
                var front = pathGetFront(relativePath);
                var child = this.children.get(front);
                if (child !== null) {
                    var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);
                    if (childExistingPathAndValue != null) {
                        var fullPath = pathChild(new Path(front), childExistingPathAndValue.path);
                        return {
                            path: fullPath,
                            value: childExistingPathAndValue.value
                        };
                    } else return null;
                } else return null;
            }
        }
    };
    /**
     * Find, if it exists, the shortest subpath of the given path that points a defined
     * value in the tree
     */ ImmutableTree1.prototype.findRootMostValueAndPath = function(relativePath) {
        return this.findRootMostMatchingPathAndValue(relativePath, function() {
            return true;
        });
    };
    /**
     * @returns The subtree at the given path
     */ ImmutableTree1.prototype.subtree = function(relativePath) {
        if (pathIsEmpty(relativePath)) return this;
        else {
            var front = pathGetFront(relativePath);
            var childTree = this.children.get(front);
            if (childTree !== null) return childTree.subtree(pathPopFront(relativePath));
            else return new ImmutableTree1(null);
        }
    };
    /**
     * Sets a value at the specified path.
     *
     * @param relativePath - Path to set value at.
     * @param toSet - Value to set.
     * @returns Resulting tree.
     */ ImmutableTree1.prototype.set = function(relativePath, toSet) {
        if (pathIsEmpty(relativePath)) return new ImmutableTree1(toSet, this.children);
        else {
            var front = pathGetFront(relativePath);
            var child = this.children.get(front) || new ImmutableTree1(null);
            var newChild = child.set(pathPopFront(relativePath), toSet);
            var newChildren = this.children.insert(front, newChild);
            return new ImmutableTree1(this.value, newChildren);
        }
    };
    /**
     * Removes the value at the specified path.
     *
     * @param relativePath - Path to value to remove.
     * @returns Resulting tree.
     */ ImmutableTree1.prototype.remove = function(relativePath) {
        if (pathIsEmpty(relativePath)) {
            if (this.children.isEmpty()) return new ImmutableTree1(null);
            else return new ImmutableTree1(null, this.children);
        } else {
            var front = pathGetFront(relativePath);
            var child = this.children.get(front);
            if (child) {
                var newChild = child.remove(pathPopFront(relativePath));
                var newChildren = void 0;
                if (newChild.isEmpty()) newChildren = this.children.remove(front);
                else newChildren = this.children.insert(front, newChild);
                if (this.value === null && newChildren.isEmpty()) return new ImmutableTree1(null);
                else return new ImmutableTree1(this.value, newChildren);
            } else return this;
        }
    };
    /**
     * Gets a value from the tree.
     *
     * @param relativePath - Path to get value for.
     * @returns Value at path, or null.
     */ ImmutableTree1.prototype.get = function(relativePath) {
        if (pathIsEmpty(relativePath)) return this.value;
        else {
            var front = pathGetFront(relativePath);
            var child = this.children.get(front);
            if (child) return child.get(pathPopFront(relativePath));
            else return null;
        }
    };
    /**
     * Replace the subtree at the specified path with the given new tree.
     *
     * @param relativePath - Path to replace subtree for.
     * @param newTree - New tree.
     * @returns Resulting tree.
     */ ImmutableTree1.prototype.setTree = function(relativePath, newTree) {
        if (pathIsEmpty(relativePath)) return newTree;
        else {
            var front = pathGetFront(relativePath);
            var child = this.children.get(front) || new ImmutableTree1(null);
            var newChild = child.setTree(pathPopFront(relativePath), newTree);
            var newChildren = void 0;
            if (newChild.isEmpty()) newChildren = this.children.remove(front);
            else newChildren = this.children.insert(front, newChild);
            return new ImmutableTree1(this.value, newChildren);
        }
    };
    /**
     * Performs a depth first fold on this tree. Transforms a tree into a single
     * value, given a function that operates on the path to a node, an optional
     * current value, and a map of child names to folded subtrees
     */ ImmutableTree1.prototype.fold = function(fn) {
        return this.fold_(newEmptyPath(), fn);
    };
    /**
     * Recursive helper for public-facing fold() method
     */ ImmutableTree1.prototype.fold_ = function(pathSoFar, fn) {
        var accum = {
        };
        this.children.inorderTraversal(function(childKey, childTree) {
            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);
        });
        return fn(pathSoFar, this.value, accum);
    };
    /**
     * Find the first matching value on the given path. Return the result of applying f to it.
     */ ImmutableTree1.prototype.findOnPath = function(path, f) {
        return this.findOnPath_(path, newEmptyPath(), f);
    };
    ImmutableTree1.prototype.findOnPath_ = function(pathToFollow, pathSoFar, f) {
        var result = this.value ? f(pathSoFar, this.value) : false;
        if (result) return result;
        else {
            if (pathIsEmpty(pathToFollow)) return null;
            else {
                var front = pathGetFront(pathToFollow);
                var nextChild = this.children.get(front);
                if (nextChild) return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);
                else return null;
            }
        }
    };
    ImmutableTree1.prototype.foreachOnPath = function(path, f) {
        return this.foreachOnPath_(path, newEmptyPath(), f);
    };
    ImmutableTree1.prototype.foreachOnPath_ = function(pathToFollow, currentRelativePath, f) {
        if (pathIsEmpty(pathToFollow)) return this;
        else {
            if (this.value) f(currentRelativePath, this.value);
            var front = pathGetFront(pathToFollow);
            var nextChild = this.children.get(front);
            if (nextChild) return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);
            else return new ImmutableTree1(null);
        }
    };
    /**
     * Calls the given function for each node in the tree that has a value.
     *
     * @param f - A function to be called with the path from the root of the tree to
     * a node, and the value at that node. Called in depth-first order.
     */ ImmutableTree1.prototype.foreach = function(f) {
        this.foreach_(newEmptyPath(), f);
    };
    ImmutableTree1.prototype.foreach_ = function(currentRelativePath, f) {
        this.children.inorderTraversal(function(childName, childTree) {
            childTree.foreach_(pathChild(currentRelativePath, childName), f);
        });
        if (this.value) f(currentRelativePath, this.value);
    };
    ImmutableTree1.prototype.foreachChild = function(f) {
        this.children.inorderTraversal(function(childName, childTree) {
            if (childTree.value) f(childName, childTree.value);
        });
    };
    return ImmutableTree1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with
 * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write
 * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write
 * to reflect the write added.
 */ var CompoundWrite = function() {
    function CompoundWrite1(writeTree_) {
        this.writeTree_ = writeTree_;
    }
    CompoundWrite1.empty = function() {
        return new CompoundWrite1(new ImmutableTree(null));
    };
    return CompoundWrite1;
}();
function compoundWriteAddWrite(compoundWrite, path, node) {
    if (pathIsEmpty(path)) return new CompoundWrite(new ImmutableTree(node));
    else {
        var rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);
        if (rootmost != null) {
            var rootMostPath = rootmost.path;
            var value = rootmost.value;
            var relativePath = newRelativePath(rootMostPath, path);
            value = value.updateChild(relativePath, node);
            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));
        } else {
            var subtree = new ImmutableTree(node);
            var newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);
            return new CompoundWrite(newWriteTree);
        }
    }
}
function compoundWriteAddWrites(compoundWrite, path, updates) {
    var newWrite = compoundWrite;
    each(updates, function(childKey, node) {
        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);
    });
    return newWrite;
}
/**
 * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher
 * location, which must be removed by calling this method with that path.
 *
 * @param compoundWrite - The CompoundWrite to remove.
 * @param path - The path at which a write and all deeper writes should be removed
 * @returns The new CompoundWrite with the removed path
 */ function compoundWriteRemoveWrite(compoundWrite, path) {
    if (pathIsEmpty(path)) return CompoundWrite.empty();
    else {
        var newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));
        return new CompoundWrite(newWriteTree);
    }
}
/**
 * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be
 * considered "complete".
 *
 * @param compoundWrite - The CompoundWrite to check.
 * @param path - The path to check for
 * @returns Whether there is a complete write at that path
 */ function compoundWriteHasCompleteWrite(compoundWrite, path) {
    return compoundWriteGetCompleteNode(compoundWrite, path) != null;
}
/**
 * Returns a node for a path if and only if the node is a "complete" overwrite at that path. This will not aggregate
 * writes from deeper paths, but will return child nodes from a more shallow path.
 *
 * @param compoundWrite - The CompoundWrite to get the node from.
 * @param path - The path to get a complete write
 * @returns The node if complete at that path, or null otherwise.
 */ function compoundWriteGetCompleteNode(compoundWrite, path) {
    var rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);
    if (rootmost != null) return compoundWrite.writeTree_.get(rootmost.path).getChild(newRelativePath(rootmost.path, path));
    else return null;
}
/**
 * Returns all children that are guaranteed to be a complete overwrite.
 *
 * @param compoundWrite - The CompoundWrite to get children from.
 * @returns A list of all complete children.
 */ function compoundWriteGetCompleteChildren(compoundWrite) {
    var children = [];
    var node = compoundWrite.writeTree_.value;
    if (node != null) // If it's a leaf node, it has no children; so nothing to do.
    {
        if (!node.isLeafNode()) node.forEachChild(PRIORITY_INDEX, function(childName, childNode) {
            children.push(new NamedNode(childName, childNode));
        });
    } else compoundWrite.writeTree_.children.inorderTraversal(function(childName, childTree) {
        if (childTree.value != null) children.push(new NamedNode(childName, childTree.value));
    });
    return children;
}
function compoundWriteChildCompoundWrite(compoundWrite, path) {
    if (pathIsEmpty(path)) return compoundWrite;
    else {
        var shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);
        if (shadowingNode != null) return new CompoundWrite(new ImmutableTree(shadowingNode));
        else return new CompoundWrite(compoundWrite.writeTree_.subtree(path));
    }
}
/**
 * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.
 * @returns Whether this CompoundWrite is empty
 */ function compoundWriteIsEmpty(compoundWrite) {
    return compoundWrite.writeTree_.isEmpty();
}
/**
 * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the
 * node
 * @param node - The node to apply this CompoundWrite to
 * @returns The node with all writes applied
 */ function compoundWriteApply(compoundWrite, node) {
    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);
}
function applySubtreeWrite(relativePath, writeTree, node) {
    if (writeTree.value != null) // Since there a write is always a leaf, we're done here
    return node.updateChild(relativePath, writeTree.value);
    else {
        var priorityWrite_1 = null;
        writeTree.children.inorderTraversal(function(childKey, childTree) {
            if (childKey === '.priority') {
                // Apply priorities at the end so we don't update priorities for either empty nodes or forget
                // to apply priorities to empty nodes that are later filled
                _util.assert(childTree.value !== null, 'Priority writes must always be leaf nodes');
                priorityWrite_1 = childTree.value;
            } else node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);
        });
        // If there was a priority write, we only apply it if the node is not empty
        if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite_1);
        return node;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.
 *
 */ function writeTreeChildWrites(writeTree, path) {
    return newWriteTreeRef(path, writeTree);
}
/**
 * Record a new overwrite from user code.
 *
 * @param visible - This is set to false by some transactions. It should be excluded from event caches
 */ function writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {
    _util.assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');
    if (visible === undefined) visible = true;
    writeTree.allWrites.push({
        path: path,
        snap: snap,
        writeId: writeId,
        visible: visible
    });
    if (visible) writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);
    writeTree.lastWriteId = writeId;
}
/**
 * Record a new merge from user code.
 */ function writeTreeAddMerge(writeTree, path, changedChildren, writeId) {
    _util.assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');
    writeTree.allWrites.push({
        path: path,
        children: changedChildren,
        writeId: writeId,
        visible: true
    });
    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);
    writeTree.lastWriteId = writeId;
}
function writeTreeGetWrite(writeTree, writeId) {
    for(var i = 0; i < writeTree.allWrites.length; i++){
        var record = writeTree.allWrites[i];
        if (record.writeId === writeId) return record;
    }
    return null;
}
/**
 * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates
 * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.
 *
 * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise
 * events as a result).
 */ function writeTreeRemoveWrite(writeTree, writeId) {
    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied
    // out of order.
    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;
    //assert(validClear, "Either we don't have this write, or it's the first one in the queue");
    var idx = writeTree.allWrites.findIndex(function(s) {
        return s.writeId === writeId;
    });
    _util.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');
    var writeToRemove = writeTree.allWrites[idx];
    writeTree.allWrites.splice(idx, 1);
    var removedWriteWasVisible = writeToRemove.visible;
    var removedWriteOverlapsWithOtherWrites = false;
    var i = writeTree.allWrites.length - 1;
    while(removedWriteWasVisible && i >= 0){
        var currentWrite = writeTree.allWrites[i];
        if (currentWrite.visible) {
            if (i >= idx && writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) // The removed write was completely shadowed by a subsequent write.
            removedWriteWasVisible = false;
            else if (pathContains(writeToRemove.path, currentWrite.path)) // Either we're covering some writes or they're covering part of us (depending on which came first).
            removedWriteOverlapsWithOtherWrites = true;
        }
        i--;
    }
    if (!removedWriteWasVisible) return false;
    else if (removedWriteOverlapsWithOtherWrites) {
        // There's some shadowing going on. Just rebuild the visible writes from scratch.
        writeTreeResetTree_(writeTree);
        return true;
    } else {
        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.
        if (writeToRemove.snap) writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);
        else {
            var children = writeToRemove.children;
            each(children, function(childName) {
                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));
            });
        }
        return true;
    }
}
function writeTreeRecordContainsPath_(writeRecord, path) {
    if (writeRecord.snap) return pathContains(writeRecord.path, path);
    else {
        for(var childName in writeRecord.children){
            if (writeRecord.children.hasOwnProperty(childName) && pathContains(pathChild(writeRecord.path, childName), path)) return true;
        }
        return false;
    }
}
/**
 * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots
 */ function writeTreeResetTree_(writeTree) {
    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());
    if (writeTree.allWrites.length > 0) writeTree.lastWriteId = writeTree.allWrites[writeTree.allWrites.length - 1].writeId;
    else writeTree.lastWriteId = -1;
}
/**
 * The default filter used when constructing the tree. Keep everything that's visible.
 */ function writeTreeDefaultFilter_(write) {
    return write.visible;
}
/**
 * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of
 * event data at that path.
 */ function writeTreeLayerTree_(writes, filter, treeRoot) {
    var compoundWrite = CompoundWrite.empty();
    for(var i = 0; i < writes.length; ++i){
        var write = writes[i];
        // Theory, a later set will either:
        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction
        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction
        if (filter(write)) {
            var writePath = write.path;
            var relativePath = void 0;
            if (write.snap) {
                if (pathContains(treeRoot, writePath)) {
                    relativePath = newRelativePath(treeRoot, writePath);
                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);
                } else if (pathContains(writePath, treeRoot)) {
                    relativePath = newRelativePath(writePath, treeRoot);
                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));
                }
            } else if (write.children) {
                if (pathContains(treeRoot, writePath)) {
                    relativePath = newRelativePath(treeRoot, writePath);
                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);
                } else if (pathContains(writePath, treeRoot)) {
                    relativePath = newRelativePath(writePath, treeRoot);
                    if (pathIsEmpty(relativePath)) compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);
                    else {
                        var child = _util.safeGet(write.children, pathGetFront(relativePath));
                        if (child) {
                            // There exists a child in this node that matches the root path
                            var deepNode = child.getChild(pathPopFront(relativePath));
                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);
                        }
                    }
                }
            } else throw _util.assertionError('WriteRecord should have .snap or .children');
        }
    }
    return compoundWrite;
}
/**
 * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden
 * writes), attempt to calculate a complete snapshot for the given path
 *
 * @param writeIdsToExclude - An optional set to be excluded
 * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false
 */ function writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
    if (!writeIdsToExclude && !includeHiddenWrites) {
        var shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);
        if (shadowingNode != null) return shadowingNode;
        else {
            var subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
            if (compoundWriteIsEmpty(subMerge)) return completeServerCache;
            else if (completeServerCache == null && !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow
            return null;
            else {
                var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
                return compoundWriteApply(subMerge, layeredCache);
            }
        }
    } else {
        var merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) return completeServerCache;
        else {
            // If the server cache is null, and we don't have a complete cache, we need to return null
            if (!includeHiddenWrites && completeServerCache == null && !compoundWriteHasCompleteWrite(merge, newEmptyPath())) return null;
            else {
                var filter = function(write) {
                    return (write.visible || includeHiddenWrites) && (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) && (pathContains(write.path, treePath) || pathContains(treePath, write.path));
                };
                var mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);
                var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
                return compoundWriteApply(mergeAtPath, layeredCache);
            }
        }
    }
}
/**
 * With optional, underlying server data, attempt to return a children node of children that we have complete data for.
 * Used when creating new views, to pre-fill their complete event children snapshot.
 */ function writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {
    var completeChildren = ChildrenNode.EMPTY_NODE;
    var topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);
    if (topLevelSet) {
        if (!topLevelSet.isLeafNode()) // we're shadowing everything. Return the children.
        topLevelSet.forEachChild(PRIORITY_INDEX, function(childName, childSnap) {
            completeChildren = completeChildren.updateImmediateChild(childName, childSnap);
        });
        return completeChildren;
    } else if (completeServerChildren) {
        // Layer any children we have on top of this
        // We know we don't have a top-level set, so just enumerate existing children
        var merge_1 = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
        completeServerChildren.forEachChild(PRIORITY_INDEX, function(childName, childNode) {
            var node = compoundWriteApply(compoundWriteChildCompoundWrite(merge_1, new Path(childName)), childNode);
            completeChildren = completeChildren.updateImmediateChild(childName, node);
        });
        // Add any complete children we have from the set
        compoundWriteGetCompleteChildren(merge_1).forEach(function(namedNode) {
            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
        });
        return completeChildren;
    } else {
        // We don't have anything to layer on top of. Layer on any children we have
        // Note that we can return an empty snap if we have a defined delete
        var merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
        compoundWriteGetCompleteChildren(merge).forEach(function(namedNode) {
            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
        });
        return completeChildren;
    }
}
/**
 * Given that the underlying server data has updated, determine what, if anything, needs to be
 * applied to the event cache.
 *
 * Possibilities:
 *
 * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
 *
 * 2. Some write is completely shadowing. No events to be raised
 *
 * 3. Is partially shadowed. Events
 *
 * Either existingEventSnap or existingServerSnap must exist
 */ function writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {
    _util.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');
    var path = pathChild(treePath, childPath);
    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) // At this point we can probably guarantee that we're in case 2, meaning no events
    // May need to check visibility while doing the findRootMostValueAndPath call
    return null;
    else {
        // No complete shadowing. We're either partially shadowing or not shadowing at all.
        var childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);
        if (compoundWriteIsEmpty(childMerge)) // We're not shadowing at all. Case 1
        return existingServerSnap.getChild(childPath);
        else // This could be more efficient if the serverNode + updates doesn't change the eventSnap
        // However this is tricky to find out, since user updates don't necessary change the server
        // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server
        // adds nodes, but doesn't change any existing writes. It is therefore not enough to
        // only check if the updates change the serverNode.
        // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?
        return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));
    }
}
/**
 * Returns a complete child for a given server snap after applying all user writes or null if there is no
 * complete child for this ChildKey.
 */ function writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {
    var path = pathChild(treePath, childKey);
    var shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);
    if (shadowingNode != null) return shadowingNode;
    else {
        if (existingServerSnap.isCompleteForChild(childKey)) {
            var childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);
            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));
        } else return null;
    }
}
/**
 * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
 * a higher path, this will return the child of that write relative to the write and this path.
 * Returns null if there is no write at this path.
 */ function writeTreeShadowingWrite(writeTree, path) {
    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);
}
/**
 * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
 * the window, but may now be in the window.
 */ function writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {
    var toIterate;
    var merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
    var shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());
    if (shadowingNode != null) toIterate = shadowingNode;
    else if (completeServerData != null) toIterate = compoundWriteApply(merge, completeServerData);
    else // no children to iterate on
    return [];
    toIterate = toIterate.withIndex(index);
    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {
        var nodes = [];
        var cmp = index.getCompare();
        var iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index) : toIterate.getIteratorFrom(startPost, index);
        var next = iter.getNext();
        while(next && nodes.length < count){
            if (cmp(next, startPost) !== 0) nodes.push(next);
            next = iter.getNext();
        }
        return nodes;
    } else return [];
}
function newWriteTree() {
    return {
        visibleWrites: CompoundWrite.empty(),
        allWrites: [],
        lastWriteId: -1
    };
}
/**
 * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used
 * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node
 * can lead to a more expensive calculation.
 *
 * @param writeIdsToExclude - Optional writes to exclude.
 * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false
 */ function writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);
}
/**
 * If possible, returns a children node containing all of the complete children we have data for. The returned data is a
 * mix of the given server data and write data.
 *
 */ function writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {
    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);
}
/**
 * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,
 * if anything, needs to be applied to the event cache.
 *
 * Possibilities:
 *
 * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
 *
 * 2. Some write is completely shadowing. No events to be raised
 *
 * 3. Is partially shadowed. Events should be raised
 *
 * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert
 *
 *
 */ function writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {
    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);
}
/**
 * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
 * a higher path, this will return the child of that write relative to the write and this path.
 * Returns null if there is no write at this path.
 *
 */ function writeTreeRefShadowingWrite(writeTreeRef, path) {
    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));
}
/**
 * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
 * the window, but may now be in the window
 */ function writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {
    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);
}
/**
 * Returns a complete child for a given server snap after applying all user writes or null if there is no
 * complete child for this ChildKey.
 */ function writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {
    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);
}
/**
 * Return a WriteTreeRef for a child.
 */ function writeTreeRefChild(writeTreeRef, childName) {
    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);
}
function newWriteTreeRef(path, writeTree) {
    return {
        treePath: path,
        writeTree: writeTree
    };
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var ChildChangeAccumulator = function() {
    function ChildChangeAccumulator1() {
        this.changeMap = new Map();
    }
    ChildChangeAccumulator1.prototype.trackChildChange = function(change) {
        var type = change.type;
        var childKey = change.childName;
        _util.assert(type === "child_added" || type === "child_changed" || type === "child_removed"/* CHILD_REMOVED */ , 'Only child changes supported for tracking');
        _util.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');
        var oldChange = this.changeMap.get(childKey);
        if (oldChange) {
            var oldType = oldChange.type;
            if (type === "child_added" && oldType === "child_removed") this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));
            else if (type === "child_removed" && oldType === "child_added") this.changeMap.delete(childKey);
            else if (type === "child_removed" && oldType === "child_changed") this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));
            else if (type === "child_changed" && oldType === "child_added") this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));
            else if (type === "child_changed" && oldType === "child_changed") this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));
            else throw _util.assertionError('Illegal combination of changes: ' + change + ' occurred after ' + oldChange);
        } else this.changeMap.set(childKey, change);
    };
    ChildChangeAccumulator1.prototype.getChanges = function() {
        return Array.from(this.changeMap.values());
    };
    return ChildChangeAccumulator1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An implementation of CompleteChildSource that never returns any additional children
 */ // eslint-disable-next-line @typescript-eslint/naming-convention
var NoCompleteChildSource_ = function() {
    function NoCompleteChildSource_1() {
    }
    NoCompleteChildSource_1.prototype.getCompleteChild = function(childKey) {
        return null;
    };
    NoCompleteChildSource_1.prototype.getChildAfterChild = function(index, child, reverse) {
        return null;
    };
    return NoCompleteChildSource_1;
}();
/**
 * Singleton instance.
 */ var NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();
/**
 * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or
 * old event caches available to calculate complete children.
 */ var WriteTreeCompleteChildSource = function() {
    function WriteTreeCompleteChildSource1(writes_, viewCache_, optCompleteServerCache_) {
        if (optCompleteServerCache_ === void 0) optCompleteServerCache_ = null;
        this.writes_ = writes_;
        this.viewCache_ = viewCache_;
        this.optCompleteServerCache_ = optCompleteServerCache_;
    }
    WriteTreeCompleteChildSource1.prototype.getCompleteChild = function(childKey) {
        var node = this.viewCache_.eventCache;
        if (node.isCompleteForChild(childKey)) return node.getNode().getImmediateChild(childKey);
        else {
            var serverNode = this.optCompleteServerCache_ != null ? new CacheNode(this.optCompleteServerCache_, true, false) : this.viewCache_.serverCache;
            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);
        }
    };
    WriteTreeCompleteChildSource1.prototype.getChildAfterChild = function(index, child, reverse) {
        var completeServerData = this.optCompleteServerCache_ != null ? this.optCompleteServerCache_ : viewCacheGetCompleteServerSnap(this.viewCache_);
        var nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);
        if (nodes.length === 0) return null;
        else return nodes[0];
    };
    return WriteTreeCompleteChildSource1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function newViewProcessor(filter) {
    return {
        filter: filter
    };
}
function viewProcessorAssertIndexed(viewProcessor, viewCache) {
    _util.assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');
    _util.assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');
}
function viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {
    var accumulator = new ChildChangeAccumulator();
    var newViewCache1, filterServerNode;
    if (operation.type === OperationType.OVERWRITE) {
        var overwrite = operation;
        if (overwrite.source.fromUser) newViewCache1 = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);
        else {
            _util.assert(overwrite.source.fromServer, 'Unknown source.');
            // We filter the node if it's a tagged update or the node has been previously filtered  and the
            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered
            // again
            filterServerNode = overwrite.source.tagged || oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path);
            newViewCache1 = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);
        }
    } else if (operation.type === OperationType.MERGE) {
        var merge = operation;
        if (merge.source.fromUser) newViewCache1 = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);
        else {
            _util.assert(merge.source.fromServer, 'Unknown source.');
            // We filter the node if it's a tagged update or the node has been previously filtered
            filterServerNode = merge.source.tagged || oldViewCache.serverCache.isFiltered();
            newViewCache1 = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);
        }
    } else if (operation.type === OperationType.ACK_USER_WRITE) {
        var ackUserWrite = operation;
        if (!ackUserWrite.revert) newViewCache1 = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);
        else newViewCache1 = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);
    } else if (operation.type === OperationType.LISTEN_COMPLETE) newViewCache1 = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);
    else throw _util.assertionError('Unknown operation type: ' + operation.type);
    var changes = accumulator.getChanges();
    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache1, changes);
    return {
        viewCache: newViewCache1,
        changes: changes
    };
}
function viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache1, accumulator) {
    var eventSnap = newViewCache1.eventCache;
    if (eventSnap.isFullyInitialized()) {
        var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();
        var oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);
        if (accumulator.length > 0 || !oldViewCache.eventCache.isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache1)));
    }
}
function viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {
    var oldEventSnap = viewCache.eventCache;
    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) // we have a shadowing write, ignore changes
    return viewCache;
    else {
        var newEventCache = void 0, serverNode = void 0;
        if (pathIsEmpty(changePath)) {
            // TODO: figure out how this plays with "sliding ack windows"
            _util.assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');
            if (viewCache.serverCache.isFiltered()) {
                // We need to special case this, because we need to only apply writes to complete children, or
                // we might end up raising events for incomplete children. If the server data is filtered deep
                // writes cannot be guaranteed to be complete
                var serverCache = viewCacheGetCompleteServerSnap(viewCache);
                var completeChildren = serverCache instanceof ChildrenNode ? serverCache : ChildrenNode.EMPTY_NODE;
                var completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);
                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);
            } else {
                var completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));
                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);
            }
        } else {
            var childKey = pathGetFront(changePath);
            if (childKey === '.priority') {
                _util.assert(pathGetLength(changePath) === 1, "Can't have a priority with additional path components");
                var oldEventNode = oldEventSnap.getNode();
                serverNode = viewCache.serverCache.getNode();
                // we might have overwrites for this priority
                var updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);
                if (updatedPriority != null) newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);
                else // priority didn't change, keep old node
                newEventCache = oldEventSnap.getNode();
            } else {
                var childChangePath = pathPopFront(changePath);
                // update child
                var newEventChild = void 0;
                if (oldEventSnap.isCompleteForChild(childKey)) {
                    serverNode = viewCache.serverCache.getNode();
                    var eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);
                    if (eventChildUpdate != null) newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);
                    else // Nothing changed, just keep the old child
                    newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);
                } else newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);
                if (newEventChild != null) newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);
                else // no complete child available or no change
                newEventCache = oldEventSnap.getNode();
            }
        }
        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());
    }
}
function viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {
    var oldServerSnap = oldViewCache.serverCache;
    var newServerCache;
    var serverFilter = filterServerNode ? viewProcessor.filter : viewProcessor.filter.getIndexedFilter();
    if (pathIsEmpty(changePath)) newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);
    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {
        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update
        var newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);
        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);
    } else {
        var childKey = pathGetFront(changePath);
        if (!oldServerSnap.isCompleteForPath(changePath) && pathGetLength(changePath) > 1) // We don't update incomplete nodes with updates intended for other listeners
        return oldViewCache;
        var childChangePath = pathPopFront(changePath);
        var childNode = oldServerSnap.getNode().getImmediateChild(childKey);
        var newChildNode = childNode.updateChild(childChangePath, changedSnap);
        if (childKey === '.priority') newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);
        else newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);
    }
    var newViewCache1 = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());
    var source = new WriteTreeCompleteChildSource(writesCache, newViewCache1, completeCache);
    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache1, changePath, writesCache, source, accumulator);
}
function viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {
    var oldEventSnap = oldViewCache.eventCache;
    var newViewCache1, newEventCache;
    var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);
    if (pathIsEmpty(changePath)) {
        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);
        newViewCache1 = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());
    } else {
        var childKey = pathGetFront(changePath);
        if (childKey === '.priority') {
            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);
            newViewCache1 = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());
        } else {
            var childChangePath = pathPopFront(changePath);
            var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);
            var newChild = void 0;
            if (pathIsEmpty(childChangePath)) // Child overwrite, we can replace the child
            newChild = changedSnap;
            else {
                var childNode = source.getCompleteChild(childKey);
                if (childNode != null) {
                    if (pathGetBack(childChangePath) === '.priority' && childNode.getChild(pathParent(childChangePath)).isEmpty()) // This is a priority update on an empty node. If this node exists on the server, the
                    // server will send down the priority in the update, so ignore for now
                    newChild = childNode;
                    else newChild = childNode.updateChild(childChangePath, changedSnap);
                } else // There is no complete child node available
                newChild = ChildrenNode.EMPTY_NODE;
            }
            if (!oldChild.equals(newChild)) {
                var newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);
                newViewCache1 = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());
            } else newViewCache1 = oldViewCache;
        }
    }
    return newViewCache1;
}
function viewProcessorCacheHasChild(viewCache, childKey) {
    return viewCache.eventCache.isCompleteForChild(childKey);
}
function viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {
    // HACK: In the case of a limit query, there may be some changes that bump things out of the
    // window leaving room for new items.  It's important we process these changes first, so we
    // iterate the changes twice, first processing any that affect items currently in view.
    // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
    // not the other.
    var curViewCache = viewCache;
    changedChildren.foreach(function(relativePath, childNode) {
        var writePath = pathChild(path, relativePath);
        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
    });
    changedChildren.foreach(function(relativePath, childNode) {
        var writePath = pathChild(path, relativePath);
        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
    });
    return curViewCache;
}
function viewProcessorApplyMerge(viewProcessor, node, merge) {
    merge.foreach(function(relativePath, childNode) {
        node = node.updateChild(relativePath, childNode);
    });
    return node;
}
function viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {
    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and
    // wait for the complete data update coming soon.
    if (viewCache.serverCache.getNode().isEmpty() && !viewCache.serverCache.isFullyInitialized()) return viewCache;
    // HACK: In the case of a limit query, there may be some changes that bump things out of the
    // window leaving room for new items.  It's important we process these changes first, so we
    // iterate the changes twice, first processing any that affect items currently in view.
    // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
    // not the other.
    var curViewCache = viewCache;
    var viewMergeTree;
    if (pathIsEmpty(path)) viewMergeTree = changedChildren;
    else viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);
    var serverNode = viewCache.serverCache.getNode();
    viewMergeTree.children.inorderTraversal(function(childKey, childTree) {
        if (serverNode.hasChild(childKey)) {
            var serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);
            var newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);
            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
        }
    });
    viewMergeTree.children.inorderTraversal(function(childKey, childMergeTree) {
        var isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) && childMergeTree.value === undefined;
        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {
            var serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);
            var newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);
            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
        }
    });
    return curViewCache;
}
function viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {
    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) return viewCache;
    // Only filter server node if it is currently filtered
    var filterServerNode = viewCache.serverCache.isFiltered();
    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update
    // now that it won't be shadowed.
    var serverCache = viewCache.serverCache;
    if (affectedTree.value != null) {
        // This is an overwrite.
        if (pathIsEmpty(ackPath) && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);
        else if (pathIsEmpty(ackPath)) {
            // This is a goofy edge case where we are acking data at this location but don't have full data.  We
            // should just re-apply whatever we have in our cache as a merge.
            var changedChildren_1 = new ImmutableTree(null);
            serverCache.getNode().forEachChild(KEY_INDEX, function(name1, node) {
                changedChildren_1 = changedChildren_1.set(new Path(name1), node);
            });
            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);
        } else return viewCache;
    } else {
        // This is a merge.
        var changedChildren_2 = new ImmutableTree(null);
        affectedTree.foreach(function(mergePath, value) {
            var serverCachePath = pathChild(ackPath, mergePath);
            if (serverCache.isCompleteForPath(serverCachePath)) changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));
        });
        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);
    }
}
function viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {
    var oldServerNode = viewCache.serverCache;
    var newViewCache1 = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());
    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache1, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);
}
function viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {
    var complete;
    if (writeTreeRefShadowingWrite(writesCache, path) != null) return viewCache;
    else {
        var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);
        var oldEventCache = viewCache.eventCache.getNode();
        var newEventCache = void 0;
        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {
            var newNode = void 0;
            if (viewCache.serverCache.isFullyInitialized()) newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));
            else {
                var serverChildren = viewCache.serverCache.getNode();
                _util.assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');
                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);
            }
            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);
        } else {
            var childKey = pathGetFront(path);
            var newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);
            if (newChild == null && viewCache.serverCache.isCompleteForChild(childKey)) newChild = oldEventCache.getImmediateChild(childKey);
            if (newChild != null) newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);
            else if (viewCache.eventCache.getNode().hasChild(childKey)) // No complete child available, delete the existing one, if any
            newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);
            else newEventCache = oldEventCache;
            if (newEventCache.isEmpty() && viewCache.serverCache.isFullyInitialized()) {
                // We might have reverted all child writes. Maybe the old event was a leaf node
                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));
                if (complete.isLeafNode()) newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);
            }
        }
        complete = viewCache.serverCache.isFullyInitialized() || writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;
        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A view represents a specific location and query that has 1 or more event registrations.
 *
 * It does several things:
 *  - Maintains the list of event registrations for this location/query.
 *  - Maintains a cache of the data visible for this location/query.
 *  - Applies new operations (via applyOperation), updates the cache, and based on the event
 *    registrations returns the set of events to be raised.
 */ var View = function() {
    function View1(query_, initialViewCache) {
        this.query_ = query_;
        this.eventRegistrations_ = [];
        var params = this.query_._queryParams;
        var indexFilter = new IndexedFilter(params.getIndex());
        var filter = queryParamsGetNodeFilter(params);
        this.processor_ = newViewProcessor(filter);
        var initialServerCache = initialViewCache.serverCache;
        var initialEventCache = initialViewCache.eventCache;
        // Don't filter server node with other filter than index, wait for tagged listen
        var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);
        var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);
        var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());
        var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());
        this.viewCache_ = newViewCache(newEventCache, newServerCache);
        this.eventGenerator_ = new EventGenerator(this.query_);
    }
    Object.defineProperty(View1.prototype, "query", {
        get: function() {
            return this.query_;
        },
        enumerable: false,
        configurable: true
    });
    return View1;
}();
function viewGetServerCache(view) {
    return view.viewCache_.serverCache.getNode();
}
function viewGetCompleteNode(view) {
    return viewCacheGetCompleteEventSnap(view.viewCache_);
}
function viewGetCompleteServerCache(view, path) {
    var cache = viewCacheGetCompleteServerSnap(view.viewCache_);
    if (cache) {
        // If this isn't a "loadsAllData" view, then cache isn't actually a complete cache and
        // we need to see if it contains the child we're interested in.
        if (view.query._queryParams.loadsAllData() || !pathIsEmpty(path) && !cache.getImmediateChild(pathGetFront(path)).isEmpty()) return cache.getChild(path);
    }
    return null;
}
function viewIsEmpty(view) {
    return view.eventRegistrations_.length === 0;
}
function viewAddEventRegistration(view, eventRegistration) {
    view.eventRegistrations_.push(eventRegistration);
}
/**
 * @param eventRegistration - If null, remove all callbacks.
 * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.
 * @returns Cancel events, if cancelError was provided.
 */ function viewRemoveEventRegistration(view, eventRegistration, cancelError) {
    var cancelEvents = [];
    if (cancelError) {
        _util.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');
        var path_1 = view.query._path;
        view.eventRegistrations_.forEach(function(registration) {
            var maybeEvent = registration.createCancelEvent(cancelError, path_1);
            if (maybeEvent) cancelEvents.push(maybeEvent);
        });
    }
    if (eventRegistration) {
        var remaining = [];
        for(var i = 0; i < view.eventRegistrations_.length; ++i){
            var existing = view.eventRegistrations_[i];
            if (!existing.matches(eventRegistration)) remaining.push(existing);
            else if (eventRegistration.hasAnyCallback()) {
                // We're removing just this one
                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));
                break;
            }
        }
        view.eventRegistrations_ = remaining;
    } else view.eventRegistrations_ = [];
    return cancelEvents;
}
/**
 * Applies the given Operation, updates our cache, and returns the appropriate events.
 */ function viewApplyOperation(view, operation, writesCache, completeServerCache) {
    if (operation.type === OperationType.MERGE && operation.source.queryId !== null) {
        _util.assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');
        _util.assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');
    }
    var oldViewCache = view.viewCache_;
    var result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);
    viewProcessorAssertIndexed(view.processor_, result.viewCache);
    _util.assert(result.viewCache.serverCache.isFullyInitialized() || !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');
    view.viewCache_ = result.viewCache;
    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);
}
function viewGetInitialEvents(view, registration) {
    var eventSnap = view.viewCache_.eventCache;
    var initialChanges = [];
    if (!eventSnap.getNode().isLeafNode()) {
        var eventNode = eventSnap.getNode();
        eventNode.forEachChild(PRIORITY_INDEX, function(key, childNode) {
            initialChanges.push(changeChildAdded(key, childNode));
        });
    }
    if (eventSnap.isFullyInitialized()) initialChanges.push(changeValue(eventSnap.getNode()));
    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);
}
function viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {
    var registrations = eventRegistration ? [
        eventRegistration
    ] : view.eventRegistrations_;
    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var referenceConstructor$1;
/**
 * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to
 * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes
 * and user writes (set, transaction, update).
 *
 * It's responsible for:
 *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).
 *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,
 *    applyUserOverwrite, etc.)
 */ var SyncPoint = function() {
    function SyncPoint1() {
        /**
         * The Views being tracked at this location in the tree, stored as a map where the key is a
         * queryId and the value is the View for that query.
         *
         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).
         */ this.views = new Map();
    }
    return SyncPoint1;
}();
function syncPointSetReferenceConstructor(val) {
    _util.assert(!referenceConstructor$1, '__referenceConstructor has already been defined');
    referenceConstructor$1 = val;
}
function syncPointGetReferenceConstructor() {
    _util.assert(referenceConstructor$1, 'Reference.ts has not been loaded');
    return referenceConstructor$1;
}
function syncPointIsEmpty(syncPoint) {
    return syncPoint.views.size === 0;
}
function syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {
    var e_1, _a;
    var queryId = operation.source.queryId;
    if (queryId !== null) {
        var view = syncPoint.views.get(queryId);
        _util.assert(view != null, 'SyncTree gave us an op for an invalid query.');
        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);
    } else {
        var events = [];
        try {
            for(var _b = _tslib.__values(syncPoint.views.values()), _c = _b.next(); !_c.done; _c = _b.next()){
                var view = _c.value;
                events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        return events;
    }
}
/**
 * Get a view for the specified query.
 *
 * @param query - The query to return a view for
 * @param writesCache
 * @param serverCache
 * @param serverCacheComplete
 * @returns Events to raise.
 */ function syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {
    var queryId = query._queryIdentifier;
    var view = syncPoint.views.get(queryId);
    if (!view) {
        // TODO: make writesCache take flag for complete server node
        var eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);
        var eventCacheComplete = false;
        if (eventCache) eventCacheComplete = true;
        else if (serverCache instanceof ChildrenNode) {
            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);
            eventCacheComplete = false;
        } else {
            eventCache = ChildrenNode.EMPTY_NODE;
            eventCacheComplete = false;
        }
        var viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));
        return new View(query, viewCache);
    }
    return view;
}
/**
 * Add an event callback for the specified query.
 *
 * @param query
 * @param eventRegistration
 * @param writesCache
 * @param serverCache - Complete server cache, if we have it.
 * @param serverCacheComplete
 * @returns Events to raise.
 */ function syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {
    var view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);
    if (!syncPoint.views.has(query._queryIdentifier)) syncPoint.views.set(query._queryIdentifier, view);
    // This is guaranteed to exist now, we just created anything that was missing
    viewAddEventRegistration(view, eventRegistration);
    return viewGetInitialEvents(view, eventRegistration);
}
/**
 * Remove event callback(s).  Return cancelEvents if a cancelError is specified.
 *
 * If query is the default query, we'll check all views for the specified eventRegistration.
 * If eventRegistration is null, we'll remove all callbacks for the specified view(s).
 *
 * @param eventRegistration - If null, remove all callbacks.
 * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.
 * @returns removed queries and any cancel events
 */ function syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {
    var e_2, _a;
    var queryId = query._queryIdentifier;
    var removed = [];
    var cancelEvents = [];
    var hadCompleteView = syncPointHasCompleteView(syncPoint);
    if (queryId === 'default') try {
        // When you do ref.off(...), we search all views for the registration to remove.
        for(var _b = _tslib.__values(syncPoint.views.entries()), _c = _b.next(); !_c.done; _c = _b.next()){
            var _d = _tslib.__read(_c.value, 2), viewQueryId = _d[0], view = _d[1];
            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));
            if (viewIsEmpty(view)) {
                syncPoint.views.delete(viewQueryId);
                // We'll deal with complete views later.
                if (!view.query._queryParams.loadsAllData()) removed.push(view.query);
            }
        }
    } catch (e_2_1) {
        e_2 = {
            error: e_2_1
        };
    } finally{
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally{
            if (e_2) throw e_2.error;
        }
    }
    else {
        // remove the callback from the specific view.
        var view = syncPoint.views.get(queryId);
        if (view) {
            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));
            if (viewIsEmpty(view)) {
                syncPoint.views.delete(queryId);
                // We'll deal with complete views later.
                if (!view.query._queryParams.loadsAllData()) removed.push(view.query);
            }
        }
    }
    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) // We removed our last complete view.
    removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));
    return {
        removed: removed,
        events: cancelEvents
    };
}
function syncPointGetQueryViews(syncPoint) {
    var e_3, _a;
    var result = [];
    try {
        for(var _b = _tslib.__values(syncPoint.views.values()), _c = _b.next(); !_c.done; _c = _b.next()){
            var view = _c.value;
            if (!view.query._queryParams.loadsAllData()) result.push(view);
        }
    } catch (e_3_1) {
        e_3 = {
            error: e_3_1
        };
    } finally{
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally{
            if (e_3) throw e_3.error;
        }
    }
    return result;
}
/**
 * @param path - The path to the desired complete snapshot
 * @returns A complete cache, if it exists
 */ function syncPointGetCompleteServerCache(syncPoint, path) {
    var e_4, _a;
    var serverCache = null;
    try {
        for(var _b = _tslib.__values(syncPoint.views.values()), _c = _b.next(); !_c.done; _c = _b.next()){
            var view = _c.value;
            serverCache = serverCache || viewGetCompleteServerCache(view, path);
        }
    } catch (e_4_1) {
        e_4 = {
            error: e_4_1
        };
    } finally{
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally{
            if (e_4) throw e_4.error;
        }
    }
    return serverCache;
}
function syncPointViewForQuery(syncPoint, query) {
    var params = query._queryParams;
    if (params.loadsAllData()) return syncPointGetCompleteView(syncPoint);
    else {
        var queryId = query._queryIdentifier;
        return syncPoint.views.get(queryId);
    }
}
function syncPointViewExistsForQuery(syncPoint, query) {
    return syncPointViewForQuery(syncPoint, query) != null;
}
function syncPointHasCompleteView(syncPoint) {
    return syncPointGetCompleteView(syncPoint) != null;
}
function syncPointGetCompleteView(syncPoint) {
    var e_5, _a;
    try {
        for(var _b = _tslib.__values(syncPoint.views.values()), _c = _b.next(); !_c.done; _c = _b.next()){
            var view = _c.value;
            if (view.query._queryParams.loadsAllData()) return view;
        }
    } catch (e_5_1) {
        e_5 = {
            error: e_5_1
        };
    } finally{
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally{
            if (e_5) throw e_5.error;
        }
    }
    return null;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var referenceConstructor;
function syncTreeSetReferenceConstructor(val) {
    _util.assert(!referenceConstructor, '__referenceConstructor has already been defined');
    referenceConstructor = val;
}
function syncTreeGetReferenceConstructor() {
    _util.assert(referenceConstructor, 'Reference.ts has not been loaded');
    return referenceConstructor;
}
/**
 * Static tracker for next query tag.
 */ var syncTreeNextQueryTag_ = 1;
/**
 * SyncTree is the central class for managing event callback registration, data caching, views
 * (query processing), and event generation.  There are typically two SyncTree instances for
 * each Repo, one for the normal Firebase data, and one for the .info data.
 *
 * It has a number of responsibilities, including:
 *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).
 *  - Applying and caching data changes for user set(), transaction(), and update() calls
 *    (applyUserOverwrite(), applyUserMerge()).
 *  - Applying and caching data changes for server data changes (applyServerOverwrite(),
 *    applyServerMerge()).
 *  - Generating user-facing events for server and user changes (all of the apply* methods
 *    return the set of events that need to be raised as a result).
 *  - Maintaining the appropriate set of server listens to ensure we are always subscribed
 *    to the correct set of paths and queries to satisfy the current set of user event
 *    callbacks (listens are started/stopped using the provided listenProvider).
 *
 * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual
 * events are returned to the caller rather than raised synchronously.
 *
 */ var SyncTree = function() {
    /**
     * @param listenProvider_ - Used by SyncTree to start / stop listening
     *   to server data.
     */ function SyncTree1(listenProvider_) {
        this.listenProvider_ = listenProvider_;
        /**
         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.
         */ this.syncPointTree_ = new ImmutableTree(null);
        /**
         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).
         */ this.pendingWriteTree_ = newWriteTree();
        this.tagToQueryMap = new Map();
        this.queryToTagMap = new Map();
    }
    return SyncTree1;
}();
/**
 * Apply the data changes for a user-generated set() or transaction() call.
 *
 * @returns Events to raise.
 */ function syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {
    // Record pending write.
    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);
    if (!visible) return [];
    else return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));
}
/**
 * Apply the data from a user-generated update() call
 *
 * @returns Events to raise.
 */ function syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {
    // Record pending merge.
    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);
    var changeTree = ImmutableTree.fromObject(changedChildren);
    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));
}
/**
 * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().
 *
 * @param revert - True if the given write failed and needs to be reverted
 * @returns Events to raise.
 */ function syncTreeAckUserWrite(syncTree, writeId, revert) {
    if (revert === void 0) revert = false;
    var write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);
    var needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);
    if (!needToReevaluate) return [];
    else {
        var affectedTree_1 = new ImmutableTree(null);
        if (write.snap != null) // overwrite
        affectedTree_1 = affectedTree_1.set(newEmptyPath(), true);
        else each(write.children, function(pathString) {
            affectedTree_1 = affectedTree_1.set(new Path(pathString), true);
        });
        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree_1, revert));
    }
}
/**
 * Apply new server data for the specified path..
 *
 * @returns Events to raise.
 */ function syncTreeApplyServerOverwrite(syncTree, path, newData) {
    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));
}
/**
 * Apply new server data to be merged in at the specified path.
 *
 * @returns Events to raise.
 */ function syncTreeApplyServerMerge(syncTree, path, changedChildren) {
    var changeTree = ImmutableTree.fromObject(changedChildren);
    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));
}
/**
 * Apply a listen complete for a query
 *
 * @returns Events to raise.
 */ function syncTreeApplyListenComplete(syncTree, path) {
    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));
}
/**
 * Apply a listen complete for a tagged query
 *
 * @returns Events to raise.
 */ function syncTreeApplyTaggedListenComplete(syncTree, path, tag) {
    var queryKey = syncTreeQueryKeyForTag_(syncTree, tag);
    if (queryKey) {
        var r = syncTreeParseQueryKey_(queryKey);
        var queryPath = r.path, queryId = r.queryId;
        var relativePath = newRelativePath(queryPath, path);
        var op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);
        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
    } else // We've already removed the query. No big deal, ignore the update
    return [];
}
/**
 * Remove event callback(s).
 *
 * If query is the default query, we'll check all queries for the specified eventRegistration.
 * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.
 *
 * @param eventRegistration - If null, all callbacks are removed.
 * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.
 * @returns Cancel events, if cancelError was provided.
 */ function syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError) {
    // Find the syncPoint first. Then deal with whether or not it has matching listeners
    var path = query._path;
    var maybeSyncPoint = syncTree.syncPointTree_.get(path);
    var cancelEvents = [];
    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without
    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and
    // not loadsAllData().
    if (maybeSyncPoint && (query._queryIdentifier === 'default' || syncPointViewExistsForQuery(maybeSyncPoint, query))) {
        var removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);
        if (syncPointIsEmpty(maybeSyncPoint)) syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);
        var removed = removedAndEvents.removed;
        cancelEvents = removedAndEvents.events;
        // We may have just removed one of many listeners and can short-circuit this whole process
        // We may also not have removed a default listener, in which case all of the descendant listeners should already be
        // properly set up.
        //
        // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of
        // queryId === 'default'
        var removingDefault = -1 !== removed.findIndex(function(query1) {
            return query1._queryParams.loadsAllData();
        });
        var covered = syncTree.syncPointTree_.findOnPath(path, function(relativePath, parentSyncPoint) {
            return syncPointHasCompleteView(parentSyncPoint);
        });
        if (removingDefault && !covered) {
            var subtree = syncTree.syncPointTree_.subtree(path);
            // There are potentially child listeners. Determine what if any listens we need to send before executing the
            // removal
            if (!subtree.isEmpty()) {
                // We need to fold over our subtree and collect the listeners to send
                var newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);
                // Ok, we've collected all the listens we need. Set them up.
                for(var i = 0; i < newViews.length; ++i){
                    var view = newViews[i], newQuery = view.query;
                    var listener = syncTreeCreateListenerForView_(syncTree, view);
                    syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery_(syncTree, newQuery), listener.hashFn, listener.onComplete);
                }
            }
        }
        // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query
        // The above block has us covered in terms of making sure we're set up on listens lower in the tree.
        // Also, note that if we have a cancelError, it's already been removed at the provider level.
        if (!covered && removed.length > 0 && !cancelError) {
            // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one
            // default. Otherwise, we need to iterate through and cancel each individual query
            if (removingDefault) {
                // We don't tag default listeners
                var defaultTag = null;
                syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);
            } else removed.forEach(function(queryToRemove) {
                var tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));
                syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);
            });
        }
        // Now, clear all of the tags we're tracking for the removed listens
        syncTreeRemoveTags_(syncTree, removed);
    }
    return cancelEvents;
}
/**
 * Apply new server data for the specified tagged query.
 *
 * @returns Events to raise.
 */ function syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {
    var queryKey = syncTreeQueryKeyForTag_(syncTree, tag);
    if (queryKey != null) {
        var r = syncTreeParseQueryKey_(queryKey);
        var queryPath = r.path, queryId = r.queryId;
        var relativePath = newRelativePath(queryPath, path);
        var op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);
        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
    } else // Query must have been removed already
    return [];
}
/**
 * Apply server data to be merged in for the specified tagged query.
 *
 * @returns Events to raise.
 */ function syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {
    var queryKey = syncTreeQueryKeyForTag_(syncTree, tag);
    if (queryKey) {
        var r = syncTreeParseQueryKey_(queryKey);
        var queryPath = r.path, queryId = r.queryId;
        var relativePath = newRelativePath(queryPath, path);
        var changeTree = ImmutableTree.fromObject(changedChildren);
        var op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);
        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
    } else // We've already removed the query. No big deal, ignore the update
    return [];
}
/**
 * Add an event callback for the specified query.
 *
 * @returns Events to raise.
 */ function syncTreeAddEventRegistration(syncTree, query, eventRegistration) {
    var path = query._path;
    var serverCache = null;
    var foundAncestorDefaultView = false;
    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.
    // Consider optimizing this once there's a better understanding of what actual behavior will be.
    syncTree.syncPointTree_.foreachOnPath(path, function(pathToSyncPoint, sp) {
        var relativePath = newRelativePath(pathToSyncPoint, path);
        serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);
        foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(sp);
    });
    var syncPoint = syncTree.syncPointTree_.get(path);
    if (!syncPoint) {
        syncPoint = new SyncPoint();
        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);
    } else {
        foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);
        serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
    }
    var serverCacheComplete;
    if (serverCache != null) serverCacheComplete = true;
    else {
        serverCacheComplete = false;
        serverCache = ChildrenNode.EMPTY_NODE;
        var subtree = syncTree.syncPointTree_.subtree(path);
        subtree.foreachChild(function(childName, childSyncPoint) {
            var completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());
            if (completeCache) serverCache = serverCache.updateImmediateChild(childName, completeCache);
        });
    }
    var viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);
    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {
        // We need to track a tag for this query
        var queryKey = syncTreeMakeQueryKey_(query);
        _util.assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');
        var tag = syncTreeGetNextQueryTag_();
        syncTree.queryToTagMap.set(queryKey, tag);
        syncTree.tagToQueryMap.set(tag, queryKey);
    }
    var writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);
    var events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);
    if (!viewAlreadyExists && !foundAncestorDefaultView) {
        var view = syncPointViewForQuery(syncPoint, query);
        events = events.concat(syncTreeSetupListener_(syncTree, query, view));
    }
    return events;
}
/**
 * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a
 * listener above it, we will get a false "null". This shouldn't be a problem because transactions will always
 * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->
 *     <incremented total> as the write is applied locally and then acknowledged at the server.
 *
 * Note: this method will *include* hidden writes from transaction with applyLocally set to false.
 *
 * @param path - The path to the data we want
 * @param writeIdsToExclude - A specific set to be excluded
 */ function syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {
    var includeHiddenSets = true;
    var writeTree = syncTree.pendingWriteTree_;
    var serverCache = syncTree.syncPointTree_.findOnPath(path, function(pathSoFar, syncPoint) {
        var relativePath = newRelativePath(pathSoFar, path);
        var serverCache1 = syncPointGetCompleteServerCache(syncPoint, relativePath);
        if (serverCache1) return serverCache1;
    });
    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);
}
function syncTreeGetServerValue(syncTree, query) {
    var path = query._path;
    var serverCache = null;
    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.
    // Consider optimizing this once there's a better understanding of what actual behavior will be.
    syncTree.syncPointTree_.foreachOnPath(path, function(pathToSyncPoint, sp) {
        var relativePath = newRelativePath(pathToSyncPoint, path);
        serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);
    });
    var syncPoint = syncTree.syncPointTree_.get(path);
    if (!syncPoint) {
        syncPoint = new SyncPoint();
        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);
    } else serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
    var serverCacheComplete = serverCache != null;
    var serverCacheNode = serverCacheComplete ? new CacheNode(serverCache, true, false) : null;
    var writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);
    var view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);
    return viewGetCompleteNode(view);
}
/**
 * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.
 *
 * NOTES:
 * - Descendant SyncPoints will be visited first (since we raise events depth-first).
 *
 * - We call applyOperation() on each SyncPoint passing three things:
 *   1. A version of the Operation that has been made relative to the SyncPoint location.
 *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.
 *   3. A snapshot Node with cached server data, if we have it.
 *
 * - We concatenate all of the events returned by each SyncPoint and return the result.
 */ function syncTreeApplyOperationToSyncPoints_(syncTree, operation) {
    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));
}
/**
 * Recursive helper for applyOperationToSyncPoints_
 */ function syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {
    if (pathIsEmpty(operation.path)) return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);
    else {
        var syncPoint = syncPointTree.get(newEmptyPath());
        // If we don't have cached server data, see if we can get it from this SyncPoint.
        if (serverCache == null && syncPoint != null) serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
        var events = [];
        var childName = pathGetFront(operation.path);
        var childOperation = operation.operationForChild(childName);
        var childTree = syncPointTree.children.get(childName);
        if (childTree && childOperation) {
            var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;
            var childWritesCache = writeTreeRefChild(writesCache, childName);
            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));
        }
        if (syncPoint) events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));
        return events;
    }
}
/**
 * Recursive helper for applyOperationToSyncPoints_
 */ function syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {
    var syncPoint = syncPointTree.get(newEmptyPath());
    // If we don't have cached server data, see if we can get it from this SyncPoint.
    if (serverCache == null && syncPoint != null) serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
    var events = [];
    syncPointTree.children.inorderTraversal(function(childName, childTree) {
        var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;
        var childWritesCache = writeTreeRefChild(writesCache, childName);
        var childOperation = operation.operationForChild(childName);
        if (childOperation) events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));
    });
    if (syncPoint) events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));
    return events;
}
function syncTreeCreateListenerForView_(syncTree, view) {
    var query = view.query;
    var tag = syncTreeTagForQuery_(syncTree, query);
    return {
        hashFn: function() {
            var cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;
            return cache.hash();
        },
        onComplete: function(status) {
            if (status === 'ok') {
                if (tag) return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);
                else return syncTreeApplyListenComplete(syncTree, query._path);
            } else {
                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.
                // Note that this may need to be scoped to just this listener if we change permissions on filtered children
                var error2 = errorForServerCode(status, query);
                return syncTreeRemoveEventRegistration(syncTree, query, /*eventRegistration*/ null, error2);
            }
        }
    };
}
/**
 * Return the tag associated with the given query.
 */ function syncTreeTagForQuery_(syncTree, query) {
    var queryKey = syncTreeMakeQueryKey_(query);
    return syncTree.queryToTagMap.get(queryKey);
}
/**
 * Given a query, computes a "queryKey" suitable for use in our queryToTagMap_.
 */ function syncTreeMakeQueryKey_(query) {
    return query._path.toString() + '$' + query._queryIdentifier;
}
/**
 * Return the query associated with the given tag, if we have one
 */ function syncTreeQueryKeyForTag_(syncTree, tag) {
    return syncTree.tagToQueryMap.get(tag);
}
/**
 * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.
 */ function syncTreeParseQueryKey_(queryKey) {
    var splitIndex = queryKey.indexOf('$');
    _util.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');
    return {
        queryId: queryKey.substr(splitIndex + 1),
        path: new Path(queryKey.substr(0, splitIndex))
    };
}
/**
 * A helper method to apply tagged operations
 */ function syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {
    var syncPoint = syncTree.syncPointTree_.get(queryPath);
    _util.assert(syncPoint, "Missing sync point for query tag that we're tracking");
    var writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);
    return syncPointApplyOperation(syncPoint, operation, writesCache, null);
}
/**
 * This collapses multiple unfiltered views into a single view, since we only need a single
 * listener for them.
 */ function syncTreeCollectDistinctViewsForSubTree_(subtree) {
    return subtree.fold(function(relativePath, maybeChildSyncPoint, childMap) {
        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {
            var completeView = syncPointGetCompleteView(maybeChildSyncPoint);
            return [
                completeView
            ];
        } else {
            // No complete view here, flatten any deeper listens into an array
            var views_1 = [];
            if (maybeChildSyncPoint) views_1 = syncPointGetQueryViews(maybeChildSyncPoint);
            each(childMap, function(_key, childViews) {
                views_1 = views_1.concat(childViews);
            });
            return views_1;
        }
    });
}
/**
 * Normalizes a query to a query we send the server for listening
 *
 * @returns The normalized query
 */ function syncTreeQueryForListening_(query) {
    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) // We treat queries that load all data as default queries
    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits
    // from Query
    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);
    else return query;
}
function syncTreeRemoveTags_(syncTree, queries) {
    for(var j = 0; j < queries.length; ++j){
        var removedQuery = queries[j];
        if (!removedQuery._queryParams.loadsAllData()) {
            // We should have a tag for this
            var removedQueryKey = syncTreeMakeQueryKey_(removedQuery);
            var removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);
            syncTree.queryToTagMap.delete(removedQueryKey);
            syncTree.tagToQueryMap.delete(removedQueryTag);
        }
    }
}
/**
 * Static accessor for query tags.
 */ function syncTreeGetNextQueryTag_() {
    return syncTreeNextQueryTag_++;
}
/**
 * For a given new listen, manage the de-duplication of outstanding subscriptions.
 *
 * @returns This method can return events to support synchronous data sources
 */ function syncTreeSetupListener_(syncTree, query, view) {
    var path = query._path;
    var tag = syncTreeTagForQuery_(syncTree, query);
    var listener = syncTreeCreateListenerForView_(syncTree, view);
    var events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);
    var subtree = syncTree.syncPointTree_.subtree(path);
    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we
    // may need to shadow other listens as well.
    if (tag) _util.assert(!syncPointHasCompleteView(subtree.value), "If we're adding a query, it shouldn't be shadowed");
    else {
        // Shadow everything at or below this location, this is a default listener.
        var queriesToStop = subtree.fold(function(relativePath, maybeChildSyncPoint, childMap) {
            if (!pathIsEmpty(relativePath) && maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) return [
                syncPointGetCompleteView(maybeChildSyncPoint).query
            ];
            else {
                // No default listener here, flatten any deeper queries into an array
                var queries_1 = [];
                if (maybeChildSyncPoint) queries_1 = queries_1.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(function(view1) {
                    return view1.query;
                }));
                each(childMap, function(_key, childQueries) {
                    queries_1 = queries_1.concat(childQueries);
                });
                return queries_1;
            }
        });
        for(var i = 0; i < queriesToStop.length; ++i){
            var queryToStop = queriesToStop[i];
            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery_(syncTree, queryToStop));
        }
    }
    return events;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var ExistingValueProvider = function() {
    function ExistingValueProvider1(node_) {
        this.node_ = node_;
    }
    ExistingValueProvider1.prototype.getImmediateChild = function(childName) {
        var child = this.node_.getImmediateChild(childName);
        return new ExistingValueProvider1(child);
    };
    ExistingValueProvider1.prototype.node = function() {
        return this.node_;
    };
    return ExistingValueProvider1;
}();
var DeferredValueProvider = function() {
    function DeferredValueProvider1(syncTree, path) {
        this.syncTree_ = syncTree;
        this.path_ = path;
    }
    DeferredValueProvider1.prototype.getImmediateChild = function(childName) {
        var childPath = pathChild(this.path_, childName);
        return new DeferredValueProvider1(this.syncTree_, childPath);
    };
    DeferredValueProvider1.prototype.node = function() {
        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);
    };
    return DeferredValueProvider1;
}();
/**
 * Generate placeholders for deferred values.
 */ var generateWithValues = function(values) {
    values = values || {
    };
    values['timestamp'] = values['timestamp'] || new Date().getTime();
    return values;
};
/**
 * Value to use when firing local events. When writing server values, fire
 * local events with an approximate value, otherwise return value as-is.
 */ var resolveDeferredLeafValue = function(value, existingVal, serverValues) {
    if (!value || typeof value !== 'object') return value;
    _util.assert('.sv' in value, 'Unexpected leaf node or priority contents');
    if (typeof value['.sv'] === 'string') return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);
    else if (typeof value['.sv'] === 'object') return resolveComplexDeferredValue(value['.sv'], existingVal);
    else _util.assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));
};
var resolveScalarDeferredValue = function(op, existing, serverValues) {
    switch(op){
        case 'timestamp':
            return serverValues['timestamp'];
        default:
            _util.assert(false, 'Unexpected server value: ' + op);
    }
};
var resolveComplexDeferredValue = function(op, existing, unused) {
    if (!op.hasOwnProperty('increment')) _util.assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));
    var delta = op['increment'];
    if (typeof delta !== 'number') _util.assert(false, 'Unexpected increment value: ' + delta);
    var existingNode = existing.node();
    _util.assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');
    // Incrementing a non-number sets the value to the incremented amount
    if (!existingNode.isLeafNode()) return delta;
    var leaf = existingNode;
    var existingVal = leaf.getValue();
    if (typeof existingVal !== 'number') return delta;
    // No need to do over/underflow arithmetic here because JS only handles floats under the covers
    return existingVal + delta;
};
/**
 * Recursively replace all deferred values and priorities in the tree with the
 * specified generated replacement values.
 * @param path - path to which write is relative
 * @param node - new data written at path
 * @param syncTree - current data
 */ var resolveDeferredValueTree = function(path, node, syncTree, serverValues) {
    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);
};
/**
 * Recursively replace all deferred values and priorities in the node with the
 * specified generated replacement values.  If there are no server values in the node,
 * it'll be returned as-is.
 */ var resolveDeferredValueSnapshot = function(node, existing, serverValues) {
    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);
};
function resolveDeferredValue(node, existingVal, serverValues) {
    var rawPri = node.getPriority().val();
    var priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);
    var newNode;
    if (node.isLeafNode()) {
        var leafNode = node;
        var value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);
        if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) return new LeafNode(value, nodeFromJSON(priority));
        else return node;
    } else {
        var childrenNode = node;
        newNode = childrenNode;
        if (priority !== childrenNode.getPriority().val()) newNode = newNode.updatePriority(new LeafNode(priority));
        childrenNode.forEachChild(PRIORITY_INDEX, function(childName, childNode) {
            var newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);
            if (newChildNode !== childNode) newNode = newNode.updateImmediateChild(childName, newChildNode);
        });
        return newNode;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A light-weight tree, traversable by path.  Nodes can have both values and children.
 * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty
 * children.
 */ var Tree = function() {
    /**
     * @param name - Optional name of the node.
     * @param parent - Optional parent node.
     * @param node - Optional node to wrap.
     */ function Tree1(name1, parent, node) {
        if (name1 === void 0) name1 = '';
        if (parent === void 0) parent = null;
        if (node === void 0) node = {
            children: {
            },
            childCount: 0
        };
        this.name = name1;
        this.parent = parent;
        this.node = node;
    }
    return Tree1;
}();
/**
 * Returns a sub-Tree for the given path.
 *
 * @param pathObj - Path to look up.
 * @returns Tree for path.
 */ function treeSubTree(tree, pathObj) {
    // TODO: Require pathObj to be Path?
    var path = pathObj instanceof Path ? pathObj : new Path(pathObj);
    var child = tree, next = pathGetFront(path);
    while(next !== null){
        var childNode = _util.safeGet(child.node.children, next) || {
            children: {
            },
            childCount: 0
        };
        child = new Tree(next, child, childNode);
        path = pathPopFront(path);
        next = pathGetFront(path);
    }
    return child;
}
/**
 * Returns the data associated with this tree node.
 *
 * @returns The data or null if no data exists.
 */ function treeGetValue(tree) {
    return tree.node.value;
}
/**
 * Sets data to this tree node.
 *
 * @param value - Value to set.
 */ function treeSetValue(tree, value) {
    tree.node.value = value;
    treeUpdateParents(tree);
}
/**
 * @returns Whether the tree has any children.
 */ function treeHasChildren(tree) {
    return tree.node.childCount > 0;
}
/**
 * @returns Whethe rthe tree is empty (no value or children).
 */ function treeIsEmpty(tree) {
    return treeGetValue(tree) === undefined && !treeHasChildren(tree);
}
/**
 * Calls action for each child of this tree node.
 *
 * @param action - Action to be called for each child.
 */ function treeForEachChild(tree, action) {
    each(tree.node.children, function(child, childTree) {
        action(new Tree(child, tree, childTree));
    });
}
/**
 * Does a depth-first traversal of this node's descendants, calling action for each one.
 *
 * @param action - Action to be called for each child.
 * @param includeSelf - Whether to call action on this node as well. Defaults to
 *   false.
 * @param childrenFirst - Whether to call action on children before calling it on
 *   parent.
 */ function treeForEachDescendant(tree, action, includeSelf, childrenFirst) {
    if (includeSelf && !childrenFirst) action(tree);
    treeForEachChild(tree, function(child) {
        treeForEachDescendant(child, action, true, childrenFirst);
    });
    if (includeSelf && childrenFirst) action(tree);
}
/**
 * Calls action on each ancestor node.
 *
 * @param action - Action to be called on each parent; return
 *   true to abort.
 * @param includeSelf - Whether to call action on this node as well.
 * @returns true if the action callback returned true.
 */ function treeForEachAncestor(tree, action, includeSelf) {
    var node = includeSelf ? tree : tree.parent;
    while(node !== null){
        if (action(node)) return true;
        node = node.parent;
    }
    return false;
}
/**
 * @returns The path of this tree node, as a Path.
 */ function treeGetPath(tree) {
    return new Path(tree.parent === null ? tree.name : treeGetPath(tree.parent) + '/' + tree.name);
}
/**
 * Adds or removes this child from its parent based on whether it's empty or not.
 */ function treeUpdateParents(tree) {
    if (tree.parent !== null) treeUpdateChild(tree.parent, tree.name, tree);
}
/**
 * Adds or removes the passed child to this tree node, depending on whether it's empty.
 *
 * @param childName - The name of the child to update.
 * @param child - The child to update.
 */ function treeUpdateChild(tree, childName, child) {
    var childEmpty = treeIsEmpty(child);
    var childExists = _util.contains(tree.node.children, childName);
    if (childEmpty && childExists) {
        delete tree.node.children[childName];
        tree.node.childCount--;
        treeUpdateParents(tree);
    } else if (!childEmpty && !childExists) {
        tree.node.children[childName] = child.node;
        tree.node.childCount++;
        treeUpdateParents(tree);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * True for invalid Firebase keys
 */ var INVALID_KEY_REGEX_ = /[\[\].#$\/\u0000-\u001F\u007F]/;
/**
 * True for invalid Firebase paths.
 * Allows '/' in paths.
 */ var INVALID_PATH_REGEX_ = /[\[\].#$\u0000-\u001F\u007F]/;
/**
 * Maximum number of characters to allow in leaf value
 */ var MAX_LEAF_SIZE_ = 10485760;
var isValidKey = function(key) {
    return typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key);
};
var isValidPathString = function(pathString) {
    return typeof pathString === 'string' && pathString.length !== 0 && !INVALID_PATH_REGEX_.test(pathString);
};
var isValidRootPathString = function(pathString) {
    if (pathString) // Allow '/.info/' at the beginning.
    pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
    return isValidPathString(pathString);
};
var isValidPriority = function(priority) {
    return priority === null || typeof priority === 'string' || typeof priority === 'number' && !isInvalidJSONNumber(priority) || priority && typeof priority === 'object' && // eslint-disable-next-line @typescript-eslint/no-explicit-any
    _util.contains(priority, '.sv');
};
/**
 * Pre-validate a datum passed as an argument to Firebase function.
 */ var validateFirebaseDataArg = function(fnName, value, path, optional) {
    if (optional && value === undefined) return;
    validateFirebaseData(_util.errorPrefix(fnName, 'value'), value, path);
};
/**
 * Validate a data object client-side before sending to server.
 */ var validateFirebaseData = function(errorPrefix, data, path_) {
    var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;
    if (data === undefined) throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));
    if (typeof data === 'function') throw new Error(errorPrefix + 'contains a function ' + validationPathToErrorString(path) + ' with contents = ' + data.toString());
    if (isInvalidJSONNumber(data)) throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + validationPathToErrorString(path));
    // Check max leaf size, but try to avoid the utf8 conversion if we can.
    if (typeof data === 'string' && data.length > MAX_LEAF_SIZE_ / 3 && _util.stringLength(data) > MAX_LEAF_SIZE_) throw new Error(errorPrefix + 'contains a string greater than ' + MAX_LEAF_SIZE_ + ' utf8 bytes ' + validationPathToErrorString(path) + " ('" + data.substring(0, 50) + "...')");
    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON
    // to save extra walking of large objects.
    if (data && typeof data === 'object') {
        var hasDotValue_1 = false;
        var hasActualChild_1 = false;
        each(data, function(key, value) {
            if (key === '.value') hasDotValue_1 = true;
            else if (key !== '.priority' && key !== '.sv') {
                hasActualChild_1 = true;
                if (!isValidKey(key)) throw new Error(errorPrefix + ' contains an invalid key (' + key + ') ' + validationPathToErrorString(path) + '.  Keys must be non-empty strings ' + 'and can\'t contain ".", "#", "$", "/", "[", or "]"');
            }
            validationPathPush(path, key);
            validateFirebaseData(errorPrefix, value, path);
            validationPathPop(path);
        });
        if (hasDotValue_1 && hasActualChild_1) throw new Error(errorPrefix + ' contains ".value" child ' + validationPathToErrorString(path) + ' in addition to actual children.');
    }
};
/**
 * Pre-validate paths passed in the firebase function.
 */ var validateFirebaseMergePaths = function(errorPrefix, mergePaths) {
    var i, curPath;
    for(i = 0; i < mergePaths.length; i++){
        curPath = mergePaths[i];
        var keys = pathSlice(curPath);
        for(var j = 0; j < keys.length; j++){
            if (keys[j] === '.priority' && j === keys.length - 1) ;
            else if (!isValidKey(keys[j])) throw new Error(errorPrefix + 'contains an invalid key (' + keys[j] + ') in path ' + curPath.toString() + '. Keys must be non-empty strings ' + 'and can\'t contain ".", "#", "$", "/", "[", or "]"');
        }
    }
    // Check that update keys are not descendants of each other.
    // We rely on the property that sorting guarantees that ancestors come
    // right before descendants.
    mergePaths.sort(pathCompare);
    var prevPath = null;
    for(i = 0; i < mergePaths.length; i++){
        curPath = mergePaths[i];
        if (prevPath !== null && pathContains(prevPath, curPath)) throw new Error(errorPrefix + 'contains a path ' + prevPath.toString() + ' that is ancestor of another path ' + curPath.toString());
        prevPath = curPath;
    }
};
/**
 * pre-validate an object passed as an argument to firebase function (
 * must be an object - e.g. for firebase.update()).
 */ var validateFirebaseMergeDataArg = function(fnName, data, path, optional) {
    if (optional && data === undefined) return;
    var errorPrefix$1 = _util.errorPrefix(fnName, 'values');
    if (!(data && typeof data === 'object') || Array.isArray(data)) throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');
    var mergePaths = [];
    each(data, function(key, value) {
        var curPath = new Path(key);
        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));
        if (pathGetBack(curPath) === '.priority') {
            if (!isValidPriority(value)) throw new Error(errorPrefix$1 + "contains an invalid value for '" + curPath.toString() + "', which must be a valid " + 'Firebase priority (a string, finite number, server value, or null).');
        }
        mergePaths.push(curPath);
    });
    validateFirebaseMergePaths(errorPrefix$1, mergePaths);
};
var validatePriority = function(fnName, priority, optional) {
    if (optional && priority === undefined) return;
    if (isInvalidJSONNumber(priority)) throw new Error(_util.errorPrefix(fnName, 'priority') + 'is ' + priority.toString() + ', but must be a valid Firebase priority (a string, finite number, ' + 'server value, or null).');
    // Special case to allow importing data with a .sv.
    if (!isValidPriority(priority)) throw new Error(_util.errorPrefix(fnName, 'priority') + 'must be a valid Firebase priority ' + '(a string, finite number, server value, or null).');
};
var validateEventType = function(fnName, eventType, optional) {
    if (optional && eventType === undefined) return;
    switch(eventType){
        case 'value':
        case 'child_added':
        case 'child_removed':
        case 'child_changed':
        case 'child_moved':
            break;
        default:
            throw new Error(_util.errorPrefix(fnName, 'eventType') + 'must be a valid event type = "value", "child_added", "child_removed", ' + '"child_changed", or "child_moved".');
    }
};
var validateKey = function(fnName, argumentName, key, optional) {
    if (optional && key === undefined) return;
    if (!isValidKey(key)) throw new Error(_util.errorPrefix(fnName, argumentName) + 'was an invalid key = "' + key + '".  Firebase keys must be non-empty strings and ' + 'can\'t contain ".", "#", "$", "/", "[", or "]").');
};
var validatePathString = function(fnName, argumentName, pathString, optional) {
    if (optional && pathString === undefined) return;
    if (!isValidPathString(pathString)) throw new Error(_util.errorPrefix(fnName, argumentName) + 'was an invalid path = "' + pathString + '". Paths must be non-empty strings and ' + 'can\'t contain ".", "#", "$", "[", or "]"');
};
var validateRootPathString = function(fnName, argumentName, pathString, optional) {
    if (pathString) // Allow '/.info/' at the beginning.
    pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
    validatePathString(fnName, argumentName, pathString, optional);
};
var validateWritablePath = function(fnName, path) {
    if (pathGetFront(path) === '.info') throw new Error(fnName + " failed = Can't modify data under /.info/");
};
var validateUrl = function(fnName, parsedUrl) {
    // TODO = Validate server better.
    var pathString = parsedUrl.path.toString();
    if (!(typeof parsedUrl.repoInfo.host === 'string') || parsedUrl.repoInfo.host.length === 0 || !isValidKey(parsedUrl.repoInfo.namespace) && parsedUrl.repoInfo.host.split(':')[0] !== 'localhost' || pathString.length !== 0 && !isValidRootPathString(pathString)) throw new Error(_util.errorPrefix(fnName, 'url') + 'must be a valid firebase URL and ' + 'the path can\'t contain ".", "#", "$", "[", or "]".');
};
var validateBoolean = function(fnName, argumentName, bool, optional) {
    if (optional && bool === undefined) return;
    if (typeof bool !== 'boolean') throw new Error(_util.errorPrefix(fnName, argumentName) + 'must be a boolean.');
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The event queue serves a few purposes:
 * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more
 *    events being queued.
 * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,
 *    raiseQueuedEvents() is called again, the "inner" call will pick up raising events where the "outer" call
 *    left off, ensuring that the events are still raised synchronously and in order.
 * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued
 *    events are raised synchronously.
 *
 * NOTE: This can all go away if/when we move to async events.
 *
 */ var EventQueue = function() {
    function EventQueue1() {
        this.eventLists_ = [];
        /**
         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.
         */ this.recursionDepth_ = 0;
    }
    return EventQueue1;
}();
/**
 * @param eventDataList - The new events to queue.
 */ function eventQueueQueueEvents(eventQueue, eventDataList) {
    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.
    var currList = null;
    for(var i = 0; i < eventDataList.length; i++){
        var data = eventDataList[i];
        var path = data.getPath();
        if (currList !== null && !pathEquals(path, currList.path)) {
            eventQueue.eventLists_.push(currList);
            currList = null;
        }
        if (currList === null) currList = {
            events: [],
            path: path
        };
        currList.events.push(data);
    }
    if (currList) eventQueue.eventLists_.push(currList);
}
/**
 * Queues the specified events and synchronously raises all events (including previously queued ones)
 * for the specified path.
 *
 * It is assumed that the new events are all for the specified path.
 *
 * @param path - The path to raise events for.
 * @param eventDataList - The new events to raise.
 */ function eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {
    eventQueueQueueEvents(eventQueue, eventDataList);
    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, function(eventPath) {
        return pathEquals(eventPath, path);
    });
}
/**
 * Queues the specified events and synchronously raises all events (including previously queued ones) for
 * locations related to the specified change path (i.e. all ancestors and descendants).
 *
 * It is assumed that the new events are all related (ancestor or descendant) to the specified path.
 *
 * @param changedPath - The path to raise events for.
 * @param eventDataList - The events to raise
 */ function eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {
    eventQueueQueueEvents(eventQueue, eventDataList);
    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, function(eventPath) {
        return pathContains(eventPath, changedPath) || pathContains(changedPath, eventPath);
    });
}
function eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {
    eventQueue.recursionDepth_++;
    var sentAll = true;
    for(var i = 0; i < eventQueue.eventLists_.length; i++){
        var eventList = eventQueue.eventLists_[i];
        if (eventList) {
            var eventPath = eventList.path;
            if (predicate(eventPath)) {
                eventListRaise(eventQueue.eventLists_[i]);
                eventQueue.eventLists_[i] = null;
            } else sentAll = false;
        }
    }
    if (sentAll) eventQueue.eventLists_ = [];
    eventQueue.recursionDepth_--;
}
/**
 * Iterates through the list and raises each event
 */ function eventListRaise(eventList) {
    for(var i = 0; i < eventList.events.length; i++){
        var eventData = eventList.events[i];
        if (eventData !== null) {
            eventList.events[i] = null;
            var eventFn = eventData.getEventRunner();
            if (logger) log('event: ' + eventData.toString());
            exceptionGuard(eventFn);
        }
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var INTERRUPT_REASON = 'repo_interrupt';
/**
 * If a transaction does not succeed after 25 retries, we abort it. Among other
 * things this ensure that if there's ever a bug causing a mismatch between
 * client / server hashes for some data, we won't retry indefinitely.
 */ var MAX_TRANSACTION_RETRIES = 25;
/**
 * A connection to a single data repository.
 */ var Repo = function() {
    function Repo1(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {
        this.repoInfo_ = repoInfo_;
        this.forceRestClient_ = forceRestClient_;
        this.authTokenProvider_ = authTokenProvider_;
        this.appCheckProvider_ = appCheckProvider_;
        this.dataUpdateCount = 0;
        this.statsListener_ = null;
        this.eventQueue_ = new EventQueue();
        this.nextWriteId_ = 1;
        this.interceptServerDataCallback_ = null;
        /** A list of data pieces and paths to be set when this client disconnects. */ this.onDisconnect_ = newSparseSnapshotTree();
        /** Stores queues of outstanding transactions for Firebase locations. */ this.transactionQueueTree_ = new Tree();
        // TODO: This should be @private but it's used by test_access.js and internal.js
        this.persistentConnection_ = null;
        // This key is intentionally not updated if RepoInfo is later changed or replaced
        this.key = this.repoInfo_.toURLString();
    }
    /**
     * @returns The URL corresponding to the root of this Firebase.
     */ Repo1.prototype.toString = function() {
        return (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host;
    };
    return Repo1;
}();
function repoStart(repo, appId, authOverride) {
    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);
    if (repo.forceRestClient_ || beingCrawled()) {
        repo.server_ = new ReadonlyRestClient1(repo.repoInfo_, function(pathString, data, isMerge, tag) {
            repoOnDataUpdate(repo, pathString, data, isMerge, tag);
        }, repo.authTokenProvider_, repo.appCheckProvider_);
        // Minor hack: Fire onConnect immediately, since there's no actual connection.
        setTimeout(function() {
            return repoOnConnectStatus(repo, /* connectStatus= */ true);
        }, 0);
    } else {
        // Validate authOverride
        if (typeof authOverride !== 'undefined' && authOverride !== null) {
            if (typeof authOverride !== 'object') throw new Error('Only objects are supported for option databaseAuthVariableOverride');
            try {
                _util.stringify(authOverride);
            } catch (e) {
                throw new Error('Invalid authOverride provided: ' + e);
            }
        }
        repo.persistentConnection_ = new PersistentConnection1(repo.repoInfo_, appId, function(pathString, data, isMerge, tag) {
            repoOnDataUpdate(repo, pathString, data, isMerge, tag);
        }, function(connectStatus) {
            repoOnConnectStatus(repo, connectStatus);
        }, function(updates) {
            repoOnServerInfoUpdate(repo, updates);
        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);
        repo.server_ = repo.persistentConnection_;
    }
    repo.authTokenProvider_.addTokenChangeListener(function(token) {
        repo.server_.refreshAuthToken(token);
    });
    repo.appCheckProvider_.addTokenChangeListener(function(result) {
        repo.server_.refreshAppCheckToken(result.token);
    });
    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),
    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.
    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, function() {
        return new StatsReporter(repo.stats_, repo.server_);
    });
    // Used for .info.
    repo.infoData_ = new SnapshotHolder();
    repo.infoSyncTree_ = new SyncTree({
        startListening: function(query, tag, currentHashFn, onComplete) {
            var infoEvents = [];
            var node = repo.infoData_.getNode(query._path);
            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events
            // on initial data...
            if (!node.isEmpty()) {
                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);
                setTimeout(function() {
                    onComplete('ok');
                }, 0);
            }
            return infoEvents;
        },
        stopListening: function() {
        }
    });
    repoUpdateInfo(repo, 'connected', false);
    repo.serverSyncTree_ = new SyncTree({
        startListening: function(query, tag, currentHashFn, onComplete) {
            repo.server_.listen(query, currentHashFn, tag, function(status, data) {
                var events = onComplete(status, data);
                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);
            });
            // No synchronous events for network-backed sync trees
            return [];
        },
        stopListening: function(query, tag) {
            repo.server_.unlisten(query, tag);
        }
    });
}
/**
 * @returns The time in milliseconds, taking the server offset into account if we have one.
 */ function repoServerTime(repo) {
    var offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));
    var offset = offsetNode.val() || 0;
    return new Date().getTime() + offset;
}
/**
 * Generate ServerValues using some variables from the repo object.
 */ function repoGenerateServerValues(repo) {
    return generateWithValues({
        timestamp: repoServerTime(repo)
    });
}
/**
 * Called by realtime when we get new messages from the server.
 */ function repoOnDataUpdate(repo, pathString, data, isMerge, tag) {
    // For testing.
    repo.dataUpdateCount++;
    var path = new Path(pathString);
    data = repo.interceptServerDataCallback_ ? repo.interceptServerDataCallback_(pathString, data) : data;
    var events = [];
    if (tag) {
        if (isMerge) {
            var taggedChildren = _util.map(data, function(raw) {
                return nodeFromJSON(raw);
            });
            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);
        } else {
            var taggedSnap = nodeFromJSON(data);
            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);
        }
    } else if (isMerge) {
        var changedChildren = _util.map(data, function(raw) {
            return nodeFromJSON(raw);
        });
        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);
    } else {
        var snap = nodeFromJSON(data);
        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);
    }
    var affectedPath = path;
    if (events.length > 0) // Since we have a listener outstanding for each transaction, receiving any events
    // is a proxy for some change having occurred.
    affectedPath = repoRerunTransactions(repo, path);
    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);
}
// TODO: This should be @private but it's used by test_access.js and internal.js
function repoInterceptServerData(repo, callback) {
    repo.interceptServerDataCallback_ = callback;
}
function repoOnConnectStatus(repo, connectStatus) {
    repoUpdateInfo(repo, 'connected', connectStatus);
    if (connectStatus === false) repoRunOnDisconnectEvents(repo);
}
function repoOnServerInfoUpdate(repo, updates) {
    each(updates, function(key, value) {
        repoUpdateInfo(repo, key, value);
    });
}
function repoUpdateInfo(repo, pathString, value) {
    var path = new Path('/.info/' + pathString);
    var newNode = nodeFromJSON(value);
    repo.infoData_.updateSnapshot(path, newNode);
    var events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);
    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
}
function repoGetNextWriteId(repo) {
    return repo.nextWriteId_++;
}
/**
 * The purpose of `getValue` is to return the latest known value
 * satisfying `query`.
 *
 * This method will first check for in-memory cached values
 * belonging to active listeners. If they are found, such values
 * are considered to be the most up-to-date.
 *
 * If the client is not connected, this method will try to
 * establish a connection and request the value for `query`. If
 * the client is not able to retrieve the query result, it reports
 * an error.
 *
 * @param query - The query to surface a value for.
 */ function repoGetValue(repo, query) {
    // Only active queries are cached. There is no persisted cache.
    var cached = syncTreeGetServerValue(repo.serverSyncTree_, query);
    if (cached != null) return Promise.resolve(cached);
    return repo.server_.get(query).then(function(payload) {
        var node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());
        var events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);
        eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);
        return Promise.resolve(node);
    }, function(err) {
        repoLog(repo, 'get for query ' + _util.stringify(query) + ' failed: ' + err);
        return Promise.reject(new Error(err));
    });
}
function repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {
    repoLog(repo, 'set', {
        path: path.toString(),
        value: newVal,
        priority: newPriority
    });
    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or
    // (b) store unresolved paths on JSON parse
    var serverValues = repoGenerateServerValues(repo);
    var newNodeUnresolved = nodeFromJSON(newVal, newPriority);
    var existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);
    var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);
    var writeId = repoGetNextWriteId(repo);
    var events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);
    eventQueueQueueEvents(repo.eventQueue_, events);
    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), function(status, errorReason) {
        var success = status === 'ok';
        if (!success) warn('set at ' + path + ' failed: ' + status);
        var clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);
        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);
        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
    });
    var affectedPath = repoAbortTransactions(repo, path);
    repoRerunTransactions(repo, affectedPath);
    // We queued the events above, so just flush the queue here
    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);
}
function repoUpdate(repo, path, childrenToMerge, onComplete) {
    repoLog(repo, 'update', {
        path: path.toString(),
        value: childrenToMerge
    });
    // Start with our existing data and merge each child into it.
    var empty = true;
    var serverValues = repoGenerateServerValues(repo);
    var changedChildren = {
    };
    each(childrenToMerge, function(changedKey, changedValue) {
        empty = false;
        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);
    });
    if (!empty) {
        var writeId_1 = repoGetNextWriteId(repo);
        var events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId_1);
        eventQueueQueueEvents(repo.eventQueue_, events);
        repo.server_.merge(path.toString(), childrenToMerge, function(status, errorReason) {
            var success = status === 'ok';
            if (!success) warn('update at ' + path + ' failed: ' + status);
            var clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId_1, !success);
            var affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;
            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);
            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
        });
        each(childrenToMerge, function(changedPath) {
            var affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));
            repoRerunTransactions(repo, affectedPath);
        });
        // We queued the events above, so just flush the queue here
        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);
    } else {
        log("update() called with empty data.  Don't do anything.");
        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);
    }
}
/**
 * Applies all of the changes stored up in the onDisconnect_ tree.
 */ function repoRunOnDisconnectEvents(repo) {
    repoLog(repo, 'onDisconnectEvents');
    var serverValues = repoGenerateServerValues(repo);
    var resolvedOnDisconnectTree = newSparseSnapshotTree();
    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), function(path, node) {
        var resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);
        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);
    });
    var events = [];
    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), function(path, snap) {
        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));
        var affectedPath = repoAbortTransactions(repo, path);
        repoRerunTransactions(repo, affectedPath);
    });
    repo.onDisconnect_ = newSparseSnapshotTree();
    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);
}
function repoOnDisconnectCancel(repo, path, onComplete) {
    repo.server_.onDisconnectCancel(path.toString(), function(status, errorReason) {
        if (status === 'ok') sparseSnapshotTreeForget(repo.onDisconnect_, path);
        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
    });
}
function repoOnDisconnectSet(repo, path, value, onComplete) {
    var newNode = nodeFromJSON(value);
    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function(status, errorReason) {
        if (status === 'ok') sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);
        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
    });
}
function repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {
    var newNode = nodeFromJSON(value, priority);
    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function(status, errorReason) {
        if (status === 'ok') sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);
        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
    });
}
function repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {
    if (_util.isEmpty(childrenToMerge)) {
        log("onDisconnect().update() called with empty data.  Don't do anything.");
        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);
        return;
    }
    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, function(status, errorReason) {
        if (status === 'ok') each(childrenToMerge, function(childName, childNode) {
            var newChildNode = nodeFromJSON(childNode);
            sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);
        });
        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
    });
}
function repoAddEventCallbackForQuery(repo, query, eventRegistration) {
    var events;
    if (pathGetFront(query._path) === '.info') events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);
    else events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);
    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);
}
function repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {
    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof
    // a little bit by handling the return values anyways.
    var events;
    if (pathGetFront(query._path) === '.info') events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);
    else events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);
    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);
}
function repoInterrupt(repo) {
    if (repo.persistentConnection_) repo.persistentConnection_.interrupt(INTERRUPT_REASON);
}
function repoResume(repo) {
    if (repo.persistentConnection_) repo.persistentConnection_.resume(INTERRUPT_REASON);
}
function repoStats(repo, showDelta) {
    if (showDelta === void 0) showDelta = false;
    if (typeof console === 'undefined') return;
    var stats;
    if (showDelta) {
        if (!repo.statsListener_) repo.statsListener_ = new StatsListener(repo.stats_);
        stats = repo.statsListener_.get();
    } else stats = repo.stats_.get();
    var longestName = Object.keys(stats).reduce(function(previousValue, currentValue) {
        return Math.max(currentValue.length, previousValue);
    }, 0);
    each(stats, function(stat, value) {
        var paddedStat = stat;
        // pad stat names to be the same length (plus 2 extra spaces).
        for(var i = stat.length; i < longestName + 2; i++)paddedStat += ' ';
        console.log(paddedStat + value);
    });
}
function repoStatsIncrementCounter(repo, metric) {
    repo.stats_.incrementCounter(metric);
    statsReporterIncludeStat(repo.statsReporter_, metric);
}
function repoLog(repo) {
    var varArgs = [];
    for(var _i = 1; _i < arguments.length; _i++)varArgs[_i - 1] = arguments[_i];
    var prefix = '';
    if (repo.persistentConnection_) prefix = repo.persistentConnection_.id + ':';
    log.apply(void 0, _tslib.__spreadArray([
        prefix
    ], _tslib.__read(varArgs)));
}
function repoCallOnCompleteCallback(repo, callback, status, errorReason) {
    if (callback) exceptionGuard(function() {
        if (status === 'ok') callback(null);
        else {
            var code = (status || 'error').toUpperCase();
            var message = code;
            if (errorReason) message += ': ' + errorReason;
            var error3 = new Error(message);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            error3.code = code;
            callback(error3);
        }
    });
}
/**
 * Creates a new transaction, adds it to the transactions we're tracking, and
 * sends it to the server if possible.
 *
 * @param path - Path at which to do transaction.
 * @param transactionUpdate - Update callback.
 * @param onComplete - Completion callback.
 * @param unwatcher - Function that will be called when the transaction no longer
 * need data updates for `path`.
 * @param applyLocally - Whether or not to make intermediate results visible
 */ function repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {
    repoLog(repo, 'transaction on ' + path);
    // Initialize transaction.
    var transaction = {
        path: path,
        update: transactionUpdate,
        onComplete: onComplete,
        // One of TransactionStatus enums.
        status: null,
        // Used when combining transactions at different locations to figure out
        // which one goes first.
        order: LUIDGenerator(),
        // Whether to raise local events for this transaction.
        applyLocally: applyLocally,
        // Count of how many times we've retried the transaction.
        retryCount: 0,
        // Function to call to clean up our .on() listener.
        unwatcher: unwatcher,
        // Stores why a transaction was aborted.
        abortReason: null,
        currentWriteId: null,
        currentInputSnapshot: null,
        currentOutputSnapshotRaw: null,
        currentOutputSnapshotResolved: null
    };
    // Run transaction initially.
    var currentState = repoGetLatestState(repo, path, undefined);
    transaction.currentInputSnapshot = currentState;
    var newVal = transaction.update(currentState.val());
    if (newVal === undefined) {
        // Abort transaction.
        transaction.unwatcher();
        transaction.currentOutputSnapshotRaw = null;
        transaction.currentOutputSnapshotResolved = null;
        if (transaction.onComplete) transaction.onComplete(null, false, transaction.currentInputSnapshot);
    } else {
        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);
        // Mark as run and add to our queue.
        transaction.status = 0;
        var queueNode = treeSubTree(repo.transactionQueueTree_, path);
        var nodeQueue = treeGetValue(queueNode) || [];
        nodeQueue.push(transaction);
        treeSetValue(queueNode, nodeQueue);
        // Update visibleData and raise events
        // Note: We intentionally raise events after updating all of our
        // transaction state, since the user could start new transactions from the
        // event callbacks.
        var priorityForNode = void 0;
        if (typeof newVal === 'object' && newVal !== null && _util.contains(newVal, '.priority')) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            priorityForNode = _util.safeGet(newVal, '.priority');
            _util.assert(isValidPriority(priorityForNode), "Invalid priority returned by transaction. Priority must be a valid string, finite number, server value, or null.");
        } else {
            var currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) || ChildrenNode.EMPTY_NODE;
            priorityForNode = currentNode.getPriority().val();
        }
        var serverValues = repoGenerateServerValues(repo);
        var newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);
        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);
        transaction.currentOutputSnapshotRaw = newNodeUnresolved;
        transaction.currentOutputSnapshotResolved = newNode;
        transaction.currentWriteId = repoGetNextWriteId(repo);
        var events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);
        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
        repoSendReadyTransactions(repo, repo.transactionQueueTree_);
    }
}
/**
 * @param excludeSets - A specific set to exclude
 */ function repoGetLatestState(repo, path, excludeSets) {
    return syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) || ChildrenNode.EMPTY_NODE;
}
/**
 * Sends any already-run transactions that aren't waiting for outstanding
 * transactions to complete.
 *
 * Externally it's called with no arguments, but it calls itself recursively
 * with a particular transactionQueueTree node to recurse through the tree.
 *
 * @param node - transactionQueueTree node to start at.
 */ function repoSendReadyTransactions(repo, node) {
    if (node === void 0) node = repo.transactionQueueTree_;
    // Before recursing, make sure any completed transactions are removed.
    if (!node) repoPruneCompletedTransactionsBelowNode(repo, node);
    if (treeGetValue(node)) {
        var queue = repoBuildTransactionQueue(repo, node);
        _util.assert(queue.length > 0, 'Sending zero length transaction queue');
        var allRun = queue.every(function(transaction) {
            return transaction.status === 0;
        });
        // If they're all run (and not sent), we can send them.  Else, we must wait.
        if (allRun) repoSendTransactionQueue(repo, treeGetPath(node), queue);
    } else if (treeHasChildren(node)) treeForEachChild(node, function(childNode) {
        repoSendReadyTransactions(repo, childNode);
    });
}
/**
 * Given a list of run transactions, send them to the server and then handle
 * the result (success or failure).
 *
 * @param path - The location of the queue.
 * @param queue - Queue of transactions under the specified location.
 */ function repoSendTransactionQueue(repo, path, queue) {
    // Mark transactions as sent and increment retry count!
    var setsToIgnore = queue.map(function(txn) {
        return txn.currentWriteId;
    });
    var latestState = repoGetLatestState(repo, path, setsToIgnore);
    var snapToSend = latestState;
    var latestHash = latestState.hash();
    for(var i = 0; i < queue.length; i++){
        var txn = queue[i];
        _util.assert(txn.status === 0/* RUN */ , 'tryToSendTransactionQueue_: items in queue should all be run.');
        txn.status = 1;
        txn.retryCount++;
        var relativePath = newRelativePath(path, txn.path);
        // If we've gotten to this point, the output snapshot must be defined.
        snapToSend = snapToSend.updateChild(relativePath/** @type {!Node} */ , txn.currentOutputSnapshotRaw);
    }
    var dataToSend = snapToSend.val(true);
    var pathToSend = path;
    // Send the put.
    repo.server_.put(pathToSend.toString(), dataToSend, function(status) {
        repoLog(repo, 'transaction put response', {
            path: pathToSend.toString(),
            status: status
        });
        var events = [];
        if (status === 'ok') {
            // Queue up the callbacks and fire them after cleaning up all of our
            // transaction state, since the callback could trigger more
            // transactions or sets.
            var callbacks = [];
            var _loop_1 = function(i1) {
                queue[i1].status = 2;
                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i1].currentWriteId));
                if (queue[i1].onComplete) // We never unset the output snapshot, and given that this
                // transaction is complete, it should be set
                callbacks.push(function() {
                    return queue[i1].onComplete(null, true, queue[i1].currentOutputSnapshotResolved);
                });
                queue[i1].unwatcher();
            };
            for(var i1 = 0; i1 < queue.length; i1++)_loop_1(i1);
            // Now remove the completed transactions.
            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));
            // There may be pending transactions that we can now send.
            repoSendReadyTransactions(repo, repo.transactionQueueTree_);
            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
            // Finally, trigger onComplete callbacks.
            for(var i1 = 0; i1 < callbacks.length; i1++)exceptionGuard(callbacks[i1]);
        } else {
            // transactions are no longer sent.  Update their status appropriately.
            if (status === 'datastale') {
                for(var i1 = 0; i1 < queue.length; i1++)if (queue[i1].status === 3) queue[i1].status = 4;
                else queue[i1].status = 0;
            } else {
                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);
                for(var i1 = 0; i1 < queue.length; i1++){
                    queue[i1].status = 4;
                    queue[i1].abortReason = status;
                }
            }
            repoRerunTransactions(repo, path);
        }
    }, latestHash);
}
/**
 * Finds all transactions dependent on the data at changedPath and reruns them.
 *
 * Should be called any time cached data changes.
 *
 * Return the highest path that was affected by rerunning transactions. This
 * is the path at which events need to be raised for.
 *
 * @param changedPath - The path in mergedData that changed.
 * @returns The rootmost path that was affected by rerunning transactions.
 */ function repoRerunTransactions(repo, changedPath) {
    var rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);
    var path = treeGetPath(rootMostTransactionNode);
    var queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);
    repoRerunTransactionQueue(repo, queue, path);
    return path;
}
/**
 * Does all the work of rerunning transactions (as well as cleans up aborted
 * transactions and whatnot).
 *
 * @param queue - The queue of transactions to run.
 * @param path - The path the queue is for.
 */ function repoRerunTransactionQueue(repo, queue, path) {
    if (queue.length === 0) return; // Nothing to do!
    // Queue up the callbacks and fire them after cleaning up all of our
    // transaction state, since the callback could trigger more transactions or
    // sets.
    var callbacks = [];
    var events = [];
    // Ignore all of the sets we're going to re-run.
    var txnsToRerun = queue.filter(function(q) {
        return q.status === 0;
    });
    var setsToIgnore = txnsToRerun.map(function(q) {
        return q.currentWriteId;
    });
    var _loop_2 = function(i2) {
        var transaction = queue[i2];
        var relativePath = newRelativePath(path, transaction.path);
        var abortTransaction = false, abortReason;
        _util.assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');
        if (transaction.status === 4) {
            abortTransaction = true;
            abortReason = transaction.abortReason;
            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));
        } else if (transaction.status === 0) {
            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {
                abortTransaction = true;
                abortReason = 'maxretry';
                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));
            } else {
                // This code reruns a transaction
                var currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);
                transaction.currentInputSnapshot = currentNode;
                var newData = queue[i2].update(currentNode.val());
                if (newData !== undefined) {
                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);
                    var newDataNode = nodeFromJSON(newData);
                    var hasExplicitPriority = typeof newData === 'object' && newData != null && _util.contains(newData, '.priority');
                    if (!hasExplicitPriority) // Keep the old priority if there wasn't a priority explicitly specified.
                    newDataNode = newDataNode.updatePriority(currentNode.getPriority());
                    var oldWriteId = transaction.currentWriteId;
                    var serverValues = repoGenerateServerValues(repo);
                    var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);
                    transaction.currentOutputSnapshotRaw = newDataNode;
                    transaction.currentOutputSnapshotResolved = newNodeResolved;
                    transaction.currentWriteId = repoGetNextWriteId(repo);
                    // Mutates setsToIgnore in place
                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);
                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));
                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));
                } else {
                    abortTransaction = true;
                    abortReason = 'nodata';
                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));
                }
            }
        }
        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
        events = [];
        if (abortTransaction) {
            // Abort.
            queue[i2].status = 2;
            // Removing a listener can trigger pruning which can muck with
            // mergedData/visibleData (as it prunes data). So defer the unwatcher
            // until we're done.
            (function(unwatcher) {
                setTimeout(unwatcher, Math.floor(0));
            })(queue[i2].unwatcher);
            if (queue[i2].onComplete) {
                if (abortReason === 'nodata') callbacks.push(function() {
                    return queue[i2].onComplete(null, false, queue[i2].currentInputSnapshot);
                });
                else callbacks.push(function() {
                    return queue[i2].onComplete(new Error(abortReason), false, null);
                });
            }
        }
    };
    for(var i2 = 0; i2 < queue.length; i2++)_loop_2(i2);
    // Clean up completed transactions.
    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);
    // Now fire callbacks, now that we're in a good, known state.
    for(var i2 = 0; i2 < callbacks.length; i2++)exceptionGuard(callbacks[i2]);
    // Try to send the transaction result to the server.
    repoSendReadyTransactions(repo, repo.transactionQueueTree_);
}
/**
 * Returns the rootmost ancestor node of the specified path that has a pending
 * transaction on it, or just returns the node for the given path if there are
 * no pending transactions on any ancestor.
 *
 * @param path - The location to start at.
 * @returns The rootmost node with a transaction.
 */ function repoGetAncestorTransactionNode(repo, path) {
    var front;
    // Start at the root and walk deeper into the tree towards path until we
    // find a node with pending transactions.
    var transactionNode = repo.transactionQueueTree_;
    front = pathGetFront(path);
    while(front !== null && treeGetValue(transactionNode) === undefined){
        transactionNode = treeSubTree(transactionNode, front);
        path = pathPopFront(path);
        front = pathGetFront(path);
    }
    return transactionNode;
}
/**
 * Builds the queue of all transactions at or below the specified
 * transactionNode.
 *
 * @param transactionNode
 * @returns The generated queue.
 */ function repoBuildTransactionQueue(repo, transactionNode) {
    // Walk any child transaction queues and aggregate them into a single queue.
    var transactionQueue = [];
    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);
    // Sort them by the order the transactions were created.
    transactionQueue.sort(function(a, b) {
        return a.order - b.order;
    });
    return transactionQueue;
}
function repoAggregateTransactionQueuesForNode(repo, node, queue) {
    var nodeQueue = treeGetValue(node);
    if (nodeQueue) for(var i2 = 0; i2 < nodeQueue.length; i2++)queue.push(nodeQueue[i2]);
    treeForEachChild(node, function(child) {
        repoAggregateTransactionQueuesForNode(repo, child, queue);
    });
}
/**
 * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.
 */ function repoPruneCompletedTransactionsBelowNode(repo, node) {
    var queue = treeGetValue(node);
    if (queue) {
        var to = 0;
        for(var from = 0; from < queue.length; from++)if (queue[from].status !== 2) {
            queue[to] = queue[from];
            to++;
        }
        queue.length = to;
        treeSetValue(node, queue.length > 0 ? queue : undefined);
    }
    treeForEachChild(node, function(childNode) {
        repoPruneCompletedTransactionsBelowNode(repo, childNode);
    });
}
/**
 * Aborts all transactions on ancestors or descendants of the specified path.
 * Called when doing a set() or update() since we consider them incompatible
 * with transactions.
 *
 * @param path - Path for which we want to abort related transactions.
 */ function repoAbortTransactions(repo, path) {
    var affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));
    var transactionNode = treeSubTree(repo.transactionQueueTree_, path);
    treeForEachAncestor(transactionNode, function(node) {
        repoAbortTransactionsOnNode(repo, node);
    });
    repoAbortTransactionsOnNode(repo, transactionNode);
    treeForEachDescendant(transactionNode, function(node) {
        repoAbortTransactionsOnNode(repo, node);
    });
    return affectedPath;
}
/**
 * Abort transactions stored in this transaction queue node.
 *
 * @param node - Node to abort transactions for.
 */ function repoAbortTransactionsOnNode(repo, node) {
    var queue = treeGetValue(node);
    if (queue) {
        // Queue up the callbacks and fire them after cleaning up all of our
        // transaction state, since the callback could trigger more transactions
        // or sets.
        var callbacks = [];
        // Go through queue.  Any already-sent transactions must be marked for
        // abort, while the unsent ones can be immediately aborted and removed.
        var events = [];
        var lastSent = -1;
        for(var i2 = 0; i2 < queue.length; i2++){
            if (queue[i2].status === 3) ;
            else if (queue[i2].status === 1) {
                _util.assert(lastSent === i2 - 1, 'All SENT items should be at beginning of queue.');
                lastSent = i2;
                // Mark transaction for abort when it comes back.
                queue[i2].status = 3;
                queue[i2].abortReason = 'set';
            } else {
                _util.assert(queue[i2].status === 0/* RUN */ , 'Unexpected transaction status in abort');
                // We can abort it immediately.
                queue[i2].unwatcher();
                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i2].currentWriteId, true));
                if (queue[i2].onComplete) callbacks.push(queue[i2].onComplete.bind(null, new Error('set'), false, null));
            }
        }
        if (lastSent === -1) // We're not waiting for any sent transactions.  We can clear the queue.
        treeSetValue(node, undefined);
        else // Remove the transactions we aborted.
        queue.length = lastSent + 1;
        // Now fire the callbacks.
        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);
        for(var i2 = 0; i2 < callbacks.length; i2++)exceptionGuard(callbacks[i2]);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function decodePath(pathString) {
    var pathStringDecoded = '';
    var pieces = pathString.split('/');
    for(var i3 = 0; i3 < pieces.length; i3++)if (pieces[i3].length > 0) {
        var piece = pieces[i3];
        try {
            piece = decodeURIComponent(piece.replace(/\+/g, ' '));
        } catch (e) {
        }
        pathStringDecoded += '/' + piece;
    }
    return pathStringDecoded;
}
/**
 * @returns key value hash
 */ function decodeQuery(queryString) {
    var e_1, _a;
    var results = {
    };
    if (queryString.charAt(0) === '?') queryString = queryString.substring(1);
    try {
        for(var _b = _tslib.__values(queryString.split('&')), _c = _b.next(); !_c.done; _c = _b.next()){
            var segment = _c.value;
            if (segment.length === 0) continue;
            var kv = segment.split('=');
            if (kv.length === 2) results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);
            else warn("Invalid query segment '" + segment + "' in query '" + queryString + "'");
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    return results;
}
var parseRepoInfo = function(dataURL, nodeAdmin) {
    var parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;
    if (parsedUrl.domain === 'firebase.com') fatal(parsedUrl.host + ' is no longer supported. ' + 'Please use <YOUR FIREBASE>.firebaseio.com instead');
    // Catch common error of uninitialized namespace value.
    if ((!namespace || namespace === 'undefined') && parsedUrl.domain !== 'localhost') fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');
    if (!parsedUrl.secure) warnIfPageIsSecure();
    var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';
    return {
        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, nodeAdmin, webSocketOnly, /*persistenceKey=*/ '', /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),
        path: new Path(parsedUrl.pathString)
    };
};
var parseDatabaseURL = function(dataURL) {
    // Default to empty strings in the event of a malformed string.
    var host = '', domain = '', subdomain = '', pathString = '', namespace = '';
    // Always default to SSL, unless otherwise specified.
    var secure = true, scheme = 'https', port = 443;
    // Don't do any validation here. The caller is responsible for validating the result of parsing.
    if (typeof dataURL === 'string') {
        // Parse scheme.
        var colonInd = dataURL.indexOf('//');
        if (colonInd >= 0) {
            scheme = dataURL.substring(0, colonInd - 1);
            dataURL = dataURL.substring(colonInd + 2);
        }
        // Parse host, path, and query string.
        var slashInd = dataURL.indexOf('/');
        if (slashInd === -1) slashInd = dataURL.length;
        var questionMarkInd = dataURL.indexOf('?');
        if (questionMarkInd === -1) questionMarkInd = dataURL.length;
        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));
        if (slashInd < questionMarkInd) // For pathString, questionMarkInd will always come after slashInd
        pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));
        var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));
        // If we have a port, use scheme for determining if it's secure.
        colonInd = host.indexOf(':');
        if (colonInd >= 0) {
            secure = scheme === 'https' || scheme === 'wss';
            port = parseInt(host.substring(colonInd + 1), 10);
        } else colonInd = host.length;
        var hostWithoutPort = host.slice(0, colonInd);
        if (hostWithoutPort.toLowerCase() === 'localhost') domain = 'localhost';
        else if (hostWithoutPort.split('.').length <= 2) domain = hostWithoutPort;
        else {
            // Interpret the subdomain of a 3 or more component URL as the namespace name.
            var dotInd = host.indexOf('.');
            subdomain = host.substring(0, dotInd).toLowerCase();
            domain = host.substring(dotInd + 1);
            // Normalize namespaces to lowercase to share storage / connection.
            namespace = subdomain;
        }
        // Always treat the value of the `ns` as the namespace name if it is present.
        if ('ns' in queryParams) namespace = queryParams['ns'];
    }
    return {
        host: host,
        port: port,
        domain: domain,
        subdomain: subdomain,
        secure: secure,
        scheme: scheme,
        pathString: pathString,
        namespace: namespace
    };
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Encapsulates the data needed to raise an event
 */ var DataEvent = function() {
    /**
     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed
     * @param eventRegistration - The function to call to with the event data. User provided
     * @param snapshot - The data backing the event
     * @param prevName - Optional, the name of the previous child for child_* events.
     */ function DataEvent1(eventType, eventRegistration, snapshot, prevName) {
        this.eventType = eventType;
        this.eventRegistration = eventRegistration;
        this.snapshot = snapshot;
        this.prevName = prevName;
    }
    DataEvent1.prototype.getPath = function() {
        var ref = this.snapshot.ref;
        if (this.eventType === 'value') return ref._path;
        else return ref.parent._path;
    };
    DataEvent1.prototype.getEventType = function() {
        return this.eventType;
    };
    DataEvent1.prototype.getEventRunner = function() {
        return this.eventRegistration.getEventRunner(this);
    };
    DataEvent1.prototype.toString = function() {
        return this.getPath().toString() + ':' + this.eventType + ':' + _util.stringify(this.snapshot.exportVal());
    };
    return DataEvent1;
}();
var CancelEvent = function() {
    function CancelEvent1(eventRegistration, error4, path) {
        this.eventRegistration = eventRegistration;
        this.error = error4;
        this.path = path;
    }
    CancelEvent1.prototype.getPath = function() {
        return this.path;
    };
    CancelEvent1.prototype.getEventType = function() {
        return 'cancel';
    };
    CancelEvent1.prototype.getEventRunner = function() {
        return this.eventRegistration.getEventRunner(this);
    };
    CancelEvent1.prototype.toString = function() {
        return this.path.toString() + ':cancel';
    };
    return CancelEvent1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A wrapper class that converts events from the database@exp SDK to the legacy
 * Database SDK. Events are not converted directly as event registration relies
 * on reference comparison of the original user callback (see `matches()`) and
 * relies on equality of the legacy SDK's `context` object.
 */ var CallbackContext = function() {
    function CallbackContext1(snapshotCallback, cancelCallback) {
        this.snapshotCallback = snapshotCallback;
        this.cancelCallback = cancelCallback;
    }
    CallbackContext1.prototype.onValue = function(expDataSnapshot, previousChildName) {
        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);
    };
    CallbackContext1.prototype.onCancel = function(error4) {
        _util.assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');
        return this.cancelCallback.call(null, error4);
    };
    Object.defineProperty(CallbackContext1.prototype, "hasCancelCallback", {
        get: function() {
            return !!this.cancelCallback;
        },
        enumerable: false,
        configurable: true
    });
    CallbackContext1.prototype.matches = function(other) {
        return this.snapshotCallback === other.snapshotCallback || this.snapshotCallback.userCallback !== undefined && this.snapshotCallback.userCallback === other.snapshotCallback.userCallback && this.snapshotCallback.context === other.snapshotCallback.context;
    };
    return CallbackContext1;
}();
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The `onDisconnect` class allows you to write or clear data when your client
 * disconnects from the Database server. These updates occur whether your
 * client disconnects cleanly or not, so you can rely on them to clean up data
 * even if a connection is dropped or a client crashes.
 *
 * The `onDisconnect` class is most commonly used to manage presence in
 * applications where it is useful to detect how many clients are connected and
 * when other clients disconnect. See
 * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}
 * for more information.
 *
 * To avoid problems when a connection is dropped before the requests can be
 * transferred to the Database server, these functions should be called before
 * writing any data.
 *
 * Note that `onDisconnect` operations are only triggered once. If you want an
 * operation to occur each time a disconnect occurs, you'll need to re-establish
 * the `onDisconnect` operations each time you reconnect.
 */ var OnDisconnect$1 = function() {
    /** @hideconstructor */ function OnDisconnect(_repo, _path) {
        this._repo = _repo;
        this._path = _path;
    }
    /**
     * Cancels all previously queued `onDisconnect()` set or update events for this
     * location and all children.
     *
     * If a write has been queued for this location via a `set()` or `update()` at a
     * parent location, the write at this location will be canceled, though writes
     * to sibling locations will still occur.
     *
     * @returns Resolves when synchronization to the server is complete.
     */ OnDisconnect.prototype.cancel = function() {
        var deferred = new _util.Deferred();
        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(function() {
        }));
        return deferred.promise;
    };
    /**
     * Ensures the data at this location is deleted when the client is disconnected
     * (due to closing the browser, navigating to a new page, or network issues).
     *
     * @returns Resolves when synchronization to the server is complete.
     */ OnDisconnect.prototype.remove = function() {
        validateWritablePath('OnDisconnect.remove', this._path);
        var deferred = new _util.Deferred();
        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(function() {
        }));
        return deferred.promise;
    };
    /**
     * Ensures the data at this location is set to the specified value when the
     * client is disconnected (due to closing the browser, navigating to a new page,
     * or network issues).
     *
     * `set()` is especially useful for implementing "presence" systems, where a
     * value should be changed or cleared when a user disconnects so that they
     * appear "offline" to other users. See
     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}
     * for more information.
     *
     * Note that `onDisconnect` operations are only triggered once. If you want an
     * operation to occur each time a disconnect occurs, you'll need to re-establish
     * the `onDisconnect` operations each time.
     *
     * @param value - The value to be written to this location on disconnect (can
     * be an object, array, string, number, boolean, or null).
     * @returns Resolves when synchronization to the Database is complete.
     */ OnDisconnect.prototype.set = function(value) {
        validateWritablePath('OnDisconnect.set', this._path);
        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);
        var deferred = new _util.Deferred();
        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(function() {
        }));
        return deferred.promise;
    };
    /**
     * Ensures the data at this location is set to the specified value and priority
     * when the client is disconnected (due to closing the browser, navigating to a
     * new page, or network issues).
     *
     * @param value - The value to be written to this location on disconnect (can
     * be an object, array, string, number, boolean, or null).
     * @param priority - The priority to be written (string, number, or null).
     * @returns Resolves when synchronization to the Database is complete.
     */ OnDisconnect.prototype.setWithPriority = function(value, priority) {
        validateWritablePath('OnDisconnect.setWithPriority', this._path);
        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);
        validatePriority('OnDisconnect.setWithPriority', priority, false);
        var deferred = new _util.Deferred();
        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(function() {
        }));
        return deferred.promise;
    };
    /**
     * Writes multiple values at this location when the client is disconnected (due
     * to closing the browser, navigating to a new page, or network issues).
     *
     * The `values` argument contains multiple property-value pairs that will be
     * written to the Database together. Each child property can either be a simple
     * property (for example, "name") or a relative path (for example, "name/first")
     * from the current location to the data to update.
     *
     * As opposed to the `set()` method, `update()` can be use to selectively update
     * only the referenced properties at the current location (instead of replacing
     * all the child properties at the current location).
     *
     * @param values - Object containing multiple values.
     * @returns Resolves when synchronization to the Database is complete.
     */ OnDisconnect.prototype.update = function(values) {
        validateWritablePath('OnDisconnect.update', this._path);
        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);
        var deferred = new _util.Deferred();
        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(function() {
        }));
        return deferred.promise;
    };
    return OnDisconnect;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @internal
 */ var QueryImpl = function() {
    /**
     * @hideconstructor
     */ function QueryImpl1(_repo, _path, _queryParams, _orderByCalled) {
        this._repo = _repo;
        this._path = _path;
        this._queryParams = _queryParams;
        this._orderByCalled = _orderByCalled;
    }
    Object.defineProperty(QueryImpl1.prototype, "key", {
        get: function() {
            if (pathIsEmpty(this._path)) return null;
            else return pathGetBack(this._path);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QueryImpl1.prototype, "ref", {
        get: function() {
            return new ReferenceImpl1(this._repo, this._path);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QueryImpl1.prototype, "_queryIdentifier", {
        get: function() {
            var obj = queryParamsGetQueryObject(this._queryParams);
            var id = ObjectToUniqueKey(obj);
            return id === '{}' ? 'default' : id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QueryImpl1.prototype, "_queryObject", {
        /**
         * An object representation of the query parameters used by this Query.
         */ get: function() {
            return queryParamsGetQueryObject(this._queryParams);
        },
        enumerable: false,
        configurable: true
    });
    QueryImpl1.prototype.isEqual = function(other) {
        other = _util.getModularInstance(other);
        if (!(other instanceof QueryImpl1)) return false;
        var sameRepo = this._repo === other._repo;
        var samePath = pathEquals(this._path, other._path);
        var sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;
        return sameRepo && samePath && sameQueryIdentifier;
    };
    QueryImpl1.prototype.toJSON = function() {
        return this.toString();
    };
    QueryImpl1.prototype.toString = function() {
        return this._repo.toString() + pathToUrlEncodedString(this._path);
    };
    return QueryImpl1;
}();
/**
 * Validates that no other order by call has been made
 */ function validateNoPreviousOrderByCall(query, fnName) {
    if (query._orderByCalled === true) throw new Error(fnName + ": You can't combine multiple orderBy calls.");
}
/**
 * Validates start/end values for queries.
 */ function validateQueryEndpoints(params) {
    var startNode = null;
    var endNode = null;
    if (params.hasStart()) startNode = params.getIndexStartValue();
    if (params.hasEnd()) endNode = params.getIndexEndValue();
    if (params.getIndex() === KEY_INDEX) {
        var tooManyArgsError = "Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().";
        var wrongArgTypeError = "Query: When ordering by key, the argument passed to startAt(), startAfter(), endAt(), endBefore(), or equalTo() must be a string.";
        if (params.hasStart()) {
            var startName = params.getIndexStartName();
            if (startName !== MIN_NAME) throw new Error(tooManyArgsError);
            else if (typeof startNode !== 'string') throw new Error(wrongArgTypeError);
        }
        if (params.hasEnd()) {
            var endName = params.getIndexEndName();
            if (endName !== MAX_NAME) throw new Error(tooManyArgsError);
            else if (typeof endNode !== 'string') throw new Error(wrongArgTypeError);
        }
    } else if (params.getIndex() === PRIORITY_INDEX) {
        if (startNode != null && !isValidPriority(startNode) || endNode != null && !isValidPriority(endNode)) throw new Error("Query: When ordering by priority, the first argument passed to startAt(), startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value (null, a number, or a string).");
    } else {
        _util.assert(params.getIndex() instanceof PathIndex1 || params.getIndex() === VALUE_INDEX, 'unknown index type.');
        if (startNode != null && typeof startNode === 'object' || endNode != null && typeof endNode === 'object') throw new Error("Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or equalTo() cannot be an object.");
    }
}
/**
 * Validates that limit* has been called with the correct combination of parameters
 */ function validateLimit(params) {
    if (params.hasStart() && params.hasEnd() && params.hasLimit() && !params.hasAnchoredLimit()) throw new Error("Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use limitToFirst() or limitToLast() instead.");
}
/**
 * @internal
 */ var ReferenceImpl1 = function(_super) {
    _tslib.__extends(ReferenceImpl2, _super);
    /** @hideconstructor */ function ReferenceImpl2(repo, path) {
        return _super.call(this, repo, path, new QueryParams(), false) || this;
    }
    Object.defineProperty(ReferenceImpl2.prototype, "parent", {
        get: function() {
            var parentPath = pathParent(this._path);
            return parentPath === null ? null : new ReferenceImpl2(this._repo, parentPath);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ReferenceImpl2.prototype, "root", {
        get: function() {
            var ref = this;
            while(ref.parent !== null)ref = ref.parent;
            return ref;
        },
        enumerable: false,
        configurable: true
    });
    return ReferenceImpl2;
}(QueryImpl);
/**
 * A `DataSnapshot` contains data from a Database location.
 *
 * Any time you read data from the Database, you receive the data as a
 * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach
 * with `on()` or `once()`. You can extract the contents of the snapshot as a
 * JavaScript object by calling the `val()` method. Alternatively, you can
 * traverse into the snapshot by calling `child()` to return child snapshots
 * (which you could then call `val()` on).
 *
 * A `DataSnapshot` is an efficiently generated, immutable copy of the data at
 * a Database location. It cannot be modified and will never change (to modify
 * data, you always call the `set()` method on a `Reference` directly).
 */ var DataSnapshot$1 = function() {
    /**
     * @param _node - A SnapshotNode to wrap.
     * @param ref - The location this snapshot came from.
     * @param _index - The iteration order for this snapshot
     * @hideconstructor
     */ function DataSnapshot(_node, /**
     * The location of this DataSnapshot.
     */ ref, _index) {
        this._node = _node;
        this.ref = ref;
        this._index = _index;
    }
    Object.defineProperty(DataSnapshot.prototype, "priority", {
        /**
         * Gets the priority value of the data in this `DataSnapshot`.
         *
         * Applications need not use priority but can order collections by
         * ordinary properties (see
         * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}
         * ).
         */ get: function() {
            // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)
            return this._node.getPriority().val();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataSnapshot.prototype, "key", {
        /**
         * The key (last part of the path) of the location of this `DataSnapshot`.
         *
         * The last token in a Database location is considered its key. For example,
         * "ada" is the key for the /users/ada/ node. Accessing the key on any
         * `DataSnapshot` will return the key for the location that generated it.
         * However, accessing the key on the root URL of a Database will return
         * `null`.
         */ get: function() {
            return this.ref.key;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataSnapshot.prototype, "size", {
        /** Returns the number of child properties of this `DataSnapshot`. */ get: function() {
            return this._node.numChildren();
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Gets another `DataSnapshot` for the location at the specified relative path.
     *
     * Passing a relative path to the `child()` method of a DataSnapshot returns
     * another `DataSnapshot` for the location at the specified relative path. The
     * relative path can either be a simple child name (for example, "ada") or a
     * deeper, slash-separated path (for example, "ada/name/first"). If the child
     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`
     * whose value is `null`) is returned.
     *
     * @param path - A relative path to the location of child data.
     */ DataSnapshot.prototype.child = function(path) {
        var childPath = new Path(path);
        var childRef = child(this.ref, path);
        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);
    };
    /**
     * Returns true if this `DataSnapshot` contains any data. It is slightly more
     * efficient than using `snapshot.val() !== null`.
     */ DataSnapshot.prototype.exists = function() {
        return !this._node.isEmpty();
    };
    /**
     * Exports the entire contents of the DataSnapshot as a JavaScript object.
     *
     * The `exportVal()` method is similar to `val()`, except priority information
     * is included (if available), making it suitable for backing up your data.
     *
     * @returns The DataSnapshot's contents as a JavaScript value (Object,
     *   Array, string, number, boolean, or `null`).
     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
    DataSnapshot.prototype.exportVal = function() {
        return this._node.val(true);
    };
    /**
     * Enumerates the top-level children in the `DataSnapshot`.
     *
     * Because of the way JavaScript objects work, the ordering of data in the
     * JavaScript object returned by `val()` is not guaranteed to match the
     * ordering on the server nor the ordering of `onChildAdded()` events. That is
     * where `forEach()` comes in handy. It guarantees the children of a
     * `DataSnapshot` will be iterated in their query order.
     *
     * If no explicit `orderBy*()` method is used, results are returned
     * ordered by key (unless priorities are used, in which case, results are
     * returned by priority).
     *
     * @param action - A function that will be called for each child DataSnapshot.
     * The callback can return true to cancel further enumeration.
     * @returns true if enumeration was canceled due to your callback returning
     * true.
     */ DataSnapshot.prototype.forEach = function(action) {
        var _this = this;
        if (this._node.isLeafNode()) return false;
        var childrenNode = this._node;
        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...
        return !!childrenNode.forEachChild(this._index, function(key, node) {
            return action(new DataSnapshot(node, child(_this.ref, key), PRIORITY_INDEX));
        });
    };
    /**
     * Returns true if the specified child path has (non-null) data.
     *
     * @param path - A relative path to the location of a potential child.
     * @returns `true` if data exists at the specified child path; else
     *  `false`.
     */ DataSnapshot.prototype.hasChild = function(path) {
        var childPath = new Path(path);
        return !this._node.getChild(childPath).isEmpty();
    };
    /**
     * Returns whether or not the `DataSnapshot` has any non-`null` child
     * properties.
     *
     * You can use `hasChildren()` to determine if a `DataSnapshot` has any
     * children. If it does, you can enumerate them using `forEach()`. If it
     * doesn't, then either this snapshot contains a primitive value (which can be
     * retrieved with `val()`) or it is empty (in which case, `val()` will return
     * `null`).
     *
     * @returns true if this snapshot has any children; else false.
     */ DataSnapshot.prototype.hasChildren = function() {
        if (this._node.isLeafNode()) return false;
        else return !this._node.isEmpty();
    };
    /**
     * Returns a JSON-serializable representation of this object.
     */ DataSnapshot.prototype.toJSON = function() {
        return this.exportVal();
    };
    /**
     * Extracts a JavaScript value from a `DataSnapshot`.
     *
     * Depending on the data in a `DataSnapshot`, the `val()` method may return a
     * scalar type (string, number, or boolean), an array, or an object. It may
     * also return null, indicating that the `DataSnapshot` is empty (contains no
     * data).
     *
     * @returns The DataSnapshot's contents as a JavaScript value (Object,
     *   Array, string, number, boolean, or `null`).
     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
    DataSnapshot.prototype.val = function() {
        return this._node.val();
    };
    return DataSnapshot;
}();
/**
 *
 * Returns a `Reference` representing the location in the Database
 * corresponding to the provided path. If no path is provided, the `Reference`
 * will point to the root of the Database.
 *
 * @param db - The database instance to obtain a reference for.
 * @param path - Optional path representing the location the returned
 *   `Reference` will point. If not provided, the returned `Reference` will
 *   point to the root of the Database.
 * @returns If a path is provided, a `Reference`
 *   pointing to the provided path. Otherwise, a `Reference` pointing to the
 *   root of the Database.
 */ function ref(db, path) {
    db = _util.getModularInstance(db);
    db._checkNotDeleted('ref');
    return path !== undefined ? child(db._root, path) : db._root;
}
/**
 * Returns a `Reference` representing the location in the Database
 * corresponding to the provided Firebase URL.
 *
 * An exception is thrown if the URL is not a valid Firebase Database URL or it
 * has a different domain than the current `Database` instance.
 *
 * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored
 * and are not applied to the returned `Reference`.
 *
 * @param db - The database instance to obtain a reference for.
 * @param url - The Firebase URL at which the returned `Reference` will
 *   point.
 * @returns A `Reference` pointing to the provided
 *   Firebase URL.
 */ function refFromURL(db, url) {
    db = _util.getModularInstance(db);
    db._checkNotDeleted('refFromURL');
    var parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);
    validateUrl('refFromURL', parsedURL);
    var repoInfo = parsedURL.repoInfo;
    if (!db._repo.repoInfo_.isCustomHost() && repoInfo.host !== db._repo.repoInfo_.host) fatal("refFromURL: Host name does not match the current database: (found " + repoInfo.host + ' but expected ' + db._repo.repoInfo_.host + ')');
    return ref(db, parsedURL.path.toString());
}
/**
 * Gets a `Reference` for the location at the specified relative path.
 *
 * The relative path can either be a simple child name (for example, "ada") or
 * a deeper slash-separated path (for example, "ada/name/first").
 *
 * @param parent - The parent location.
 * @param path - A relative path from this location to the desired child
 *   location.
 * @returns The specified child location.
 */ function child(parent, path) {
    parent = _util.getModularInstance(parent);
    if (pathGetFront(parent._path) === null) validateRootPathString('child', 'path', path, false);
    else validatePathString('child', 'path', path, false);
    return new ReferenceImpl1(parent._repo, pathChild(parent._path, path));
}
/**
 * Generates a new child location using a unique key and returns its
 * `Reference`.
 *
 * This is the most common pattern for adding data to a collection of items.
 *
 * If you provide a value to `push()`, the value is written to the
 * generated location. If you don't pass a value, nothing is written to the
 * database and the child remains empty (but you can use the `Reference`
 * elsewhere).
 *
 * The unique keys generated by `push()` are ordered by the current time, so the
 * resulting list of items is chronologically sorted. The keys are also
 * designed to be unguessable (they contain 72 random bits of entropy).
 *
 * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}
 * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}
 *
 * @param parent - The parent location.
 * @param value - Optional value to be written at the generated location.
 * @returns Combined `Promise` and `Reference`; resolves when write is complete,
 * but can be used immediately as the `Reference` to the child location.
 */ function push(parent, value) {
    parent = _util.getModularInstance(parent);
    validateWritablePath('push', parent._path);
    validateFirebaseDataArg('push', value, parent._path, true);
    var now = repoServerTime(parent._repo);
    var name1 = nextPushId(now);
    // push() returns a ThennableReference whose promise is fulfilled with a
    // regular Reference. We use child() to create handles to two different
    // references. The first is turned into a ThennableReference below by adding
    // then() and catch() methods and is used as the return value of push(). The
    // second remains a regular Reference and is used as the fulfilled value of
    // the first ThennableReference.
    var thennablePushRef = child(parent, name1);
    var pushRef = child(parent, name1);
    var promise;
    if (value != null) promise = set(pushRef, value).then(function() {
        return pushRef;
    });
    else promise = Promise.resolve(pushRef);
    thennablePushRef.then = promise.then.bind(promise);
    thennablePushRef.catch = promise.then.bind(promise, undefined);
    return thennablePushRef;
}
/**
 * Removes the data at this Database location.
 *
 * Any data at child locations will also be deleted.
 *
 * The effect of the remove will be visible immediately and the corresponding
 * event 'value' will be triggered. Synchronization of the remove to the
 * Firebase servers will also be started, and the returned Promise will resolve
 * when complete. If provided, the onComplete callback will be called
 * asynchronously after synchronization has finished.
 *
 * @param ref - The location to remove.
 * @returns Resolves when remove on server is complete.
 */ function remove(ref1) {
    validateWritablePath('remove', ref1._path);
    return set(ref1, null);
}
/**
 * Writes data to this Database location.
 *
 * This will overwrite any data at this location and all child locations.
 *
 * The effect of the write will be visible immediately, and the corresponding
 * events ("value", "child_added", etc.) will be triggered. Synchronization of
 * the data to the Firebase servers will also be started, and the returned
 * Promise will resolve when complete. If provided, the `onComplete` callback
 * will be called asynchronously after synchronization has finished.
 *
 * Passing `null` for the new value is equivalent to calling `remove()`; namely,
 * all data at this location and all child locations will be deleted.
 *
 * `set()` will remove any priority stored at this location, so if priority is
 * meant to be preserved, you need to use `setWithPriority()` instead.
 *
 * Note that modifying data with `set()` will cancel any pending transactions
 * at that location, so extreme care should be taken if mixing `set()` and
 * `transaction()` to modify the same data.
 *
 * A single `set()` will generate a single "value" event at the location where
 * the `set()` was performed.
 *
 * @param ref - The location to write to.
 * @param value - The value to be written (string, number, boolean, object,
 *   array, or null).
 * @returns Resolves when write to server is complete.
 */ function set(ref1, value) {
    ref1 = _util.getModularInstance(ref1);
    validateWritablePath('set', ref1._path);
    validateFirebaseDataArg('set', value, ref1._path, false);
    var deferred = new _util.Deferred();
    repoSetWithPriority(ref1._repo, ref1._path, value, /*priority=*/ null, deferred.wrapCallback(function() {
    }));
    return deferred.promise;
}
/**
 * Sets a priority for the data at this Database location.
 *
 * Applications need not use priority but can order collections by
 * ordinary properties (see
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}
 * ).
 *
 * @param ref - The location to write to.
 * @param priority - The priority to be written (string, number, or null).
 * @returns Resolves when write to server is complete.
 */ function setPriority(ref1, priority) {
    ref1 = _util.getModularInstance(ref1);
    validateWritablePath('setPriority', ref1._path);
    validatePriority('setPriority', priority, false);
    var deferred = new _util.Deferred();
    repoSetWithPriority(ref1._repo, pathChild(ref1._path, '.priority'), priority, null, deferred.wrapCallback(function() {
    }));
    return deferred.promise;
}
/**
 * Writes data the Database location. Like `set()` but also specifies the
 * priority for that data.
 *
 * Applications need not use priority but can order collections by
 * ordinary properties (see
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}
 * ).
 *
 * @param ref - The location to write to.
 * @param value - The value to be written (string, number, boolean, object,
 *   array, or null).
 * @param priority - The priority to be written (string, number, or null).
 * @returns Resolves when write to server is complete.
 */ function setWithPriority(ref1, value, priority) {
    validateWritablePath('setWithPriority', ref1._path);
    validateFirebaseDataArg('setWithPriority', value, ref1._path, false);
    validatePriority('setWithPriority', priority, false);
    if (ref1.key === '.length' || ref1.key === '.keys') throw 'setWithPriority failed: ' + ref1.key + ' is a read-only object.';
    var deferred = new _util.Deferred();
    repoSetWithPriority(ref1._repo, ref1._path, value, priority, deferred.wrapCallback(function() {
    }));
    return deferred.promise;
}
/**
 * Writes multiple values to the Database at once.
 *
 * The `values` argument contains multiple property-value pairs that will be
 * written to the Database together. Each child property can either be a simple
 * property (for example, "name") or a relative path (for example,
 * "name/first") from the current location to the data to update.
 *
 * As opposed to the `set()` method, `update()` can be use to selectively update
 * only the referenced properties at the current location (instead of replacing
 * all the child properties at the current location).
 *
 * The effect of the write will be visible immediately, and the corresponding
 * events ('value', 'child_added', etc.) will be triggered. Synchronization of
 * the data to the Firebase servers will also be started, and the returned
 * Promise will resolve when complete. If provided, the `onComplete` callback
 * will be called asynchronously after synchronization has finished.
 *
 * A single `update()` will generate a single "value" event at the location
 * where the `update()` was performed, regardless of how many children were
 * modified.
 *
 * Note that modifying data with `update()` will cancel any pending
 * transactions at that location, so extreme care should be taken if mixing
 * `update()` and `transaction()` to modify the same data.
 *
 * Passing `null` to `update()` will remove the data at this location.
 *
 * See
 * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.
 *
 * @param ref - The location to write to.
 * @param values - Object containing multiple values.
 * @returns Resolves when update on server is complete.
 */ function update(ref1, values) {
    validateFirebaseMergeDataArg('update', values, ref1._path, false);
    var deferred = new _util.Deferred();
    repoUpdate(ref1._repo, ref1._path, values, deferred.wrapCallback(function() {
    }));
    return deferred.promise;
}
/**
 * Gets the most up-to-date result for this query.
 *
 * @param query - The query to run.
 * @returns A promise which resolves to the resulting DataSnapshot if a value is
 * available, or rejects if the client is unable to return a value (e.g., if the
 * server is unreachable and there is nothing cached).
 */ function get(query) {
    query = _util.getModularInstance(query);
    return repoGetValue(query._repo, query).then(function(node) {
        return new DataSnapshot$1(node, new ReferenceImpl1(query._repo, query._path), query._queryParams.getIndex());
    });
}
/**
 * Represents registration for 'value' events.
 */ var ValueEventRegistration = function() {
    function ValueEventRegistration1(callbackContext) {
        this.callbackContext = callbackContext;
    }
    ValueEventRegistration1.prototype.respondsTo = function(eventType) {
        return eventType === 'value';
    };
    ValueEventRegistration1.prototype.createEvent = function(change, query) {
        var index = query._queryParams.getIndex();
        return new DataEvent('value', this, new DataSnapshot$1(change.snapshotNode, new ReferenceImpl1(query._repo, query._path), index));
    };
    ValueEventRegistration1.prototype.getEventRunner = function(eventData) {
        var _this = this;
        if (eventData.getEventType() === 'cancel') return function() {
            return _this.callbackContext.onCancel(eventData.error);
        };
        else return function() {
            return _this.callbackContext.onValue(eventData.snapshot, null);
        };
    };
    ValueEventRegistration1.prototype.createCancelEvent = function(error4, path) {
        if (this.callbackContext.hasCancelCallback) return new CancelEvent(this, error4, path);
        else return null;
    };
    ValueEventRegistration1.prototype.matches = function(other) {
        if (!(other instanceof ValueEventRegistration1)) return false;
        else if (!other.callbackContext || !this.callbackContext) // If no callback specified, we consider it to match any callback.
        return true;
        else return other.callbackContext.matches(this.callbackContext);
    };
    ValueEventRegistration1.prototype.hasAnyCallback = function() {
        return this.callbackContext !== null;
    };
    return ValueEventRegistration1;
}();
/**
 * Represents the registration of a child_x event.
 */ var ChildEventRegistration = function() {
    function ChildEventRegistration1(eventType, callbackContext) {
        this.eventType = eventType;
        this.callbackContext = callbackContext;
    }
    ChildEventRegistration1.prototype.respondsTo = function(eventType) {
        var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;
        eventToCheck = eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;
        return this.eventType === eventToCheck;
    };
    ChildEventRegistration1.prototype.createCancelEvent = function(error4, path) {
        if (this.callbackContext.hasCancelCallback) return new CancelEvent(this, error4, path);
        else return null;
    };
    ChildEventRegistration1.prototype.createEvent = function(change, query) {
        _util.assert(change.childName != null, 'Child events should have a childName.');
        var childRef = child(new ReferenceImpl1(query._repo, query._path), change.childName);
        var index = query._queryParams.getIndex();
        return new DataEvent(change.type, this, new DataSnapshot$1(change.snapshotNode, childRef, index), change.prevName);
    };
    ChildEventRegistration1.prototype.getEventRunner = function(eventData) {
        var _this = this;
        if (eventData.getEventType() === 'cancel') return function() {
            return _this.callbackContext.onCancel(eventData.error);
        };
        else return function() {
            return _this.callbackContext.onValue(eventData.snapshot, eventData.prevName);
        };
    };
    ChildEventRegistration1.prototype.matches = function(other) {
        if (other instanceof ChildEventRegistration1) return this.eventType === other.eventType && (!this.callbackContext || !other.callbackContext || this.callbackContext.matches(other.callbackContext));
        return false;
    };
    ChildEventRegistration1.prototype.hasAnyCallback = function() {
        return !!this.callbackContext;
    };
    return ChildEventRegistration1;
}();
function addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {
    var cancelCallback;
    if (typeof cancelCallbackOrListenOptions === 'object') {
        cancelCallback = undefined;
        options = cancelCallbackOrListenOptions;
    }
    if (typeof cancelCallbackOrListenOptions === 'function') cancelCallback = cancelCallbackOrListenOptions;
    if (options && options.onlyOnce) {
        var userCallback_1 = callback;
        var onceCallback = function(dataSnapshot, previousChildName) {
            repoRemoveEventCallbackForQuery(query._repo, query, container);
            userCallback_1(dataSnapshot, previousChildName);
        };
        onceCallback.userCallback = callback.userCallback;
        onceCallback.context = callback.context;
        callback = onceCallback;
    }
    var callbackContext = new CallbackContext(callback, cancelCallback || undefined);
    var container = eventType === 'value' ? new ValueEventRegistration(callbackContext) : new ChildEventRegistration(eventType, callbackContext);
    repoAddEventCallbackForQuery(query._repo, query, container);
    return function() {
        return repoRemoveEventCallbackForQuery(query._repo, query, container);
    };
}
function onValue(query, callback, cancelCallbackOrListenOptions, options) {
    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);
}
function onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {
    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);
}
function onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {
    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);
}
function onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {
    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);
}
function onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {
    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);
}
/**
 * Detaches a callback previously attached with `on()`.
 *
 * Detach a callback previously attached with `on()`. Note that if `on()` was
 * called multiple times with the same eventType and callback, the callback
 * will be called multiple times for each event, and `off()` must be called
 * multiple times to remove the callback. Calling `off()` on a parent listener
 * will not automatically remove listeners registered on child nodes, `off()`
 * must also be called on any child listeners to remove the callback.
 *
 * If a callback is not specified, all callbacks for the specified eventType
 * will be removed. Similarly, if no eventType is specified, all callbacks
 * for the `Reference` will be removed.
 *
 * Individual listeners can also be removed by invoking their unsubscribe
 * callbacks.
 *
 * @param query - The query that the listener was registered with.
 * @param eventType - One of the following strings: "value", "child_added",
 * "child_changed", "child_removed", or "child_moved." If omitted, all callbacks
 * for the `Reference` will be removed.
 * @param callback - The callback function that was passed to `on()` or
 * `undefined` to remove all callbacks.
 */ function off(query, eventType, callback) {
    var container = null;
    var expCallback = callback ? new CallbackContext(callback) : null;
    if (eventType === 'value') container = new ValueEventRegistration(expCallback);
    else if (eventType) container = new ChildEventRegistration(eventType, expCallback);
    repoRemoveEventCallbackForQuery(query._repo, query, container);
}
/**
 * A `QueryConstraint` is used to narrow the set of documents returned by a
 * Database query. `QueryConstraint`s are created by invoking {@link endAt},
 * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link
 * limitToFirst}, {@link limitToLast}, {@link orderByChild},
 * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,
 * {@link orderByValue}  or {@link equalTo} and
 * can then be passed to {@link query} to create a new query instance that
 * also contains this `QueryConstraint`.
 */ var QueryConstraint = function() {
    function QueryConstraint1() {
    }
    return QueryConstraint1;
}();
var QueryEndAtConstraint1 = function(_super) {
    _tslib.__extends(QueryEndAtConstraint2, _super);
    function QueryEndAtConstraint2(_value, _key) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        _this._key = _key;
        return _this;
    }
    QueryEndAtConstraint2.prototype._apply = function(query) {
        validateFirebaseDataArg('endAt', this._value, query._path, true);
        var newParams = queryParamsEndAt(query._queryParams, this._value, this._key);
        validateLimit(newParams);
        validateQueryEndpoints(newParams);
        if (query._queryParams.hasEnd()) throw new Error("endAt: Starting point was already set (by another call to endAt, endBefore or equalTo).");
        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);
    };
    return QueryEndAtConstraint2;
}(QueryConstraint);
/**
 * Creates a `QueryConstraint` with the specified ending point.
 *
 * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`
 * allows you to choose arbitrary starting and ending points for your queries.
 *
 * The ending point is inclusive, so children with exactly the specified value
 * will be included in the query. The optional key argument can be used to
 * further limit the range of the query. If it is specified, then children that
 * have exactly the specified value must also have a key name less than or equal
 * to the specified key.
 *
 * You can read more about `endAt()` in
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.
 *
 * @param value - The value to end at. The argument type depends on which
 * `orderBy*()` function was used in this query. Specify a value that matches
 * the `orderBy*()` type. When used in combination with `orderByKey()`, the
 * value must be a string.
 * @param key - The child key to end at, among the children with the previously
 * specified priority. This argument is only allowed if ordering by child,
 * value, or priority.
 */ function endAt(value, key) {
    validateKey('endAt', 'key', key, true);
    return new QueryEndAtConstraint1(value, key);
}
var QueryEndBeforeConstraint1 = function(_super) {
    _tslib.__extends(QueryEndBeforeConstraint2, _super);
    function QueryEndBeforeConstraint2(_value, _key) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        _this._key = _key;
        return _this;
    }
    QueryEndBeforeConstraint2.prototype._apply = function(query) {
        validateFirebaseDataArg('endBefore', this._value, query._path, false);
        var newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);
        validateLimit(newParams);
        validateQueryEndpoints(newParams);
        if (query._queryParams.hasEnd()) throw new Error("endBefore: Starting point was already set (by another call to endAt, endBefore or equalTo).");
        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);
    };
    return QueryEndBeforeConstraint2;
}(QueryConstraint);
/**
 * Creates a `QueryConstraint` with the specified ending point (exclusive).
 *
 * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`
 * allows you to choose arbitrary starting and ending points for your queries.
 *
 * The ending point is exclusive. If only a value is provided, children
 * with a value less than the specified value will be included in the query.
 * If a key is specified, then children must have a value lesss than or equal
 * to the specified value and a a key name less than the specified key.
 *
 * @param value - The value to end before. The argument type depends on which
 * `orderBy*()` function was used in this query. Specify a value that matches
 * the `orderBy*()` type. When used in combination with `orderByKey()`, the
 * value must be a string.
 * @param key - The child key to end before, among the children with the
 * previously specified priority. This argument is only allowed if ordering by
 * child, value, or priority.
 */ function endBefore(value, key) {
    validateKey('endBefore', 'key', key, true);
    return new QueryEndBeforeConstraint1(value, key);
}
var QueryStartAtConstraint1 = function(_super) {
    _tslib.__extends(QueryStartAtConstraint2, _super);
    function QueryStartAtConstraint2(_value, _key) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        _this._key = _key;
        return _this;
    }
    QueryStartAtConstraint2.prototype._apply = function(query) {
        validateFirebaseDataArg('startAt', this._value, query._path, true);
        var newParams = queryParamsStartAt(query._queryParams, this._value, this._key);
        validateLimit(newParams);
        validateQueryEndpoints(newParams);
        if (query._queryParams.hasStart()) throw new Error("startAt: Starting point was already set (by another call to startAt, startBefore or equalTo).");
        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);
    };
    return QueryStartAtConstraint2;
}(QueryConstraint);
/**
 * Creates a `QueryConstraint` with the specified starting point.
 *
 * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`
 * allows you to choose arbitrary starting and ending points for your queries.
 *
 * The starting point is inclusive, so children with exactly the specified value
 * will be included in the query. The optional key argument can be used to
 * further limit the range of the query. If it is specified, then children that
 * have exactly the specified value must also have a key name greater than or
 * equal to the specified key.
 *
 * You can read more about `startAt()` in
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.
 *
 * @param value - The value to start at. The argument type depends on which
 * `orderBy*()` function was used in this query. Specify a value that matches
 * the `orderBy*()` type. When used in combination with `orderByKey()`, the
 * value must be a string.
 * @param key - The child key to start at. This argument is only allowed if
 * ordering by child, value, or priority.
 */ function startAt(value, key) {
    if (value === void 0) value = null;
    validateKey('startAt', 'key', key, true);
    return new QueryStartAtConstraint1(value, key);
}
var QueryStartAfterConstraint1 = function(_super) {
    _tslib.__extends(QueryStartAfterConstraint2, _super);
    function QueryStartAfterConstraint2(_value, _key) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        _this._key = _key;
        return _this;
    }
    QueryStartAfterConstraint2.prototype._apply = function(query) {
        validateFirebaseDataArg('startAfter', this._value, query._path, false);
        var newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);
        validateLimit(newParams);
        validateQueryEndpoints(newParams);
        if (query._queryParams.hasStart()) throw new Error("startAfter: Starting point was already set (by another call to startAt, startAfter, or equalTo).");
        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);
    };
    return QueryStartAfterConstraint2;
}(QueryConstraint);
/**
 * Creates a `QueryConstraint` with the specified starting point (exclusive).
 *
 * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`
 * allows you to choose arbitrary starting and ending points for your queries.
 *
 * The starting point is exclusive. If only a value is provided, children
 * with a value greater than the specified value will be included in the query.
 * If a key is specified, then children must have a value greater than or equal
 * to the specified value and a a key name greater than the specified key.
 *
 * @param value - The value to start after. The argument type depends on which
 * `orderBy*()` function was used in this query. Specify a value that matches
 * the `orderBy*()` type. When used in combination with `orderByKey()`, the
 * value must be a string.
 * @param key - The child key to start after. This argument is only allowed if
 * ordering by child, value, or priority.
 */ function startAfter(value, key) {
    validateKey('startAfter', 'key', key, true);
    return new QueryStartAfterConstraint1(value, key);
}
var QueryLimitToFirstConstraint1 = function(_super) {
    _tslib.__extends(QueryLimitToFirstConstraint2, _super);
    function QueryLimitToFirstConstraint2(_limit) {
        var _this = _super.call(this) || this;
        _this._limit = _limit;
        return _this;
    }
    QueryLimitToFirstConstraint2.prototype._apply = function(query) {
        if (query._queryParams.hasLimit()) throw new Error("limitToFirst: Limit was already set (by another call to limitToFirst or limitToLast).");
        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);
    };
    return QueryLimitToFirstConstraint2;
}(QueryConstraint);
/**
 * Creates a new `QueryConstraint` that if limited to the first specific number
 * of children.
 *
 * The `limitToFirst()` method is used to set a maximum number of children to be
 * synced for a given callback. If we set a limit of 100, we will initially only
 * receive up to 100 `child_added` events. If we have fewer than 100 messages
 * stored in our Database, a `child_added` event will fire for each message.
 * However, if we have over 100 messages, we will only receive a `child_added`
 * event for the first 100 ordered messages. As items change, we will receive
 * `child_removed` events for each item that drops out of the active list so
 * that the total number stays at 100.
 *
 * You can read more about `limitToFirst()` in
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.
 *
 * @param limit - The maximum number of nodes to include in this query.
 */ function limitToFirst(limit) {
    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) throw new Error('limitToFirst: First argument must be a positive integer.');
    return new QueryLimitToFirstConstraint1(limit);
}
var QueryLimitToLastConstraint1 = function(_super) {
    _tslib.__extends(QueryLimitToLastConstraint2, _super);
    function QueryLimitToLastConstraint2(_limit) {
        var _this = _super.call(this) || this;
        _this._limit = _limit;
        return _this;
    }
    QueryLimitToLastConstraint2.prototype._apply = function(query) {
        if (query._queryParams.hasLimit()) throw new Error("limitToLast: Limit was already set (by another call to limitToFirst or limitToLast).");
        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);
    };
    return QueryLimitToLastConstraint2;
}(QueryConstraint);
/**
 * Creates a new `QueryConstraint` that is limited to return only the last
 * specified number of children.
 *
 * The `limitToLast()` method is used to set a maximum number of children to be
 * synced for a given callback. If we set a limit of 100, we will initially only
 * receive up to 100 `child_added` events. If we have fewer than 100 messages
 * stored in our Database, a `child_added` event will fire for each message.
 * However, if we have over 100 messages, we will only receive a `child_added`
 * event for the last 100 ordered messages. As items change, we will receive
 * `child_removed` events for each item that drops out of the active list so
 * that the total number stays at 100.
 *
 * You can read more about `limitToLast()` in
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.
 *
 * @param limit - The maximum number of nodes to include in this query.
 */ function limitToLast(limit) {
    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) throw new Error('limitToLast: First argument must be a positive integer.');
    return new QueryLimitToLastConstraint1(limit);
}
var QueryOrderByChildConstraint1 = function(_super) {
    _tslib.__extends(QueryOrderByChildConstraint2, _super);
    function QueryOrderByChildConstraint2(_path) {
        var _this = _super.call(this) || this;
        _this._path = _path;
        return _this;
    }
    QueryOrderByChildConstraint2.prototype._apply = function(query) {
        validateNoPreviousOrderByCall(query, 'orderByChild');
        var parsedPath = new Path(this._path);
        if (pathIsEmpty(parsedPath)) throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');
        var index = new PathIndex1(parsedPath);
        var newParams = queryParamsOrderBy(query._queryParams, index);
        validateQueryEndpoints(newParams);
        return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/ true);
    };
    return QueryOrderByChildConstraint2;
}(QueryConstraint);
/**
 * Creates a new `QueryConstraint` that orders by the specified child key.
 *
 * Queries can only order by one key at a time. Calling `orderByChild()`
 * multiple times on the same query is an error.
 *
 * Firebase queries allow you to order your data by any child key on the fly.
 * However, if you know in advance what your indexes will be, you can define
 * them via the .indexOn rule in your Security Rules for better performance. See
 * the{@link https://firebase.google.com/docs/database/security/indexing-data}
 * rule for more information.
 *
 * You can read more about `orderByChild()` in
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.
 *
 * @param path - The path to order by.
 */ function orderByChild(path) {
    if (path === '$key') throw new Error('orderByChild: "$key" is invalid.  Use orderByKey() instead.');
    else if (path === '$priority') throw new Error('orderByChild: "$priority" is invalid.  Use orderByPriority() instead.');
    else if (path === '$value') throw new Error('orderByChild: "$value" is invalid.  Use orderByValue() instead.');
    validatePathString('orderByChild', 'path', path, false);
    return new QueryOrderByChildConstraint1(path);
}
var QueryOrderByKeyConstraint1 = function(_super) {
    _tslib.__extends(QueryOrderByKeyConstraint2, _super);
    function QueryOrderByKeyConstraint2() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    QueryOrderByKeyConstraint2.prototype._apply = function(query) {
        validateNoPreviousOrderByCall(query, 'orderByKey');
        var newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);
        validateQueryEndpoints(newParams);
        return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/ true);
    };
    return QueryOrderByKeyConstraint2;
}(QueryConstraint);
/**
 * Creates a new `QueryConstraint` that orders by the key.
 *
 * Sorts the results of a query by their (ascending) key values.
 *
 * You can read more about `orderByKey()` in
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.
 */ function orderByKey() {
    return new QueryOrderByKeyConstraint1();
}
var QueryOrderByPriorityConstraint1 = function(_super) {
    _tslib.__extends(QueryOrderByPriorityConstraint2, _super);
    function QueryOrderByPriorityConstraint2() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    QueryOrderByPriorityConstraint2.prototype._apply = function(query) {
        validateNoPreviousOrderByCall(query, 'orderByPriority');
        var newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);
        validateQueryEndpoints(newParams);
        return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/ true);
    };
    return QueryOrderByPriorityConstraint2;
}(QueryConstraint);
/**
 * Creates a new `QueryConstraint` that orders by priority.
 *
 * Applications need not use priority but can order collections by
 * ordinary properties (see
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}
 * for alternatives to priority.
 */ function orderByPriority() {
    return new QueryOrderByPriorityConstraint1();
}
var QueryOrderByValueConstraint1 = function(_super) {
    _tslib.__extends(QueryOrderByValueConstraint2, _super);
    function QueryOrderByValueConstraint2() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    QueryOrderByValueConstraint2.prototype._apply = function(query) {
        validateNoPreviousOrderByCall(query, 'orderByValue');
        var newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);
        validateQueryEndpoints(newParams);
        return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/ true);
    };
    return QueryOrderByValueConstraint2;
}(QueryConstraint);
/**
 * Creates a new `QueryConstraint` that orders by value.
 *
 * If the children of a query are all scalar values (string, number, or
 * boolean), you can order the results by their (ascending) values.
 *
 * You can read more about `orderByValue()` in
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.
 */ function orderByValue() {
    return new QueryOrderByValueConstraint1();
}
var QueryEqualToValueConstraint1 = function(_super) {
    _tslib.__extends(QueryEqualToValueConstraint2, _super);
    function QueryEqualToValueConstraint2(_value, _key) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        _this._key = _key;
        return _this;
    }
    QueryEqualToValueConstraint2.prototype._apply = function(query) {
        validateFirebaseDataArg('equalTo', this._value, query._path, false);
        if (query._queryParams.hasStart()) throw new Error("equalTo: Starting point was already set (by another call to startAt/startAfter or equalTo).");
        if (query._queryParams.hasEnd()) throw new Error("equalTo: Ending point was already set (by another call to endAt/endBefore or equalTo).");
        return new QueryEndAtConstraint1(this._value, this._key)._apply(new QueryStartAtConstraint1(this._value, this._key)._apply(query));
    };
    return QueryEqualToValueConstraint2;
}(QueryConstraint);
/**
 * Creates a `QueryConstraint` that includes children that match the specified
 * value.
 *
 * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`
 * allows you to choose arbitrary starting and ending points for your queries.
 *
 * The optional key argument can be used to further limit the range of the
 * query. If it is specified, then children that have exactly the specified
 * value must also have exactly the specified key as their key name. This can be
 * used to filter result sets with many matches for the same value.
 *
 * You can read more about `equalTo()` in
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.
 *
 * @param value - The value to match for. The argument type depends on which
 * `orderBy*()` function was used in this query. Specify a value that matches
 * the `orderBy*()` type. When used in combination with `orderByKey()`, the
 * value must be a string.
 * @param key - The child key to start at, among the children with the
 * previously specified priority. This argument is only allowed if ordering by
 * child, value, or priority.
 */ function equalTo(value, key) {
    validateKey('equalTo', 'key', key, true);
    return new QueryEqualToValueConstraint1(value, key);
}
/**
 * Creates a new immutable instance of `Query` that is extended to also include
 * additional query constraints.
 *
 * @param query - The Query instance to use as a base for the new constraints.
 * @param queryConstraints - The list of `QueryConstraint`s to apply.
 * @throws if any of the provided query constraints cannot be combined with the
 * existing or new constraints.
 */ function query(query1) {
    var e_1, _a;
    var queryConstraints = [];
    for(var _i = 1; _i < arguments.length; _i++)queryConstraints[_i - 1] = arguments[_i];
    var queryImpl = _util.getModularInstance(query1);
    try {
        for(var queryConstraints_1 = _tslib.__values(queryConstraints), queryConstraints_1_1 = queryConstraints_1.next(); !queryConstraints_1_1.done; queryConstraints_1_1 = queryConstraints_1.next()){
            var constraint = queryConstraints_1_1.value;
            queryImpl = constraint._apply(queryImpl);
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (queryConstraints_1_1 && !queryConstraints_1_1.done && (_a = queryConstraints_1.return)) _a.call(queryConstraints_1);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    return queryImpl;
}
/**
 * Define reference constructor in various modules
 *
 * We are doing this here to avoid several circular
 * dependency issues
 */ syncPointSetReferenceConstructor(ReferenceImpl1);
syncTreeSetReferenceConstructor(ReferenceImpl1);
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * This variable is also defined in the firebase node.js admin SDK. Before
 * modifying this definition, consult the definition in:
 *
 * https://github.com/firebase/firebase-admin-node
 *
 * and make sure the two are consistent.
 */ var FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';
/**
 * Creates and caches Repo instances.
 */ var repos = {
};
/**
 * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).
 */ var useRestClient = false;
/**
 * Update an existing repo in place to point to a new host/port.
 */ function repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {
    repo.repoInfo_ = new RepoInfo(host + ":" + port, /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);
    if (tokenProvider) repo.authTokenProvider_ = tokenProvider;
}
/**
 * This function should only ever be called to CREATE a new database instance.
 * @internal
 */ function repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {
    var dbUrl = url || app.options.databaseURL;
    if (dbUrl === undefined) {
        if (!app.options.projectId) fatal("Can't determine Firebase Database URL. Be sure to include  a Project ID when calling firebase.initializeApp().");
        log('Using default host for project ', app.options.projectId);
        dbUrl = app.options.projectId + "-default-rtdb.firebaseio.com";
    }
    var parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);
    var repoInfo = parsedUrl.repoInfo;
    var isEmulator;
    var dbEmulatorHost = undefined;
    if (typeof process !== 'undefined') dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];
    if (dbEmulatorHost) {
        isEmulator = true;
        dbUrl = "http://" + dbEmulatorHost + "?ns=" + repoInfo.namespace;
        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);
        repoInfo = parsedUrl.repoInfo;
    } else isEmulator = !parsedUrl.repoInfo.secure;
    var authTokenProvider = nodeAdmin && isEmulator ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER) : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);
    validateUrl('Invalid Firebase Database URL', parsedUrl);
    if (!pathIsEmpty(parsedUrl.path)) fatal("Database URL must point to the root of a Firebase Database (not including a child path).");
    var repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));
    return new Database$1(repo, app);
}
/**
 * Remove the repo and make sure it is disconnected.
 *
 */ function repoManagerDeleteRepo(repo, appName) {
    var appRepos = repos[appName];
    // This should never happen...
    if (!appRepos || appRepos[repo.key] !== repo) fatal("Database " + appName + "(" + repo.repoInfo_ + ") has already been deleted.");
    repoInterrupt(repo);
    delete appRepos[repo.key];
}
/**
 * Ensures a repo doesn't already exist and then creates one using the
 * provided app.
 *
 * @param repoInfo - The metadata about the Repo
 * @returns The Repo object for the specified server / repoName.
 */ function repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {
    var appRepos = repos[app.name];
    if (!appRepos) {
        appRepos = {
        };
        repos[app.name] = appRepos;
    }
    var repo = appRepos[repoInfo.toURLString()];
    if (repo) fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');
    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);
    appRepos[repoInfo.toURLString()] = repo;
    return repo;
}
/**
 * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.
 */ function repoManagerForceRestClient(forceRestClient) {
    useRestClient = forceRestClient;
}
/**
 * Class representing a Firebase Realtime Database.
 */ var Database$1 = function() {
    /** @hideconstructor */ function Database(_repoInternal, /** The FirebaseApp associated with this Realtime Database instance. */ app) {
        this._repoInternal = _repoInternal;
        this.app = app;
        /** Represents a database instance. */ this['type'] = 'database';
        /** Track if the instance has been used (root or repo accessed) */ this._instanceStarted = false;
    }
    Object.defineProperty(Database.prototype, "_repo", {
        get: function() {
            if (!this._instanceStarted) {
                repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);
                this._instanceStarted = true;
            }
            return this._repoInternal;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Database.prototype, "_root", {
        get: function() {
            if (!this._rootInternal) this._rootInternal = new ReferenceImpl1(this._repo, newEmptyPath());
            return this._rootInternal;
        },
        enumerable: false,
        configurable: true
    });
    Database.prototype._delete = function() {
        if (this._rootInternal !== null) {
            repoManagerDeleteRepo(this._repo, this.app.name);
            this._repoInternal = null;
            this._rootInternal = null;
        }
        return Promise.resolve();
    };
    Database.prototype._checkNotDeleted = function(apiName) {
        if (this._rootInternal === null) fatal('Cannot call ' + apiName + ' on a deleted database.');
    };
    return Database;
}();
/**
 * Modify the provided instance to communicate with the Realtime Database
 * emulator.
 *
 * <p>Note: This method must be called before performing any other operation.
 *
 * @param db - The instance to modify.
 * @param host - The emulator host (ex: localhost)
 * @param port - The emulator port (ex: 8080)
 * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules
 */ function connectDatabaseEmulator(db, host, port, options) {
    if (options === void 0) options = {
    };
    db = _util.getModularInstance(db);
    db._checkNotDeleted('useEmulator');
    if (db._instanceStarted) fatal('Cannot call useEmulator() after instance has already been initialized.');
    var repo = db._repoInternal;
    var tokenProvider = undefined;
    if (repo.repoInfo_.nodeAdmin) {
        if (options.mockUserToken) fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the "firebase" package instead of "firebase-admin".');
        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);
    } else if (options.mockUserToken) {
        var token = typeof options.mockUserToken === 'string' ? options.mockUserToken : _util.createMockUserToken(options.mockUserToken, db.app.options.projectId);
        tokenProvider = new EmulatorTokenProvider(token);
    }
    // Modify the repo to apply emulator settings
    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);
}
/**
 * Disconnects from the server (all Database operations will be completed
 * offline).
 *
 * The client automatically maintains a persistent connection to the Database
 * server, which will remain active indefinitely and reconnect when
 * disconnected. However, the `goOffline()` and `goOnline()` methods may be used
 * to control the client connection in cases where a persistent connection is
 * undesirable.
 *
 * While offline, the client will no longer receive data updates from the
 * Database. However, all Database operations performed locally will continue to
 * immediately fire events, allowing your application to continue behaving
 * normally. Additionally, each operation performed locally will automatically
 * be queued and retried upon reconnection to the Database server.
 *
 * To reconnect to the Database and begin receiving remote events, see
 * `goOnline()`.
 *
 * @param db - The instance to disconnect.
 */ function goOffline(db) {
    db = _util.getModularInstance(db);
    db._checkNotDeleted('goOffline');
    repoInterrupt(db._repo);
}
/**
 * Reconnects to the server and synchronizes the offline Database state
 * with the server state.
 *
 * This method should be used after disabling the active connection with
 * `goOffline()`. Once reconnected, the client will transmit the proper data
 * and fire the appropriate events so that your client "catches up"
 * automatically.
 *
 * @param db - The instance to reconnect.
 */ function goOnline(db) {
    db = _util.getModularInstance(db);
    db._checkNotDeleted('goOnline');
    repoResume(db._repo);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var SERVER_TIMESTAMP = {
    '.sv': 'timestamp'
};
/**
 * Returns a placeholder value for auto-populating the current timestamp (time
 * since the Unix epoch, in milliseconds) as determined by the Firebase
 * servers.
 */ function serverTimestamp() {
    return SERVER_TIMESTAMP;
}
/**
 * Returns a placeholder value that can be used to atomically increment the
 * current database value by the provided delta.
 *
 * @param delta - the amount to modify the current value atomically.
 * @returns A placeholder value for modifying data atomically server-side.
 */ function increment(delta) {
    return {
        '.sv': {
            'increment': delta
        }
    };
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A type for the resolve value of Firebase.transaction.
 */ var TransactionResult$1 = function() {
    /** @hideconstructor */ function TransactionResult(/** Whether the transaction was successfully committed. */ committed, /** The resulting data snapshot. */ snapshot) {
        this.committed = committed;
        this.snapshot = snapshot;
    }
    /** Returns a JSON-serializable representation of this object. */ TransactionResult.prototype.toJSON = function() {
        return {
            committed: this.committed,
            snapshot: this.snapshot.toJSON()
        };
    };
    return TransactionResult;
}();
/**
 * Atomically modifies the data at this location.
 *
 * Atomically modify the data at this location. Unlike a normal `set()`, which
 * just overwrites the data regardless of its previous value, `transaction()` is
 * used to modify the existing value to a new value, ensuring there are no
 * conflicts with other clients writing to the same location at the same time.
 *
 * To accomplish this, you pass `runTransaction()` an update function which is
 * used to transform the current value into a new value. If another client
 * writes to the location before your new value is successfully written, your
 * update function will be called again with the new current value, and the
 * write will be retried. This will happen repeatedly until your write succeeds
 * without conflict or you abort the transaction by not returning a value from
 * your update function.
 *
 * Note: Modifying data with `set()` will cancel any pending transactions at
 * that location, so extreme care should be taken if mixing `set()` and
 * `transaction()` to update the same data.
 *
 * Note: When using transactions with Security and Firebase Rules in place, be
 * aware that a client needs `.read` access in addition to `.write` access in
 * order to perform a transaction. This is because the client-side nature of
 * transactions requires the client to read the data in order to transactionally
 * update it.
 *
 * @param ref - The location to atomically modify.
 * @param transactionUpdate - A developer-supplied function which will be passed
 * the current data stored at this location (as a JavaScript object). The
 * function should return the new value it would like written (as a JavaScript
 * object). If `undefined` is returned (i.e. you return with no arguments) the
 * transaction will be aborted and the data at this location will not be
 * modified.
 * @param options - An options object to configure transactions.
 * @returns A Promise that can optionally be used instead of the onComplete
 * callback to handle success and failure.
 */ function runTransaction(ref1, // eslint-disable-next-line @typescript-eslint/no-explicit-any
transactionUpdate, options) {
    var _a;
    ref1 = _util.getModularInstance(ref1);
    validateWritablePath('Reference.transaction', ref1._path);
    if (ref1.key === '.length' || ref1.key === '.keys') throw 'Reference.transaction failed: ' + ref1.key + ' is a read-only object.';
    var applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;
    var deferred = new _util.Deferred();
    var promiseComplete = function(error4, committed, node) {
        var dataSnapshot = null;
        if (error4) deferred.reject(error4);
        else {
            dataSnapshot = new DataSnapshot$1(node, new ReferenceImpl1(ref1._repo, ref1._path), PRIORITY_INDEX);
            deferred.resolve(new TransactionResult$1(committed, dataSnapshot));
        }
    };
    // Add a watch to make sure we get server updates.
    var unwatcher = onValue(ref1, function() {
    });
    repoStartTransaction(ref1._repo, ref1._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);
    return deferred.promise;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var OnDisconnect = function() {
    function OnDisconnect1(_delegate) {
        this._delegate = _delegate;
    }
    OnDisconnect1.prototype.cancel = function(onComplete) {
        _util.validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);
        _util.validateCallback('OnDisconnect.cancel', 'onComplete', onComplete, true);
        var result = this._delegate.cancel();
        if (onComplete) result.then(function() {
            return onComplete(null);
        }, function(error4) {
            return onComplete(error4);
        });
        return result;
    };
    OnDisconnect1.prototype.remove = function(onComplete) {
        _util.validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);
        _util.validateCallback('OnDisconnect.remove', 'onComplete', onComplete, true);
        var result = this._delegate.remove();
        if (onComplete) result.then(function() {
            return onComplete(null);
        }, function(error4) {
            return onComplete(error4);
        });
        return result;
    };
    OnDisconnect1.prototype.set = function(value, onComplete) {
        _util.validateArgCount('OnDisconnect.set', 1, 2, arguments.length);
        _util.validateCallback('OnDisconnect.set', 'onComplete', onComplete, true);
        var result = this._delegate.set(value);
        if (onComplete) result.then(function() {
            return onComplete(null);
        }, function(error4) {
            return onComplete(error4);
        });
        return result;
    };
    OnDisconnect1.prototype.setWithPriority = function(value, priority, onComplete) {
        _util.validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);
        _util.validateCallback('OnDisconnect.setWithPriority', 'onComplete', onComplete, true);
        var result = this._delegate.setWithPriority(value, priority);
        if (onComplete) result.then(function() {
            return onComplete(null);
        }, function(error4) {
            return onComplete(error4);
        });
        return result;
    };
    OnDisconnect1.prototype.update = function(objectToMerge, onComplete) {
        _util.validateArgCount('OnDisconnect.update', 1, 2, arguments.length);
        if (Array.isArray(objectToMerge)) {
            var newObjectToMerge = {
            };
            for(var i3 = 0; i3 < objectToMerge.length; ++i3)newObjectToMerge['' + i3] = objectToMerge[i3];
            objectToMerge = newObjectToMerge;
            warn("Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.");
        }
        _util.validateCallback('OnDisconnect.update', 'onComplete', onComplete, true);
        var result = this._delegate.update(objectToMerge);
        if (onComplete) result.then(function() {
            return onComplete(null);
        }, function(error4) {
            return onComplete(error4);
        });
        return result;
    };
    return OnDisconnect1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var TransactionResult = function() {
    /**
     * A type for the resolve value of Firebase.transaction.
     */ function TransactionResult1(committed, snapshot) {
        this.committed = committed;
        this.snapshot = snapshot;
    }
    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
    // for end-users
    TransactionResult1.prototype.toJSON = function() {
        _util.validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);
        return {
            committed: this.committed,
            snapshot: this.snapshot.toJSON()
        };
    };
    return TransactionResult1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /* eslint-enable @typescript-eslint/no-explicit-any */ /**
 * Class representing a firebase data snapshot.  It wraps a SnapshotNode and
 * surfaces the public methods (val, forEach, etc.) we want to expose.
 */ var DataSnapshot = function() {
    function DataSnapshot1(_database, _delegate) {
        this._database = _database;
        this._delegate = _delegate;
    }
    /**
     * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is
     * empty.
     *
     * @returns JSON representation of the DataSnapshot contents, or null if empty.
     */ DataSnapshot1.prototype.val = function() {
        _util.validateArgCount('DataSnapshot.val', 0, 0, arguments.length);
        return this._delegate.val();
    };
    /**
     * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting
     * the entire node contents.
     * @returns JSON representation of the DataSnapshot contents, or null if empty.
     */ DataSnapshot1.prototype.exportVal = function() {
        _util.validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);
        return this._delegate.exportVal();
    };
    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
    // for end-users
    DataSnapshot1.prototype.toJSON = function() {
        // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content
        _util.validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);
        return this._delegate.toJSON();
    };
    /**
     * Returns whether the snapshot contains a non-null value.
     *
     * @returns Whether the snapshot contains a non-null value, or is empty.
     */ DataSnapshot1.prototype.exists = function() {
        _util.validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);
        return this._delegate.exists();
    };
    /**
     * Returns a DataSnapshot of the specified child node's contents.
     *
     * @param path - Path to a child.
     * @returns DataSnapshot for child node.
     */ DataSnapshot1.prototype.child = function(path) {
        _util.validateArgCount('DataSnapshot.child', 0, 1, arguments.length);
        // Ensure the childPath is a string (can be a number)
        path = String(path);
        validatePathString('DataSnapshot.child', 'path', path, false);
        return new DataSnapshot1(this._database, this._delegate.child(path));
    };
    /**
     * Returns whether the snapshot contains a child at the specified path.
     *
     * @param path - Path to a child.
     * @returns Whether the child exists.
     */ DataSnapshot1.prototype.hasChild = function(path) {
        _util.validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);
        validatePathString('DataSnapshot.hasChild', 'path', path, false);
        return this._delegate.hasChild(path);
    };
    /**
     * Returns the priority of the object, or null if no priority was set.
     *
     * @returns The priority.
     */ DataSnapshot1.prototype.getPriority = function() {
        _util.validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);
        return this._delegate.priority;
    };
    /**
     * Iterates through child nodes and calls the specified action for each one.
     *
     * @param action - Callback function to be called
     * for each child.
     * @returns True if forEach was canceled by action returning true for
     * one of the child nodes.
     */ DataSnapshot1.prototype.forEach = function(action) {
        var _this = this;
        _util.validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);
        _util.validateCallback('DataSnapshot.forEach', 'action', action, false);
        return this._delegate.forEach(function(expDataSnapshot) {
            return action(new DataSnapshot1(_this._database, expDataSnapshot));
        });
    };
    /**
     * Returns whether this DataSnapshot has children.
     * @returns True if the DataSnapshot contains 1 or more child nodes.
     */ DataSnapshot1.prototype.hasChildren = function() {
        _util.validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);
        return this._delegate.hasChildren();
    };
    Object.defineProperty(DataSnapshot1.prototype, "key", {
        get: function() {
            return this._delegate.key;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns the number of children for this DataSnapshot.
     * @returns The number of children that this DataSnapshot contains.
     */ DataSnapshot1.prototype.numChildren = function() {
        _util.validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);
        return this._delegate.size;
    };
    /**
     * @returns The Firebase reference for the location this snapshot's data came
     * from.
     */ DataSnapshot1.prototype.getRef = function() {
        _util.validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);
        return new Reference1(this._database, this._delegate.ref);
    };
    Object.defineProperty(DataSnapshot1.prototype, "ref", {
        get: function() {
            return this.getRef();
        },
        enumerable: false,
        configurable: true
    });
    return DataSnapshot1;
}();
/**
 * A Query represents a filter to be applied to a firebase location.  This object purely represents the
 * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.
 *
 * Since every Firebase reference is a query, Firebase inherits from this object.
 */ var Query = function() {
    function Query1(database, _delegate) {
        this.database = database;
        this._delegate = _delegate;
    }
    Query1.prototype.on = function(eventType, callback, cancelCallbackOrContext, context) {
        var _this = this;
        var _a;
        _util.validateArgCount('Query.on', 2, 4, arguments.length);
        _util.validateCallback('Query.on', 'callback', callback, false);
        var ret = Query1.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);
        var valueCallback = function(expSnapshot, previousChildName) {
            callback.call(ret.context, new DataSnapshot(_this.database, expSnapshot), previousChildName);
        };
        valueCallback.userCallback = callback;
        valueCallback.context = ret.context;
        var cancelCallback = (_a = ret.cancel) === null || _a === void 0 ? void 0 : _a.bind(ret.context);
        switch(eventType){
            case 'value':
                onValue(this._delegate, valueCallback, cancelCallback);
                return callback;
            case 'child_added':
                onChildAdded(this._delegate, valueCallback, cancelCallback);
                return callback;
            case 'child_removed':
                onChildRemoved(this._delegate, valueCallback, cancelCallback);
                return callback;
            case 'child_changed':
                onChildChanged(this._delegate, valueCallback, cancelCallback);
                return callback;
            case 'child_moved':
                onChildMoved(this._delegate, valueCallback, cancelCallback);
                return callback;
            default:
                throw new Error(_util.errorPrefix('Query.on', 'eventType') + 'must be a valid event type = "value", "child_added", "child_removed", ' + '"child_changed", or "child_moved".');
        }
    };
    Query1.prototype.off = function(eventType, callback, context) {
        _util.validateArgCount('Query.off', 0, 3, arguments.length);
        validateEventType('Query.off', eventType, true);
        _util.validateCallback('Query.off', 'callback', callback, true);
        _util.validateContextObject('Query.off', 'context', context, true);
        if (callback) {
            var valueCallback = function() {
            };
            valueCallback.userCallback = callback;
            valueCallback.context = context;
            off(this._delegate, eventType, valueCallback);
        } else off(this._delegate, eventType);
    };
    /**
     * Get the server-value for this query, or return a cached value if not connected.
     */ Query1.prototype.get = function() {
        var _this = this;
        return get(this._delegate).then(function(expSnapshot) {
            return new DataSnapshot(_this.database, expSnapshot);
        });
    };
    /**
     * Attaches a listener, waits for the first event, and then removes the listener
     */ Query1.prototype.once = function(eventType, callback, failureCallbackOrContext, context) {
        var _this = this;
        _util.validateArgCount('Query.once', 1, 4, arguments.length);
        _util.validateCallback('Query.once', 'callback', callback, true);
        var ret = Query1.getCancelAndContextArgs_('Query.once', failureCallbackOrContext, context);
        var deferred = new _util.Deferred();
        var valueCallback = function(expSnapshot, previousChildName) {
            var result = new DataSnapshot(_this.database, expSnapshot);
            if (callback) callback.call(ret.context, result, previousChildName);
            deferred.resolve(result);
        };
        valueCallback.userCallback = callback;
        valueCallback.context = ret.context;
        var cancelCallback = function(error4) {
            if (ret.cancel) ret.cancel.call(ret.context, error4);
            deferred.reject(error4);
        };
        switch(eventType){
            case 'value':
                onValue(this._delegate, valueCallback, cancelCallback, {
                    onlyOnce: true
                });
                break;
            case 'child_added':
                onChildAdded(this._delegate, valueCallback, cancelCallback, {
                    onlyOnce: true
                });
                break;
            case 'child_removed':
                onChildRemoved(this._delegate, valueCallback, cancelCallback, {
                    onlyOnce: true
                });
                break;
            case 'child_changed':
                onChildChanged(this._delegate, valueCallback, cancelCallback, {
                    onlyOnce: true
                });
                break;
            case 'child_moved':
                onChildMoved(this._delegate, valueCallback, cancelCallback, {
                    onlyOnce: true
                });
                break;
            default:
                throw new Error(_util.errorPrefix('Query.once', 'eventType') + 'must be a valid event type = "value", "child_added", "child_removed", ' + '"child_changed", or "child_moved".');
        }
        return deferred.promise;
    };
    /**
     * Set a limit and anchor it to the start of the window.
     */ Query1.prototype.limitToFirst = function(limit) {
        _util.validateArgCount('Query.limitToFirst', 1, 1, arguments.length);
        return new Query1(this.database, query(this._delegate, limitToFirst(limit)));
    };
    /**
     * Set a limit and anchor it to the end of the window.
     */ Query1.prototype.limitToLast = function(limit) {
        _util.validateArgCount('Query.limitToLast', 1, 1, arguments.length);
        return new Query1(this.database, query(this._delegate, limitToLast(limit)));
    };
    /**
     * Given a child path, return a new query ordered by the specified grandchild path.
     */ Query1.prototype.orderByChild = function(path) {
        _util.validateArgCount('Query.orderByChild', 1, 1, arguments.length);
        return new Query1(this.database, query(this._delegate, orderByChild(path)));
    };
    /**
     * Return a new query ordered by the KeyIndex
     */ Query1.prototype.orderByKey = function() {
        _util.validateArgCount('Query.orderByKey', 0, 0, arguments.length);
        return new Query1(this.database, query(this._delegate, orderByKey()));
    };
    /**
     * Return a new query ordered by the PriorityIndex
     */ Query1.prototype.orderByPriority = function() {
        _util.validateArgCount('Query.orderByPriority', 0, 0, arguments.length);
        return new Query1(this.database, query(this._delegate, orderByPriority()));
    };
    /**
     * Return a new query ordered by the ValueIndex
     */ Query1.prototype.orderByValue = function() {
        _util.validateArgCount('Query.orderByValue', 0, 0, arguments.length);
        return new Query1(this.database, query(this._delegate, orderByValue()));
    };
    Query1.prototype.startAt = function(value, name1) {
        if (value === void 0) value = null;
        _util.validateArgCount('Query.startAt', 0, 2, arguments.length);
        return new Query1(this.database, query(this._delegate, startAt(value, name1)));
    };
    Query1.prototype.startAfter = function(value, name1) {
        if (value === void 0) value = null;
        _util.validateArgCount('Query.startAfter', 0, 2, arguments.length);
        return new Query1(this.database, query(this._delegate, startAfter(value, name1)));
    };
    Query1.prototype.endAt = function(value, name1) {
        if (value === void 0) value = null;
        _util.validateArgCount('Query.endAt', 0, 2, arguments.length);
        return new Query1(this.database, query(this._delegate, endAt(value, name1)));
    };
    Query1.prototype.endBefore = function(value, name1) {
        if (value === void 0) value = null;
        _util.validateArgCount('Query.endBefore', 0, 2, arguments.length);
        return new Query1(this.database, query(this._delegate, endBefore(value, name1)));
    };
    /**
     * Load the selection of children with exactly the specified value, and, optionally,
     * the specified name.
     */ Query1.prototype.equalTo = function(value, name1) {
        _util.validateArgCount('Query.equalTo', 1, 2, arguments.length);
        return new Query1(this.database, query(this._delegate, equalTo(value, name1)));
    };
    /**
     * @returns URL for this location.
     */ Query1.prototype.toString = function() {
        _util.validateArgCount('Query.toString', 0, 0, arguments.length);
        return this._delegate.toString();
    };
    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
    // for end-users.
    Query1.prototype.toJSON = function() {
        // An optional spacer argument is unnecessary for a string.
        _util.validateArgCount('Query.toJSON', 0, 1, arguments.length);
        return this._delegate.toJSON();
    };
    /**
     * Return true if this query and the provided query are equivalent; otherwise, return false.
     */ Query1.prototype.isEqual = function(other) {
        _util.validateArgCount('Query.isEqual', 1, 1, arguments.length);
        if (!(other instanceof Query1)) {
            var error4 = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';
            throw new Error(error4);
        }
        return this._delegate.isEqual(other._delegate);
    };
    /**
     * Helper used by .on and .once to extract the context and or cancel arguments.
     * @param fnName - The function name (on or once)
     *
     */ Query1.getCancelAndContextArgs_ = function(fnName, cancelOrContext, context) {
        var ret = {
            cancel: undefined,
            context: undefined
        };
        if (cancelOrContext && context) {
            ret.cancel = cancelOrContext;
            _util.validateCallback(fnName, 'cancel', ret.cancel, true);
            ret.context = context;
            _util.validateContextObject(fnName, 'context', ret.context, true);
        } else if (cancelOrContext) {
            // we have either a cancel callback or a context.
            if (typeof cancelOrContext === 'object' && cancelOrContext !== null) // it's a context!
            ret.context = cancelOrContext;
            else if (typeof cancelOrContext === 'function') ret.cancel = cancelOrContext;
            else throw new Error(_util.errorPrefix(fnName, 'cancelOrContext') + ' must either be a cancel callback or a context object.');
        }
        return ret;
    };
    Object.defineProperty(Query1.prototype, "ref", {
        get: function() {
            return new Reference1(this.database, new ReferenceImpl1(this._delegate._repo, this._delegate._path));
        },
        enumerable: false,
        configurable: true
    });
    return Query1;
}();
var Reference1 = function(_super) {
    _tslib.__extends(Reference2, _super);
    /**
     * Call options:
     *   new Reference(Repo, Path) or
     *   new Reference(url: string, string|RepoManager)
     *
     * Externally - this is the firebase.database.Reference type.
     */ function Reference2(database, _delegate) {
        var _this = _super.call(this, database, new QueryImpl(_delegate._repo, _delegate._path, new QueryParams(), false)) || this;
        _this.database = database;
        _this._delegate = _delegate;
        return _this;
    }
    /** @returns {?string} */ Reference2.prototype.getKey = function() {
        _util.validateArgCount('Reference.key', 0, 0, arguments.length);
        return this._delegate.key;
    };
    Reference2.prototype.child = function(pathString) {
        _util.validateArgCount('Reference.child', 1, 1, arguments.length);
        if (typeof pathString === 'number') pathString = String(pathString);
        return new Reference2(this.database, child(this._delegate, pathString));
    };
    /** @returns {?Reference} */ Reference2.prototype.getParent = function() {
        _util.validateArgCount('Reference.parent', 0, 0, arguments.length);
        var parent = this._delegate.parent;
        return parent ? new Reference2(this.database, parent) : null;
    };
    /** @returns {!Reference} */ Reference2.prototype.getRoot = function() {
        _util.validateArgCount('Reference.root', 0, 0, arguments.length);
        return new Reference2(this.database, this._delegate.root);
    };
    Reference2.prototype.set = function(newVal, onComplete) {
        _util.validateArgCount('Reference.set', 1, 2, arguments.length);
        _util.validateCallback('Reference.set', 'onComplete', onComplete, true);
        var result = set(this._delegate, newVal);
        if (onComplete) result.then(function() {
            return onComplete(null);
        }, function(error5) {
            return onComplete(error5);
        });
        return result;
    };
    Reference2.prototype.update = function(values, onComplete) {
        _util.validateArgCount('Reference.update', 1, 2, arguments.length);
        if (Array.isArray(values)) {
            var newObjectToMerge = {
            };
            for(var i4 = 0; i4 < values.length; ++i4)newObjectToMerge['' + i4] = values[i4];
            values = newObjectToMerge;
            warn("Passing an Array to Firebase.update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.");
        }
        validateWritablePath('Reference.update', this._delegate._path);
        _util.validateCallback('Reference.update', 'onComplete', onComplete, true);
        var result = update(this._delegate, values);
        if (onComplete) result.then(function() {
            return onComplete(null);
        }, function(error5) {
            return onComplete(error5);
        });
        return result;
    };
    Reference2.prototype.setWithPriority = function(newVal, newPriority, onComplete) {
        _util.validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);
        _util.validateCallback('Reference.setWithPriority', 'onComplete', onComplete, true);
        var result = setWithPriority(this._delegate, newVal, newPriority);
        if (onComplete) result.then(function() {
            return onComplete(null);
        }, function(error5) {
            return onComplete(error5);
        });
        return result;
    };
    Reference2.prototype.remove = function(onComplete) {
        _util.validateArgCount('Reference.remove', 0, 1, arguments.length);
        _util.validateCallback('Reference.remove', 'onComplete', onComplete, true);
        var result = remove(this._delegate);
        if (onComplete) result.then(function() {
            return onComplete(null);
        }, function(error5) {
            return onComplete(error5);
        });
        return result;
    };
    Reference2.prototype.transaction = function(transactionUpdate, onComplete, applyLocally) {
        var _this = this;
        _util.validateArgCount('Reference.transaction', 1, 3, arguments.length);
        _util.validateCallback('Reference.transaction', 'transactionUpdate', transactionUpdate, false);
        _util.validateCallback('Reference.transaction', 'onComplete', onComplete, true);
        validateBoolean('Reference.transaction', 'applyLocally', applyLocally, true);
        var result = runTransaction(this._delegate, transactionUpdate, {
            applyLocally: applyLocally
        }).then(function(transactionResult) {
            return new TransactionResult(transactionResult.committed, new DataSnapshot(_this.database, transactionResult.snapshot));
        });
        if (onComplete) result.then(function(transactionResult) {
            return onComplete(null, transactionResult.committed, transactionResult.snapshot);
        }, function(error5) {
            return onComplete(error5, false, null);
        });
        return result;
    };
    Reference2.prototype.setPriority = function(priority, onComplete) {
        _util.validateArgCount('Reference.setPriority', 1, 2, arguments.length);
        _util.validateCallback('Reference.setPriority', 'onComplete', onComplete, true);
        var result = setPriority(this._delegate, priority);
        if (onComplete) result.then(function() {
            return onComplete(null);
        }, function(error5) {
            return onComplete(error5);
        });
        return result;
    };
    Reference2.prototype.push = function(value, onComplete) {
        var _this = this;
        _util.validateArgCount('Reference.push', 0, 2, arguments.length);
        _util.validateCallback('Reference.push', 'onComplete', onComplete, true);
        var expPromise = push(this._delegate, value);
        var promise = expPromise.then(function(expRef) {
            return new Reference2(_this.database, expRef);
        });
        if (onComplete) promise.then(function() {
            return onComplete(null);
        }, function(error5) {
            return onComplete(error5);
        });
        var result = new Reference2(this.database, expPromise);
        result.then = promise.then.bind(promise);
        result.catch = promise.catch.bind(promise, undefined);
        return result;
    };
    Reference2.prototype.onDisconnect = function() {
        validateWritablePath('Reference.onDisconnect', this._delegate._path);
        return new OnDisconnect(new OnDisconnect$1(this._delegate._repo, this._delegate._path));
    };
    Object.defineProperty(Reference2.prototype, "key", {
        get: function() {
            return this.getKey();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Reference2.prototype, "parent", {
        get: function() {
            return this.getParent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Reference2.prototype, "root", {
        get: function() {
            return this.getRoot();
        },
        enumerable: false,
        configurable: true
    });
    return Reference2;
}(Query);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Class representing a firebase database.
 */ var Database = function() {
    /**
     * The constructor should not be called by users of our public API.
     */ function Database1(_delegate, app) {
        var _this = this;
        this._delegate = _delegate;
        this.app = app;
        this.INTERNAL = {
            delete: function() {
                return _this._delegate._delete();
            }
        };
    }
    /**
     * Modify this instance to communicate with the Realtime Database emulator.
     *
     * <p>Note: This method must be called before performing any other operation.
     *
     * @param host - the emulator host (ex: localhost)
     * @param port - the emulator port (ex: 8080)
     * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules
     */ Database1.prototype.useEmulator = function(host, port, options) {
        if (options === void 0) options = {
        };
        connectDatabaseEmulator(this._delegate, host, port, options);
    };
    Database1.prototype.ref = function(path) {
        _util.validateArgCount('database.ref', 0, 1, arguments.length);
        if (path instanceof Reference1) {
            var childRef = refFromURL(this._delegate, path.toString());
            return new Reference1(this, childRef);
        } else {
            var childRef = ref(this._delegate, path);
            return new Reference1(this, childRef);
        }
    };
    /**
     * Returns a reference to the root or the path specified in url.
     * We throw a exception if the url is not in the same domain as the
     * current repo.
     * @returns Firebase reference.
     */ Database1.prototype.refFromURL = function(url) {
        var apiName = 'database.refFromURL';
        _util.validateArgCount(apiName, 1, 1, arguments.length);
        var childRef = refFromURL(this._delegate, url);
        return new Reference1(this, childRef);
    };
    // Make individual repo go offline.
    Database1.prototype.goOffline = function() {
        _util.validateArgCount('database.goOffline', 0, 0, arguments.length);
        return goOffline(this._delegate);
    };
    Database1.prototype.goOnline = function() {
        _util.validateArgCount('database.goOnline', 0, 0, arguments.length);
        return goOnline(this._delegate);
    };
    Database1.ServerValue = {
        TIMESTAMP: serverTimestamp(),
        increment: function(delta) {
            return increment(delta);
        }
    };
    return Database1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * INTERNAL methods for internal-use only (tests, etc.).
 *
 * Customers shouldn't use these or else should be aware that they could break at any time.
 */ var forceLongPolling = function() {
    WebSocketConnection.forceDisallow();
    BrowserPollConnection.forceAllow();
};
var forceWebSockets = function() {
    BrowserPollConnection.forceDisallow();
};
/* Used by App Manager */ var isWebSocketsAvailable = function() {
    return WebSocketConnection['isAvailable']();
};
var setSecurityDebugCallback = function(ref1, callback) {
    var connection = ref1._delegate._repo.persistentConnection_;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    connection.securityDebugCallback_ = callback;
};
var stats = function(ref1, showDelta) {
    repoStats(ref1._delegate._repo, showDelta);
};
var statsIncrementCounter = function(ref1, metric) {
    repoStatsIncrementCounter(ref1._delegate._repo, metric);
};
var dataUpdateCount = function(ref1) {
    return ref1._delegate._repo.dataUpdateCount;
};
var interceptServerData = function(ref1, callback) {
    return repoInterceptServerData(ref1._delegate._repo, callback);
};
/**
 * Used by console to create a database based on the app,
 * passed database URL and a custom auth implementation.
 *
 * @param app - A valid FirebaseApp-like object
 * @param url - A valid Firebase databaseURL
 * @param version - custom version e.g. firebase-admin version
 * @param customAuthImpl - custom auth implementation
 */ function initStandalone(_a) {
    var app = _a.app, url = _a.url, version1 = _a.version, customAuthImpl = _a.customAuthImpl, namespace = _a.namespace, _b = _a.nodeAdmin, nodeAdmin = _b === void 0 ? false : _b;
    setSDKVersion(version1);
    /**
     * ComponentContainer('database-standalone') is just a placeholder that doesn't perform
     * any actual function.
     */ var authProvider = new _component.Provider('auth-internal', new _component.ComponentContainer('database-standalone'));
    authProvider.setComponent(new _component.Component('auth-internal', function() {
        return customAuthImpl;
    }, "PRIVATE"/* PRIVATE */ ));
    return {
        instance: new Database(repoManagerDatabaseFromApp(app, authProvider, /* appCheckProvider= */ undefined, url, nodeAdmin), app),
        namespace: namespace
    };
}
var INTERNAL = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    forceLongPolling: forceLongPolling,
    forceWebSockets: forceWebSockets,
    isWebSocketsAvailable: isWebSocketsAvailable,
    setSecurityDebugCallback: setSecurityDebugCallback,
    stats: stats,
    statsIncrementCounter: statsIncrementCounter,
    dataUpdateCount: dataUpdateCount,
    interceptServerData: interceptServerData,
    initStandalone: initStandalone
});
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var DataConnection = PersistentConnection1;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
PersistentConnection1.prototype.simpleListen = function(pathString, onComplete) {
    this.sendRequest('q', {
        p: pathString
    }, onComplete);
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
PersistentConnection1.prototype.echo = function(data, onEcho) {
    this.sendRequest('echo', {
        d: data
    }, onEcho);
};
// RealTimeConnection properties that we use in tests.
var RealTimeConnection = Connection;
var hijackHash = function(newHash) {
    var oldPut = PersistentConnection1.prototype.put;
    PersistentConnection1.prototype.put = function(pathString, data, onComplete, hash) {
        if (hash !== undefined) hash = newHash();
        oldPut.call(this, pathString, data, onComplete, hash);
    };
    return function() {
        PersistentConnection1.prototype.put = oldPut;
    };
};
var ConnectionTarget = RepoInfo;
var queryIdentifier = function(query1) {
    return query1._delegate._queryIdentifier;
};
/**
 * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.
 */ var forceRestClient = function(forceRestClient1) {
    repoManagerForceRestClient(forceRestClient1);
};
var TEST_ACCESS = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    DataConnection: DataConnection,
    RealTimeConnection: RealTimeConnection,
    hijackHash: hijackHash,
    ConnectionTarget: ConnectionTarget,
    queryIdentifier: queryIdentifier,
    forceRestClient: forceRestClient
});
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var ServerValue = Database.ServerValue;
function registerDatabase(instance) {
    // set SDK_VERSION
    setSDKVersion(instance.SDK_VERSION);
    // Register the Database Service with the 'firebase' namespace.
    var namespace = instance.INTERNAL.registerComponent(new _component.Component('database', function(container, _a) {
        var url = _a.instanceIdentifier;
        /* Dependencies */ // getImmediate for FirebaseApp will always succeed
        var app = container.getProvider('app').getImmediate();
        var authProvider = container.getProvider('auth-internal');
        var appCheckProvider = container.getProvider('app-check-internal');
        return new Database(repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url), app);
    }, "PUBLIC"/* PUBLIC */ ).setServiceProps(// firebase.database namespace properties
    {
        Reference: Reference1,
        Query: Query,
        Database: Database,
        DataSnapshot: DataSnapshot,
        enableLogging: enableLogging,
        INTERNAL: INTERNAL,
        ServerValue: ServerValue,
        TEST_ACCESS: TEST_ACCESS
    }).setMultipleInstances(true));
    instance.registerVersion(name, version);
    if (_util.isNodeSdk()) module.exports = namespace;
}
registerDatabase(_appDefault.default);

},{"process":"7AgFc","@firebase/app":"6IUA5","@firebase/component":"5qT0x","@firebase/util":"3bR6t","tslib":"4rd38","@firebase/logger":"5PuYX","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"7AgFc":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {
};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function() {
    try {
        if (typeof setTimeout === 'function') cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e1) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e1) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while((++queueIndex) < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {
};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {
};
function noop() {
}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error('process.binding is not supported');
};
process.cwd = function() {
    return '/';
};
process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() {
    return 0;
};

},{}],"6C1I5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "registerFirestore", ()=>I
);
var _app = require("@firebase/app");
var _appDefault = parcelHelpers.interopDefault(_app);
var _prebuilt306F43D845D6F0B9Js = require("./prebuilt-306f43d8-45d6f0b9.js");
var _component = require("@firebase/component");
var _tslib = require("tslib");
var _util = require("@firebase/util");
var _logger = require("@firebase/logger");
var _webchannelWrapper = require("@firebase/webchannel-wrapper");
var C = {
    Firestore: _prebuilt306F43D845D6F0B9Js.U,
    GeoPoint: _prebuilt306F43D845D6F0B9Js.C,
    Timestamp: _prebuilt306F43D845D6F0B9Js.M,
    Blob: _prebuilt306F43D845D6F0B9Js.a,
    Transaction: _prebuilt306F43D845D6F0B9Js.j,
    WriteBatch: _prebuilt306F43D845D6F0B9Js.W,
    DocumentReference: _prebuilt306F43D845D6F0B9Js.z,
    DocumentSnapshot: _prebuilt306F43D845D6F0B9Js.X,
    Query: _prebuilt306F43D845D6F0B9Js.t,
    QueryDocumentSnapshot: _prebuilt306F43D845D6F0B9Js.Z,
    QuerySnapshot: _prebuilt306F43D845D6F0B9Js.n,
    CollectionReference: _prebuilt306F43D845D6F0B9Js.s,
    FieldPath: _prebuilt306F43D845D6F0B9Js.r,
    FieldValue: _prebuilt306F43D845D6F0B9Js.o,
    setLogLevel: _prebuilt306F43D845D6F0B9Js.Q,
    CACHE_SIZE_UNLIMITED: _prebuilt306F43D845D6F0B9Js.E
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Registers the main Firestore build with the components framework.
 * Persistence can be enabled via `firebase.firestore().enablePersistence()`.
 */ function I(e) {
    /**
 * Configures Firestore as part of the Firebase SDK by calling registerService.
 *
 * @param firebase - The FirebaseNamespace to register Firestore with
 * @param firestoreFactory - A factory function that returns a new Firestore
 *    instance.
 */ (function(e1, r) {
        e1.INTERNAL.registerComponent(new _component.Component("firestore", function(e2) {
            var t = e2.getProvider("app").getImmediate();
            return r(t, e2.getProvider("auth-internal"));
        }, "PUBLIC"/* PUBLIC */ ).setServiceProps(Object.assign({
        }, C)));
    })(e, function(e1, s) {
        return new _prebuilt306F43D845D6F0B9Js.U(e1, new _prebuilt306F43D845D6F0B9Js.T(e1, s), new _prebuilt306F43D845D6F0B9Js.q);
    }), e.registerVersion("@firebase/firestore", "2.4.0");
}
I(_appDefault.default);

},{"@firebase/app":"6IUA5","./prebuilt-306f43d8-45d6f0b9.js":"0sm4R","@firebase/component":"5qT0x","tslib":"4rd38","@firebase/util":"3bR6t","@firebase/logger":"5PuYX","@firebase/webchannel-wrapper":"71Sz5","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"0sm4R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "C", ()=>ya
);
parcelHelpers.export(exports, "E", ()=>sa
);
parcelHelpers.export(exports, "M", ()=>j
);
parcelHelpers.export(exports, "Q", ()=>Nc
);
parcelHelpers.export(exports, "T", ()=>ua
);
parcelHelpers.export(exports, "U", ()=>_c
);
parcelHelpers.export(exports, "W", ()=>Ac
);
parcelHelpers.export(exports, "X", ()=>Oc
);
parcelHelpers.export(exports, "Z", ()=>Pc
);
parcelHelpers.export(exports, "a", ()=>Tc
);
parcelHelpers.export(exports, "c", ()=>Kc
);
parcelHelpers.export(exports, "j", ()=>Dc
);
parcelHelpers.export(exports, "n", ()=>Vc
);
parcelHelpers.export(exports, "o", ()=>jc
);
parcelHelpers.export(exports, "q", ()=>Ec
);
parcelHelpers.export(exports, "r", ()=>Bc
);
parcelHelpers.export(exports, "s", ()=>qc
);
parcelHelpers.export(exports, "t", ()=>Fc
);
parcelHelpers.export(exports, "u", ()=>Qc
);
parcelHelpers.export(exports, "z", ()=>Cc
);
var _tslib = require("tslib");
var _util = require("@firebase/util");
var _logger = require("@firebase/logger");
var _webchannelWrapper = require("@firebase/webchannel-wrapper");
var process = require("process");
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to
 * exceed. All subsequent calls to next will return increasing values. If provided with a
 * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as
 * well as write out sequence numbers that it produces via `next()`.
 */ var S = /** @class */ function() {
    function t(t1, e) {
        var n = this;
        this.previousValue = t1, e && (e.sequenceNumberHandler = function(t2) {
            return n.t(t2);
        }, this.i = function(t2) {
            return e.writeSequenceNumber(t2);
        });
    }
    return t.prototype.t = function(t1) {
        return this.previousValue = Math.max(t1, this.previousValue), this.previousValue;
    }, t.prototype.next = function() {
        var t1 = ++this.previousValue;
        return this.i && this.i(t1), t1;
    }, t;
}();
S.o = -1;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var N = {
    // Causes are copied from:
    // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
    /** Not an error; returned on success. */ OK: "ok",
    /** The operation was cancelled (typically by the caller). */ CANCELLED: "cancelled",
    /** Unknown error or an error from a different error domain. */ UNKNOWN: "unknown",
    /**
     * Client specified an invalid argument. Note that this differs from
     * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
     * problematic regardless of the state of the system (e.g., a malformed file
     * name).
     */ INVALID_ARGUMENT: "invalid-argument",
    /**
     * Deadline expired before operation could complete. For operations that
     * change the state of the system, this error may be returned even if the
     * operation has completed successfully. For example, a successful response
     * from a server could have been delayed long enough for the deadline to
     * expire.
     */ DEADLINE_EXCEEDED: "deadline-exceeded",
    /** Some requested entity (e.g., file or directory) was not found. */ NOT_FOUND: "not-found",
    /**
     * Some entity that we attempted to create (e.g., file or directory) already
     * exists.
     */ ALREADY_EXISTS: "already-exists",
    /**
     * The caller does not have permission to execute the specified operation.
     * PERMISSION_DENIED must not be used for rejections caused by exhausting
     * some resource (use RESOURCE_EXHAUSTED instead for those errors).
     * PERMISSION_DENIED must not be used if the caller can not be identified
     * (use UNAUTHENTICATED instead for those errors).
     */ PERMISSION_DENIED: "permission-denied",
    /**
     * The request does not have valid authentication credentials for the
     * operation.
     */ UNAUTHENTICATED: "unauthenticated",
    /**
     * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
     * entire file system is out of space.
     */ RESOURCE_EXHAUSTED: "resource-exhausted",
    /**
     * Operation was rejected because the system is not in a state required for
     * the operation's execution. For example, directory to be deleted may be
     * non-empty, an rmdir operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
     *  (a) Use UNAVAILABLE if the client can retry just the failing call.
     *  (b) Use ABORTED if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FAILED_PRECONDITION if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FAILED_PRECONDITION
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FAILED_PRECONDITION if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     */ FAILED_PRECONDITION: "failed-precondition",
    /**
     * The operation was aborted, typically due to a concurrency issue like
     * sequencer check failures, transaction aborts, etc.
     *
     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
     * and UNAVAILABLE.
     */ ABORTED: "aborted",
    /**
     * Operation was attempted past the valid range. E.g., seeking or reading
     * past end of file.
     *
     * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
     * if the system state changes. For example, a 32-bit file system will
     * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
     * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
     * an offset past the current file size.
     *
     * There is a fair bit of overlap between FAILED_PRECONDITION and
     * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
     * when it applies so that callers who are iterating through a space can
     * easily look for an OUT_OF_RANGE error to detect when they are done.
     */ OUT_OF_RANGE: "out-of-range",
    /** Operation is not implemented or not supported/enabled in this service. */ UNIMPLEMENTED: "unimplemented",
    /**
     * Internal errors. Means some invariants expected by underlying System has
     * been broken. If you see one of these errors, Something is very broken.
     */ INTERNAL: "internal",
    /**
     * The service is currently unavailable. This is a most likely a transient
     * condition and may be corrected by retrying with a backoff.
     *
     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
     * and UNAVAILABLE.
     */ UNAVAILABLE: "unavailable",
    /** Unrecoverable data loss or corruption. */ DATA_LOSS: "data-loss"
}, D = /** @class */ function(e) {
    /** @hideconstructor */ function n(/**
     * The backend error code associated with this error.
     */ t, /**
     * A custom error description.
     */ n1) {
        var r = this;
        return (r = e.call(this, n1) || this).code = t, r.message = n1, /** The custom name for all FirestoreErrors. */ r.name = "FirebaseError", // HACK: We write a toString property directly because Error is not a real
        // class and so inheritance does not work correctly. We could alternatively
        // do the same "back-door inheritance" trick that FirebaseError does.
        r.toString = function() {
            return r.name + ": [code=" + r.code + "]: " + r.message;
        }, r;
    }
    return _tslib.__extends(n, e), n;
}(Error), A = new _logger.Logger("@firebase/firestore");
/** An error returned by a Firestore operation. */ // Helper methods are needed because variables can't be exported as read/write
function k() {
    return A.logLevel;
}
/**
 * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).
 *
 * @param logLevel - The verbosity you set for activity and error logging. Can
 *   be any of the following values:
 *
 *   <ul>
 *     <li>`debug` for the most verbose logging level, primarily for
 *     debugging.</li>
 *     <li>`error` to log errors only.</li>
 *     <li><code>`silent` to turn off logging.</li>
 *   </ul>
 */ function C(t) {
    for(var n = [], r = 1; r < arguments.length; r++)n[r - 1] = arguments[r];
    if (A.logLevel <= _logger.LogLevel.DEBUG) {
        var i = n.map(L);
        A.debug.apply(A, _tslib.__spreadArray([
            "Firestore (8.10.0): " + t
        ], i));
    }
}
function x(t) {
    for(var n = [], r = 1; r < arguments.length; r++)n[r - 1] = arguments[r];
    if (A.logLevel <= _logger.LogLevel.ERROR) {
        var i = n.map(L);
        A.error.apply(A, _tslib.__spreadArray([
            "Firestore (8.10.0): " + t
        ], i));
    }
}
function R(t) {
    for(var n = [], r = 1; r < arguments.length; r++)n[r - 1] = arguments[r];
    if (A.logLevel <= _logger.LogLevel.WARN) {
        var i = n.map(L);
        A.warn.apply(A, _tslib.__spreadArray([
            "Firestore (8.10.0): " + t
        ], i));
    }
}
/**
 * Converts an additional log parameter to a string representation.
 */ function L(t) {
    if ("string" == typeof t) return t;
    try {
        return e = t, JSON.stringify(e);
    } catch (e) {
        // Converting to JSON failed, just log the object directly
        return t;
    }
    var e;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Unconditionally fails, throwing an Error with the given message.
 * Messages are stripped in production builds.
 *
 * Returns `never` and can be used in expressions:
 * @example
 * let futureVar = fail('not implemented yet');
 */ function O(t) {
    (void 0) === t && (t = "Unexpected state");
    // Log the failure in addition to throw an exception, just in case the
    // exception is swallowed.
    var e = "FIRESTORE (8.10.0) INTERNAL ASSERTION FAILED: " + t;
    // NOTE: We don't use FirestoreError here because these are internal failures
    // that cannot be handled by the user. (Also it would create a circular
    // dependency between the error and assert modules which doesn't work.)
    throw x(e), new Error(e);
}
function P(t, e) {
    t || O();
}
/**
 * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an
 * instance of `T` before casting.
 */ function F(t, // eslint-disable-next-line @typescript-eslint/no-explicit-any
e) {
    return t;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Generates `nBytes` of random bytes.
 *
 * If `nBytes < 0` , an error will be thrown.
 */ function M(t) {
    // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.
    var e = // eslint-disable-next-line @typescript-eslint/no-explicit-any
    "undefined" != typeof self && (self.crypto || self.msCrypto), n = new Uint8Array(t);
    if (e && "function" == typeof e.getRandomValues) e.getRandomValues(n);
    else // Falls back to Math.random
    for(var r = 0; r < t; r++)n[r] = Math.floor(256 * Math.random());
    return n;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var V = /** @class */ function() {
    function t() {
    }
    return t.u = function() {
        for(// Alphanumeric characters
        var t1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", e = Math.floor(256 / t1.length) * t1.length, n = ""; n.length < 20;)for(var r = M(40), i = 0; i < r.length; ++i)// Only accept values that are [0, maxMultiple), this ensures they can
        // be evenly mapped to indices of `chars` via a modulo operation.
        n.length < 20 && r[i] < e && (n += t1.charAt(r[i] % t1.length));
        return n;
    }, t;
}();
function q(t, e) {
    return t < e ? -1 : t > e ? 1 : 0;
}
/** Helper to compare arrays using isEqual(). */ function U(t, e, n) {
    return t.length === e.length && t.every(function(t1, r) {
        return n(t1, e[r]);
    });
}
/**
 * Returns the immediate lexicographically-following string. This is useful to
 * construct an inclusive range for indexeddb iterators.
 */ function B(t) {
    // Return the input string, with an additional NUL byte appended.
    return t + "\0";
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).
/**
 * A `Timestamp` represents a point in time independent of any time zone or
 * calendar, represented as seconds and fractions of seconds at nanosecond
 * resolution in UTC Epoch time.
 *
 * It is encoded using the Proleptic Gregorian Calendar which extends the
 * Gregorian calendar backwards to year one. It is encoded assuming all minutes
 * are 60 seconds long, i.e. leap seconds are "smeared" so that no leap second
 * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to
 * 9999-12-31T23:59:59.999999999Z.
 *
 * For examples and further specifications, refer to the
 * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.
 */ var j = /** @class */ function() {
    /**
     * Creates a new timestamp.
     *
     * @param seconds - The number of seconds of UTC time since Unix epoch
     *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
     *     9999-12-31T23:59:59Z inclusive.
     * @param nanoseconds - The non-negative fractions of a second at nanosecond
     *     resolution. Negative second values with fractions must still have
     *     non-negative nanoseconds values that count forward in time. Must be
     *     from 0 to 999,999,999 inclusive.
     */ function t(/**
     * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.
     */ t1, /**
     * The fractions of a second at nanosecond resolution.*
     */ e) {
        if (this.seconds = t1, this.nanoseconds = e, e < 0) throw new D(N.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
        if (e >= 1000000000) throw new D(N.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
        if (t1 < -62135596800) throw new D(N.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t1);
        // This will break in the year 10,000.
        if (t1 >= 253402300800) throw new D(N.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t1);
    }
    /**
     * Creates a new timestamp with the current date, with millisecond precision.
     *
     * @returns a new timestamp representing the current date.
     */ return t.now = function() {
        return t.fromMillis(Date.now());
    }, /**
     * Creates a new timestamp from the given date.
     *
     * @param date - The date to initialize the `Timestamp` from.
     * @returns A new `Timestamp` representing the same point in time as the given
     *     date.
     */ t.fromDate = function(e) {
        return t.fromMillis(e.getTime());
    }, /**
     * Creates a new timestamp from the given number of milliseconds.
     *
     * @param milliseconds - Number of milliseconds since Unix epoch
     *     1970-01-01T00:00:00Z.
     * @returns A new `Timestamp` representing the same point in time as the given
     *     number of milliseconds.
     */ t.fromMillis = function(e) {
        var n = Math.floor(e / 1000);
        return new t(n, Math.floor(1000000 * (e - 1000 * n)));
    }, /**
     * Converts a `Timestamp` to a JavaScript `Date` object. This conversion
     * causes a loss of precision since `Date` objects only support millisecond
     * precision.
     *
     * @returns JavaScript `Date` object representing the same point in time as
     *     this `Timestamp`, with millisecond precision.
     */ t.prototype.toDate = function() {
        return new Date(this.toMillis());
    }, /**
     * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
     * epoch). This operation causes a loss of precision.
     *
     * @returns The point in time corresponding to this timestamp, represented as
     *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
     */ t.prototype.toMillis = function() {
        return 1000 * this.seconds + this.nanoseconds / 1000000;
    }, t.prototype._compareTo = function(t1) {
        return this.seconds === t1.seconds ? q(this.nanoseconds, t1.nanoseconds) : q(this.seconds, t1.seconds);
    }, /**
     * Returns true if this `Timestamp` is equal to the provided one.
     *
     * @param other - The `Timestamp` to compare against.
     * @returns true if this `Timestamp` is equal to the provided one.
     */ t.prototype.isEqual = function(t1) {
        return t1.seconds === this.seconds && t1.nanoseconds === this.nanoseconds;
    }, /** Returns a textual representation of this Timestamp. */ t.prototype.toString = function() {
        return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
    }, /** Returns a JSON-serializable representation of this Timestamp. */ t.prototype.toJSON = function() {
        return {
            seconds: this.seconds,
            nanoseconds: this.nanoseconds
        };
    }, /**
     * Converts this object to a primitive string, which allows Timestamp objects
     * to be compared using the `>`, `<=`, `>=` and `>` operators.
     */ t.prototype.valueOf = function() {
        // This method returns a string of the form <seconds>.<nanoseconds> where
        // <seconds> is translated to have a non-negative value and both <seconds>
        // and <nanoseconds> are left-padded with zeroes to be a consistent length.
        // Strings with this format then have a lexiographical ordering that matches
        // the expected ordering. The <seconds> translation is done to avoid having
        // a leading negative sign (i.e. a leading '-' character) in its string
        // representation, which would affect its lexiographical ordering.
        var t1 = this.seconds - -62135596800;
        // Note: Up to 12 decimal digits are required to represent all valid
        // 'seconds' values.
        return String(t1).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
    }, t;
}(), K = /** @class */ function() {
    function t(t1) {
        this.timestamp = t1;
    }
    return t.fromTimestamp = function(e) {
        return new t(e);
    }, t.min = function() {
        return new t(new j(0, 0));
    }, t.prototype.compareTo = function(t1) {
        return this.timestamp._compareTo(t1.timestamp);
    }, t.prototype.isEqual = function(t1) {
        return this.timestamp.isEqual(t1.timestamp);
    }, /** Returns a number representation of the version for use in spec tests. */ t.prototype.toMicroseconds = function() {
        // Convert to microseconds.
        return 1000000 * this.timestamp.seconds + this.timestamp.nanoseconds / 1000;
    }, t.prototype.toString = function() {
        return "SnapshotVersion(" + this.timestamp.toString() + ")";
    }, t.prototype.toTimestamp = function() {
        return this.timestamp;
    }, t;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A version of a document in Firestore. This corresponds to the version
 * timestamp, such as update_time or read_time.
 */ /**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function Q(t) {
    var e = 0;
    for(var n in t)Object.prototype.hasOwnProperty.call(t, n) && e++;
    return e;
}
function G(t, e) {
    for(var n in t)Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);
}
function z(t) {
    for(var e in t)if (Object.prototype.hasOwnProperty.call(t, e)) return false;
    return true;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Path represents an ordered sequence of string segments.
 */ var W = /** @class */ function() {
    function t(t1, e, n) {
        (void 0) === e ? e = 0 : e > t1.length && O(), (void 0) === n ? n = t1.length - e : n > t1.length - e && O(), this.segments = t1, this.offset = e, this.len = n;
    }
    return Object.defineProperty(t.prototype, "length", {
        get: function() {
            return this.len;
        },
        enumerable: false,
        configurable: true
    }), t.prototype.isEqual = function(e) {
        return 0 === t.comparator(this, e);
    }, t.prototype.child = function(e) {
        var n = this.segments.slice(this.offset, this.limit());
        return e instanceof t ? e.forEach(function(t1) {
            n.push(t1);
        }) : n.push(e), this.construct(n);
    }, /** The index of one past the last segment of the path. */ t.prototype.limit = function() {
        return this.offset + this.length;
    }, t.prototype.popFirst = function(t1) {
        return t1 = (void 0) === t1 ? 1 : t1, this.construct(this.segments, this.offset + t1, this.length - t1);
    }, t.prototype.popLast = function() {
        return this.construct(this.segments, this.offset, this.length - 1);
    }, t.prototype.firstSegment = function() {
        return this.segments[this.offset];
    }, t.prototype.lastSegment = function() {
        return this.get(this.length - 1);
    }, t.prototype.get = function(t1) {
        return this.segments[this.offset + t1];
    }, t.prototype.isEmpty = function() {
        return 0 === this.length;
    }, t.prototype.isPrefixOf = function(t1) {
        if (t1.length < this.length) return false;
        for(var e = 0; e < this.length; e++)if (this.get(e) !== t1.get(e)) return false;
        return true;
    }, t.prototype.isImmediateParentOf = function(t1) {
        if (this.length + 1 !== t1.length) return false;
        for(var e = 0; e < this.length; e++)if (this.get(e) !== t1.get(e)) return false;
        return true;
    }, t.prototype.forEach = function(t1) {
        for(var e = this.offset, n = this.limit(); e < n; e++)t1(this.segments[e]);
    }, t.prototype.toArray = function() {
        return this.segments.slice(this.offset, this.limit());
    }, t.comparator = function(t1, e) {
        for(var n = Math.min(t1.length, e.length), r = 0; r < n; r++){
            var i = t1.get(r), o = e.get(r);
            if (i < o) return -1;
            if (i > o) return 1;
        }
        return t1.length < e.length ? -1 : t1.length > e.length ? 1 : 0;
    }, t;
}(), H = /** @class */ function(e) {
    function n() {
        return null !== e && e.apply(this, arguments) || this;
    }
    return _tslib.__extends(n, e), n.prototype.construct = function(t, e1, r) {
        return new n(t, e1, r);
    }, n.prototype.canonicalString = function() {
        // NOTE: The client is ignorant of any path segments containing escape
        // sequences (e.g. __id123__) and just passes them through raw (they exist
        // for legacy reasons and should not be used frequently).
        return this.toArray().join("/");
    }, n.prototype.toString = function() {
        return this.canonicalString();
    }, /**
     * Creates a resource path from the given slash-delimited string. If multiple
     * arguments are provided, all components are combined. Leading and trailing
     * slashes from all components are ignored.
     */ n.fromString = function() {
        for(var t = [], e1 = 0; e1 < arguments.length; e1++)t[e1] = arguments[e1];
        // NOTE: The client is ignorant of any path segments containing escape
        // sequences (e.g. __id123__) and just passes them through raw (they exist
        // for legacy reasons and should not be used frequently).
        for(var r = [], i = 0, o = t; i < o.length; i++){
            var s = o[i];
            if (s.indexOf("//") >= 0) throw new D(N.INVALID_ARGUMENT, "Invalid segment (" + s + "). Paths must not contain // in them.");
            // Strip leading and traling slashed.
            r.push.apply(r, s.split("/").filter(function(t1) {
                return t1.length > 0;
            }));
        }
        return new n(r);
    }, n.emptyPath = function() {
        return new n([]);
    }, n;
}(W), Y = /^[_a-zA-Z][_a-zA-Z0-9]*$/, $ = /** @class */ function(e) {
    function n() {
        return null !== e && e.apply(this, arguments) || this;
    }
    return _tslib.__extends(n, e), n.prototype.construct = function(t, e1, r) {
        return new n(t, e1, r);
    }, /**
     * Returns true if the string could be used as a segment in a field path
     * without escaping.
     */ n.isValidIdentifier = function(t) {
        return Y.test(t);
    }, n.prototype.canonicalString = function() {
        return this.toArray().map(function(t) {
            return t = t.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), n.isValidIdentifier(t) || (t = "`" + t + "`"), t;
        }).join(".");
    }, n.prototype.toString = function() {
        return this.canonicalString();
    }, /**
     * Returns true if this field references the key of a document.
     */ n.prototype.isKeyField = function() {
        return 1 === this.length && "__name__" === this.get(0);
    }, /**
     * The field designating the key of a document.
     */ n.keyField = function() {
        return new n([
            "__name__"
        ]);
    }, /**
     * Parses a field string from the given server-formatted string.
     *
     * - Splitting the empty string is not allowed (for now at least).
     * - Empty segments within the string (e.g. if there are two consecutive
     *   separators) are not allowed.
     *
     * TODO(b/37244157): we should make this more strict. Right now, it allows
     * non-identifier path components, even if they aren't escaped.
     */ n.fromServerFormat = function(t) {
        for(var e1 = [], r = "", i = 0, o = function() {
            if (0 === r.length) throw new D(N.INVALID_ARGUMENT, "Invalid field path (" + t + "). Paths must not be empty, begin with '.', end with '.', or contain '..'");
            e1.push(r), r = "";
        }, s = false; i < t.length;){
            var u = t[i];
            if ("\\" === u) {
                if (i + 1 === t.length) throw new D(N.INVALID_ARGUMENT, "Path has trailing escape character: " + t);
                var a = t[i + 1];
                if ("\\" !== a && "." !== a && "`" !== a) throw new D(N.INVALID_ARGUMENT, "Path has invalid escape sequence: " + t);
                r += a, i += 2;
            } else "`" === u ? (s = !s, i++) : "." !== u || s ? (r += u, i++) : (o(), i++);
        }
        if (o(), s) throw new D(N.INVALID_ARGUMENT, "Unterminated ` in path: " + t);
        return new n(e1);
    }, n.emptyPath = function() {
        return new n([]);
    }, n;
}(W), X = /** @class */ function() {
    function t(t1) {
        this.fields = t1, // TODO(dimond): validation of FieldMask
        // Sort the field mask to support `FieldMask.isEqual()` and assert below.
        t1.sort($.comparator);
    }
    return t.prototype.covers = function(t1) {
        for(var e = 0, n = this.fields; e < n.length; e++){
            if (n[e].isPrefixOf(t1)) return true;
        }
        return false;
    }, t.prototype.isEqual = function(t1) {
        return U(this.fields, t1.fields, function(t2, e) {
            return t2.isEqual(e);
        });
    }, t;
}(), J = /** @class */ function() {
    function t(t1) {
        this.binaryString = t1;
    }
    return t.fromBase64String = function(e) {
        return new t(atob(e));
    }, t.fromUint8Array = function(e) {
        return new t(/**
 * Helper function to convert an Uint8array to a binary string.
 */ function(t1) {
            for(var e1 = "", n = 0; n < t1.length; ++n)e1 += String.fromCharCode(t1[n]);
            return e1;
        }(e));
    }, t.prototype.toBase64 = function() {
        var t1;
        return t1 = this.binaryString, btoa(t1);
    /** True if and only if the Base64 conversion functions are available. */ }, t.prototype.toUint8Array = function() {
        return (function(t1) {
            for(var e = new Uint8Array(t1.length), n = 0; n < t1.length; n++)e[n] = t1.charCodeAt(n);
            return e;
        })(this.binaryString);
    }, t.prototype.approximateByteSize = function() {
        return 2 * this.binaryString.length;
    }, t.prototype.compareTo = function(t1) {
        return q(this.binaryString, t1.binaryString);
    }, t.prototype.isEqual = function(t1) {
        return this.binaryString === t1.binaryString;
    }, t;
}();
/**
 * A slash-separated path for navigating resources (documents and collections)
 * within Firestore.
 */ J.EMPTY_BYTE_STRING = new J("");
var Z = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);
/**
 * Converts the possible Proto values for a timestamp value into a "seconds and
 * nanos" representation.
 */ function tt(t) {
    // The json interface (for the browser) will return an iso timestamp string,
    // while the proto js library (for node) will return a
    // google.protobuf.Timestamp instance.
    if (P(!!t), "string" == typeof t) {
        // The date string can have higher precision (nanos) than the Date class
        // (millis), so we do some custom parsing here.
        // Parse the nanos right out of the string.
        var e = 0, n = Z.exec(t);
        if (P(!!n), n[1]) {
            // Pad the fraction out to 9 digits (nanos).
            var r = n[1];
            r = (r + "000000000").substr(0, 9), e = Number(r);
        }
        // Parse the date to get the seconds.
        var i = new Date(t);
        return {
            seconds: Math.floor(i.getTime() / 1000),
            nanos: e
        };
    }
    return {
        seconds: et(t.seconds),
        nanos: et(t.nanos)
    };
}
/**
 * Converts the possible Proto types for numbers into a JavaScript number.
 * Returns 0 if the value is not numeric.
 */ function et(t) {
    // TODO(bjornick): Handle int64 greater than 53 bits.
    return "number" == typeof t ? t : "string" == typeof t ? Number(t) : 0;
}
/** Converts the possible Proto types for Blobs into a ByteString. */ function nt(t) {
    return "string" == typeof t ? J.fromBase64String(t) : J.fromUint8Array(t);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Represents a locally-applied ServerTimestamp.
 *
 * Server Timestamps are backed by MapValues that contain an internal field
 * `__type__` with a value of `server_timestamp`. The previous value and local
 * write time are stored in its `__previous_value__` and `__local_write_time__`
 * fields respectively.
 *
 * Notes:
 * - ServerTimestampValue instances are created as the result of applying a
 *   transform. They can only exist in the local view of a document. Therefore
 *   they do not need to be parsed or serialized.
 * - When evaluated locally (e.g. for snapshot.data()), they by default
 *   evaluate to `null`. This behavior can be configured by passing custom
 *   FieldValueOptions to value().
 * - With respect to other ServerTimestampValues, they sort by their
 *   localWriteTime.
 */ function rt(t) {
    var e, n;
    return "server_timestamp" === (null === (n = ((null === (e = null == t ? void 0 : t.mapValue) || (void 0) === e ? void 0 : e.fields) || {
    }).__type__) || (void 0) === n ? void 0 : n.stringValue);
}
/**
 * Creates a new ServerTimestamp proto value (using the internal format).
 */ /**
 * Returns the value of the field before this ServerTimestamp was set.
 *
 * Preserving the previous values allows the user to display the last resoled
 * value until the backend responds with the timestamp.
 */ function it(t) {
    var e = t.mapValue.fields.__previous_value__;
    return rt(e) ? it(e) : e;
}
/**
 * Returns the local time at which this timestamp was first set.
 */ function ot(t) {
    var e = tt(t.mapValue.fields.__local_write_time__.timestampValue);
    return new j(e.seconds, e.nanos);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Sentinel value that sorts before any Mutation Batch ID. */ /**
 * Returns whether a variable is either undefined or null.
 */ function st(t) {
    return null == t;
}
/** Returns whether the value represents -0. */ function ut(t) {
    // Detect if the value is -0.0. Based on polyfill from
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
    return 0 === t && 1 / t == -1 / 0;
}
/**
 * Returns whether a value is an integer and in the safe integer range
 * @param value - The value to test for being an integer and in the safe range
 */ function at(t) {
    return "number" == typeof t && Number.isInteger(t) && !ut(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var ct = /** @class */ function() {
    function t(t1) {
        this.path = t1;
    }
    return t.fromPath = function(e) {
        return new t(H.fromString(e));
    }, t.fromName = function(e) {
        return new t(H.fromString(e).popFirst(5));
    }, /** Returns true if the document is in the specified collectionId. */ t.prototype.hasCollectionId = function(t1) {
        return this.path.length >= 2 && this.path.get(this.path.length - 2) === t1;
    }, t.prototype.isEqual = function(t1) {
        return null !== t1 && 0 === H.comparator(this.path, t1.path);
    }, t.prototype.toString = function() {
        return this.path.toString();
    }, t.comparator = function(t1, e) {
        return H.comparator(t1.path, e.path);
    }, t.isDocumentKey = function(t1) {
        return t1.length % 2 == 0;
    }, /**
     * Creates and returns a new document key with the given segments.
     *
     * @param segments - The segments of the path to the document
     * @returns A new instance of DocumentKey
     */ t.fromSegments = function(e) {
        return new t(new H(e.slice()));
    }, t;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Extracts the backend's type order for the provided value. */ function ht(t) {
    return "nullValue" in t ? 0 : "booleanValue" in t ? 1 : "integerValue" in t || "doubleValue" in t ? 2 : "timestampValue" in t ? 3 : "stringValue" in t ? 5 : "bytesValue" in t ? 6 : "referenceValue" in t ? 7 : "geoPointValue" in t ? 8 : "arrayValue" in t ? 9 : "mapValue" in t ? rt(t) ? 4 : 10 : O();
}
/** Tests `left` and `right` for equality based on the backend semantics. */ function ft(t, e) {
    var n = ht(t);
    if (n !== ht(e)) return false;
    switch(n){
        case 0:
            return true;
        case 1:
            return t.booleanValue === e.booleanValue;
        case 4:
            return ot(t).isEqual(ot(e));
        case 3:
            return (function(t1, e1) {
                if ("string" == typeof t1.timestampValue && "string" == typeof e1.timestampValue && t1.timestampValue.length === e1.timestampValue.length) // Use string equality for ISO 8601 timestamps
                return t1.timestampValue === e1.timestampValue;
                var n1 = tt(t1.timestampValue), r = tt(e1.timestampValue);
                return n1.seconds === r.seconds && n1.nanos === r.nanos;
            })(t, e);
        case 5:
            return t.stringValue === e.stringValue;
        case 6:
            return (function(t1, e1) {
                return nt(t1.bytesValue).isEqual(nt(e1.bytesValue));
            })(t, e);
        case 7:
            return t.referenceValue === e.referenceValue;
        case 8:
            return (function(t1, e1) {
                return et(t1.geoPointValue.latitude) === et(e1.geoPointValue.latitude) && et(t1.geoPointValue.longitude) === et(e1.geoPointValue.longitude);
            })(t, e);
        case 2:
            return (function(t1, e1) {
                if ("integerValue" in t1 && "integerValue" in e1) return et(t1.integerValue) === et(e1.integerValue);
                if ("doubleValue" in t1 && "doubleValue" in e1) {
                    var n1 = et(t1.doubleValue), r = et(e1.doubleValue);
                    return n1 === r ? ut(n1) === ut(r) : isNaN(n1) && isNaN(r);
                }
                return false;
            })(t, e);
        case 9:
            return U(t.arrayValue.values || [], e.arrayValue.values || [], ft);
        case 10:
            return (function(t1, e1) {
                var n2 = t1.mapValue.fields || {
                }, r = e1.mapValue.fields || {
                };
                if (Q(n2) !== Q(r)) return false;
                for(var i in n2)if (n2.hasOwnProperty(i) && ((void 0) === r[i] || !ft(n2[i], r[i]))) return false;
                return true;
            })(t, e);
        default:
            return O();
    }
}
function lt(t, e) {
    return (void 0) !== (t.values || []).find(function(t1) {
        return ft(t1, e);
    });
}
function dt(t, e) {
    var n2 = ht(t), r = ht(e);
    if (n2 !== r) return q(n2, r);
    switch(n2){
        case 0:
            return 0;
        case 1:
            return q(t.booleanValue, e.booleanValue);
        case 2:
            return (function(t1, e1) {
                var n3 = et(t1.integerValue || t1.doubleValue), r1 = et(e1.integerValue || e1.doubleValue);
                return n3 < r1 ? -1 : n3 > r1 ? 1 : n3 === r1 ? 0 : // one or both are NaN.
                isNaN(n3) ? isNaN(r1) ? 0 : -1 : 1;
            })(t, e);
        case 3:
            return pt(t.timestampValue, e.timestampValue);
        case 4:
            return pt(ot(t), ot(e));
        case 5:
            return q(t.stringValue, e.stringValue);
        case 6:
            return (function(t1, e1) {
                var n3 = nt(t1), r1 = nt(e1);
                return n3.compareTo(r1);
            })(t.bytesValue, e.bytesValue);
        case 7:
            return (function(t1, e1) {
                for(var n3 = t1.split("/"), r1 = e1.split("/"), i = 0; i < n3.length && i < r1.length; i++){
                    var o = q(n3[i], r1[i]);
                    if (0 !== o) return o;
                }
                return q(n3.length, r1.length);
            })(t.referenceValue, e.referenceValue);
        case 8:
            return (function(t1, e1) {
                var n3 = q(et(t1.latitude), et(e1.latitude));
                return 0 !== n3 ? n3 : q(et(t1.longitude), et(e1.longitude));
            })(t.geoPointValue, e.geoPointValue);
        case 9:
            return (function(t1, e1) {
                for(var n3 = t1.values || [], r1 = e1.values || [], i = 0; i < n3.length && i < r1.length; ++i){
                    var o = dt(n3[i], r1[i]);
                    if (o) return o;
                }
                return q(n3.length, r1.length);
            })(t.arrayValue, e.arrayValue);
        case 10:
            return (function(t1, e1) {
                var n3 = t1.fields || {
                }, r1 = Object.keys(n3), i = e1.fields || {
                }, o = Object.keys(i);
                // Even though MapValues are likely sorted correctly based on their insertion
                // order (e.g. when received from the backend), local modifications can bring
                // elements out of order. We need to re-sort the elements to ensure that
                // canonical IDs are independent of insertion order.
                r1.sort(), o.sort();
                for(var s = 0; s < r1.length && s < o.length; ++s){
                    var u = q(r1[s], o[s]);
                    if (0 !== u) return u;
                    var a = dt(n3[r1[s]], i[o[s]]);
                    if (0 !== a) return a;
                }
                return q(r1.length, o.length);
            })(t.mapValue, e.mapValue);
        default:
            throw O();
    }
}
function pt(t, e) {
    if ("string" == typeof t && "string" == typeof e && t.length === e.length) return q(t, e);
    var n2 = tt(t), r = tt(e), i = q(n2.seconds, r.seconds);
    return 0 !== i ? i : q(n2.nanos, r.nanos);
}
function yt(t) {
    return vt(t);
}
function vt(t) {
    var e, n2;
    return "nullValue" in t ? "null" : "booleanValue" in t ? "" + t.booleanValue : "integerValue" in t ? "" + t.integerValue : "doubleValue" in t ? "" + t.doubleValue : "timestampValue" in t ? (function(t1) {
        var e1 = tt(t1);
        return "time(" + e1.seconds + "," + e1.nanos + ")";
    })(t.timestampValue) : "stringValue" in t ? t.stringValue : "bytesValue" in t ? nt(t.bytesValue).toBase64() : "referenceValue" in t ? (n2 = t.referenceValue, ct.fromName(n2).toString()) : "geoPointValue" in t ? "geo(" + (e = t.geoPointValue).latitude + "," + e.longitude + ")" : "arrayValue" in t ? (function(t1) {
        for(var e1 = "[", n3 = true, r = 0, i = t1.values || []; r < i.length; r++)n3 ? n3 = false : e1 += ",", e1 += vt(i[r]);
        return e1 + "]";
    })(t.arrayValue) : "mapValue" in t ? (function(t1) {
        for(// Iteration order in JavaScript is not guaranteed. To ensure that we generate
        // matching canonical IDs for identical maps, we need to sort the keys.
        var e1 = "{", n3 = true, r = 0, i = Object.keys(t1.fields || {
        }).sort(); r < i.length; r++){
            var o = i[r];
            n3 ? n3 = false : e1 += ",", e1 += o + ":" + vt(t1.fields[o]);
        }
        return e1 + "}";
    })(t.mapValue) : O();
}
function mt(t, e) {
    return {
        referenceValue: "projects/" + t.projectId + "/databases/" + t.database + "/documents/" + e.path.canonicalString()
    };
}
/** Returns true if `value` is an IntegerValue . */ function gt(t) {
    return !!t && "integerValue" in t;
}
/** Returns true if `value` is a DoubleValue. */ /** Returns true if `value` is an ArrayValue. */ function wt(t) {
    return !!t && "arrayValue" in t;
}
/** Returns true if `value` is a NullValue. */ function bt(t) {
    return !!t && "nullValue" in t;
}
/** Returns true if `value` is NaN. */ function It(t) {
    return !!t && "doubleValue" in t && isNaN(Number(t.doubleValue));
}
/** Returns true if `value` is a MapValue. */ function Tt(t) {
    return !!t && "mapValue" in t;
}
/** Creates a deep copy of `source`. */ function Et(t) {
    if (t.geoPointValue) return {
        geoPointValue: Object.assign({
        }, t.geoPointValue)
    };
    if (t.timestampValue && "object" == typeof t.timestampValue) return {
        timestampValue: Object.assign({
        }, t.timestampValue)
    };
    if (t.mapValue) {
        var e = {
            mapValue: {
                fields: {
                }
            }
        };
        return G(t.mapValue.fields, function(t1, n2) {
            return e.mapValue.fields[t1] = Et(n2);
        }), e;
    }
    if (t.arrayValue) {
        for(var n2 = {
            arrayValue: {
                values: []
            }
        }, r = 0; r < (t.arrayValue.values || []).length; ++r)n2.arrayValue.values[r] = Et(t.arrayValue.values[r]);
        return n2;
    }
    return Object.assign({
    }, t);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An ObjectValue represents a MapValue in the Firestore Proto and offers the
 * ability to add and remove fields (via the ObjectValueBuilder).
 */ var _t = /** @class */ function() {
    function t(t1) {
        this.value = t1;
    }
    return t.empty = function() {
        return new t({
            mapValue: {
            }
        });
    }, /**
     * Returns the value at the given path or null.
     *
     * @param path - the path to search
     * @returns The value at the path or null if the path is not set.
     */ t.prototype.field = function(t1) {
        if (t1.isEmpty()) return this.value;
        for(var e = this.value, n3 = 0; n3 < t1.length - 1; ++n3)if (!Tt(e = (e.mapValue.fields || {
        })[t1.get(n3)])) return null;
        return (e = (e.mapValue.fields || {
        })[t1.lastSegment()]) || null;
    }, /**
     * Sets the field to the provided value.
     *
     * @param path - The field path to set.
     * @param value - The value to set.
     */ t.prototype.set = function(t1, e) {
        this.getFieldsMap(t1.popLast())[t1.lastSegment()] = Et(e);
    }, /**
     * Sets the provided fields to the provided values.
     *
     * @param data - A map of fields to values (or null for deletes).
     */ t.prototype.setAll = function(t1) {
        var e = this, n3 = $.emptyPath(), r = {
        }, i = [];
        t1.forEach(function(t2, o) {
            if (!n3.isImmediateParentOf(o)) {
                // Insert the accumulated changes at this parent location
                var s = e.getFieldsMap(n3);
                e.applyChanges(s, r, i), r = {
                }, i = [], n3 = o.popLast();
            }
            t2 ? r[o.lastSegment()] = Et(t2) : i.push(o.lastSegment());
        });
        var o = this.getFieldsMap(n3);
        this.applyChanges(o, r, i);
    }, /**
     * Removes the field at the specified path. If there is no field at the
     * specified path, nothing is changed.
     *
     * @param path - The field path to remove.
     */ t.prototype.delete = function(t1) {
        var e = this.field(t1.popLast());
        Tt(e) && e.mapValue.fields && delete e.mapValue.fields[t1.lastSegment()];
    }, t.prototype.isEqual = function(t1) {
        return ft(this.value, t1.value);
    }, /**
     * Returns the map that contains the leaf element of `path`. If the parent
     * entry does not yet exist, or if it is not a map, a new map will be created.
     */ t.prototype.getFieldsMap = function(t1) {
        var e = this.value;
        e.mapValue.fields || (e.mapValue = {
            fields: {
            }
        });
        for(var n3 = 0; n3 < t1.length; ++n3){
            var r = e.mapValue.fields[t1.get(n3)];
            Tt(r) && r.mapValue.fields || (r = {
                mapValue: {
                    fields: {
                    }
                }
            }, e.mapValue.fields[t1.get(n3)] = r), e = r;
        }
        return e.mapValue.fields;
    }, /**
     * Modifies `fieldsMap` by adding, replacing or deleting the specified
     * entries.
     */ t.prototype.applyChanges = function(t1, e, n3) {
        G(e, function(e1, n4) {
            return t1[e1] = n4;
        });
        for(var r = 0, i = n3; r < i.length; r++){
            var o = i[r];
            delete t1[o];
        }
    }, t.prototype.clone = function() {
        return new t(Et(this.value));
    }, t;
}();
/**
 * Returns a FieldMask built from all fields in a MapValue.
 */ function St(t) {
    var e = [];
    return G(t.fields, function(t1, n3) {
        var r = new $([
            t1
        ]);
        if (Tt(n3)) {
            var i = St(n3.mapValue).fields;
            if (0 === i.length) // Preserve the empty map by adding it to the FieldMask.
            e.push(r);
            else // For nested and non-empty ObjectValues, add the FieldPath of the
            // leaf nodes.
            for(var o = 0, s = i; o < s.length; o++){
                var u = s[o];
                e.push(r.child(u));
            }
        } else // For nested and non-empty ObjectValues, add the FieldPath of the leaf
        // nodes.
        e.push(r);
    }), new X(e);
}
var Nt = /** @class */ function() {
    function t(t1, e, n3, r, i) {
        this.key = t1, this.documentType = e, this.version = n3, this.data = r, this.documentState = i;
    }
    return t.newInvalidDocument = function(e) {
        return new t(e, 0/* INVALID */ , K.min(), _t.empty(), 0/* SYNCED */ );
    }, /**
     * Creates a new document that is known to exist with the given data at the
     * given version.
     */ t.newFoundDocument = function(e, n3, r) {
        return new t(e, 1/* FOUND_DOCUMENT */ , n3, r, 0/* SYNCED */ );
    }, /** Creates a new document that is known to not exist at the given version. */ t.newNoDocument = function(e, n3) {
        return new t(e, 2/* NO_DOCUMENT */ , n3, _t.empty(), 0/* SYNCED */ );
    }, /**
     * Creates a new document that is known to exist at the given version but
     * whose data is not known (e.g. a document that was updated without a known
     * base document).
     */ t.newUnknownDocument = function(e, n3) {
        return new t(e, 3/* UNKNOWN_DOCUMENT */ , n3, _t.empty(), 2/* HAS_COMMITTED_MUTATIONS */ );
    }, /**
     * Changes the document type to indicate that it exists and that its version
     * and data are known.
     */ t.prototype.convertToFoundDocument = function(t1, e) {
        return this.version = t1, this.documentType = 1, this.data = e, this.documentState = 0, this;
    }, /**
     * Changes the document type to indicate that it doesn't exist at the given
     * version.
     */ t.prototype.convertToNoDocument = function(t1) {
        return this.version = t1, this.documentType = 2, this.data = _t.empty(), this.documentState = 0, this;
    }, /**
     * Changes the document type to indicate that it exists at a given version but
     * that its data is not known (e.g. a document that was updated without a known
     * base document).
     */ t.prototype.convertToUnknownDocument = function(t1) {
        return this.version = t1, this.documentType = 3, this.data = _t.empty(), this.documentState = 2, this;
    }, t.prototype.setHasCommittedMutations = function() {
        return this.documentState = 2, this;
    }, t.prototype.setHasLocalMutations = function() {
        return this.documentState = 1, this;
    }, Object.defineProperty(t.prototype, "hasLocalMutations", {
        get: function() {
            return 1 === this.documentState;
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t.prototype, "hasCommittedMutations", {
        get: function() {
            return 2 === this.documentState;
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t.prototype, "hasPendingWrites", {
        get: function() {
            return this.hasLocalMutations || this.hasCommittedMutations;
        },
        enumerable: false,
        configurable: true
    }), t.prototype.isValidDocument = function() {
        return 0 !== this.documentType;
    }, t.prototype.isFoundDocument = function() {
        return 1 === this.documentType;
    }, t.prototype.isNoDocument = function() {
        return 2 === this.documentType;
    }, t.prototype.isUnknownDocument = function() {
        return 3 === this.documentType;
    }, t.prototype.isEqual = function(e) {
        return e instanceof t && this.key.isEqual(e.key) && this.version.isEqual(e.version) && this.documentType === e.documentType && this.documentState === e.documentState && this.data.isEqual(e.data);
    }, t.prototype.clone = function() {
        return new t(this.key, this.documentType, this.version, this.data.clone(), this.documentState);
    }, t.prototype.toString = function() {
        return "Document(" + this.key + ", " + this.version + ", " + JSON.stringify(this.data.value) + ", {documentType: " + this.documentType + "}), {documentState: " + this.documentState + "})";
    }, t;
}(), Dt = function(t, e, n3, r, i, o, s) {
    (void 0) === e && (e = null), (void 0) === n3 && (n3 = []), (void 0) === r && (r = []), (void 0) === i && (i = null), (void 0) === o && (o = null), (void 0) === s && (s = null), this.path = t, this.collectionGroup = e, this.orderBy = n3, this.filters = r, this.limit = i, this.startAt = o, this.endAt = s, this.h = null;
};
/**
 * Compares the value for field `field` in the provided documents. Throws if
 * the field does not exist in both documents.
 */ /**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Visible for testing
/**
 * Initializes a Target with a path and optional additional query constraints.
 * Path must currently be empty if this is a collection group query.
 *
 * NOTE: you should always construct `Target` from `Query.toTarget` instead of
 * using this factory method, because `Query` provides an implicit `orderBy`
 * property.
 */ function At(t, e, n3, r, i, o, s) {
    return (void 0) === e && (e = null), (void 0) === n3 && (n3 = []), (void 0) === r && (r = []), (void 0) === i && (i = null), (void 0) === o && (o = null), (void 0) === s && (s = null), new Dt(t, e, n3, r, i, o, s);
}
function kt(t) {
    var e = F(t);
    if (null === e.h) {
        var n3 = e.path.canonicalString();
        null !== e.collectionGroup && (n3 += "|cg:" + e.collectionGroup), n3 += "|f:", n3 += e.filters.map(function(t1) {
            return (function(t2) {
                // TODO(b/29183165): Technically, this won't be unique if two values have
                // the same description, such as the int 3 and the string "3". So we should
                // add the types in here somehow, too.
                return t2.field.canonicalString() + t2.op.toString() + yt(t2.value);
            })(t1);
        }).join(","), n3 += "|ob:", n3 += e.orderBy.map(function(t1) {
            return (function(t2) {
                // TODO(b/29183165): Make this collision robust.
                return t2.field.canonicalString() + t2.dir;
            })(t1);
        }).join(","), st(e.limit) || (n3 += "|l:", n3 += e.limit), e.startAt && (n3 += "|lb:", n3 += jt(e.startAt)), e.endAt && (n3 += "|ub:", n3 += jt(e.endAt)), e.h = n3;
    }
    return e.h;
}
function Ct(t, e) {
    if (t.limit !== e.limit) return false;
    if (t.orderBy.length !== e.orderBy.length) return false;
    for(var n4 = 0; n4 < t.orderBy.length; n4++)if (!Qt(t.orderBy[n4], e.orderBy[n4])) return false;
    if (t.filters.length !== e.filters.length) return false;
    for(var r = 0; r < t.filters.length; r++)if (i = t.filters[r], o = e.filters[r], i.op !== o.op || !i.field.isEqual(o.field) || !ft(i.value, o.value)) return false;
    var i, o;
    return t.collectionGroup === e.collectionGroup && !!t.path.isEqual(e.path) && !!zt(t.startAt, e.startAt) && zt(t.endAt, e.endAt);
}
function xt(t) {
    return ct.isDocumentKey(t.path) && null === t.collectionGroup && 0 === t.filters.length;
}
var Rt = /** @class */ function(e) {
    function n4(t, n5, r) {
        var i = this;
        return (i = e.call(this) || this).field = t, i.op = n5, i.value = r, i;
    }
    /**
     * Creates a filter based on the provided arguments.
     */ return _tslib.__extends(n4, e), n4.create = function(t, e1, r) {
        return t.isKeyField() ? "in" === e1 || "not-in" === e1 ? this.l(t, e1, r) : new Lt(t, e1, r) : "array-contains" === e1 ? new Mt(t, r) : "in" === e1 ? new Vt(t, r) : "not-in" === e1 ? new qt(t, r) : "array-contains-any" === e1 ? new Ut(t, r) : new n4(t, e1, r);
    }, n4.l = function(t, e1, n5) {
        return "in" === e1 ? new Ot(t, n5) : new Pt(t, n5);
    }, n4.prototype.matches = function(t) {
        var e1 = t.data.field(this.field);
        // Types do not have to match in NOT_EQUAL filters.
        return "!=" === this.op ? null !== e1 && this.m(dt(e1, this.value)) : null !== e1 && ht(this.value) === ht(e1) && this.m(dt(e1, this.value));
    // Only compare types with matching backend order (such as double and int).
    }, n4.prototype.m = function(t) {
        switch(this.op){
            case "<":
                return t < 0;
            case "<=":
                return t <= 0;
            case "==":
                return 0 === t;
            case "!=":
                return 0 !== t;
            case ">":
                return t > 0;
            case ">=":
                return t >= 0;
            default:
                return O();
        }
    }, n4.prototype.g = function() {
        return [
            "<",
            "<=",
            ">",
            ">=",
            "!=",
            "not-in"
        ].indexOf(this.op) >= 0;
    }, n4;
}(function() {
});
var Lt = /** @class */ function(e) {
    function n4(t, n5, r) {
        var i = this;
        return (i = e.call(this, t, n5, r) || this).key = ct.fromName(r.referenceValue), i;
    }
    return _tslib.__extends(n4, e), n4.prototype.matches = function(t) {
        var e1 = ct.comparator(t.key, this.key);
        return this.m(e1);
    }, n4;
}(Rt), Ot = /** @class */ function(e) {
    function n4(t, n5) {
        var r = this;
        return (r = e.call(this, t, "in"/* IN */ , n5) || this).keys = Ft("in"/* IN */ , n5), r;
    }
    return _tslib.__extends(n4, e), n4.prototype.matches = function(t) {
        return this.keys.some(function(e1) {
            return e1.isEqual(t.key);
        });
    }, n4;
}(Rt), Pt = /** @class */ function(e) {
    function n4(t, n5) {
        var r = this;
        return (r = e.call(this, t, "not-in"/* NOT_IN */ , n5) || this).keys = Ft("not-in"/* NOT_IN */ , n5), r;
    }
    return _tslib.__extends(n4, e), n4.prototype.matches = function(t) {
        return !this.keys.some(function(e1) {
            return e1.isEqual(t.key);
        });
    }, n4;
}(Rt);
/** Filter that matches on key fields within an array. */ function Ft(t, e) {
    var n4;
    return ((null === (n4 = e.arrayValue) || (void 0) === n4 ? void 0 : n4.values) || []).map(function(t1) {
        return ct.fromName(t1.referenceValue);
    });
}
/** A Filter that implements the array-contains operator. */ var Mt = /** @class */ function(e) {
    function n4(t, n5) {
        return e.call(this, t, "array-contains"/* ARRAY_CONTAINS */ , n5) || this;
    }
    return _tslib.__extends(n4, e), n4.prototype.matches = function(t) {
        var e1 = t.data.field(this.field);
        return wt(e1) && lt(e1.arrayValue, this.value);
    }, n4;
}(Rt), Vt = /** @class */ function(e) {
    function n4(t, n5) {
        return e.call(this, t, "in"/* IN */ , n5) || this;
    }
    return _tslib.__extends(n4, e), n4.prototype.matches = function(t) {
        var e1 = t.data.field(this.field);
        return null !== e1 && lt(this.value.arrayValue, e1);
    }, n4;
}(Rt), qt = /** @class */ function(e) {
    function n4(t, n5) {
        return e.call(this, t, "not-in"/* NOT_IN */ , n5) || this;
    }
    return _tslib.__extends(n4, e), n4.prototype.matches = function(t) {
        if (lt(this.value.arrayValue, {
            nullValue: "NULL_VALUE"
        })) return false;
        var e1 = t.data.field(this.field);
        return null !== e1 && !lt(this.value.arrayValue, e1);
    }, n4;
}(Rt), Ut = /** @class */ function(e) {
    function n4(t, n5) {
        return e.call(this, t, "array-contains-any"/* ARRAY_CONTAINS_ANY */ , n5) || this;
    }
    return _tslib.__extends(n4, e), n4.prototype.matches = function(t) {
        var e1 = this, n5 = t.data.field(this.field);
        return !(!wt(n5) || !n5.arrayValue.values) && n5.arrayValue.values.some(function(t1) {
            return lt(e1.value.arrayValue, t1);
        });
    }, n4;
}(Rt), Bt = function(t, e) {
    this.position = t, this.before = e;
};
/** A Filter that implements the IN operator. */ function jt(t) {
    // TODO(b/29183165): Make this collision robust.
    return (t.before ? "b" : "a") + ":" + t.position.map(function(t1) {
        return yt(t1);
    }).join(",");
}
/**
 * An ordering on a field, in some Direction. Direction defaults to ASCENDING.
 */ var Kt = function(t, e/* ASCENDING */ ) {
    (void 0) === e && (e = "asc"), this.field = t, this.dir = e;
};
function Qt(t, e) {
    return t.dir === e.dir && t.field.isEqual(e.field);
}
/**
 * Returns true if a document sorts before a bound using the provided sort
 * order.
 */ function Gt(t, e, n4) {
    for(var r = 0, i = 0; i < t.position.length; i++){
        var o = e[i], s = t.position[i];
        if (r = o.field.isKeyField() ? ct.comparator(ct.fromName(s.referenceValue), n4.key) : dt(s, n4.data.field(o.field)), "desc" === o.dir && (r *= -1), 0 !== r) break;
    }
    return t.before ? r <= 0 : r < 0;
}
function zt(t, e) {
    if (null === t) return null === e;
    if (null === e) return false;
    if (t.before !== e.before || t.position.length !== e.position.length) return false;
    for(var n4 = 0; n4 < t.position.length; n4++)if (!ft(t.position[n4], e.position[n4])) return false;
    return true;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Query encapsulates all the query attributes we support in the SDK. It can
 * be run against the LocalStore, as well as be converted to a `Target` to
 * query the RemoteStore results.
 *
 * Visible for testing.
 */ var Wt = /**
     * Initializes a Query with a path and optional additional query constraints.
     * Path must currently be empty if this is a collection group query.
     */ function(t, e, n4, r, i, o/* First */ , s, u) {
    (void 0) === e && (e = null), (void 0) === n4 && (n4 = []), (void 0) === r && (r = []), (void 0) === i && (i = null), (void 0) === o && (o = "F"), (void 0) === s && (s = null), (void 0) === u && (u = null), this.path = t, this.collectionGroup = e, this.explicitOrderBy = n4, this.filters = r, this.limit = i, this.limitType = o, this.startAt = s, this.endAt = u, this.p = null, // The corresponding `Target` of this `Query` instance.
    this.T = null, this.startAt, this.endAt;
};
/** Creates a new Query instance with the options provided. */ function Ht(t, e, n4, r, i, o, s, u) {
    return new Wt(t, e, n4, r, i, o, s, u);
}
/** Creates a new Query for a query that matches all documents at `path` */ function Yt(t) {
    return new Wt(t);
}
/**
 * Helper to convert a collection group query into a collection query at a
 * specific path. This is used when executing collection group queries, since
 * we have to split the query into a set of collection queries at multiple
 * paths.
 */ function $t(t) {
    return !st(t.limit) && "F" === t.limitType;
}
function Xt(t) {
    return !st(t.limit) && "L" === t.limitType;
}
function Jt(t) {
    return t.explicitOrderBy.length > 0 ? t.explicitOrderBy[0].field : null;
}
function Zt(t) {
    for(var e = 0, n4 = t.filters; e < n4.length; e++){
        var r = n4[e];
        if (r.g()) return r.field;
    }
    return null;
}
/**
 * Checks if any of the provided Operators are included in the query and
 * returns the first one that is, or null if none are.
 */ /**
 * Returns whether the query matches a collection group rather than a specific
 * collection.
 */ function te(t) {
    return null !== t.collectionGroup;
}
/**
 * Returns the implicit order by constraint that is used to execute the Query,
 * which can be different from the order by constraints the user provided (e.g.
 * the SDK and backend always orders by `__name__`).
 */ function ee(t) {
    var e = F(t);
    if (null === e.p) {
        e.p = [];
        var n4 = Zt(e), r = Jt(e);
        if (null !== n4 && null === r) // In order to implicitly add key ordering, we must also add the
        // inequality filter field for it to be a valid query.
        // Note that the default inequality field and key ordering is ascending.
        n4.isKeyField() || e.p.push(new Kt(n4)), e.p.push(new Kt($.keyField(), "asc"/* ASCENDING */ ));
        else {
            for(var i = false, o = 0, s = e.explicitOrderBy; o < s.length; o++){
                var u = s[o];
                e.p.push(u), u.field.isKeyField() && (i = true);
            }
            if (!i) {
                // The order of the implicit key ordering always matches the last
                // explicit order by
                var a = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : "asc"/* ASCENDING */ ;
                e.p.push(new Kt($.keyField(), a));
            }
        }
    }
    return e.p;
}
/**
 * Converts this `Query` instance to it's corresponding `Target` representation.
 */ function ne(t) {
    var e = F(t);
    if (!e.T) {
        if ("F" === e.limitType) e.T = At(e.path, e.collectionGroup, ee(e), e.filters, e.limit, e.startAt, e.endAt);
        else {
            for(// Flip the orderBy directions since we want the last results
            var n5 = [], r = 0, i = ee(e); r < i.length; r++){
                var o = i[r], s = "desc" === o.dir ? "asc" : "desc"/* DESCENDING */ ;
                n5.push(new Kt(o.field, s));
            }
            // We need to swap the cursors to match the now-flipped query ordering.
            var u = e.endAt ? new Bt(e.endAt.position, !e.endAt.before) : null, a = e.startAt ? new Bt(e.startAt.position, !e.startAt.before) : null;
            // Now return as a LimitType.First query.
            e.T = At(e.path, e.collectionGroup, n5, e.filters, e.limit, u, a);
        }
    }
    return e.T;
}
function re(t, e, n6) {
    return new Wt(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), e, n6, t.startAt, t.endAt);
}
function ie(t, e) {
    return Ct(ne(t), ne(e)) && t.limitType === e.limitType;
}
// TODO(b/29183165): This is used to get a unique string from a query to, for
// example, use as a dictionary key, but the implementation is subject to
// collisions. Make it collision-free.
function oe(t) {
    return kt(ne(t)) + "|lt:" + t.limitType;
}
function se(t) {
    return "Query(target=" + (function(t1) {
        var e = t1.path.canonicalString();
        return null !== t1.collectionGroup && (e += " collectionGroup=" + t1.collectionGroup), t1.filters.length > 0 && (e += ", filters: [" + t1.filters.map(function(t2) {
            var e1;
            return (e1 = t2).field.canonicalString() + " " + e1.op + " " + yt(e1.value);
        /** Filter that matches on key fields (i.e. '__name__'). */ }).join(", ") + "]"), st(t1.limit) || (e += ", limit: " + t1.limit), t1.orderBy.length > 0 && (e += ", orderBy: [" + t1.orderBy.map(function(t2) {
            return (function(t3) {
                return t3.field.canonicalString() + " (" + t3.dir + ")";
            })(t2);
        }).join(", ") + "]"), t1.startAt && (e += ", startAt: " + jt(t1.startAt)), t1.endAt && (e += ", endAt: " + jt(t1.endAt)), "Target(" + e + ")";
    })(ne(t)) + "; limitType=" + t.limitType + ")";
}
/** Returns whether `doc` matches the constraints of `query`. */ function ue(t, e) {
    return e.isFoundDocument() && (function(t1, e1) {
        var n6 = e1.key.path;
        return null !== t1.collectionGroup ? e1.key.hasCollectionId(t1.collectionGroup) && t1.path.isPrefixOf(n6) : ct.isDocumentKey(t1.path) ? t1.path.isEqual(n6) : t1.path.isImmediateParentOf(n6);
    })(t, e) && (function(t1, e1) {
        for(var n6 = 0, r = t1.explicitOrderBy; n6 < r.length; n6++){
            var i = r[n6];
            // order by key always matches
            if (!i.field.isKeyField() && null === e1.data.field(i.field)) return false;
        }
        return true;
    })(t, e) && (function(t1, e1) {
        for(var n6 = 0, r = t1.filters; n6 < r.length; n6++){
            if (!r[n6].matches(e1)) return false;
        }
        return true;
    })(t, e) && (function(t1, e1) {
        return !(t1.startAt && !Gt(t1.startAt, ee(t1), e1)) && (!t1.endAt || !Gt(t1.endAt, ee(t1), e1));
    })(t, e);
}
function ae(t) {
    return function(e, n6) {
        for(var r = false, i = 0, o = ee(t); i < o.length; i++){
            var s = o[i], u = ce(s, e, n6);
            if (0 !== u) return u;
            r = r || s.field.isKeyField();
        }
        return 0;
    };
}
function ce(t, e, n6) {
    var r = t.field.isKeyField() ? ct.comparator(e.key, n6.key) : function(t1, e1, n7) {
        var r1 = e1.data.field(t1), i = n7.data.field(t1);
        return null !== r1 && null !== i ? dt(r1, i) : O();
    }(t.field, e, n6);
    switch(t.dir){
        case "asc":
            return r;
        case "desc":
            return -1 * r;
        default:
            return O();
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns an DoubleValue for `value` that is encoded based the serializer's
 * `useProto3Json` setting.
 */ function he(t, e) {
    if (t.I) {
        if (isNaN(e)) return {
            doubleValue: "NaN"
        };
        if (e === 1 / 0) return {
            doubleValue: "Infinity"
        };
        if (e === -1 / 0) return {
            doubleValue: "-Infinity"
        };
    }
    return {
        doubleValue: ut(e) ? "-0" : e
    };
}
/**
 * Returns an IntegerValue for `value`.
 */ function fe(t) {
    return {
        integerValue: "" + t
    };
}
/**
 * Returns a value for a number that's appropriate to put into a proto.
 * The return value is an IntegerValue if it can safely represent the value,
 * otherwise a DoubleValue is returned.
 */ function le(t, e) {
    return at(e) ? fe(e) : he(t, e);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Used to represent a field transform on a mutation. */ var de = function() {
    // Make sure that the structural type of `TransformOperation` is unique.
    // See https://github.com/microsoft/TypeScript/issues/5451
    this._ = void 0;
};
/**
 * Computes the local transform result against the provided `previousValue`,
 * optionally using the provided localWriteTime.
 */ function pe(t, e, n6) {
    return t instanceof me ? (function(t1, e1) {
        var n7 = {
            fields: {
                __type__: {
                    stringValue: "server_timestamp"
                },
                __local_write_time__: {
                    timestampValue: {
                        seconds: t1.seconds,
                        nanos: t1.nanoseconds
                    }
                }
            }
        };
        return e1 && (n7.fields.__previous_value__ = e1), {
            mapValue: n7
        };
    })(n6, e) : t instanceof ge ? we(t, e) : t instanceof be ? Ie(t, e) : (function(t1, e1) {
        // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit
        // precision and resolves overflows by reducing precision, we do not
        // manually cap overflows at 2^63.
        var n7 = ve(t1, e1), r = Ee(n7) + Ee(t1.A);
        return gt(n7) && gt(t1.A) ? fe(r) : he(t1.R, r);
    })(t, e);
}
/**
 * Computes a final transform result after the transform has been acknowledged
 * by the server, potentially using the server-provided transformResult.
 */ function ye(t, e, n6) {
    // The server just sends null as the transform result for array operations,
    // so we have to calculate a result the same as we do for local
    // applications.
    return t instanceof ge ? we(t, e) : t instanceof be ? Ie(t, e) : n6;
}
/**
 * If this transform operation is not idempotent, returns the base value to
 * persist for this transform. If a base value is returned, the transform
 * operation is always applied to this base value, even if document has
 * already been updated.
 *
 * Base values provide consistent behavior for non-idempotent transforms and
 * allow us to return the same latency-compensated value even if the backend
 * has already applied the transform operation. The base value is null for
 * idempotent transforms, as they can be re-played even if the backend has
 * already applied them.
 *
 * @returns a base value to store along with the mutation, or null for
 * idempotent transforms.
 */ function ve(t, e) {
    var n6;
    return t instanceof Te ? gt(n6 = e) || (function(t1) {
        return !!t1 && "doubleValue" in t1;
    })(n6) ? e : {
        integerValue: 0
    } : null;
}
/** Transforms a value into a server-generated timestamp. */ var me = /** @class */ function(e) {
    function n6() {
        return null !== e && e.apply(this, arguments) || this;
    }
    return _tslib.__extends(n6, e), n6;
}(de), ge = /** @class */ function(e) {
    function n6(t) {
        var n7 = this;
        return (n7 = e.call(this) || this).elements = t, n7;
    }
    return _tslib.__extends(n6, e), n6;
}(de);
/** Transforms an array value via a union operation. */ function we(t, e) {
    for(var n6 = _e(e), r = function(t1) {
        n6.some(function(e1) {
            return ft(e1, t1);
        }) || n6.push(t1);
    }, i = 0, o = t.elements; i < o.length; i++)r(o[i]);
    return {
        arrayValue: {
            values: n6
        }
    };
}
/** Transforms an array value via a remove operation. */ var be = /** @class */ function(e) {
    function n6(t) {
        var n7 = this;
        return (n7 = e.call(this) || this).elements = t, n7;
    }
    return _tslib.__extends(n6, e), n6;
}(de);
function Ie(t, e) {
    for(var n6 = _e(e), r = function(t1) {
        n6 = n6.filter(function(e1) {
            return !ft(e1, t1);
        });
    }, i = 0, o = t.elements; i < o.length; i++)r(o[i]);
    return {
        arrayValue: {
            values: n6
        }
    };
}
/**
 * Implements the backend semantics for locally computed NUMERIC_ADD (increment)
 * transforms. Converts all field values to integers or doubles, but unlike the
 * backend does not cap integer values at 2^63. Instead, JavaScript number
 * arithmetic is used and precision loss can occur for values greater than 2^53.
 */ var Te = /** @class */ function(e) {
    function n6(t, n7) {
        var r = this;
        return (r = e.call(this) || this).R = t, r.A = n7, r;
    }
    return _tslib.__extends(n6, e), n6;
}(de);
function Ee(t) {
    return et(t.integerValue || t.doubleValue);
}
function _e(t) {
    return wt(t) && t.arrayValue.values ? t.arrayValue.values.slice() : [];
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** A field path and the TransformOperation to perform upon it. */ var Se = function(t, e) {
    this.field = t, this.transform = e;
};
/** The result of successfully applying a mutation to the backend. */ var Ne = function(/**
     * The version at which the mutation was committed:
     *
     * - For most operations, this is the updateTime in the WriteResult.
     * - For deletes, the commitTime of the WriteResponse (because deletes are
     *   not stored and have no updateTime).
     *
     * Note that these versions can be different: No-op writes will not change
     * the updateTime even though the commitTime advances.
     */ t, /**
     * The resulting fields returned from the backend after a mutation
     * containing field transforms has been committed. Contains one FieldValue
     * for each FieldTransform that was in the mutation.
     *
     * Will be empty if the mutation did not contain any field transforms.
     */ e) {
    this.version = t, this.transformResults = e;
}, De = /** @class */ function() {
    function t(t1, e) {
        this.updateTime = t1, this.exists = e;
    }
    return t.none = function() {
        return new t;
    }, /** Creates a new Precondition with an exists flag. */ t.exists = function(e) {
        return new t(void 0, e);
    }, /** Creates a new Precondition based on a version a document exists at. */ t.updateTime = function(e) {
        return new t(e);
    }, Object.defineProperty(t.prototype, "isNone", {
        /** Returns whether this Precondition is empty. */ get: function() {
            return (void 0) === this.updateTime && (void 0) === this.exists;
        },
        enumerable: false,
        configurable: true
    }), t.prototype.isEqual = function(t1) {
        return this.exists === t1.exists && (this.updateTime ? !!t1.updateTime && this.updateTime.isEqual(t1.updateTime) : !t1.updateTime);
    }, t;
}();
/**
 * Encodes a precondition for a mutation. This follows the model that the
 * backend accepts with the special case of an explicit "empty" precondition
 * (meaning no precondition).
 */ /** Returns true if the preconditions is valid for the given document. */ function Ae(t, e) {
    return (void 0) !== t.updateTime ? e.isFoundDocument() && e.version.isEqual(t.updateTime) : (void 0) === t.exists || t.exists === e.isFoundDocument();
}
/**
 * A mutation describes a self-contained change to a document. Mutations can
 * create, replace, delete, and update subsets of documents.
 *
 * Mutations not only act on the value of the document but also its version.
 *
 * For local mutations (mutations that haven't been committed yet), we preserve
 * the existing version for Set and Patch mutations. For Delete mutations, we
 * reset the version to 0.
 *
 * Here's the expected transition table.
 *
 * MUTATION           APPLIED TO            RESULTS IN
 *
 * SetMutation        Document(v3)          Document(v3)
 * SetMutation        NoDocument(v3)        Document(v0)
 * SetMutation        InvalidDocument(v0)   Document(v0)
 * PatchMutation      Document(v3)          Document(v3)
 * PatchMutation      NoDocument(v3)        NoDocument(v3)
 * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)
 * DeleteMutation     Document(v3)          NoDocument(v0)
 * DeleteMutation     NoDocument(v3)        NoDocument(v0)
 * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)
 *
 * For acknowledged mutations, we use the updateTime of the WriteResponse as
 * the resulting version for Set and Patch mutations. As deletes have no
 * explicit update time, we use the commitTime of the WriteResponse for
 * Delete mutations.
 *
 * If a mutation is acknowledged by the backend but fails the precondition check
 * locally, we transition to an `UnknownDocument` and rely on Watch to send us
 * the updated version.
 *
 * Field transforms are used only with Patch and Set Mutations. We use the
 * `updateTransforms` message to store transforms, rather than the `transforms`s
 * messages.
 *
 * ## Subclassing Notes
 *
 * Every type of mutation needs to implement its own applyToRemoteDocument() and
 * applyToLocalView() to implement the actual behavior of applying the mutation
 * to some source document (see `applySetMutationToRemoteDocument()` for an
 * example).
 */ var ke = function() {
};
/**
 * Applies this mutation to the given document for the purposes of computing a
 * new remote document. If the input document doesn't match the expected state
 * (e.g. it is invalid or outdated), the document type may transition to
 * unknown.
 *
 * @param mutation - The mutation to apply.
 * @param document - The document to mutate. The input document can be an
 *     invalid document if the client has no knowledge of the pre-mutation state
 *     of the document.
 * @param mutationResult - The result of applying the mutation from the backend.
 */ function Ce(t, e, n6) {
    t instanceof Pe ? (function(t1, e1, n7) {
        // Unlike applySetMutationToLocalView, if we're applying a mutation to a
        // remote document the server has accepted the mutation so the precondition
        // must have held.
        var r = t1.value.clone(), i = Ve(t1.fieldTransforms, e1, n7.transformResults);
        r.setAll(i), e1.convertToFoundDocument(n7.version, r).setHasCommittedMutations();
    })(t, e, n6) : t instanceof Fe ? (function(t1, e1, n7) {
        if (Ae(t1.precondition, e1)) {
            var r = Ve(t1.fieldTransforms, e1, n7.transformResults), i = e1.data;
            i.setAll(Me(t1)), i.setAll(r), e1.convertToFoundDocument(n7.version, i).setHasCommittedMutations();
        } else e1.convertToUnknownDocument(n7.version);
    })(t, e, n6) : (function(t1, e1, n7) {
        // Unlike applyToLocalView, if we're applying a mutation to a remote
        // document the server has accepted the mutation so the precondition must
        // have held.
        e1.convertToNoDocument(n7.version).setHasCommittedMutations();
    })(0, e, n6);
}
/**
 * Applies this mutation to the given document for the purposes of computing
 * the new local view of a document. If the input document doesn't match the
 * expected state, the document is not modified.
 *
 * @param mutation - The mutation to apply.
 * @param document - The document to mutate. The input document can be an
 *     invalid document if the client has no knowledge of the pre-mutation state
 *     of the document.
 * @param localWriteTime - A timestamp indicating the local write time of the
 *     batch this mutation is a part of.
 */ function xe(t, e, n6) {
    t instanceof Pe ? (function(t1, e1, n7) {
        if (Ae(t1.precondition, e1)) {
            var r = t1.value.clone(), i = qe(t1.fieldTransforms, n7, e1);
            r.setAll(i), e1.convertToFoundDocument(Oe(e1), r).setHasLocalMutations();
        }
    })(t, e, n6) : t instanceof Fe ? (function(t1, e1, n7) {
        if (Ae(t1.precondition, e1)) {
            var r = qe(t1.fieldTransforms, n7, e1), i = e1.data;
            i.setAll(Me(t1)), i.setAll(r), e1.convertToFoundDocument(Oe(e1), i).setHasLocalMutations();
        }
    })(t, e, n6) : (function(t1, e1) {
        Ae(t1.precondition, e1) && // We don't call `setHasLocalMutations()` since we want to be backwards
        // compatible with the existing SDK behavior.
        e1.convertToNoDocument(K.min());
    })(t, e);
}
/**
 * If this mutation is not idempotent, returns the base value to persist with
 * this mutation. If a base value is returned, the mutation is always applied
 * to this base value, even if document has already been updated.
 *
 * The base value is a sparse object that consists of only the document
 * fields for which this mutation contains a non-idempotent transformation
 * (e.g. a numeric increment). The provided value guarantees consistent
 * behavior for non-idempotent transforms and allow us to return the same
 * latency-compensated value even if the backend has already applied the
 * mutation. The base value is null for idempotent mutations, as they can be
 * re-played even if the backend has already applied them.
 *
 * @returns a base value to store along with the mutation, or null for
 * idempotent mutations.
 */ function Re(t, e) {
    for(var n6 = null, r = 0, i = t.fieldTransforms; r < i.length; r++){
        var o = i[r], s = e.data.field(o.field), u = ve(o.transform, s || null);
        null != u && (null == n6 && (n6 = _t.empty()), n6.set(o.field, u));
    }
    return n6 || null;
}
function Le(t, e) {
    return t.type === e.type && !!t.key.isEqual(e.key) && !!t.precondition.isEqual(e.precondition) && !!function(t1, e1) {
        return (void 0) === t1 && (void 0) === e1 || !(!t1 || !e1) && U(t1, e1, function(t2, e2) {
            return (function(t3, e3) {
                return t3.field.isEqual(e3.field) && (function(t4, e4) {
                    return t4 instanceof ge && e4 instanceof ge || t4 instanceof be && e4 instanceof be ? U(t4.elements, e4.elements, ft) : t4 instanceof Te && e4 instanceof Te ? ft(t4.A, e4.A) : t4 instanceof me && e4 instanceof me;
                })(t3.transform, e3.transform);
            })(t2, e2);
        });
    }(t.fieldTransforms, e.fieldTransforms) && (0 === t.type ? t.value.isEqual(e.value) : 1 !== t.type || t.data.isEqual(e.data) && t.fieldMask.isEqual(e.fieldMask));
}
/**
 * Returns the version from the given document for use as the result of a
 * mutation. Mutations are defined to return the version of the base document
 * only if it is an existing document. Deleted and unknown documents have a
 * post-mutation version of SnapshotVersion.min().
 */ function Oe(t) {
    return t.isFoundDocument() ? t.version : K.min();
}
/**
 * A mutation that creates or replaces the document at the given key with the
 * object value contents.
 */ var Pe = /** @class */ function(e) {
    function n6(t, n7, r, i) {
        (void 0) === i && (i = []);
        var o = this;
        return (o = e.call(this) || this).key = t, o.value = n7, o.precondition = r, o.fieldTransforms = i, o.type = 0, o;
    }
    return _tslib.__extends(n6, e), n6;
}(ke), Fe = /** @class */ function(e) {
    function n6(t, n7, r, i, o) {
        (void 0) === o && (o = []);
        var s = this;
        return (s = e.call(this) || this).key = t, s.data = n7, s.fieldMask = r, s.precondition = i, s.fieldTransforms = o, s.type = 1, s;
    }
    return _tslib.__extends(n6, e), n6;
}(ke);
function Me(t) {
    var e = new Map;
    return t.fieldMask.fields.forEach(function(n6) {
        if (!n6.isEmpty()) {
            var r = t.data.field(n6);
            e.set(n6, r);
        }
    }), e;
}
function Ve(t, e, n6) {
    var r = new Map;
    P(t.length === n6.length);
    for(var i = 0; i < n6.length; i++){
        var o = t[i], s = o.transform, u = e.data.field(o.field);
        r.set(o.field, ye(s, u, n6[i]));
    }
    return r;
}
/**
 * Creates a list of "transform results" (a transform result is a field value
 * representing the result of applying a transform) for use when applying a
 * transform locally.
 *
 * @param fieldTransforms - The field transforms to apply the result to.
 * @param localWriteTime - The local time of the mutation (used to
 *     generate ServerTimestampValues).
 * @param mutableDocument - The current state of the document after applying all
 *     previous mutations.
 * @returns The transform results list.
 */ function qe(t, e, n6) {
    for(var r = new Map, i = 0, o = t; i < o.length; i++){
        var s = o[i], u = s.transform, a = n6.data.field(s.field);
        r.set(s.field, pe(u, a, e));
    }
    return r;
}
/** A mutation that deletes the document at the given key. */ var Ue, Be, je = /** @class */ function(e) {
    function n6(t, n7) {
        var r = this;
        return (r = e.call(this) || this).key = t, r.precondition = n7, r.type = 2, r.fieldTransforms = [], r;
    }
    return _tslib.__extends(n6, e), n6;
}(ke), Ke = /** @class */ function(e) {
    function n6(t, n7) {
        var r = this;
        return (r = e.call(this) || this).key = t, r.precondition = n7, r.type = 3, r.fieldTransforms = [], r;
    }
    return _tslib.__extends(n6, e), n6;
}(ke), Qe = // TODO(b/33078163): just use simplest form of existence filter for now
function(t) {
    this.count = t;
};
/**
 * Determines whether an error code represents a permanent error when received
 * in response to a non-write operation.
 *
 * See isPermanentWriteError for classifying write errors.
 */ function Ge(t) {
    switch(t){
        case N.OK:
            return O();
        case N.CANCELLED:
        case N.UNKNOWN:
        case N.DEADLINE_EXCEEDED:
        case N.RESOURCE_EXHAUSTED:
        case N.INTERNAL:
        case N.UNAVAILABLE:
        // Unauthenticated means something went wrong with our token and we need
        // to retry with new credentials which will happen automatically.
        case N.UNAUTHENTICATED:
            return false;
        case N.INVALID_ARGUMENT:
        case N.NOT_FOUND:
        case N.ALREADY_EXISTS:
        case N.PERMISSION_DENIED:
        case N.FAILED_PRECONDITION:
        // Aborted might be retried in some scenarios, but that is dependant on
        // the context and should handled individually by the calling code.
        // See https://cloud.google.com/apis/design/errors.
        case N.ABORTED:
        case N.OUT_OF_RANGE:
        case N.UNIMPLEMENTED:
        case N.DATA_LOSS:
            return true;
        default:
            return O();
    }
}
/**
 * Determines whether an error code represents a permanent error when received
 * in response to a write operation.
 *
 * Write operations must be handled specially because as of b/119437764, ABORTED
 * errors on the write stream should be retried too (even though ABORTED errors
 * are not generally retryable).
 *
 * Note that during the initial handshake on the write stream an ABORTED error
 * signals that we should discard our stream token (i.e. it is permanent). This
 * means a handshake error should be classified with isPermanentError, above.
 */ /**
 * Maps an error Code from GRPC status code number, like 0, 1, or 14. These
 * are not the same as HTTP status codes.
 *
 * @returns The Code equivalent to the given GRPC status code. Fails if there
 *     is no match.
 */ function ze(t) {
    if ((void 0) === t) // This shouldn't normally happen, but in certain error cases (like trying
    // to send invalid proto messages) we may get an error with no GRPC code.
    return x("GRPC error has no .code"), N.UNKNOWN;
    switch(t){
        case Ue.OK:
            return N.OK;
        case Ue.CANCELLED:
            return N.CANCELLED;
        case Ue.UNKNOWN:
            return N.UNKNOWN;
        case Ue.DEADLINE_EXCEEDED:
            return N.DEADLINE_EXCEEDED;
        case Ue.RESOURCE_EXHAUSTED:
            return N.RESOURCE_EXHAUSTED;
        case Ue.INTERNAL:
            return N.INTERNAL;
        case Ue.UNAVAILABLE:
            return N.UNAVAILABLE;
        case Ue.UNAUTHENTICATED:
            return N.UNAUTHENTICATED;
        case Ue.INVALID_ARGUMENT:
            return N.INVALID_ARGUMENT;
        case Ue.NOT_FOUND:
            return N.NOT_FOUND;
        case Ue.ALREADY_EXISTS:
            return N.ALREADY_EXISTS;
        case Ue.PERMISSION_DENIED:
            return N.PERMISSION_DENIED;
        case Ue.FAILED_PRECONDITION:
            return N.FAILED_PRECONDITION;
        case Ue.ABORTED:
            return N.ABORTED;
        case Ue.OUT_OF_RANGE:
            return N.OUT_OF_RANGE;
        case Ue.UNIMPLEMENTED:
            return N.UNIMPLEMENTED;
        case Ue.DATA_LOSS:
            return N.DATA_LOSS;
        default:
            return O();
    }
}
/**
 * Converts an HTTP response's error status to the equivalent error code.
 *
 * @param status - An HTTP error response status ("FAILED_PRECONDITION",
 * "UNKNOWN", etc.)
 * @returns The equivalent Code. Non-matching responses are mapped to
 *     Code.UNKNOWN.
 */ (Be = Ue || (Ue = {
}))[Be.OK = 0] = "OK", Be[Be.CANCELLED = 1] = "CANCELLED", Be[Be.UNKNOWN = 2] = "UNKNOWN", Be[Be.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", Be[Be.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", Be[Be.NOT_FOUND = 5] = "NOT_FOUND", Be[Be.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", Be[Be.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", Be[Be.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", Be[Be.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", Be[Be.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", Be[Be.ABORTED = 10] = "ABORTED", Be[Be.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", Be[Be.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", Be[Be.INTERNAL = 13] = "INTERNAL", Be[Be.UNAVAILABLE = 14] = "UNAVAILABLE", Be[Be.DATA_LOSS = 15] = "DATA_LOSS";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // An immutable sorted map implementation, based on a Left-leaning Red-Black
// tree.
var We = /** @class */ function() {
    function t(t1, e) {
        this.comparator = t1, this.root = e || Ye.EMPTY;
    }
    // Returns a copy of the map, with the specified key/value added or replaced.
    return t.prototype.insert = function(e, n6) {
        return new t(this.comparator, this.root.insert(e, n6, this.comparator).copy(null, null, Ye.BLACK, null, null));
    }, // Returns a copy of the map, with the specified key removed.
    t.prototype.remove = function(e) {
        return new t(this.comparator, this.root.remove(e, this.comparator).copy(null, null, Ye.BLACK, null, null));
    }, // Returns the value of the node with the given key, or null.
    t.prototype.get = function(t1) {
        for(var e = this.root; !e.isEmpty();){
            var n6 = this.comparator(t1, e.key);
            if (0 === n6) return e.value;
            n6 < 0 ? e = e.left : n6 > 0 && (e = e.right);
        }
        return null;
    }, // Returns the index of the element in this sorted map, or -1 if it doesn't
    // exist.
    t.prototype.indexOf = function(t1) {
        for(// Number of nodes that were pruned when descending right
        var e = 0, n7 = this.root; !n7.isEmpty();){
            var r = this.comparator(t1, n7.key);
            if (0 === r) return e + n7.left.size;
            r < 0 ? n7 = n7.left : // Count all nodes left of the node plus the node itself
            (e += n7.left.size + 1, n7 = n7.right);
        }
        // Node not found
        return -1;
    }, t.prototype.isEmpty = function() {
        return this.root.isEmpty();
    }, Object.defineProperty(t.prototype, "size", {
        // Returns the total number of nodes in the map.
        get: function() {
            return this.root.size;
        },
        enumerable: false,
        configurable: true
    }), // Returns the minimum key in the map.
    t.prototype.minKey = function() {
        return this.root.minKey();
    }, // Returns the maximum key in the map.
    t.prototype.maxKey = function() {
        return this.root.maxKey();
    }, // Traverses the map in key order and calls the specified action function
    // for each key/value pair. If action returns true, traversal is aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.
    t.prototype.inorderTraversal = function(t1) {
        return this.root.inorderTraversal(t1);
    }, t.prototype.forEach = function(t1) {
        this.inorderTraversal(function(e, n7) {
            return t1(e, n7), false;
        });
    }, t.prototype.toString = function() {
        var t1 = [];
        return this.inorderTraversal(function(e, n7) {
            return t1.push(e + ":" + n7), false;
        }), "{" + t1.join(", ") + "}";
    }, // Traverses the map in reverse key order and calls the specified action
    // function for each key/value pair. If action returns true, traversal is
    // aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.
    t.prototype.reverseTraversal = function(t1) {
        return this.root.reverseTraversal(t1);
    }, // Returns an iterator over the SortedMap.
    t.prototype.getIterator = function() {
        return new He(this.root, null, this.comparator, false);
    }, t.prototype.getIteratorFrom = function(t1) {
        return new He(this.root, t1, this.comparator, false);
    }, t.prototype.getReverseIterator = function() {
        return new He(this.root, null, this.comparator, true);
    }, t.prototype.getReverseIteratorFrom = function(t1) {
        return new He(this.root, t1, this.comparator, true);
    }, t;
}(), He = /** @class */ function() {
    function t(t1, e, n7, r) {
        this.isReverse = r, this.nodeStack = [];
        for(var i = 1; !t1.isEmpty();)if (i = e ? n7(t1.key, e) : 1, // flip the comparison if we're going in reverse
        r && (i *= -1), i < 0) // This node is less than our start key. ignore it
        t1 = this.isReverse ? t1.left : t1.right;
        else {
            if (0 === i) {
                // This node is exactly equal to our start key. Push it on the stack,
                // but stop iterating;
                this.nodeStack.push(t1);
                break;
            }
            // This node is greater than our start key, add it to the stack and move
            // to the next one
            this.nodeStack.push(t1), t1 = this.isReverse ? t1.right : t1.left;
        }
    }
    return t.prototype.getNext = function() {
        var t1 = this.nodeStack.pop(), e = {
            key: t1.key,
            value: t1.value
        };
        if (this.isReverse) for(t1 = t1.left; !t1.isEmpty();)this.nodeStack.push(t1), t1 = t1.right;
        else for(t1 = t1.right; !t1.isEmpty();)this.nodeStack.push(t1), t1 = t1.left;
        return e;
    }, t.prototype.hasNext = function() {
        return this.nodeStack.length > 0;
    }, t.prototype.peek = function() {
        if (0 === this.nodeStack.length) return null;
        var t1 = this.nodeStack[this.nodeStack.length - 1];
        return {
            key: t1.key,
            value: t1.value
        };
    }, t;
}(), Ye = /** @class */ function() {
    function t(e, n7, r, i, o) {
        this.key = e, this.value = n7, this.color = null != r ? r : t.RED, this.left = null != i ? i : t.EMPTY, this.right = null != o ? o : t.EMPTY, this.size = this.left.size + 1 + this.right.size;
    }
    // Returns a copy of the current node, optionally replacing pieces of it.
    return t.prototype.copy = function(e, n7, r, i, o) {
        return new t(null != e ? e : this.key, null != n7 ? n7 : this.value, null != r ? r : this.color, null != i ? i : this.left, null != o ? o : this.right);
    }, t.prototype.isEmpty = function() {
        return false;
    }, // Traverses the tree in key order and calls the specified action function
    // for each node. If action returns true, traversal is aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.
    t.prototype.inorderTraversal = function(t1) {
        return this.left.inorderTraversal(t1) || t1(this.key, this.value) || this.right.inorderTraversal(t1);
    }, // Traverses the tree in reverse key order and calls the specified action
    // function for each node. If action returns true, traversal is aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.
    t.prototype.reverseTraversal = function(t1) {
        return this.right.reverseTraversal(t1) || t1(this.key, this.value) || this.left.reverseTraversal(t1);
    }, // Returns the minimum node in the tree.
    t.prototype.min = function() {
        return this.left.isEmpty() ? this : this.left.min();
    }, // Returns the maximum key in the tree.
    t.prototype.minKey = function() {
        return this.min().key;
    }, // Returns the maximum key in the tree.
    t.prototype.maxKey = function() {
        return this.right.isEmpty() ? this.key : this.right.maxKey();
    }, // Returns new tree, with the key/value added.
    t.prototype.insert = function(t1, e, n7) {
        var r = this, i = n7(t1, r.key);
        return (r = i < 0 ? r.copy(null, null, null, r.left.insert(t1, e, n7), null) : 0 === i ? r.copy(null, e, null, null, null) : r.copy(null, null, null, null, r.right.insert(t1, e, n7))).fixUp();
    }, t.prototype.removeMin = function() {
        if (this.left.isEmpty()) return t.EMPTY;
        var e = this;
        return e.left.isRed() || e.left.left.isRed() || (e = e.moveRedLeft()), (e = e.copy(null, null, null, e.left.removeMin(), null)).fixUp();
    }, // Returns new tree, with the specified item removed.
    t.prototype.remove = function(e, n7) {
        var r, i = this;
        if (n7(e, i.key) < 0) i.left.isEmpty() || i.left.isRed() || i.left.left.isRed() || (i = i.moveRedLeft()), i = i.copy(null, null, null, i.left.remove(e, n7), null);
        else {
            if (i.left.isRed() && (i = i.rotateRight()), i.right.isEmpty() || i.right.isRed() || i.right.left.isRed() || (i = i.moveRedRight()), 0 === n7(e, i.key)) {
                if (i.right.isEmpty()) return t.EMPTY;
                r = i.right.min(), i = i.copy(r.key, r.value, null, null, i.right.removeMin());
            }
            i = i.copy(null, null, null, null, i.right.remove(e, n7));
        }
        return i.fixUp();
    }, t.prototype.isRed = function() {
        return this.color;
    }, // Returns new tree after performing any needed rotations.
    t.prototype.fixUp = function() {
        var t1 = this;
        return t1.right.isRed() && !t1.left.isRed() && (t1 = t1.rotateLeft()), t1.left.isRed() && t1.left.left.isRed() && (t1 = t1.rotateRight()), t1.left.isRed() && t1.right.isRed() && (t1 = t1.colorFlip()), t1;
    }, t.prototype.moveRedLeft = function() {
        var t1 = this.colorFlip();
        return t1.right.left.isRed() && (t1 = (t1 = (t1 = t1.copy(null, null, null, null, t1.right.rotateRight())).rotateLeft()).colorFlip()), t1;
    }, t.prototype.moveRedRight = function() {
        var t1 = this.colorFlip();
        return t1.left.left.isRed() && (t1 = (t1 = t1.rotateRight()).colorFlip()), t1;
    }, t.prototype.rotateLeft = function() {
        var e = this.copy(null, null, t.RED, null, this.right.left);
        return this.right.copy(null, null, this.color, e, null);
    }, t.prototype.rotateRight = function() {
        var e = this.copy(null, null, t.RED, this.left.right, null);
        return this.left.copy(null, null, this.color, null, e);
    }, t.prototype.colorFlip = function() {
        var t1 = this.left.copy(null, null, !this.left.color, null, null), e = this.right.copy(null, null, !this.right.color, null, null);
        return this.copy(null, null, !this.color, t1, e);
    }, // For testing.
    t.prototype.checkMaxDepth = function() {
        var t1 = this.check();
        return Math.pow(2, t1) <= this.size + 1;
    }, // In a balanced RB tree, the black-depth (number of black nodes) from root to
    // leaves is equal on both sides.  This function verifies that or asserts.
    t.prototype.check = function() {
        if (this.isRed() && this.left.isRed()) throw O();
        if (this.right.isRed()) throw O();
        var t1 = this.left.check();
        if (t1 !== this.right.check()) throw O();
        return t1 + (this.isRed() ? 0 : 1);
    }, t;
}();
// end SortedMap
// An iterator over an LLRBNode.
// end LLRBNode
// Empty node is shared between all LLRB trees.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
Ye.EMPTY = null, Ye.RED = true, Ye.BLACK = false, // end LLRBEmptyNode
Ye.EMPTY = new /** @class */ (function() {
    function t() {
        this.size = 0;
    }
    return Object.defineProperty(t.prototype, "key", {
        get: function() {
            throw O();
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t.prototype, "value", {
        get: function() {
            throw O();
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t.prototype, "color", {
        get: function() {
            throw O();
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t.prototype, "left", {
        get: function() {
            throw O();
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t.prototype, "right", {
        get: function() {
            throw O();
        },
        enumerable: false,
        configurable: true
    }), // Returns a copy of the current node.
    t.prototype.copy = function(t1, e, n7, r, i) {
        return this;
    }, // Returns a copy of the tree, with the specified key/value added.
    t.prototype.insert = function(t1, e, n7) {
        return new Ye(t1, e);
    }, // Returns a copy of the tree, with the specified key removed.
    t.prototype.remove = function(t1, e) {
        return this;
    }, t.prototype.isEmpty = function() {
        return true;
    }, t.prototype.inorderTraversal = function(t1) {
        return false;
    }, t.prototype.reverseTraversal = function(t1) {
        return false;
    }, t.prototype.minKey = function() {
        return null;
    }, t.prototype.maxKey = function() {
        return null;
    }, t.prototype.isRed = function() {
        return false;
    }, // For testing.
    t.prototype.checkMaxDepth = function() {
        return true;
    }, t.prototype.check = function() {
        return 0;
    }, t;
}());
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * SortedSet is an immutable (copy-on-write) collection that holds elements
 * in order specified by the provided comparator.
 *
 * NOTE: if provided comparator returns 0 for two elements, we consider them to
 * be equal!
 */ var $e = /** @class */ function() {
    function t(t1) {
        this.comparator = t1, this.data = new We(this.comparator);
    }
    return t.prototype.has = function(t1) {
        return null !== this.data.get(t1);
    }, t.prototype.first = function() {
        return this.data.minKey();
    }, t.prototype.last = function() {
        return this.data.maxKey();
    }, Object.defineProperty(t.prototype, "size", {
        get: function() {
            return this.data.size;
        },
        enumerable: false,
        configurable: true
    }), t.prototype.indexOf = function(t1) {
        return this.data.indexOf(t1);
    }, /** Iterates elements in order defined by "comparator" */ t.prototype.forEach = function(t1) {
        this.data.inorderTraversal(function(e, n7) {
            return t1(e), false;
        });
    }, /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */ t.prototype.forEachInRange = function(t1, e) {
        for(var n7 = this.data.getIteratorFrom(t1[0]); n7.hasNext();){
            var r = n7.getNext();
            if (this.comparator(r.key, t1[1]) >= 0) return;
            e(r.key);
        }
    }, /**
     * Iterates over `elem`s such that: start &lt;= elem until false is returned.
     */ t.prototype.forEachWhile = function(t1, e) {
        var n7;
        for(n7 = (void 0) !== e ? this.data.getIteratorFrom(e) : this.data.getIterator(); n7.hasNext();)if (!t1(n7.getNext().key)) return;
    }, /** Finds the least element greater than or equal to `elem`. */ t.prototype.firstAfterOrEqual = function(t1) {
        var e = this.data.getIteratorFrom(t1);
        return e.hasNext() ? e.getNext().key : null;
    }, t.prototype.getIterator = function() {
        return new Xe(this.data.getIterator());
    }, t.prototype.getIteratorFrom = function(t1) {
        return new Xe(this.data.getIteratorFrom(t1));
    }, /** Inserts or updates an element */ t.prototype.add = function(t1) {
        return this.copy(this.data.remove(t1).insert(t1, true));
    }, /** Deletes an element */ t.prototype.delete = function(t1) {
        return this.has(t1) ? this.copy(this.data.remove(t1)) : this;
    }, t.prototype.isEmpty = function() {
        return this.data.isEmpty();
    }, t.prototype.unionWith = function(t1) {
        var e = this;
        // Make sure `result` always refers to the larger one of the two sets.
        return e.size < t1.size && (e = t1, t1 = this), t1.forEach(function(t2) {
            e = e.add(t2);
        }), e;
    }, t.prototype.isEqual = function(e) {
        if (!(e instanceof t)) return false;
        if (this.size !== e.size) return false;
        for(var n7 = this.data.getIterator(), r = e.data.getIterator(); n7.hasNext();){
            var i = n7.getNext().key, o = r.getNext().key;
            if (0 !== this.comparator(i, o)) return false;
        }
        return true;
    }, t.prototype.toArray = function() {
        var t1 = [];
        return this.forEach(function(e) {
            t1.push(e);
        }), t1;
    }, t.prototype.toString = function() {
        var t1 = [];
        return this.forEach(function(e) {
            return t1.push(e);
        }), "SortedSet(" + t1.toString() + ")";
    }, t.prototype.copy = function(e) {
        var n7 = new t(this.comparator);
        return n7.data = e, n7;
    }, t;
}(), Xe = /** @class */ function() {
    function t(t1) {
        this.iter = t1;
    }
    return t.prototype.getNext = function() {
        return this.iter.getNext().key;
    }, t.prototype.hasNext = function() {
        return this.iter.hasNext();
    }, t;
}(), Je = new We(ct.comparator);
function Ze() {
    return Je;
}
var tn = new We(ct.comparator);
function en() {
    return tn;
}
var nn = new We(ct.comparator);
function rn() {
    return nn;
}
var on = new $e(ct.comparator);
function sn() {
    for(var t = [], e = 0; e < arguments.length; e++)t[e] = arguments[e];
    for(var n7 = on, r = 0, i = t; r < i.length; r++){
        var o = i[r];
        n7 = n7.add(o);
    }
    return n7;
}
var un = new $e(q);
function an() {
    return un;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An event from the RemoteStore. It is split into targetChanges (changes to the
 * state or the set of documents in our watched targets) and documentUpdates
 * (changes to the actual documents).
 */ var cn = /** @class */ function() {
    function t(/**
     * The snapshot version this event brings us up to, or MIN if not set.
     */ t1, /**
     * A map from target to changes to the target. See TargetChange.
     */ e, /**
     * A set of targets that is known to be inconsistent. Listens for these
     * targets should be re-established without resume tokens.
     */ n7, /**
     * A set of which documents have changed or been deleted, along with the
     * doc's new values (if not deleted).
     */ r, /**
     * A set of which document updates are due only to limbo resolution targets.
     */ i) {
        this.snapshotVersion = t1, this.targetChanges = e, this.targetMismatches = n7, this.documentUpdates = r, this.resolvedLimboDocuments = i;
    }
    /**
     * HACK: Views require RemoteEvents in order to determine whether the view is
     * CURRENT, but secondary tabs don't receive remote events. So this method is
     * used to create a synthesized RemoteEvent that can be used to apply a
     * CURRENT status change to a View, for queries executed in a different tab.
     */ // PORTING NOTE: Multi-tab only
    return t.createSynthesizedRemoteEventForCurrentChange = function(e, n7) {
        var r = new Map;
        return r.set(e, hn.createSynthesizedTargetChangeForCurrentChange(e, n7)), new t(K.min(), r, an(), Ze(), sn());
    }, t;
}(), hn = /** @class */ function() {
    function t(/**
     * An opaque, server-assigned token that allows watching a query to be resumed
     * after disconnecting without retransmitting all the data that matches the
     * query. The resume token essentially identifies a point in time from which
     * the server should resume sending results.
     */ t1, /**
     * The "current" (synced) status of this target. Note that "current"
     * has special meaning in the RPC protocol that implies that a target is
     * both up-to-date and consistent with the rest of the watch stream.
     */ e, /**
     * The set of documents that were newly assigned to this target as part of
     * this remote event.
     */ n7, /**
     * The set of documents that were already assigned to this target but received
     * an update during this remote event.
     */ r, /**
     * The set of documents that were removed from this target as part of this
     * remote event.
     */ i) {
        this.resumeToken = t1, this.current = e, this.addedDocuments = n7, this.modifiedDocuments = r, this.removedDocuments = i;
    }
    return t.createSynthesizedTargetChangeForCurrentChange = function(e, n7) {
        return new t(J.EMPTY_BYTE_STRING, n7, sn(), sn(), sn());
    }, t;
}(), fn = function(/** The new document applies to all of these targets. */ t, /** The new document is removed from all of these targets. */ e, /** The key of the document for this change. */ n7, /**
     * The new document or NoDocument if it was deleted. Is null if the
     * document went out of view without the server sending a new document.
     */ r) {
    this.v = t, this.removedTargetIds = e, this.key = n7, this.P = r;
}, ln = function(t, e) {
    this.targetId = t, this.V = e;
}, dn = function(/** What kind of change occurred to the watch target. */ t, /** The target IDs that were added/removed/set. */ e, /**
     * An opaque, server-assigned token that allows watching a target to be
     * resumed after disconnecting without retransmitting all the data that
     * matches the target. The resume token essentially identifies a point in
     * time from which the server should resume sending results.
     */ n7, r) {
    (void 0) === n7 && (n7 = J.EMPTY_BYTE_STRING), (void 0) === r && (r = null), this.state = t, this.targetIds = e, this.resumeToken = n7, this.cause = r;
}, pn = /** @class */ function() {
    function t() {
        /**
         * The number of pending responses (adds or removes) that we are waiting on.
         * We only consider targets active that have no pending responses.
         */ this.S = 0, /**
             * Keeps track of the document changes since the last raised snapshot.
             *
             * These changes are continuously updated as we receive document updates and
             * always reflect the current set of changes against the last issued snapshot.
             */ this.D = mn(), /** See public getters for explanations of these fields. */ this.C = J.EMPTY_BYTE_STRING, this.N = false, /**
             * Whether this target state should be included in the next snapshot. We
             * initialize to true so that newly-added targets are included in the next
             * RemoteEvent.
             */ this.k = true;
    }
    return Object.defineProperty(t.prototype, "current", {
        /**
         * Whether this target has been marked 'current'.
         *
         * 'Current' has special meaning in the RPC protocol: It implies that the
         * Watch backend has sent us all changes up to the point at which the target
         * was added and that the target is consistent with the rest of the watch
         * stream.
         */ get: function() {
            return this.N;
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t.prototype, "resumeToken", {
        /** The last resume token sent to us for this target. */ get: function() {
            return this.C;
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t.prototype, "F", {
        /** Whether this target has pending target adds or target removes. */ get: function() {
            return 0 !== this.S;
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t.prototype, "$", {
        /** Whether we have modified any state that should trigger a snapshot. */ get: function() {
            return this.k;
        },
        enumerable: false,
        configurable: true
    }), /**
     * Applies the resume token to the TargetChange, but only when it has a new
     * value. Empty resumeTokens are discarded.
     */ t.prototype.O = function(t1) {
        t1.approximateByteSize() > 0 && (this.k = true, this.C = t1);
    }, /**
     * Creates a target change from the current set of changes.
     *
     * To reset the document changes after raising this snapshot, call
     * `clearPendingChanges()`.
     */ t.prototype.M = function() {
        var t1 = sn(), e = sn(), n7 = sn();
        return this.D.forEach(function(r, i) {
            switch(i){
                case 0:
                    t1 = t1.add(r);
                    break;
                case 2:
                    e = e.add(r);
                    break;
                case 1:
                    n7 = n7.add(r);
                    break;
                default:
                    O();
            }
        }), new hn(this.C, this.N, t1, e, n7);
    }, /**
     * Resets the document changes and sets `hasPendingChanges` to false.
     */ t.prototype.L = function() {
        this.k = false, this.D = mn();
    }, t.prototype.B = function(t1, e) {
        this.k = true, this.D = this.D.insert(t1, e);
    }, t.prototype.q = function(t1) {
        this.k = true, this.D = this.D.remove(t1);
    }, t.prototype.U = function() {
        this.S += 1;
    }, t.prototype.K = function() {
        this.S -= 1;
    }, t.prototype.j = function() {
        this.k = true, this.N = true;
    }, t;
}(), yn = /** @class */ function() {
    function t(t1) {
        this.W = t1, /** The internal state of all tracked targets. */ this.G = new Map, /** Keeps track of the documents to update since the last raised snapshot. */ this.H = Ze(), /** A mapping of document keys to their set of target IDs. */ this.J = vn(), /**
             * A list of targets with existence filter mismatches. These targets are
             * known to be inconsistent and their listens needs to be re-established by
             * RemoteStore.
             */ this.Y = new $e(q);
    }
    return t.prototype.X = function(t1) {
        for(var e = 0, n7 = t1.v; e < n7.length; e++){
            var r = n7[e];
            t1.P && t1.P.isFoundDocument() ? this.Z(r, t1.P) : this.tt(r, t1.key, t1.P);
        }
        for(var i = 0, o = t1.removedTargetIds; i < o.length; i++){
            r = o[i];
            this.tt(r, t1.key, t1.P);
        }
    }, /** Processes and adds the WatchTargetChange to the current set of changes. */ t.prototype.et = function(t1) {
        var e = this;
        this.forEachTarget(t1, function(n7) {
            var r = e.nt(n7);
            switch(t1.state){
                case 0:
                    e.st(n7) && r.O(t1.resumeToken);
                    break;
                case 1:
                    // We need to decrement the number of pending acks needed from watch
                    // for this targetId.
                    r.K(), r.F || // We have a freshly added target, so we need to reset any state
                    // that we had previously. This can happen e.g. when remove and add
                    // back a target for existence filter mismatches.
                    r.L(), r.O(t1.resumeToken);
                    break;
                case 2:
                    // We need to keep track of removed targets to we can post-filter and
                    // remove any target changes.
                    // We need to decrement the number of pending acks needed from watch
                    // for this targetId.
                    r.K(), r.F || e.removeTarget(n7);
                    break;
                case 3:
                    e.st(n7) && (r.j(), r.O(t1.resumeToken));
                    break;
                case 4:
                    e.st(n7) && // Reset the target and synthesizes removes for all existing
                    // documents. The backend will re-add any documents that still
                    // match the target before it sends the next global snapshot.
                    (e.it(n7), r.O(t1.resumeToken));
                    break;
                default:
                    O();
            }
        });
    }, /**
     * Iterates over all targetIds that the watch change applies to: either the
     * targetIds explicitly listed in the change or the targetIds of all currently
     * active targets.
     */ t.prototype.forEachTarget = function(t1, e) {
        var n7 = this;
        t1.targetIds.length > 0 ? t1.targetIds.forEach(e) : this.G.forEach(function(t2, r) {
            n7.st(r) && e(r);
        });
    }, /**
     * Handles existence filters and synthesizes deletes for filter mismatches.
     * Targets that are invalidated by filter mismatches are added to
     * `pendingTargetResets`.
     */ t.prototype.rt = function(t1) {
        var e = t1.targetId, n7 = t1.V.count, r = this.ot(e);
        if (r) {
            var i = r.target;
            if (xt(i)) {
                if (0 === n7) {
                    // The existence filter told us the document does not exist. We deduce
                    // that this document does not exist and apply a deleted document to
                    // our updates. Without applying this deleted document there might be
                    // another query that will raise this document as part of a snapshot
                    // until it is resolved, essentially exposing inconsistency between
                    // queries.
                    var o = new ct(i.path);
                    this.tt(e, o, Nt.newNoDocument(o, K.min()));
                } else P(1 === n7);
            } else this.ct(e) !== n7 && // Existence filter mismatch: We reset the mapping and raise a new
            // snapshot with `isFromCache:true`.
            (this.it(e), this.Y = this.Y.add(e));
        }
    }, /**
     * Converts the currently accumulated state into a remote event at the
     * provided snapshot version. Resets the accumulated changes before returning.
     */ t.prototype.ut = function(t1) {
        var e = this, n7 = new Map;
        this.G.forEach(function(r, i) {
            var o = e.ot(i);
            if (o) {
                if (r.current && xt(o.target)) {
                    // Document queries for document that don't exist can produce an empty
                    // result set. To update our local cache, we synthesize a document
                    // delete if we have not previously received the document. This
                    // resolves the limbo state of the document, removing it from
                    // limboDocumentRefs.
                    // TODO(dimond): Ideally we would have an explicit lookup target
                    // instead resulting in an explicit delete message and we could
                    // remove this special logic.
                    var s = new ct(o.target.path);
                    null !== e.H.get(s) || e.at(i, s) || e.tt(i, s, Nt.newNoDocument(s, t1));
                }
                r.$ && (n7.set(i, r.M()), r.L());
            }
        });
        var r = sn();
        // We extract the set of limbo-only document updates as the GC logic
        // special-cases documents that do not appear in the target cache.
        // TODO(gsoltis): Expand on this comment once GC is available in the JS
        // client.
        this.J.forEach(function(t2, n8) {
            var i = true;
            n8.forEachWhile(function(t3) {
                var n9 = e.ot(t3);
                return !n9 || 2 === n9.purpose || (i = false, false);
            }), i && (r = r.add(t2));
        });
        var i = new cn(t1, n7, this.Y, this.H, r);
        return this.H = Ze(), this.J = vn(), this.Y = new $e(q), i;
    }, /**
     * Adds the provided document to the internal list of document updates and
     * its document key to the given target's mapping.
     */ // Visible for testing.
    t.prototype.Z = function(t1, e) {
        if (this.st(t1)) {
            var n7 = this.at(t1, e.key) ? 2 : 0/* Added */ ;
            this.nt(t1).B(e.key, n7), this.H = this.H.insert(e.key, e), this.J = this.J.insert(e.key, this.ht(e.key).add(t1));
        }
    }, /**
     * Removes the provided document from the target mapping. If the
     * document no longer matches the target, but the document's state is still
     * known (e.g. we know that the document was deleted or we received the change
     * that caused the filter mismatch), the new document can be provided
     * to update the remote document cache.
     */ // Visible for testing.
    t.prototype.tt = function(t1, e, n8) {
        if (this.st(t1)) {
            var r = this.nt(t1);
            this.at(t1, e) ? r.B(e, 1/* Removed */ ) : // The document may have entered and left the target before we raised a
            // snapshot, so we can just ignore the change.
            r.q(e), this.J = this.J.insert(e, this.ht(e).delete(t1)), n8 && (this.H = this.H.insert(e, n8));
        }
    }, t.prototype.removeTarget = function(t1) {
        this.G.delete(t1);
    }, /**
     * Returns the current count of documents in the target. This includes both
     * the number of documents that the LocalStore considers to be part of the
     * target as well as any accumulated changes.
     */ t.prototype.ct = function(t1) {
        var e = this.nt(t1).M();
        return this.W.getRemoteKeysForTarget(t1).size + e.addedDocuments.size - e.removedDocuments.size;
    }, /**
     * Increment the number of acks needed from watch before we can consider the
     * server to be 'in-sync' with the client's active targets.
     */ t.prototype.U = function(t1) {
        this.nt(t1).U();
    }, t.prototype.nt = function(t1) {
        var e = this.G.get(t1);
        return e || (e = new pn, this.G.set(t1, e)), e;
    }, t.prototype.ht = function(t1) {
        var e = this.J.get(t1);
        return e || (e = new $e(q), this.J = this.J.insert(t1, e)), e;
    }, /**
     * Verifies that the user is still interested in this target (by calling
     * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
     * from watch.
     */ t.prototype.st = function(t1) {
        var e = null !== this.ot(t1);
        return e || C("WatchChangeAggregator", "Detected inactive target", t1), e;
    }, /**
     * Returns the TargetData for an active target (i.e. a target that the user
     * is still interested in that has no outstanding target change requests).
     */ t.prototype.ot = function(t1) {
        var e = this.G.get(t1);
        return e && e.F ? null : this.W.lt(t1);
    }, /**
     * Resets the state of a Watch target to its initial state (e.g. sets
     * 'current' to false, clears the resume token and removes its target mapping
     * from all documents).
     */ t.prototype.it = function(t1) {
        var e = this;
        this.G.set(t1, new pn), this.W.getRemoteKeysForTarget(t1).forEach(function(n8) {
            e.tt(t1, n8, /*updatedDocument=*/ null);
        });
    }, /**
     * Returns whether the LocalStore considers the document to be part of the
     * specified target.
     */ t.prototype.at = function(t1, e) {
        return this.W.getRemoteKeysForTarget(t1).has(e);
    }, t;
}();
/**
 * A TargetChange specifies the set of changes for a specific target as part of
 * a RemoteEvent. These changes track which documents are added, modified or
 * removed, as well as the target's resume token and whether the target is
 * marked CURRENT.
 * The actual changes *to* documents are not part of the TargetChange since
 * documents may be part of multiple targets.
 */ function vn() {
    return new We(ct.comparator);
}
function mn() {
    return new We(ct.comparator);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var gn = {
    asc: "ASCENDING",
    desc: "DESCENDING"
}, wn = {
    "<": "LESS_THAN",
    "<=": "LESS_THAN_OR_EQUAL",
    ">": "GREATER_THAN",
    ">=": "GREATER_THAN_OR_EQUAL",
    "==": "EQUAL",
    "!=": "NOT_EQUAL",
    "array-contains": "ARRAY_CONTAINS",
    in: "IN",
    "not-in": "NOT_IN",
    "array-contains-any": "ARRAY_CONTAINS_ANY"
}, bn = function(t, e) {
    this.databaseId = t, this.I = e;
};
/**
 * This class generates JsonObject values for the Datastore API suitable for
 * sending to either GRPC stub methods or via the JSON/HTTP REST API.
 *
 * The serializer supports both Protobuf.js and Proto3 JSON formats. By
 * setting `useProto3Json` to true, the serializer will use the Proto3 JSON
 * format.
 *
 * For a description of the Proto3 JSON format check
 * https://developers.google.com/protocol-buffers/docs/proto3#json
 *
 * TODO(klimt): We can remove the databaseId argument if we keep the full
 * resource name in documents.
 */ /**
 * Returns a value for a Date that's appropriate to put into a proto.
 */ function In(t, e) {
    return t.I ? new Date(1000 * e.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "") + "." + ("000000000" + e.nanoseconds).slice(-9) + "Z" : {
        seconds: "" + e.seconds,
        nanos: e.nanoseconds
    };
}
/**
 * Returns a value for bytes that's appropriate to put in a proto.
 *
 * Visible for testing.
 */ function Tn(t, e) {
    return t.I ? e.toBase64() : e.toUint8Array();
}
/**
 * Returns a ByteString based on the proto string value.
 */ function En(t, e) {
    return In(t, e.toTimestamp());
}
function _n(t) {
    return P(!!t), K.fromTimestamp(function(t1) {
        var e = tt(t1);
        return new j(e.seconds, e.nanos);
    }(t));
}
function Sn(t, e) {
    return (function(t1) {
        return new H([
            "projects",
            t1.projectId,
            "databases",
            t1.database
        ]);
    })(t).child("documents").child(e).canonicalString();
}
function Nn(t) {
    var e = H.fromString(t);
    return P($n(e)), e;
}
function Dn(t, e) {
    return Sn(t.databaseId, e.path);
}
function An(t, e) {
    var n8 = Nn(e);
    if (n8.get(1) !== t.databaseId.projectId) throw new D(N.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + n8.get(1) + " vs " + t.databaseId.projectId);
    if (n8.get(3) !== t.databaseId.database) throw new D(N.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + n8.get(3) + " vs " + t.databaseId.database);
    return new ct(Rn(n8));
}
function kn(t, e) {
    return Sn(t.databaseId, e);
}
function Cn(t) {
    var e = Nn(t);
    // In v1beta1 queries for collections at the root did not have a trailing
    // "/documents". In v1 all resource paths contain "/documents". Preserve the
    // ability to read the v1beta1 form for compatibility with queries persisted
    // in the local target cache.
    return 4 === e.length ? H.emptyPath() : Rn(e);
}
function xn(t) {
    return new H([
        "projects",
        t.databaseId.projectId,
        "databases",
        t.databaseId.database
    ]).canonicalString();
}
function Rn(t) {
    return P(t.length > 4 && "documents" === t.get(4)), t.popFirst(5);
}
function Ln(t, e, n8) {
    return {
        name: Dn(t, e),
        fields: n8.value.mapValue.fields
    };
}
function On(t, e, n8) {
    var r = An(t, e.name), i = _n(e.updateTime), o = new _t({
        mapValue: {
            fields: e.fields
        }
    }), s = Nt.newFoundDocument(r, i, o);
    return n8 && s.setHasCommittedMutations(), n8 ? s.setHasCommittedMutations() : s;
}
function Pn(t, e) {
    var n8;
    if (e instanceof Pe) n8 = {
        update: Ln(t, e.key, e.value)
    };
    else if (e instanceof je) n8 = {
        delete: Dn(t, e.key)
    };
    else if (e instanceof Fe) n8 = {
        update: Ln(t, e.key, e.data),
        updateMask: Yn(e.fieldMask)
    };
    else {
        if (!(e instanceof Ke)) return O();
        n8 = {
            verify: Dn(t, e.key)
        };
    }
    return e.fieldTransforms.length > 0 && (n8.updateTransforms = e.fieldTransforms.map(function(t1) {
        return (function(t2, e1) {
            var n9 = e1.transform;
            if (n9 instanceof me) return {
                fieldPath: e1.field.canonicalString(),
                setToServerValue: "REQUEST_TIME"
            };
            if (n9 instanceof ge) return {
                fieldPath: e1.field.canonicalString(),
                appendMissingElements: {
                    values: n9.elements
                }
            };
            if (n9 instanceof be) return {
                fieldPath: e1.field.canonicalString(),
                removeAllFromArray: {
                    values: n9.elements
                }
            };
            if (n9 instanceof Te) return {
                fieldPath: e1.field.canonicalString(),
                increment: n9.A
            };
            throw O();
        })(0, t1);
    })), e.precondition.isNone || (n8.currentDocument = (function(t1, e1) {
        return (void 0) !== e1.updateTime ? {
            updateTime: En(t1, e1.updateTime)
        } : (void 0) !== e1.exists ? {
            exists: e1.exists
        } : O();
    })(t, e.precondition)), n8;
}
function Fn(t, e) {
    var n8 = e.currentDocument ? function(t1) {
        return (void 0) !== t1.updateTime ? De.updateTime(_n(t1.updateTime)) : (void 0) !== t1.exists ? De.exists(t1.exists) : De.none();
    }(e.currentDocument) : De.none(), r = e.updateTransforms ? e.updateTransforms.map(function(e1) {
        return (function(t1, e2) {
            var n9 = null;
            if ("setToServerValue" in e2) P("REQUEST_TIME" === e2.setToServerValue), n9 = new me;
            else if ("appendMissingElements" in e2) {
                var r1 = e2.appendMissingElements.values || [];
                n9 = new ge(r1);
            } else if ("removeAllFromArray" in e2) {
                var i = e2.removeAllFromArray.values || [];
                n9 = new be(i);
            } else "increment" in e2 ? n9 = new Te(t1, e2.increment) : O();
            var o = $.fromServerFormat(e2.fieldPath);
            return new Se(o, n9);
        })(t, e1);
    }) : [];
    if (e.update) {
        e.update.name;
        var i = An(t, e.update.name), o = new _t({
            mapValue: {
                fields: e.update.fields
            }
        });
        if (e.updateMask) {
            var s = function(t1) {
                var e1 = t1.fieldPaths || [];
                return new X(e1.map(function(t2) {
                    return $.fromServerFormat(t2);
                }));
            }(e.updateMask);
            return new Fe(i, o, s, n8, r);
        }
        return new Pe(i, o, n8, r);
    }
    if (e.delete) {
        var u = An(t, e.delete);
        return new je(u, n8);
    }
    if (e.verify) {
        var a = An(t, e.verify);
        return new Ke(a, n8);
    }
    return O();
}
function Mn(t, e) {
    return {
        documents: [
            kn(t, e.path)
        ]
    };
}
function Vn(t, e) {
    // Dissect the path into parent, collectionId, and optional key filter.
    var n8 = {
        structuredQuery: {
        }
    }, r2 = e.path;
    null !== e.collectionGroup ? (n8.parent = kn(t, r2), n8.structuredQuery.from = [
        {
            collectionId: e.collectionGroup,
            allDescendants: true
        }
    ]) : (n8.parent = kn(t, r2.popLast()), n8.structuredQuery.from = [
        {
            collectionId: r2.lastSegment()
        }
    ]);
    var i = function(t1) {
        if (0 !== t1.length) {
            var e1 = t1.map(function(t2) {
                // visible for testing
                return (function(t3) {
                    if ("==" === t3.op) {
                        if (It(t3.value)) return {
                            unaryFilter: {
                                field: Gn(t3.field),
                                op: "IS_NAN"
                            }
                        };
                        if (bt(t3.value)) return {
                            unaryFilter: {
                                field: Gn(t3.field),
                                op: "IS_NULL"
                            }
                        };
                    } else if ("!=" === t3.op) {
                        if (It(t3.value)) return {
                            unaryFilter: {
                                field: Gn(t3.field),
                                op: "IS_NOT_NAN"
                            }
                        };
                        if (bt(t3.value)) return {
                            unaryFilter: {
                                field: Gn(t3.field),
                                op: "IS_NOT_NULL"
                            }
                        };
                    }
                    return {
                        fieldFilter: {
                            field: Gn(t3.field),
                            op: Qn(t3.op),
                            value: t3.value
                        }
                    };
                })(t2);
            });
            return 1 === e1.length ? e1[0] : {
                compositeFilter: {
                    op: "AND",
                    filters: e1
                }
            };
        }
    }(e.filters);
    i && (n8.structuredQuery.where = i);
    var o = function(t1) {
        if (0 !== t1.length) return t1.map(function(t2) {
            // visible for testing
            return (function(t3) {
                return {
                    field: Gn(t3.field),
                    direction: Kn(t3.dir)
                };
            })(t2);
        });
    }(e.orderBy);
    o && (n8.structuredQuery.orderBy = o);
    var s = function(t1, e2) {
        return t1.I || st(e2) ? e2 : {
            value: e2
        };
    }(t, e.limit);
    return null !== s && (n8.structuredQuery.limit = s), e.startAt && (n8.structuredQuery.startAt = Bn(e.startAt)), e.endAt && (n8.structuredQuery.endAt = Bn(e.endAt)), n8;
}
function qn(t) {
    var e2 = Cn(t.parent), n8 = t.structuredQuery, r2 = n8.from ? n8.from.length : 0, i = null;
    if (r2 > 0) {
        P(1 === r2);
        var o = n8.from[0];
        o.allDescendants ? i = o.collectionId : e2 = e2.child(o.collectionId);
    }
    var s = [];
    n8.where && (s = Un(n8.where));
    var u = [];
    n8.orderBy && (u = n8.orderBy.map(function(t1) {
        return (function(t2) {
            return new Kt(zn(t2.field), // visible for testing
            function(t3) {
                switch(t3){
                    case "ASCENDING":
                        return "asc";
                    case "DESCENDING":
                        return "desc";
                    default:
                        return;
                }
            }(t2.direction));
        })(t1);
    }));
    var a = null;
    n8.limit && (a = (function(t1) {
        var e3;
        return st(e3 = "object" == typeof t1 ? t1.value : t1) ? null : e3;
    })(n8.limit));
    var c = null;
    n8.startAt && (c = jn(n8.startAt));
    var h = null;
    return n8.endAt && (h = jn(n8.endAt)), Ht(e2, i, u, s, a, "F"/* First */ , c, h);
}
function Un(t) {
    return t ? (void 0) !== t.unaryFilter ? [
        Hn(t)
    ] : (void 0) !== t.fieldFilter ? [
        Wn(t)
    ] : (void 0) !== t.compositeFilter ? t.compositeFilter.filters.map(function(t1) {
        return Un(t1);
    }).reduce(function(t1, e2) {
        return t1.concat(e2);
    }) : O() : [];
}
function Bn(t) {
    return {
        before: t.before,
        values: t.position
    };
}
function jn(t) {
    var e2 = !!t.before, n8 = t.values || [];
    return new Bt(n8, e2);
}
// visible for testing
function Kn(t) {
    return gn[t];
}
function Qn(t) {
    return wn[t];
}
function Gn(t) {
    return {
        fieldPath: t.canonicalString()
    };
}
function zn(t) {
    return $.fromServerFormat(t.fieldPath);
}
function Wn(t) {
    return Rt.create(zn(t.fieldFilter.field), function(t1) {
        switch(t1){
            case "EQUAL":
                return "==";
            case "NOT_EQUAL":
                return "!=";
            case "GREATER_THAN":
                return ">";
            case "GREATER_THAN_OR_EQUAL":
                return ">=";
            case "LESS_THAN":
                return "<";
            case "LESS_THAN_OR_EQUAL":
                return "<=";
            case "ARRAY_CONTAINS":
                return "array-contains";
            case "IN":
                return "in";
            case "NOT_IN":
                return "not-in";
            case "ARRAY_CONTAINS_ANY":
                return "array-contains-any";
            case "OPERATOR_UNSPECIFIED":
            default:
                return O();
        }
    }(t.fieldFilter.op), t.fieldFilter.value);
}
function Hn(t) {
    switch(t.unaryFilter.op){
        case "IS_NAN":
            var e2 = zn(t.unaryFilter.field);
            return Rt.create(e2, "=="/* EQUAL */ , {
                doubleValue: NaN
            });
        case "IS_NULL":
            var n8 = zn(t.unaryFilter.field);
            return Rt.create(n8, "=="/* EQUAL */ , {
                nullValue: "NULL_VALUE"
            });
        case "IS_NOT_NAN":
            var r2 = zn(t.unaryFilter.field);
            return Rt.create(r2, "!="/* NOT_EQUAL */ , {
                doubleValue: NaN
            });
        case "IS_NOT_NULL":
            var i = zn(t.unaryFilter.field);
            return Rt.create(i, "!="/* NOT_EQUAL */ , {
                nullValue: "NULL_VALUE"
            });
        case "OPERATOR_UNSPECIFIED":
        default:
            return O();
    }
}
function Yn(t) {
    var e2 = [];
    return t.fields.forEach(function(t1) {
        return e2.push(t1.canonicalString());
    }), {
        fieldPaths: e2
    };
}
function $n(t) {
    // Resource names have at least 4 components (project ID, database ID)
    return t.length >= 4 && "projects" === t.get(0) && "databases" === t.get(2);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Encodes a resource path into a IndexedDb-compatible string form.
 */ function Xn(t) {
    for(var e2 = "", n8 = 0; n8 < t.length; n8++)e2.length > 0 && (e2 = Zn(e2)), e2 = Jn(t.get(n8), e2);
    return Zn(e2);
}
/** Encodes a single segment of a resource path into the given result */ function Jn(t, e2) {
    for(var n8 = e2, r2 = t.length, i = 0; i < r2; i++){
        var o = t.charAt(i);
        switch(o){
            case "\0":
                n8 += "";
                break;
            case "":
                n8 += "";
                break;
            default:
                n8 += o;
        }
    }
    return n8;
}
/** Encodes a path separator into the given result */ function Zn(t) {
    return t + "";
}
/**
 * Decodes the given IndexedDb-compatible string form of a resource path into
 * a ResourcePath instance. Note that this method is not suitable for use with
 * decoding resource names from the server; those are One Platform format
 * strings.
 */ function tr(t) {
    // Event the empty path must encode as a path of at least length 2. A path
    // with exactly 2 must be the empty path.
    var e2 = t.length;
    if (P(e2 >= 2), 2 === e2) return P("" === t.charAt(0) && "" === t.charAt(1)), H.emptyPath();
    // Escape characters cannot exist past the second-to-last position in the
    // source value.
    for(var n8 = e2 - 2, r2 = [], i = "", o = 0; o < e2;){
        // The last two characters of a valid encoded path must be a separator, so
        // there must be an end to this segment.
        var s = t.indexOf("", o);
        switch((s < 0 || s > n8) && O(), t.charAt(s + 1)){
            case "":
                var u = t.substring(o, s), a = void 0;
                0 === i.length ? // Avoid copying for the common case of a segment that excludes \0
                // and \001
                a = u : (a = i += u, i = ""), r2.push(a);
                break;
            case "":
                i += t.substring(o, s), i += "\0";
                break;
            case "":
                // The escape character can be used in the output to encode itself.
                i += t.substring(o, s + 1);
                break;
            default:
                O();
        }
        o = s + 2;
    }
    return new H(r2);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Schema Version for the Web client:
 * 1.  Initial version including Mutation Queue, Query Cache, and Remote
 *     Document Cache
 * 2.  Used to ensure a targetGlobal object exists and add targetCount to it. No
 *     longer required because migration 3 unconditionally clears it.
 * 3.  Dropped and re-created Query Cache to deal with cache corruption related
 *     to limbo resolution. Addresses
 *     https://github.com/firebase/firebase-ios-sdk/issues/1548
 * 4.  Multi-Tab Support.
 * 5.  Removal of held write acks.
 * 6.  Create document global for tracking document cache size.
 * 7.  Ensure every cached document has a sentinel row with a sequence number.
 * 8.  Add collection-parent index for Collection Group queries.
 * 9.  Change RemoteDocumentChanges store to be keyed by readTime rather than
 *     an auto-incrementing ID. This is required for Index-Free queries.
 * 10. Rewrite the canonical IDs to the explicit Protobuf-based format.
 * 11. Add bundles and named_queries for bundle support.
 */ /**
 * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.
 */ var er = function(t, e2) {
    this.seconds = t, this.nanoseconds = e2;
}, nr = function(t, /** Whether to allow shared access from multiple tabs. */ e2, n8) {
    this.ownerId = t, this.allowTabSynchronization = e2, this.leaseTimestampMs = n8;
};
/**
 * A singleton object to be stored in the 'owner' store in IndexedDb.
 *
 * A given database can have a single primary tab assigned at a given time. That
 * tab must validate that it is still holding the primary lease before every
 * operation that requires locked access. The primary tab should regularly
 * write an updated timestamp to this lease to prevent other tabs from
 * "stealing" the primary lease
 */ /**
 * Name of the IndexedDb object store.
 *
 * Note that the name 'owner' is chosen to ensure backwards compatibility with
 * older clients that only supported single locked access to the persistence
 * layer.
 */ nr.store = "owner", /**
     * The key string used for the single object that exists in the
     * DbPrimaryClient store.
     */ nr.key = "owner";
/**
 * An object to be stored in the 'mutationQueues' store in IndexedDb.
 *
 * Each user gets a single queue of MutationBatches to apply to the server.
 * DbMutationQueue tracks the metadata about the queue.
 */ var rr = function(/**
     * The normalized user ID to which this queue belongs.
     */ t, /**
     * An identifier for the highest numbered batch that has been acknowledged
     * by the server. All MutationBatches in this queue with batchIds less
     * than or equal to this value are considered to have been acknowledged by
     * the server.
     *
     * NOTE: this is deprecated and no longer used by the code.
     */ e2, /**
     * A stream token that was previously sent by the server.
     *
     * See StreamingWriteRequest in datastore.proto for more details about
     * usage.
     *
     * After sending this token, earlier tokens may not be used anymore so
     * only a single stream token is retained.
     *
     * NOTE: this is deprecated and no longer used by the code.
     */ n8) {
    this.userId = t, this.lastAcknowledgedBatchId = e2, this.lastStreamToken = n8;
};
/** Name of the IndexedDb object store.  */ rr.store = "mutationQueues", /** Keys are automatically assigned via the userId property. */ rr.keyPath = "userId";
/**
 * An object to be stored in the 'mutations' store in IndexedDb.
 *
 * Represents a batch of user-level mutations intended to be sent to the server
 * in a single write. Each user-level batch gets a separate DbMutationBatch
 * with a new batchId.
 */ var ir = function(/**
     * The normalized user ID to which this batch belongs.
     */ t, /**
     * An identifier for this batch, allocated using an auto-generated key.
     */ e2, /**
     * The local write time of the batch, stored as milliseconds since the
     * epoch.
     */ n8, /**
     * A list of "mutations" that represent a partial base state from when this
     * write batch was initially created. During local application of the write
     * batch, these baseMutations are applied prior to the real writes in order
     * to override certain document fields from the remote document cache. This
     * is necessary in the case of non-idempotent writes (e.g. `increment()`
     * transforms) to make sure that the local view of the modified documents
     * doesn't flicker if the remote document cache receives the result of the
     * non-idempotent write before the write is removed from the queue.
     *
     * These mutations are never sent to the backend.
     */ r2, /**
     * A list of mutations to apply. All mutations will be applied atomically.
     *
     * Mutations are serialized via toMutation().
     */ i) {
    this.userId = t, this.batchId = e2, this.localWriteTimeMs = n8, this.baseMutations = r2, this.mutations = i;
};
/** Name of the IndexedDb object store.  */ ir.store = "mutations", /** Keys are automatically assigned via the userId, batchId properties. */ ir.keyPath = "batchId", /** The index name for lookup of mutations by user. */ ir.userMutationsIndex = "userMutationsIndex", /** The user mutations index is keyed by [userId, batchId] pairs. */ ir.userMutationsKeyPath = [
    "userId",
    "batchId"
];
/**
 * An object to be stored in the 'documentMutations' store in IndexedDb.
 *
 * A manually maintained index of all the mutation batches that affect a given
 * document key. The rows in this table are references based on the contents of
 * DbMutationBatch.mutations.
 */ var or = /** @class */ function() {
    function t() {
    }
    /**
     * Creates a [userId] key for use in the DbDocumentMutations index to iterate
     * over all of a user's document mutations.
     */ return t.prefixForUser = function(t1) {
        return [
            t1
        ];
    }, /**
     * Creates a [userId, encodedPath] key for use in the DbDocumentMutations
     * index to iterate over all at document mutations for a given path or lower.
     */ t.prefixForPath = function(t1, e2) {
        return [
            t1,
            Xn(e2)
        ];
    }, /**
     * Creates a full index key of [userId, encodedPath, batchId] for inserting
     * and deleting into the DbDocumentMutations index.
     */ t.key = function(t1, e2, n8) {
        return [
            t1,
            Xn(e2),
            n8
        ];
    }, t;
}();
or.store = "documentMutations", /**
     * Because we store all the useful information for this store in the key,
     * there is no useful information to store as the value. The raw (unencoded)
     * path cannot be stored because IndexedDb doesn't store prototype
     * information.
     */ or.PLACEHOLDER = new or;
/**
 * Represents the known absence of a document at a particular version.
 * Stored in IndexedDb as part of a DbRemoteDocument object.
 */ var sr = function(t, e2) {
    this.path = t, this.readTime = e2;
}, ur = function(t, e2) {
    this.path = t, this.version = e2;
}, ar = // TODO: We are currently storing full document keys almost three times
// (once as part of the primary key, once - partly - as `parentPath` and once
// inside the encoded documents). During our next migration, we should
// rewrite the primary key as parentPath + document ID which would allow us
// to drop one value.
function(/**
     * Set to an instance of DbUnknownDocument if the data for a document is
     * not known, but it is known that a document exists at the specified
     * version (e.g. it had a successful update applied to it)
     */ t, /**
     * Set to an instance of a DbNoDocument if it is known that no document
     * exists.
     */ e2, /**
     * Set to an instance of a Document if there's a cached version of the
     * document.
     */ n8, /**
     * Documents that were written to the remote document store based on
     * a write acknowledgment are marked with `hasCommittedMutations`. These
     * documents are potentially inconsistent with the backend's copy and use
     * the write's commit version as their document version.
     */ r2, /**
     * When the document was read from the backend. Undefined for data written
     * prior to schema version 9.
     */ i, /**
     * The path of the collection this document is part of. Undefined for data
     * written prior to schema version 9.
     */ o) {
    this.unknownDocument = t, this.noDocument = e2, this.document = n8, this.hasCommittedMutations = r2, this.readTime = i, this.parentPath = o;
};
/**
 * Represents a document that is known to exist but whose data is unknown.
 * Stored in IndexedDb as part of a DbRemoteDocument object.
 */ ar.store = "remoteDocuments", /**
     * An index that provides access to all entries sorted by read time (which
     * corresponds to the last modification time of each row).
     *
     * This index is used to provide a changelog for Multi-Tab.
     */ ar.readTimeIndex = "readTimeIndex", ar.readTimeIndexPath = "readTime", /**
     * An index that provides access to documents in a collection sorted by read
     * time.
     *
     * This index is used to allow the RemoteDocumentCache to fetch newly changed
     * documents in a collection.
     */ ar.collectionReadTimeIndex = "collectionReadTimeIndex", ar.collectionReadTimeIndexPath = [
    "parentPath",
    "readTime"
];
/**
 * Contains a single entry that has metadata about the remote document cache.
 */ var cr = /**
     * @param byteSize - Approximately the total size in bytes of all the
     * documents in the document cache.
     */ function(t) {
    this.byteSize = t;
};
cr.store = "remoteDocumentGlobal", cr.key = "remoteDocumentGlobalKey";
/**
 * An object to be stored in the 'targets' store in IndexedDb.
 *
 * This is based on and should be kept in sync with the proto used in the iOS
 * client.
 *
 * Each query the client listens to against the server is tracked on disk so
 * that the query can be efficiently resumed on restart.
 */ var hr = function(/**
     * An auto-generated sequential numeric identifier for the query.
     *
     * Queries are stored using their canonicalId as the key, but these
     * canonicalIds can be quite long so we additionally assign a unique
     * queryId which can be used by referenced data structures (e.g.
     * indexes) to minimize the on-disk cost.
     */ t, /**
     * The canonical string representing this query. This is not unique.
     */ e2, /**
     * The last readTime received from the Watch Service for this query.
     *
     * This is the same value as TargetChange.read_time in the protos.
     */ n8, /**
     * An opaque, server-assigned token that allows watching a query to be
     * resumed after disconnecting without retransmitting all the data
     * that matches the query. The resume token essentially identifies a
     * point in time from which the server should resume sending results.
     *
     * This is related to the snapshotVersion in that the resumeToken
     * effectively also encodes that value, but the resumeToken is opaque
     * and sometimes encodes additional information.
     *
     * A consequence of this is that the resumeToken should be used when
     * asking the server to reason about where this client is in the watch
     * stream, but the client should use the snapshotVersion for its own
     * purposes.
     *
     * This is the same value as TargetChange.resume_token in the protos.
     */ r2, /**
     * A sequence number representing the last time this query was
     * listened to, used for garbage collection purposes.
     *
     * Conventionally this would be a timestamp value, but device-local
     * clocks are unreliable and they must be able to create new listens
     * even while disconnected. Instead this should be a monotonically
     * increasing number that's incremented on each listen call.
     *
     * This is different from the queryId since the queryId is an
     * immutable identifier assigned to the Query on first use while
     * lastListenSequenceNumber is updated every time the query is
     * listened to.
     */ i, /**
     * Denotes the maximum snapshot version at which the associated query view
     * contained no limbo documents.  Undefined for data written prior to
     * schema version 9.
     */ o, /**
     * The query for this target.
     *
     * Because canonical ids are not unique we must store the actual query. We
     * use the proto to have an object we can persist without having to
     * duplicate translation logic to and from a `Query` object.
     */ s) {
    this.targetId = t, this.canonicalId = e2, this.readTime = n8, this.resumeToken = r2, this.lastListenSequenceNumber = i, this.lastLimboFreeSnapshotVersion = o, this.query = s;
};
hr.store = "targets", /** Keys are automatically assigned via the targetId property. */ hr.keyPath = "targetId", /** The name of the queryTargets index. */ hr.queryTargetsIndexName = "queryTargetsIndex", /**
     * The index of all canonicalIds to the targets that they match. This is not
     * a unique mapping because canonicalId does not promise a unique name for all
     * possible queries, so we append the targetId to make the mapping unique.
     */ hr.queryTargetsKeyPath = [
    "canonicalId",
    "targetId"
];
/**
 * An object representing an association between a target and a document, or a
 * sentinel row marking the last sequence number at which a document was used.
 * Each document cached must have a corresponding sentinel row before lru
 * garbage collection is enabled.
 *
 * The target associations and sentinel rows are co-located so that orphaned
 * documents and their sequence numbers can be identified efficiently via a scan
 * of this store.
 */ var fr = function(/**
     * The targetId identifying a target or 0 for a sentinel row.
     */ t, /**
     * The path to the document, as encoded in the key.
     */ e2, /**
     * If this is a sentinel row, this should be the sequence number of the last
     * time the document specified by `path` was used. Otherwise, it should be
     * `undefined`.
     */ n8) {
    this.targetId = t, this.path = e2, this.sequenceNumber = n8;
};
/** Name of the IndexedDb object store.  */ fr.store = "targetDocuments", /** Keys are automatically assigned via the targetId, path properties. */ fr.keyPath = [
    "targetId",
    "path"
], /** The index name for the reverse index. */ fr.documentTargetsIndex = "documentTargetsIndex", /** We also need to create the reverse index for these properties. */ fr.documentTargetsKeyPath = [
    "path",
    "targetId"
];
/**
 * A record of global state tracked across all Targets, tracked separately
 * to avoid the need for extra indexes.
 *
 * This should be kept in-sync with the proto used in the iOS client.
 */ var lr = function(/**
     * The highest numbered target id across all targets.
     *
     * See DbTarget.targetId.
     */ t, /**
     * The highest numbered lastListenSequenceNumber across all targets.
     *
     * See DbTarget.lastListenSequenceNumber.
     */ e2, /**
     * A global snapshot version representing the last consistent snapshot we
     * received from the backend. This is monotonically increasing and any
     * snapshots received from the backend prior to this version (e.g. for
     * targets resumed with a resumeToken) should be suppressed (buffered)
     * until the backend has caught up to this snapshot version again. This
     * prevents our cache from ever going backwards in time.
     */ n8, /**
     * The number of targets persisted.
     */ r2) {
    this.highestTargetId = t, this.highestListenSequenceNumber = e2, this.lastRemoteSnapshotVersion = n8, this.targetCount = r2;
};
/**
 * The key string used for the single object that exists in the
 * DbTargetGlobal store.
 */ lr.key = "targetGlobalKey", lr.store = "targetGlobal";
/**
 * An object representing an association between a Collection id (e.g. 'messages')
 * to a parent path (e.g. '/chats/123') that contains it as a (sub)collection.
 * This is used to efficiently find all collections to query when performing
 * a Collection Group query.
 */ var dr = function(/**
     * The collectionId (e.g. 'messages')
     */ t, /**
     * The path to the parent (either a document location or an empty path for
     * a root-level collection).
     */ e2) {
    this.collectionId = t, this.parent = e2;
};
/** Name of the IndexedDb object store. */ dr.store = "collectionParents", /** Keys are automatically assigned via the collectionId, parent properties. */ dr.keyPath = [
    "collectionId",
    "parent"
];
/**
 * A record of the metadata state of each client.
 *
 * PORTING NOTE: This is used to synchronize multi-tab state and does not need
 * to be ported to iOS or Android.
 */ var pr = function(// Note: Previous schema versions included a field
// "lastProcessedDocumentChangeId". Don't use anymore.
/** The auto-generated client id assigned at client startup. */ t, /** The last time this state was updated. */ e2, /** Whether the client's network connection is enabled. */ n8, /** Whether this client is running in a foreground tab. */ r2) {
    this.clientId = t, this.updateTimeMs = e2, this.networkEnabled = n8, this.inForeground = r2;
};
/** Name of the IndexedDb object store. */ pr.store = "clientMetadata", /** Keys are automatically assigned via the clientId properties. */ pr.keyPath = "clientId";
/**
 * A object representing a bundle loaded by the SDK.
 */ var yr = function(/** The ID of the loaded bundle. */ t, /** The create time of the loaded bundle. */ e2, /** The schema version of the loaded bundle. */ n8) {
    this.bundleId = t, this.createTime = e2, this.version = n8;
};
/** Name of the IndexedDb object store. */ yr.store = "bundles", yr.keyPath = "bundleId";
/**
 * A object representing a named query loaded by the SDK via a bundle.
 */ var vr = function(/** The name of the query. */ t, /** The read time of the results saved in the bundle from the named query. */ e2, /** The query saved in the bundle. */ n8) {
    this.name = t, this.readTime = e2, this.bundledQuery = n8;
};
/** Name of the IndexedDb object store. */ vr.store = "namedQueries", vr.keyPath = "name";
// Visible for testing
var mr = _tslib.__spreadArray(_tslib.__spreadArray([], _tslib.__spreadArray(_tslib.__spreadArray([], _tslib.__spreadArray(_tslib.__spreadArray([], _tslib.__spreadArray(_tslib.__spreadArray([], [
    rr.store,
    ir.store,
    or.store,
    ar.store,
    hr.store,
    nr.store,
    lr.store,
    fr.store
]), [
    pr.store
])), [
    cr.store
])), [
    dr.store
])), [
    yr.store,
    vr.store
]), gr = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.", wr = /** @class */ function() {
    function t() {
        this.onCommittedListeners = [];
    }
    return t.prototype.addOnCommittedListener = function(t1) {
        this.onCommittedListeners.push(t1);
    }, t.prototype.raiseOnCommittedEvent = function() {
        this.onCommittedListeners.forEach(function(t1) {
            return t1();
        });
    }, t;
}(), br = function() {
    var t = this;
    this.promise = new Promise(function(e2, n8) {
        t.resolve = e2, t.reject = n8;
    });
}, Ir = /** @class */ function() {
    function t(t1) {
        var e2 = this;
        // NOTE: next/catchCallback will always point to our own wrapper functions,
        // not the user's raw next() or catch() callbacks.
        this.nextCallback = null, this.catchCallback = null, // When the operation resolves, we'll set result or error and mark isDone.
        this.result = void 0, this.error = void 0, this.isDone = false, // Set to true when .then() or .catch() are called and prevents additional
        // chaining.
        this.callbackAttached = false, t1(function(t2) {
            e2.isDone = true, e2.result = t2, e2.nextCallback && // value should be defined unless T is Void, but we can't express
            // that in the type system.
            e2.nextCallback(t2);
        }, function(t2) {
            e2.isDone = true, e2.error = t2, e2.catchCallback && e2.catchCallback(t2);
        });
    }
    return t.prototype.catch = function(t1) {
        return this.next(void 0, t1);
    }, t.prototype.next = function(e2, n8) {
        var r2 = this;
        return this.callbackAttached && O(), this.callbackAttached = true, this.isDone ? this.error ? this.wrapFailure(n8, this.error) : this.wrapSuccess(e2, this.result) : new t(function(t1, i) {
            r2.nextCallback = function(n9) {
                r2.wrapSuccess(e2, n9).next(t1, i);
            }, r2.catchCallback = function(e3) {
                r2.wrapFailure(n8, e3).next(t1, i);
            };
        });
    }, t.prototype.toPromise = function() {
        var t1 = this;
        return new Promise(function(e2, n8) {
            t1.next(e2, n8);
        });
    }, t.prototype.wrapUserFunction = function(e2) {
        try {
            var n8 = e2();
            return n8 instanceof t ? n8 : t.resolve(n8);
        } catch (e3) {
            return t.reject(e3);
        }
    }, t.prototype.wrapSuccess = function(e2, n8) {
        return e2 ? this.wrapUserFunction(function() {
            return e2(n8);
        }) : t.resolve(n8);
    }, t.prototype.wrapFailure = function(e2, n8) {
        return e2 ? this.wrapUserFunction(function() {
            return e2(n8);
        }) : t.reject(n8);
    }, t.resolve = function(e2) {
        return new t(function(t1, n8) {
            t1(e2);
        });
    }, t.reject = function(e2) {
        return new t(function(t1, n8) {
            n8(e2);
        });
    }, t.waitFor = function(// Accept all Promise types in waitFor().
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    e2) {
        return new t(function(t1, n8) {
            var r2 = 0, i = 0, o = false;
            e2.forEach(function(e3) {
                ++r2, e3.next(function() {
                    ++i, o && i === r2 && t1();
                }, function(t2) {
                    return n8(t2);
                });
            }), o = true, i === r2 && t1();
        });
    }, /**
     * Given an array of predicate functions that asynchronously evaluate to a
     * boolean, implements a short-circuiting `or` between the results. Predicates
     * will be evaluated until one of them returns `true`, then stop. The final
     * result will be whether any of them returned `true`.
     */ t.or = function(e2) {
        for(var n8 = t.resolve(false), r2 = function(e3) {
            n8 = n8.next(function(n9) {
                return n9 ? t.resolve(n9) : e3();
            });
        }, i = 0, o = e2; i < o.length; i++)r2(o[i]);
        return n8;
    }, t.forEach = function(t1, e2) {
        var n8 = this, r2 = [];
        return t1.forEach(function(t2, i) {
            r2.push(e2.call(n8, t2, i));
        }), this.waitFor(r2);
    }, t;
}(), Tr = /** @class */ function() {
    function t(t1, e2) {
        var n8 = this;
        this.action = t1, this.transaction = e2, this.aborted = false, /**
             * A promise that resolves with the result of the IndexedDb transaction.
             */ this.ft = new br, this.transaction.oncomplete = function() {
            n8.ft.resolve();
        }, this.transaction.onabort = function() {
            e2.error ? n8.ft.reject(new Sr(t1, e2.error)) : n8.ft.resolve();
        }, this.transaction.onerror = function(e3) {
            var r2 = Cr(e3.target.error);
            n8.ft.reject(new Sr(t1, r2));
        };
    }
    return t.open = function(e2, n8, r2, i) {
        try {
            return new t(n8, e2.transaction(i, r2));
        } catch (e3) {
            throw new Sr(n8, e3);
        }
    }, Object.defineProperty(t.prototype, "dt", {
        get: function() {
            return this.ft.promise;
        },
        enumerable: false,
        configurable: true
    }), t.prototype.abort = function(t1) {
        t1 && this.ft.reject(t1), this.aborted || (C("SimpleDb", "Aborting transaction:", t1 ? t1.message : "Client-initiated abort"), this.aborted = true, this.transaction.abort());
    }, /**
     * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All
     * operations performed on the SimpleDbStore happen within the context of this
     * transaction and it cannot be used anymore once the transaction is
     * completed.
     *
     * Note that we can't actually enforce that the KeyType and ValueType are
     * correct, but they allow type safety through the rest of the consuming code.
     */ t.prototype.store = function(t1) {
        var e2 = this.transaction.objectStore(t1);
        return new Dr(e2);
    }, t;
}(), Er = /** @class */ function() {
    /*
     * Creates a new SimpleDb wrapper for IndexedDb database `name`.
     *
     * Note that `version` must not be a downgrade. IndexedDB does not support
     * downgrading the schema version. We currently do not support any way to do
     * versioning outside of IndexedDB's versioning mechanism, as only
     * version-upgrade transactions are allowed to do things like create
     * objectstores.
     */ function t(e2, n8, r2) {
        this.name = e2, this.version = n8, this.wt = r2, // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the
        // bug we're checking for should exist in iOS >= 12.2 and < 13, but for
        // whatever reason it's much harder to hit after 12.2 so we only proactively
        // log on 12.2.
        12.2 === t._t(_util.getUA()) && x("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
    }
    /** Deletes the specified database. */ return t.delete = function(t1) {
        return C("SimpleDb", "Removing database:", t1), Ar(window.indexedDB.deleteDatabase(t1)).toPromise();
    }, /** Returns true if IndexedDB is available in the current environment. */ t.yt = function() {
        if ("undefined" == typeof indexedDB) return false;
        if (t.gt()) return true;
        // We extensively use indexed array values and compound keys,
        // which IE and Edge do not support. However, they still have indexedDB
        // defined on the window, so we need to check for them here and make sure
        // to return that persistence is not enabled for those browsers.
        // For tracking support of this feature, see here:
        // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/
        // Check the UA string to find out the browser.
        var e2 = _util.getUA(), n8 = t._t(e2), r2 = 0 < n8 && n8 < 10, o = t.Et(e2), s = 0 < o && o < 4.5;
        // IE 10
        // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
        // IE 11
        // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
        // Edge
        // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,
        // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';
        // iOS Safari: Disable for users running iOS version < 10.
        return !(e2.indexOf("MSIE ") > 0 || e2.indexOf("Trident/") > 0 || e2.indexOf("Edge/") > 0 || r2 || s);
    }, /**
     * Returns true if the backing IndexedDB store is the Node IndexedDBShim
     * (see https://github.com/axemclion/IndexedDBShim).
     */ t.gt = function() {
        var t1;
        return "undefined" != typeof process && "YES" === (null === (t1 = process.env) || (void 0) === t1 ? void 0 : t1.Tt);
    }, /** Helper to get a typed SimpleDbStore from a transaction. */ t.It = function(t1, e2) {
        return t1.store(e2);
    }, // visible for testing
    /** Parse User Agent to determine iOS version. Returns -1 if not found. */ t._t = function(t1) {
        var e2 = t1.match(/i(?:phone|pad|pod) os ([\d_]+)/i), n8 = e2 ? e2[1].split("_").slice(0, 2).join(".") : "-1";
        return Number(n8);
    }, // visible for testing
    /** Parse User Agent to determine Android version. Returns -1 if not found. */ t.Et = function(t1) {
        var e2 = t1.match(/Android ([\d.]+)/i), n8 = e2 ? e2[1].split(".").slice(0, 2).join(".") : "-1";
        return Number(n8);
    }, /**
     * Opens the specified database, creating or upgrading it if necessary.
     */ t.prototype.At = function(t1) {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var e2, n8 = this;
            return _tslib.__generator(this, function(r2) {
                switch(r2.label){
                    case 0:
                        return this.db ? [
                            3,
                            2
                        ] : (C("SimpleDb", "Opening database:", this.name), e2 = this, [
                            4,
                            new Promise(function(e3, r3) {
                                // TODO(mikelehen): Investigate browser compatibility.
                                // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB
                                // suggests IE9 and older WebKit browsers handle upgrade
                                // differently. They expect setVersion, as described here:
                                // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion
                                var i = indexedDB.open(n8.name, n8.version);
                                i.onsuccess = function(t2) {
                                    var n9 = t2.target.result;
                                    e3(n9);
                                }, i.onblocked = function() {
                                    r3(new Sr(t1, "Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."));
                                }, i.onerror = function(e4) {
                                    var n9 = e4.target.error;
                                    "VersionError" === n9.name ? r3(new D(N.FAILED_PRECONDITION, "A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")) : r3(new Sr(t1, n9));
                                }, i.onupgradeneeded = function(t2) {
                                    C("SimpleDb", 'Database "' + n8.name + '" requires upgrade from version:', t2.oldVersion);
                                    var e4 = t2.target.result;
                                    n8.wt.Rt(e4, i.transaction, t2.oldVersion, n8.version).next(function() {
                                        C("SimpleDb", "Database upgrade to version " + n8.version + " complete");
                                    });
                                };
                            })
                        ]);
                    case 1:
                        e2.db = r2.sent(), r2.label = 2;
                    case 2:
                        return [
                            2,
                            (this.bt && (this.db.onversionchange = function(t2) {
                                return n8.bt(t2);
                            }), this.db)
                        ];
                }
            });
        });
    }, t.prototype.vt = function(t1) {
        this.bt = t1, this.db && (this.db.onversionchange = function(e2) {
            return t1(e2);
        });
    }, t.prototype.runTransaction = function(t1, e2, i, o) {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var n8, s, u, a, c;
            return _tslib.__generator(this, function(h) {
                switch(h.label){
                    case 0:
                        n8 = "readonly" === e2, s = 0, u = function() {
                            var e3, u1, c1, h1, f;
                            return _tslib.__generator(this, function(r2) {
                                switch(r2.label){
                                    case 0:
                                        ++s, r2.label = 1;
                                    case 1:
                                        return r2.trys.push([
                                            1,
                                            4,
                                            ,
                                            5
                                        ]), [
                                            4,
                                            a.At(t1)
                                        ];
                                    case 2:
                                        // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
                                        // fire), but still return the original transactionFnResult back to the
                                        // caller.
                                        return a.db = r2.sent(), e3 = Tr.open(a.db, t1, n8 ? "readonly" : "readwrite", i), u1 = o(e3).catch(function(t2) {
                                            // Abort the transaction if there was an error.
                                            return e3.abort(t2), Ir.reject(t2);
                                        }).toPromise(), c1 = {
                                        }, u1.catch(function() {
                                        }), [
                                            4,
                                            e3.dt
                                        ];
                                    case 3:
                                        return [
                                            2,
                                            (c1.value = // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
                                            // fire), but still return the original transactionFnResult back to the
                                            // caller.
                                            (r2.sent(), u1), c1)
                                        ];
                                    case 4:
                                        return h1 = r2.sent(), f = "FirebaseError" !== h1.name && s < 3, C("SimpleDb", "Transaction failed with error:", h1.message, "Retrying:", f), a.close(), f ? [
                                            3,
                                            5
                                        ] : [
                                            2,
                                            {
                                                value: Promise.reject(h1)
                                            }
                                        ];
                                    case 5:
                                        return [
                                            2
                                        ];
                                }
                            });
                        }, a = this, h.label = 1;
                    case 1:
                        return [
                            5,
                            u()
                        ];
                    case 2:
                        if ("object" == typeof (c = h.sent())) return [
                            2,
                            c.value
                        ];
                        h.label = 3;
                    case 3:
                        return [
                            3,
                            1
                        ];
                    case 4:
                        return [
                            2
                        ];
                }
            });
        });
    }, t.prototype.close = function() {
        this.db && this.db.close(), this.db = void 0;
    }, t;
}(), _r = /** @class */ function() {
    function t(t1) {
        this.Pt = t1, this.Vt = false, this.St = null;
    }
    return Object.defineProperty(t.prototype, "isDone", {
        get: function() {
            return this.Vt;
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t.prototype, "Dt", {
        get: function() {
            return this.St;
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t.prototype, "cursor", {
        set: function(t1) {
            this.Pt = t1;
        },
        enumerable: false,
        configurable: true
    }), /**
     * This function can be called to stop iteration at any point.
     */ t.prototype.done = function() {
        this.Vt = true;
    }, /**
     * This function can be called to skip to that next key, which could be
     * an index or a primary key.
     */ t.prototype.Ct = function(t1) {
        this.St = t1;
    }, /**
     * Delete the current cursor value from the object store.
     *
     * NOTE: You CANNOT do this with a keysOnly query.
     */ t.prototype.delete = function() {
        return Ar(this.Pt.delete());
    }, t;
}(), Sr = /** @class */ function(e2) {
    function n8(t, n9) {
        var r2 = this;
        return (r2 = e2.call(this, N.UNAVAILABLE, "IndexedDB transaction '" + t + "' failed: " + n9) || this).name = "IndexedDbTransactionError", r2;
    }
    return _tslib.__extends(n8, e2), n8;
}(D);
// V2 is no longer usable (see comment at top of file)
// Visible for testing
/**
 * A base class representing a persistence transaction, encapsulating both the
 * transaction's sequence numbers as well as a list of onCommitted listeners.
 *
 * When you call Persistence.runTransaction(), it will create a transaction and
 * pass it to your callback. You then pass it to any method that operates
 * on persistence.
 */ /** Verifies whether `e` is an IndexedDbTransactionError. */ function Nr(t) {
    // Use name equality, as instanceof checks on errors don't work with errors
    // that wrap other errors.
    return "IndexedDbTransactionError" === t.name;
}
/**
 * A wrapper around an IDBObjectStore providing an API that:
 *
 * 1) Has generic KeyType / ValueType parameters to provide strongly-typed
 * methods for acting against the object store.
 * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every
 * method return a PersistencePromise instead.
 * 3) Provides a higher-level API to avoid needing to do excessive wrapping of
 * intermediate IndexedDB types (IDBCursorWithValue, etc.)
 */ var Dr = /** @class */ function() {
    function t(t1) {
        this.store = t1;
    }
    return t.prototype.put = function(t1, e2) {
        var n8;
        return (void 0) !== e2 ? (C("SimpleDb", "PUT", this.store.name, t1, e2), n8 = this.store.put(e2, t1)) : (C("SimpleDb", "PUT", this.store.name, "<auto-key>", t1), n8 = this.store.put(t1)), Ar(n8);
    }, /**
     * Adds a new value into an Object Store and returns the new key. Similar to
     * IndexedDb's `add()`, this method will fail on primary key collisions.
     *
     * @param value - The object to write.
     * @returns The key of the value to add.
     */ t.prototype.add = function(t1) {
        return C("SimpleDb", "ADD", this.store.name, t1, t1), Ar(this.store.add(t1));
    }, /**
     * Gets the object with the specified key from the specified store, or null
     * if no object exists with the specified key.
     *
     * @key The key of the object to get.
     * @returns The object with the specified key or null if no object exists.
     */ t.prototype.get = function(t1) {
        var e2 = this;
        // We're doing an unsafe cast to ValueType.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return Ar(this.store.get(t1)).next(function(n8) {
            // Normalize nonexistence to null.
            return (void 0) === n8 && (n8 = null), C("SimpleDb", "GET", e2.store.name, t1, n8), n8;
        });
    }, t.prototype.delete = function(t1) {
        return C("SimpleDb", "DELETE", this.store.name, t1), Ar(this.store.delete(t1));
    }, /**
     * If we ever need more of the count variants, we can add overloads. For now,
     * all we need is to count everything in a store.
     *
     * Returns the number of rows in the store.
     */ t.prototype.count = function() {
        return C("SimpleDb", "COUNT", this.store.name), Ar(this.store.count());
    }, t.prototype.Nt = function(t1, e2) {
        var n8 = this.cursor(this.options(t1, e2)), r2 = [];
        return this.xt(n8, function(t2, e3) {
            r2.push(e3);
        }).next(function() {
            return r2;
        });
    }, t.prototype.kt = function(t1, e2) {
        C("SimpleDb", "DELETE ALL", this.store.name);
        var n8 = this.options(t1, e2);
        n8.Ft = false;
        var r2 = this.cursor(n8);
        return this.xt(r2, function(t2, e3, n9) {
            return n9.delete();
        });
    }, t.prototype.$t = function(t1, e2) {
        var n8;
        e2 ? n8 = t1 : (n8 = {
        }, e2 = t1);
        var r2 = this.cursor(n8);
        return this.xt(r2, e2);
    }, /**
     * Iterates over a store, but waits for the given callback to complete for
     * each entry before iterating the next entry. This allows the callback to do
     * asynchronous work to determine if this iteration should continue.
     *
     * The provided callback should return `true` to continue iteration, and
     * `false` otherwise.
     */ t.prototype.Ot = function(t1) {
        var e2 = this.cursor({
        });
        return new Ir(function(n8, r2) {
            e2.onerror = function(t2) {
                var e3 = Cr(t2.target.error);
                r2(e3);
            }, e2.onsuccess = function(e3) {
                var r3 = e3.target.result;
                r3 ? t1(r3.primaryKey, r3.value).next(function(t2) {
                    t2 ? r3.continue() : n8();
                }) : n8();
            };
        });
    }, t.prototype.xt = function(t1, e2) {
        var n8 = [];
        return new Ir(function(r2, i) {
            t1.onerror = function(t2) {
                i(t2.target.error);
            }, t1.onsuccess = function(t2) {
                var i1 = t2.target.result;
                if (i1) {
                    var o = new _r(i1), s = e2(i1.primaryKey, i1.value, o);
                    if (s instanceof Ir) {
                        var u = s.catch(function(t3) {
                            return o.done(), Ir.reject(t3);
                        });
                        n8.push(u);
                    }
                    o.isDone ? r2() : null === o.Dt ? i1.continue() : i1.continue(o.Dt);
                } else r2();
            };
        }).next(function() {
            return Ir.waitFor(n8);
        });
    }, t.prototype.options = function(t1, e2) {
        var n8;
        return (void 0) !== t1 && ("string" == typeof t1 ? n8 = t1 : e2 = t1), {
            index: n8,
            range: e2
        };
    }, t.prototype.cursor = function(t1) {
        var e2 = "next";
        if (t1.reverse && (e2 = "prev"), t1.index) {
            var n8 = this.store.index(t1.index);
            return t1.Ft ? n8.openKeyCursor(t1.range, e2) : n8.openCursor(t1.range, e2);
        }
        return this.store.openCursor(t1.range, e2);
    }, t;
}();
/**
 * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror
 * handlers to resolve / reject the PersistencePromise as appropriate.
 */ function Ar(t) {
    return new Ir(function(e2, n9) {
        t.onsuccess = function(t1) {
            var n10 = t1.target.result;
            e2(n10);
        }, t.onerror = function(t1) {
            var e3 = Cr(t1.target.error);
            n9(e3);
        };
    });
}
// Guard so we only report the error once.
var kr = false;
function Cr(t) {
    var e2 = Er._t(_util.getUA());
    if (e2 >= 12.2 && e2 < 13) {
        var n9 = "An internal error was encountered in the Indexed Database server";
        if (t.message.indexOf(n9) >= 0) {
            // Wrap error in a more descriptive one.
            var r2 = new D("internal", "IOS_INDEXEDDB_BUG1: IndexedDb has thrown '" + n9 + "'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
            return kr || (kr = true, // Throw a global exception outside of this promise chain, for the user to
            // potentially catch.
            setTimeout(function() {
                throw r2;
            }, 0)), r2;
        }
    }
    return t;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var xr = /** @class */ function(e2) {
    function n10(t, n11) {
        var r3 = this;
        return (r3 = e2.call(this) || this).Mt = t, r3.currentSequenceNumber = n11, r3;
    }
    return _tslib.__extends(n10, e2), n10;
}(wr);
function Rr(t, e2) {
    var n10 = F(t);
    return Er.It(n10.Mt, e2);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A batch of mutations that will be sent as one unit to the backend.
 */ var Lr = /** @class */ function() {
    /**
     * @param batchId - The unique ID of this mutation batch.
     * @param localWriteTime - The original write time of this mutation.
     * @param baseMutations - Mutations that are used to populate the base
     * values when this mutation is applied locally. This can be used to locally
     * overwrite values that are persisted in the remote document cache. Base
     * mutations are never sent to the backend.
     * @param mutations - The user-provided mutations in this mutation batch.
     * User-provided mutations are applied both locally and remotely on the
     * backend.
     */ function t(t1, e2, n10, r3) {
        this.batchId = t1, this.localWriteTime = e2, this.baseMutations = n10, this.mutations = r3;
    }
    return t.prototype.applyToRemoteDocument = function(t1, e2) {
        for(var n10 = e2.mutationResults, r3 = 0; r3 < this.mutations.length; r3++){
            var i = this.mutations[r3];
            i.key.isEqual(t1.key) && Ce(i, t1, n10[r3]);
        }
    }, /**
     * Computes the local view of a document given all the mutations in this
     * batch.
     *
     * @param document - The document to apply mutations to.
     */ t.prototype.applyToLocalView = function(t1) {
        // First, apply the base state. This allows us to apply non-idempotent
        // transform against a consistent set of values.
        for(var e2 = 0, n10 = this.baseMutations; e2 < n10.length; e2++)(o = n10[e2]).key.isEqual(t1.key) && xe(o, t1, this.localWriteTime);
        // Second, apply all user-provided mutations.
        for(var r3 = 0, i = this.mutations; r3 < i.length; r3++){
            var o;
            (o = i[r3]).key.isEqual(t1.key) && xe(o, t1, this.localWriteTime);
        }
    }, /**
     * Computes the local view for all provided documents given the mutations in
     * this batch.
     */ t.prototype.applyToLocalDocumentSet = function(t1) {
        var e2 = this;
        // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations
        // directly (as done in `applyToLocalView()`), we can reduce the complexity
        // to O(n).
        this.mutations.forEach(function(n10) {
            var r3 = t1.get(n10.key), i = r3;
            // TODO(mutabledocuments): This method should take a MutableDocumentMap
            // and we should remove this cast.
            e2.applyToLocalView(i), r3.isValidDocument() || i.convertToNoDocument(K.min());
        });
    }, t.prototype.keys = function() {
        return this.mutations.reduce(function(t1, e2) {
            return t1.add(e2.key);
        }, sn());
    }, t.prototype.isEqual = function(t1) {
        return this.batchId === t1.batchId && U(this.mutations, t1.mutations, function(t2, e2) {
            return Le(t2, e2);
        }) && U(this.baseMutations, t1.baseMutations, function(t2, e2) {
            return Le(t2, e2);
        });
    }, t;
}(), Or = /** @class */ function() {
    function t(t1, e2, n10, /**
     * A pre-computed mapping from each mutated document to the resulting
     * version.
     */ r3) {
        this.batch = t1, this.commitVersion = e2, this.mutationResults = n10, this.docVersions = r3;
    }
    return t.from = function(e2, n10, r3) {
        P(e2.mutations.length === r3.length);
        for(var i = rn(), o = e2.mutations, s = 0; s < o.length; s++)i = i.insert(o[s].key, r3[s].version);
        return new t(e2, n10, r3, i);
    }, t;
}(), Pr = /** @class */ function() {
    function t(/** The target being listened to. */ t1, /**
     * The target ID to which the target corresponds; Assigned by the
     * LocalStore for user listens and by the SyncEngine for limbo watches.
     */ e2, /** The purpose of the target. */ n10, /**
     * The sequence number of the last transaction during which this target data
     * was modified.
     */ r3, /** The latest snapshot version seen for this target. */ i, o, s) {
        (void 0) === i && (i = K.min()), (void 0) === o && (o = K.min()), (void 0) === s && (s = J.EMPTY_BYTE_STRING), this.target = t1, this.targetId = e2, this.purpose = n10, this.sequenceNumber = r3, this.snapshotVersion = i, this.lastLimboFreeSnapshotVersion = o, this.resumeToken = s;
    }
    /** Creates a new target data instance with an updated sequence number. */ return t.prototype.withSequenceNumber = function(e2) {
        return new t(this.target, this.targetId, this.purpose, e2, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken);
    }, /**
     * Creates a new target data instance with an updated resume token and
     * snapshot version.
     */ t.prototype.withResumeToken = function(e2, n10) {
        return new t(this.target, this.targetId, this.purpose, this.sequenceNumber, n10, this.lastLimboFreeSnapshotVersion, e2);
    }, /**
     * Creates a new target data instance with an updated last limbo free
     * snapshot version number.
     */ t.prototype.withLastLimboFreeSnapshotVersion = function(e2) {
        return new t(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, e2, this.resumeToken);
    }, t;
}(), Fr = function(t) {
    this.Lt = t;
};
/** The result of applying a mutation batch to the backend. */ /** Decodes a remote document from storage locally to a Document. */ function Mr(t, e2) {
    if (e2.document) return On(t.Lt, e2.document, !!e2.hasCommittedMutations);
    if (e2.noDocument) {
        var n10 = ct.fromSegments(e2.noDocument.path), r3 = jr(e2.noDocument.readTime), i = Nt.newNoDocument(n10, r3);
        return e2.hasCommittedMutations ? i.setHasCommittedMutations() : i;
    }
    if (e2.unknownDocument) {
        var o = ct.fromSegments(e2.unknownDocument.path);
        r3 = jr(e2.unknownDocument.version);
        return Nt.newUnknownDocument(o, r3);
    }
    return O();
}
/** Encodes a document for storage locally. */ function Vr(t, e2, n11) {
    var r4 = qr(n11), i = e2.key.path.popLast().toArray();
    if (e2.isFoundDocument()) {
        var o = function(t1, e3) {
            return {
                name: Dn(t1, e3.key),
                fields: e3.data.value.mapValue.fields,
                updateTime: In(t1, e3.version.toTimestamp())
            };
        }(t.Lt, e2), s = e2.hasCommittedMutations;
        return new ar(/* unknownDocument= */ null, /* noDocument= */ null, o, s, r4, i);
    }
    if (e2.isNoDocument()) {
        var u = e2.key.path.toArray(), a = Br(e2.version);
        s = e2.hasCommittedMutations;
        return new ar(/* unknownDocument= */ null, new sr(u, a), /* document= */ null, s, r4, i);
    }
    if (e2.isUnknownDocument()) {
        var c = e2.key.path.toArray(), h = Br(e2.version);
        return new ar(new ur(c, h), /* noDocument= */ null, /* document= */ null, /* hasCommittedMutations= */ true, r4, i);
    }
    return O();
}
function qr(t) {
    var e2 = t.toTimestamp();
    return [
        e2.seconds,
        e2.nanoseconds
    ];
}
function Ur(t) {
    var e2 = new j(t[0], t[1]);
    return K.fromTimestamp(e2);
}
function Br(t) {
    var e2 = t.toTimestamp();
    return new er(e2.seconds, e2.nanoseconds);
}
function jr(t) {
    var e2 = new j(t.seconds, t.nanoseconds);
    return K.fromTimestamp(e2);
}
/** Encodes a batch of mutations into a DbMutationBatch for local storage. */ /** Decodes a DbMutationBatch into a MutationBatch */ function Kr(t, e2) {
    // Squash old transform mutations into existing patch or set mutations.
    // The replacement of representing `transforms` with `update_transforms`
    // on the SDK means that old `transform` mutations stored in IndexedDB need
    // to be updated to `update_transforms`.
    // TODO(b/174608374): Remove this code once we perform a schema migration.
    for(var n11 = (e2.baseMutations || []).map(function(e3) {
        return Fn(t.Lt, e3);
    }), r4 = 0; r4 < e2.mutations.length - 1; ++r4){
        var i = e2.mutations[r4];
        if (r4 + 1 < e2.mutations.length && (void 0) !== e2.mutations[r4 + 1].transform) {
            var o = e2.mutations[r4 + 1];
            i.updateTransforms = o.transform.fieldTransforms, e2.mutations.splice(r4 + 1, 1), ++r4;
        }
    }
    var s = e2.mutations.map(function(e3) {
        return Fn(t.Lt, e3);
    }), u = j.fromMillis(e2.localWriteTimeMs);
    return new Lr(e2.batchId, u, n11, s);
}
/** Decodes a DbTarget into TargetData */ function Qr(t) {
    var e2, n11, r4 = jr(t.readTime), i = (void 0) !== t.lastLimboFreeSnapshotVersion ? jr(t.lastLimboFreeSnapshotVersion) : K.min();
    return (void 0) !== t.query.documents ? (P(1 === (n11 = t.query).documents.length), e2 = ne(Yt(Cn(n11.documents[0])))) : e2 = (function(t1) {
        return ne(qn(t1));
    })(t.query), new Pr(e2, t.targetId, 0/* Listen */ , t.lastListenSequenceNumber, r4, i, J.fromBase64String(t.resumeToken));
}
function Gr(t, e2) {
    var n11, r4 = Br(e2.snapshotVersion), i = Br(e2.lastLimboFreeSnapshotVersion);
    n11 = xt(e2.target) ? Mn(t.Lt, e2.target) : Vn(t.Lt, e2.target);
    // We can't store the resumeToken as a ByteString in IndexedDb, so we
    // convert it to a base64 string for storage.
    var o = e2.resumeToken.toBase64();
    // lastListenSequenceNumber is always 0 until we do real GC.
    return new hr(e2.targetId, kt(e2.target), r4, o, e2.sequenceNumber, i, n11);
}
/**
 * A helper function for figuring out what kind of query has been stored.
 */ /**
 * Encodes a `BundledQuery` from bundle proto to a Query object.
 *
 * This reconstructs the original query used to build the bundle being loaded,
 * including features exists only in SDKs (for example: limit-to-last).
 */ function zr(t) {
    var e2 = qn({
        parent: t.parent,
        structuredQuery: t.structuredQuery
    });
    return "LAST" === t.limitType ? re(e2, e2.limit, "L"/* Last */ ) : e2;
}
/** Encodes a NamedQuery proto object to a NamedQuery model object. */ /**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var Wr = /** @class */ function() {
    function t() {
    }
    return t.prototype.getBundleMetadata = function(t1, e2) {
        return Hr(t1).get(e2).next(function(t2) {
            if (t2) return {
                id: (e3 = t2).bundleId,
                createTime: jr(e3.createTime),
                version: e3.version
            };
            /** Encodes a DbBundle to a BundleMetadata object. */ var e3;
        /** Encodes a BundleMetadata to a DbBundle. */ });
    }, t.prototype.saveBundleMetadata = function(t1, e2) {
        var n11;
        return Hr(t1).put({
            bundleId: (n11 = e2).id,
            createTime: Br(_n(n11.createTime)),
            version: n11.version
        });
    /** Encodes a DbNamedQuery to a NamedQuery. */ }, t.prototype.getNamedQuery = function(t1, e2) {
        return Yr(t1).get(e2).next(function(t2) {
            if (t2) return {
                name: (e3 = t2).name,
                query: zr(e3.bundledQuery),
                readTime: jr(e3.readTime)
            };
            var e3;
        /** Encodes a NamedQuery from a bundle proto to a DbNamedQuery. */ });
    }, t.prototype.saveNamedQuery = function(t1, e2) {
        return Yr(t1).put(function(t2) {
            return {
                name: t2.name,
                readTime: Br(_n(t2.readTime)),
                bundledQuery: t2.bundledQuery
            };
        }(e2));
    }, t;
}();
/**
 * Helper to get a typed SimpleDbStore for the bundles object store.
 */ function Hr(t) {
    return Rr(t, yr.store);
}
/**
 * Helper to get a typed SimpleDbStore for the namedQueries object store.
 */ function Yr(t) {
    return Rr(t, vr.store);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An in-memory implementation of IndexManager.
 */ var $r = /** @class */ function() {
    function t() {
        this.Bt = new Xr;
    }
    return t.prototype.addToCollectionParentIndex = function(t1, e2) {
        return this.Bt.add(e2), Ir.resolve();
    }, t.prototype.getCollectionParents = function(t1, e2) {
        return Ir.resolve(this.Bt.getEntries(e2));
    }, t;
}(), Xr = /** @class */ function() {
    function t() {
        this.index = {
        };
    }
    // Returns false if the entry already existed.
    return t.prototype.add = function(t1) {
        var e2 = t1.lastSegment(), n11 = t1.popLast(), r4 = this.index[e2] || new $e(H.comparator), i = !r4.has(n11);
        return this.index[e2] = r4.add(n11), i;
    }, t.prototype.has = function(t1) {
        var e2 = t1.lastSegment(), n11 = t1.popLast(), r4 = this.index[e2];
        return r4 && r4.has(n11);
    }, t.prototype.getEntries = function(t1) {
        return (this.index[t1] || new $e(H.comparator)).toArray();
    }, t;
}(), Jr = /** @class */ function() {
    function t() {
        /**
         * An in-memory copy of the index entries we've already written since the SDK
         * launched. Used to avoid re-writing the same entry repeatedly.
         *
         * This is *NOT* a complete cache of what's in persistence and so can never be used to
         * satisfy reads.
         */ this.qt = new Xr;
    }
    /**
     * Adds a new entry to the collection parent index.
     *
     * Repeated calls for the same collectionPath should be avoided within a
     * transaction as IndexedDbIndexManager only caches writes once a transaction
     * has been committed.
     */ return t.prototype.addToCollectionParentIndex = function(t1, e2) {
        var n11 = this;
        if (!this.qt.has(e2)) {
            var r4 = e2.lastSegment(), i = e2.popLast();
            t1.addOnCommittedListener(function() {
                // Add the collection to the in memory cache only if the transaction was
                // successfully committed.
                n11.qt.add(e2);
            });
            var o = {
                collectionId: r4,
                parent: Xn(i)
            };
            return Zr(t1).put(o);
        }
        return Ir.resolve();
    }, t.prototype.getCollectionParents = function(t1, e2) {
        var n11 = [], r5 = IDBKeyRange.bound([
            e2,
            ""
        ], [
            B(e2),
            ""
        ], /*lowerOpen=*/ false, /*upperOpen=*/ true);
        return Zr(t1).Nt(r5).next(function(t2) {
            for(var r6 = 0, i = t2; r6 < i.length; r6++){
                var o = i[r6];
                // This collectionId guard shouldn't be necessary (and isn't as long
                // as we're running in a real browser), but there's a bug in
                // indexeddbshim that breaks our range in our tests running in node:
                // https://github.com/axemclion/IndexedDBShim/issues/334
                if (o.collectionId !== e2) break;
                n11.push(tr(o.parent));
            }
            return n11;
        });
    }, t;
}();
/**
 * Internal implementation of the collection-parent index exposed by MemoryIndexManager.
 * Also used for in-memory caching by IndexedDbIndexManager and initial index population
 * in indexeddb_schema.ts
 */ /**
 * Helper to get a typed SimpleDbStore for the collectionParents
 * document store.
 */ function Zr(t) {
    return Rr(t, dr.store);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var ti = {
    didRun: false,
    sequenceNumbersCollected: 0,
    targetsRemoved: 0,
    documentsRemoved: 0
}, ei = /** @class */ function() {
    function t(// When we attempt to collect, we will only do so if the cache size is greater than this
    // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.
    t1, // The percentage of sequence numbers that we will attempt to collect
    e2, // A cap on the total number of sequence numbers that will be collected. This prevents
    // us from collecting a huge number of sequence numbers if the cache has grown very large.
    n11) {
        this.cacheSizeCollectionThreshold = t1, this.percentileToCollect = e2, this.maximumSequenceNumbersToCollect = n11;
    }
    return t.withCacheSize = function(e2) {
        return new t(e2, t.DEFAULT_COLLECTION_PERCENTILE, t.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);
    }, t;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Delete a mutation batch and the associated document mutations.
 * @returns A PersistencePromise of the document mutations that were removed.
 */ function ni(t, e2, n11) {
    var r5 = t.store(ir.store), i = t.store(or.store), o = [], s = IDBKeyRange.only(n11.batchId), u = 0, a = r5.$t({
        range: s
    }, function(t1, e3, n12) {
        return u++, n12.delete();
    });
    o.push(a.next(function() {
        P(1 === u);
    }));
    for(var c = [], h = 0, f = n11.mutations; h < f.length; h++){
        var l = f[h], d = or.key(e2, l.key.path, n11.batchId);
        o.push(i.delete(d)), c.push(l.key);
    }
    return Ir.waitFor(o).next(function() {
        return c;
    });
}
/**
 * Returns an approximate size for the given document.
 */ function ri(t) {
    if (!t) return 0;
    var e2;
    if (t.document) e2 = t.document;
    else if (t.unknownDocument) e2 = t.unknownDocument;
    else {
        if (!t.noDocument) throw O();
        e2 = t.noDocument;
    }
    return JSON.stringify(e2).length;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** A mutation queue for a specific user, backed by IndexedDB. */ ei.DEFAULT_COLLECTION_PERCENTILE = 10, ei.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1000, ei.DEFAULT = new ei(41943040, ei.DEFAULT_COLLECTION_PERCENTILE, ei.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT), ei.DISABLED = new ei(-1, 0, 0);
var ii = /** @class */ function() {
    function t(/**
     * The normalized userId (e.g. null UID => "" userId) used to store /
     * retrieve mutations.
     */ t1, e2, n11, r5) {
        this.userId = t1, this.R = e2, this.Ut = n11, this.referenceDelegate = r5, /**
             * Caches the document keys for pending mutation batches. If the mutation
             * has been removed from IndexedDb, the cached value may continue to
             * be used to retrieve the batch's document keys. To remove a cached value
             * locally, `removeCachedMutationKeys()` should be invoked either directly
             * or through `removeMutationBatches()`.
             *
             * With multi-tab, when the primary client acknowledges or rejects a mutation,
             * this cache is used by secondary clients to invalidate the local
             * view of the documents that were previously affected by the mutation.
             */ // PORTING NOTE: Multi-tab only.
        this.Kt = {
        };
    }
    return t.Qt = function(e2, n11, r5, i) {
        // TODO(mcg): Figure out what constraints there are on userIDs
        // In particular, are there any reserved characters? are empty ids allowed?
        // For the moment store these together in the same mutations table assuming
        // that empty userIDs aren't allowed.
        return P("" !== e2.uid), new t(e2.isAuthenticated() ? e2.uid : "", n11, r5, i);
    }, t.prototype.checkEmpty = function(t1) {
        var e2 = true, n11 = IDBKeyRange.bound([
            this.userId,
            Number.NEGATIVE_INFINITY
        ], [
            this.userId,
            Number.POSITIVE_INFINITY
        ]);
        return si(t1).$t({
            index: ir.userMutationsIndex,
            range: n11
        }, function(t2, n12, r5) {
            e2 = false, r5.done();
        }).next(function() {
            return e2;
        });
    }, t.prototype.addMutationBatch = function(t1, e2, n11, r5) {
        var i = this, o = ui(t1), s = si(t1);
        // The IndexedDb implementation in Chrome (and Firefox) does not handle
        // compound indices that include auto-generated keys correctly. To ensure
        // that the index entry is added correctly in all browsers, we perform two
        // writes: The first write is used to retrieve the next auto-generated Batch
        // ID, and the second write populates the index and stores the actual
        // mutation batch.
        // See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972
        // We write an empty object to obtain key
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return s.add({
        }).next(function(u) {
            P("number" == typeof u);
            for(var a = new Lr(u, e2, n11, r5), c = function(t2, e3, n12) {
                var r6 = n12.baseMutations.map(function(e4) {
                    return Pn(t2.Lt, e4);
                }), i1 = n12.mutations.map(function(e4) {
                    return Pn(t2.Lt, e4);
                });
                return new ir(e3, n12.batchId, n12.localWriteTime.toMillis(), r6, i1);
            }(i.R, i.userId, a), h = [], f = new $e(function(t2, e3) {
                return q(t2.canonicalString(), e3.canonicalString());
            }), l = 0, d = r5; l < d.length; l++){
                var p = d[l], y = or.key(i.userId, p.key.path, u);
                f = f.add(p.key.path.popLast()), h.push(s.put(c)), h.push(o.put(y, or.PLACEHOLDER));
            }
            return f.forEach(function(e3) {
                h.push(i.Ut.addToCollectionParentIndex(t1, e3));
            }), t1.addOnCommittedListener(function() {
                i.Kt[u] = a.keys();
            }), Ir.waitFor(h).next(function() {
                return a;
            });
        });
    }, t.prototype.lookupMutationBatch = function(t1, e2) {
        var n11 = this;
        return si(t1).get(e2).next(function(t2) {
            return t2 ? (P(t2.userId === n11.userId), Kr(n11.R, t2)) : null;
        });
    }, /**
     * Returns the document keys for the mutation batch with the given batchId.
     * For primary clients, this method returns `null` after
     * `removeMutationBatches()` has been called. Secondary clients return a
     * cached result until `removeCachedMutationKeys()` is invoked.
     */ // PORTING NOTE: Multi-tab only.
    t.prototype.jt = function(t1, e2) {
        var n11 = this;
        return this.Kt[e2] ? Ir.resolve(this.Kt[e2]) : this.lookupMutationBatch(t1, e2).next(function(t2) {
            if (t2) {
                var r5 = t2.keys();
                return n11.Kt[e2] = r5, r5;
            }
            return null;
        });
    }, t.prototype.getNextMutationBatchAfterBatchId = function(t1, e2) {
        var n11 = this, r6 = e2 + 1, i = IDBKeyRange.lowerBound([
            this.userId,
            r6
        ]), o = null;
        return si(t1).$t({
            index: ir.userMutationsIndex,
            range: i
        }, function(t2, e3, i1) {
            e3.userId === n11.userId && (P(e3.batchId >= r6), o = Kr(n11.R, e3)), i1.done();
        }).next(function() {
            return o;
        });
    }, t.prototype.getHighestUnacknowledgedBatchId = function(t1) {
        var e2 = IDBKeyRange.upperBound([
            this.userId,
            Number.POSITIVE_INFINITY
        ]), n11 = -1;
        return si(t1).$t({
            index: ir.userMutationsIndex,
            range: e2,
            reverse: true
        }, function(t2, e3, r6) {
            n11 = e3.batchId, r6.done();
        }).next(function() {
            return n11;
        });
    }, t.prototype.getAllMutationBatches = function(t1) {
        var e2 = this, n11 = IDBKeyRange.bound([
            this.userId,
            -1
        ], [
            this.userId,
            Number.POSITIVE_INFINITY
        ]);
        return si(t1).Nt(ir.userMutationsIndex, n11).next(function(t2) {
            return t2.map(function(t3) {
                return Kr(e2.R, t3);
            });
        });
    }, t.prototype.getAllMutationBatchesAffectingDocumentKey = function(t1, e2) {
        var n11 = this, r6 = or.prefixForPath(this.userId, e2.path), i = IDBKeyRange.lowerBound(r6), o = [];
        // Scan the document-mutation index starting with a prefix starting with
        // the given documentKey.
        return ui(t1).$t({
            range: i
        }, function(r7, i1, s) {
            var u = r7[0], a = r7[1], c = r7[2], h = tr(a);
            // Only consider rows matching exactly the specific key of
            // interest. Note that because we order by path first, and we
            // order terminators before path separators, we'll encounter all
            // the index rows for documentKey contiguously. In particular, all
            // the rows for documentKey will occur before any rows for
            // documents nested in a subcollection beneath documentKey so we
            // can stop as soon as we hit any such row.
            if (u === n11.userId && e2.path.isEqual(h)) // Look up the mutation batch in the store.
            return si(t1).get(c).next(function(t2) {
                if (!t2) throw O();
                P(t2.userId === n11.userId), o.push(Kr(n11.R, t2));
            });
            s.done();
        }).next(function() {
            return o;
        });
    }, t.prototype.getAllMutationBatchesAffectingDocumentKeys = function(t1, e2) {
        var n11 = this, r6 = new $e(q), i = [];
        return e2.forEach(function(e3) {
            var o = or.prefixForPath(n11.userId, e3.path), s = IDBKeyRange.lowerBound(o), u = ui(t1).$t({
                range: s
            }, function(t2, i1, o1) {
                var s1 = t2[0], u1 = t2[1], a = t2[2], c = tr(u1);
                // Only consider rows matching exactly the specific key of
                // interest. Note that because we order by path first, and we
                // order terminators before path separators, we'll encounter all
                // the index rows for documentKey contiguously. In particular, all
                // the rows for documentKey will occur before any rows for
                // documents nested in a subcollection beneath documentKey so we
                // can stop as soon as we hit any such row.
                s1 === n11.userId && e3.path.isEqual(c) ? r6 = r6.add(a) : o1.done();
            });
            i.push(u);
        }), Ir.waitFor(i).next(function() {
            return n11.Wt(t1, r6);
        });
    }, t.prototype.getAllMutationBatchesAffectingQuery = function(t1, e2) {
        var n11 = this, r6 = e2.path, i = r6.length + 1, o = or.prefixForPath(this.userId, r6), s = IDBKeyRange.lowerBound(o), u = new $e(q);
        return ui(t1).$t({
            range: s
        }, function(t2, e3, o1) {
            var s1 = t2[0], a = t2[1], c = t2[2], h = tr(a);
            s1 === n11.userId && r6.isPrefixOf(h) ? // Rows with document keys more than one segment longer than the
            // query path can't be matches. For example, a query on 'rooms'
            // can't match the document /rooms/abc/messages/xyx.
            // TODO(mcg): we'll need a different scanner when we implement
            // ancestor queries.
            h.length === i && (u = u.add(c)) : o1.done();
        }).next(function() {
            return n11.Wt(t1, u);
        });
    }, t.prototype.Wt = function(t1, e2) {
        var n11 = this, r6 = [], i = [];
        // TODO(rockwood): Implement this using iterate.
        return e2.forEach(function(e3) {
            i.push(si(t1).get(e3).next(function(t2) {
                if (null === t2) throw O();
                P(t2.userId === n11.userId), r6.push(Kr(n11.R, t2));
            }));
        }), Ir.waitFor(i).next(function() {
            return r6;
        });
    }, t.prototype.removeMutationBatch = function(t1, e2) {
        var n11 = this;
        return ni(t1.Mt, this.userId, e2).next(function(r6) {
            return t1.addOnCommittedListener(function() {
                n11.Gt(e2.batchId);
            }), Ir.forEach(r6, function(e3) {
                return n11.referenceDelegate.markPotentiallyOrphaned(t1, e3);
            });
        });
    }, /**
     * Clears the cached keys for a mutation batch. This method should be
     * called by secondary clients after they process mutation updates.
     *
     * Note that this method does not have to be called from primary clients as
     * the corresponding cache entries are cleared when an acknowledged or
     * rejected batch is removed from the mutation queue.
     */ // PORTING NOTE: Multi-tab only
    t.prototype.Gt = function(t1) {
        delete this.Kt[t1];
    }, t.prototype.performConsistencyCheck = function(t1) {
        var e2 = this;
        return this.checkEmpty(t1).next(function(n11) {
            if (!n11) return Ir.resolve();
            // Verify that there are no entries in the documentMutations index if
            // the queue is empty.
            var r6 = IDBKeyRange.lowerBound(or.prefixForUser(e2.userId)), i = [];
            return ui(t1).$t({
                range: r6
            }, function(t2, n12, r7) {
                if (t2[0] === e2.userId) {
                    var o = tr(t2[1]);
                    i.push(o);
                } else r7.done();
            }).next(function() {
                P(0 === i.length);
            });
        });
    }, t.prototype.containsKey = function(t1, e2) {
        return oi(t1, this.userId, e2);
    }, // PORTING NOTE: Multi-tab only (state is held in memory in other clients).
    /** Returns the mutation queue's metadata from IndexedDb. */ t.prototype.zt = function(t1) {
        var e2 = this;
        return ai(t1).get(this.userId).next(function(t2) {
            return t2 || new rr(e2.userId, -1, /*lastStreamToken=*/ "");
        });
    }, t;
}();
/**
 * @returns true if the mutation queue for the given user contains a pending
 *         mutation for the given key.
 */ function oi(t, e2, n11) {
    var r6 = or.prefixForPath(e2, n11.path), i = r6[1], o = IDBKeyRange.lowerBound(r6), s = false;
    return ui(t).$t({
        range: o,
        Ft: true
    }, function(t1, n12, r7) {
        var o1 = t1[0], u = t1[1];
        /*batchID*/ t1[2], o1 === e2 && u === i && (s = true), r7.done();
    }).next(function() {
        return s;
    });
}
/** Returns true if any mutation queue contains the given document. */ /**
 * Helper to get a typed SimpleDbStore for the mutations object store.
 */ function si(t) {
    return Rr(t, ir.store);
}
/**
 * Helper to get a typed SimpleDbStore for the mutationQueues object store.
 */ function ui(t) {
    return Rr(t, or.store);
}
/**
 * Helper to get a typed SimpleDbStore for the mutationQueues object store.
 */ function ai(t) {
    return Rr(t, rr.store);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Offset to ensure non-overlapping target ids. */ /**
 * Generates monotonically increasing target IDs for sending targets to the
 * watch stream.
 *
 * The client constructs two generators, one for the target cache, and one for
 * for the sync engine (to generate limbo documents targets). These
 * generators produce non-overlapping IDs (by using even and odd IDs
 * respectively).
 *
 * By separating the target ID space, the query cache can generate target IDs
 * that persist across client restarts, while sync engine can independently
 * generate in-memory target IDs that are transient and can be reused after a
 * restart.
 */ var ci = /** @class */ function() {
    function t(t1) {
        this.Ht = t1;
    }
    return t.prototype.next = function() {
        return this.Ht += 2, this.Ht;
    }, t.Jt = function() {
        // The target cache generator must return '2' in its first call to `next()`
        // as there is no differentiation in the protocol layer between an unset
        // number and the number '0'. If we were to sent a target with target ID
        // '0', the backend would consider it unset and replace it with its own ID.
        return new t(0);
    }, t.Yt = function() {
        // Sync engine assigns target IDs for limbo document detection.
        return new t(-1);
    }, t;
}(), hi = /** @class */ function() {
    function t(t1, e2) {
        this.referenceDelegate = t1, this.R = e2;
    }
    // PORTING NOTE: We don't cache global metadata for the target cache, since
    // some of it (in particular `highestTargetId`) can be modified by secondary
    // tabs. We could perhaps be more granular (and e.g. still cache
    // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go
    // to IndexedDb whenever we need to read metadata. We can revisit if it turns
    // out to have a meaningful performance impact.
    return t.prototype.allocateTargetId = function(t1) {
        var e2 = this;
        return this.Xt(t1).next(function(n11) {
            var r6 = new ci(n11.highestTargetId);
            return n11.highestTargetId = r6.next(), e2.Zt(t1, n11).next(function() {
                return n11.highestTargetId;
            });
        });
    }, t.prototype.getLastRemoteSnapshotVersion = function(t1) {
        return this.Xt(t1).next(function(t2) {
            return K.fromTimestamp(new j(t2.lastRemoteSnapshotVersion.seconds, t2.lastRemoteSnapshotVersion.nanoseconds));
        });
    }, t.prototype.getHighestSequenceNumber = function(t1) {
        return this.Xt(t1).next(function(t2) {
            return t2.highestListenSequenceNumber;
        });
    }, t.prototype.setTargetsMetadata = function(t1, e2, n11) {
        var r6 = this;
        return this.Xt(t1).next(function(i) {
            return i.highestListenSequenceNumber = e2, n11 && (i.lastRemoteSnapshotVersion = n11.toTimestamp()), e2 > i.highestListenSequenceNumber && (i.highestListenSequenceNumber = e2), r6.Zt(t1, i);
        });
    }, t.prototype.addTargetData = function(t1, e2) {
        var n11 = this;
        return this.te(t1, e2).next(function() {
            return n11.Xt(t1).next(function(r6) {
                return r6.targetCount += 1, n11.ee(e2, r6), n11.Zt(t1, r6);
            });
        });
    }, t.prototype.updateTargetData = function(t1, e2) {
        return this.te(t1, e2);
    }, t.prototype.removeTargetData = function(t1, e2) {
        var n11 = this;
        return this.removeMatchingKeysForTargetId(t1, e2.targetId).next(function() {
            return fi(t1).delete(e2.targetId);
        }).next(function() {
            return n11.Xt(t1);
        }).next(function(e3) {
            return P(e3.targetCount > 0), e3.targetCount -= 1, n11.Zt(t1, e3);
        });
    }, /**
     * Drops any targets with sequence number less than or equal to the upper bound, excepting those
     * present in `activeTargetIds`. Document associations for the removed targets are also removed.
     * Returns the number of targets removed.
     */ t.prototype.removeTargets = function(t1, e2, n11) {
        var r6 = this, i = 0, o = [];
        return fi(t1).$t(function(s, u) {
            var a = Qr(u);
            a.sequenceNumber <= e2 && null === n11.get(a.targetId) && (i++, o.push(r6.removeTargetData(t1, a)));
        }).next(function() {
            return Ir.waitFor(o);
        }).next(function() {
            return i;
        });
    }, /**
     * Call provided function with each `TargetData` that we have cached.
     */ t.prototype.forEachTarget = function(t1, e2) {
        return fi(t1).$t(function(t2, n11) {
            var r6 = Qr(n11);
            e2(r6);
        });
    }, t.prototype.Xt = function(t1) {
        return li(t1).get(lr.key).next(function(t2) {
            return P(null !== t2), t2;
        });
    }, t.prototype.Zt = function(t1, e2) {
        return li(t1).put(lr.key, e2);
    }, t.prototype.te = function(t1, e2) {
        return fi(t1).put(Gr(this.R, e2));
    }, /**
     * In-place updates the provided metadata to account for values in the given
     * TargetData. Saving is done separately. Returns true if there were any
     * changes to the metadata.
     */ t.prototype.ee = function(t1, e2) {
        var n11 = false;
        return t1.targetId > e2.highestTargetId && (e2.highestTargetId = t1.targetId, n11 = true), t1.sequenceNumber > e2.highestListenSequenceNumber && (e2.highestListenSequenceNumber = t1.sequenceNumber, n11 = true), n11;
    }, t.prototype.getTargetCount = function(t1) {
        return this.Xt(t1).next(function(t2) {
            return t2.targetCount;
        });
    }, t.prototype.getTargetData = function(t1, e2) {
        // Iterating by the canonicalId may yield more than one result because
        // canonicalId values are not required to be unique per target. This query
        // depends on the queryTargets index to be efficient.
        var n11 = kt(e2), r6 = IDBKeyRange.bound([
            n11,
            Number.NEGATIVE_INFINITY
        ], [
            n11,
            Number.POSITIVE_INFINITY
        ]), i = null;
        return fi(t1).$t({
            range: r6,
            index: hr.queryTargetsIndexName
        }, function(t2, n12, r7) {
            var o = Qr(n12);
            // After finding a potential match, check that the target is
            // actually equal to the requested target.
            Ct(e2, o.target) && (i = o, r7.done());
        }).next(function() {
            return i;
        });
    }, t.prototype.addMatchingKeys = function(t1, e2, n11) {
        var r6 = this, i = [], o = di(t1);
        // PORTING NOTE: The reverse index (documentsTargets) is maintained by
        // IndexedDb.
        return e2.forEach(function(e3) {
            var s = Xn(e3.path);
            i.push(o.put(new fr(n11, s))), i.push(r6.referenceDelegate.addReference(t1, n11, e3));
        }), Ir.waitFor(i);
    }, t.prototype.removeMatchingKeys = function(t1, e2, n11) {
        var r6 = this, i = di(t1);
        // PORTING NOTE: The reverse index (documentsTargets) is maintained by
        // IndexedDb.
        return Ir.forEach(e2, function(e3) {
            var o = Xn(e3.path);
            return Ir.waitFor([
                i.delete([
                    n11,
                    o
                ]),
                r6.referenceDelegate.removeReference(t1, n11, e3)
            ]);
        });
    }, t.prototype.removeMatchingKeysForTargetId = function(t1, e2) {
        var n11 = di(t1), r6 = IDBKeyRange.bound([
            e2
        ], [
            e2 + 1
        ], /*lowerOpen=*/ false, /*upperOpen=*/ true);
        return n11.delete(r6);
    }, t.prototype.getMatchingKeysForTargetId = function(t1, e2) {
        var n11 = IDBKeyRange.bound([
            e2
        ], [
            e2 + 1
        ], /*lowerOpen=*/ false, /*upperOpen=*/ true), r6 = di(t1), i = sn();
        return r6.$t({
            range: n11,
            Ft: true
        }, function(t2, e3, n12) {
            var r7 = tr(t2[1]), o = new ct(r7);
            i = i.add(o);
        }).next(function() {
            return i;
        });
    }, t.prototype.containsKey = function(t1, e2) {
        var n11 = Xn(e2.path), r6 = IDBKeyRange.bound([
            n11
        ], [
            B(n11)
        ], /*lowerOpen=*/ false, /*upperOpen=*/ true), i = 0;
        return di(t1).$t({
            index: fr.documentTargetsIndex,
            Ft: true,
            range: r6
        }, function(t2, e3, n12) {
            var r7 = t2[0];
            t2[1], // Having a sentinel row for a document does not count as containing that document;
            // For the target cache, containing the document means the document is part of some
            // target.
            0 !== r7 && (i++, n12.done());
        }).next(function() {
            return i > 0;
        });
    }, /**
     * Looks up a TargetData entry by target ID.
     *
     * @param targetId - The target ID of the TargetData entry to look up.
     * @returns The cached TargetData entry, or null if the cache has no entry for
     * the target.
     */ // PORTING NOTE: Multi-tab only.
    t.prototype.lt = function(t1, e2) {
        return fi(t1).get(e2).next(function(t2) {
            return t2 ? Qr(t2) : null;
        });
    }, t;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Helper to get a typed SimpleDbStore for the queries object store.
 */ function fi(t) {
    return Rr(t, hr.store);
}
/**
 * Helper to get a typed SimpleDbStore for the target globals object store.
 */ function li(t) {
    return Rr(t, lr.store);
}
/**
 * Helper to get a typed SimpleDbStore for the document target object store.
 */ function di(t) {
    return Rr(t, fr.store);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Verifies the error thrown by a LocalStore operation. If a LocalStore
 * operation fails because the primary lease has been taken by another client,
 * we ignore the error (the persistence layer will immediately call
 * `applyPrimaryLease` to propagate the primary state change). All other errors
 * are re-thrown.
 *
 * @param err - An error returned by a LocalStore operation.
 * @returns A Promise that resolves after we recovered, or the original error.
 */ function pi(t) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        return _tslib.__generator(this, function(e2) {
            if (t.code !== N.FAILED_PRECONDITION || t.message !== gr) throw t;
            return C("LocalStore", "Unexpectedly lost primary lease"), [
                2
            ];
        });
    });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function yi(t, e2) {
    var n11 = t[0], r6 = t[1], i = e2[0], o = e2[1], s = q(n11, i);
    return 0 === s ? q(r6, o) : s;
}
/**
 * Used to calculate the nth sequence number. Keeps a rolling buffer of the
 * lowest n values passed to `addElement`, and finally reports the largest of
 * them in `maxValue`.
 */ var vi = /** @class */ function() {
    function t(t1) {
        this.ne = t1, this.buffer = new $e(yi), this.se = 0;
    }
    return t.prototype.ie = function() {
        return ++this.se;
    }, t.prototype.re = function(t1) {
        var e2 = [
            t1,
            this.ie()
        ];
        if (this.buffer.size < this.ne) this.buffer = this.buffer.add(e2);
        else {
            var n11 = this.buffer.last();
            yi(e2, n11) < 0 && (this.buffer = this.buffer.delete(n11).add(e2));
        }
    }, Object.defineProperty(t.prototype, "maxValue", {
        get: function() {
            // Guaranteed to be non-empty. If we decide we are not collecting any
            // sequence numbers, nthSequenceNumber below short-circuits. If we have
            // decided that we are collecting n sequence numbers, it's because n is some
            // percentage of the existing sequence numbers. That means we should never
            // be in a situation where we are collecting sequence numbers but don't
            // actually have any.
            return this.buffer.last()[0];
        },
        enumerable: false,
        configurable: true
    }), t;
}(), mi = /** @class */ function() {
    function t(t1, e2) {
        this.garbageCollector = t1, this.asyncQueue = e2, this.oe = false, this.ce = null;
    }
    return t.prototype.start = function(t1) {
        -1 !== this.garbageCollector.params.cacheSizeCollectionThreshold && this.ue(t1);
    }, t.prototype.stop = function() {
        this.ce && (this.ce.cancel(), this.ce = null);
    }, Object.defineProperty(t.prototype, "started", {
        get: function() {
            return null !== this.ce;
        },
        enumerable: false,
        configurable: true
    }), t.prototype.ue = function(t1) {
        var e2 = this, i = this.oe ? 300000 : 60000;
        C("LruGarbageCollector", "Garbage collection scheduled in " + i + "ms"), this.ce = this.asyncQueue.enqueueAfterDelay("lru_garbage_collection"/* LruGarbageCollection */ , i, function() {
            return _tslib.__awaiter(e2, void 0, void 0, function() {
                var e3;
                return _tslib.__generator(this, function(n12) {
                    switch(n12.label){
                        case 0:
                            this.ce = null, this.oe = true, n12.label = 1;
                        case 1:
                            return n12.trys.push([
                                1,
                                3,
                                ,
                                7
                            ]), [
                                4,
                                t1.collectGarbage(this.garbageCollector)
                            ];
                        case 2:
                            return n12.sent(), [
                                3,
                                7
                            ];
                        case 3:
                            return Nr(e3 = n12.sent()) ? (C("LruGarbageCollector", "Ignoring IndexedDB error during garbage collection: ", e3), [
                                3,
                                6
                            ]) : [
                                3,
                                4
                            ];
                        case 4:
                            return [
                                4,
                                pi(e3)
                            ];
                        case 5:
                            n12.sent(), n12.label = 6;
                        case 6:
                            return [
                                3,
                                7
                            ];
                        case 7:
                            return [
                                4,
                                this.ue(t1)
                            ];
                        case 8:
                            return n12.sent(), [
                                2
                            ];
                    }
                });
            });
        });
    }, t;
}(), gi = /** @class */ function() {
    function t(t1, e2) {
        this.ae = t1, this.params = e2;
    }
    return t.prototype.calculateTargetCount = function(t1, e2) {
        return this.ae.he(t1).next(function(t2) {
            return Math.floor(e2 / 100 * t2);
        });
    }, t.prototype.nthSequenceNumber = function(t1, e2) {
        var n12 = this;
        if (0 === e2) return Ir.resolve(S.o);
        var r6 = new vi(e2);
        return this.ae.forEachTarget(t1, function(t2) {
            return r6.re(t2.sequenceNumber);
        }).next(function() {
            return n12.ae.le(t1, function(t2) {
                return r6.re(t2);
            });
        }).next(function() {
            return r6.maxValue;
        });
    }, t.prototype.removeTargets = function(t1, e2, n12) {
        return this.ae.removeTargets(t1, e2, n12);
    }, t.prototype.removeOrphanedDocuments = function(t1, e2) {
        return this.ae.removeOrphanedDocuments(t1, e2);
    }, t.prototype.collect = function(t1, e2) {
        var n12 = this;
        return -1 === this.params.cacheSizeCollectionThreshold ? (C("LruGarbageCollector", "Garbage collection skipped; disabled"), Ir.resolve(ti)) : this.getCacheSize(t1).next(function(r6) {
            return r6 < n12.params.cacheSizeCollectionThreshold ? (C("LruGarbageCollector", "Garbage collection skipped; Cache size " + r6 + " is lower than threshold " + n12.params.cacheSizeCollectionThreshold), ti) : n12.fe(t1, e2);
        });
    }, t.prototype.getCacheSize = function(t1) {
        return this.ae.getCacheSize(t1);
    }, t.prototype.fe = function(t1, e2) {
        var n12, r6, i, o, s, u, a, c = this, h = Date.now();
        return this.calculateTargetCount(t1, this.params.percentileToCollect).next(function(e3) {
            // Cap at the configured max
            return e3 > c.params.maximumSequenceNumbersToCollect ? (C("LruGarbageCollector", "Capping sequence numbers to collect down to the maximum of " + c.params.maximumSequenceNumbersToCollect + " from " + e3), r6 = c.params.maximumSequenceNumbersToCollect) : r6 = e3, o = Date.now(), c.nthSequenceNumber(t1, r6);
        }).next(function(r7) {
            return n12 = r7, s = Date.now(), c.removeTargets(t1, n12, e2);
        }).next(function(e3) {
            return i = e3, u = Date.now(), c.removeOrphanedDocuments(t1, n12);
        }).next(function(t2) {
            return a = Date.now(), k() <= _logger.LogLevel.DEBUG && C("LruGarbageCollector", "LRU Garbage Collection\n\tCounted targets in " + (o - h) + "ms\n\tDetermined least recently used " + r6 + " in " + (s - o) + "ms\n\tRemoved " + i + " targets in " + (u - s) + "ms\n\tRemoved " + t2 + " documents in " + (a - u) + "ms\nTotal Duration: " + (a - h) + "ms"), Ir.resolve({
                didRun: true,
                sequenceNumbersCollected: r6,
                targetsRemoved: i,
                documentsRemoved: t2
            });
        });
    }, t;
}(), wi = /** @class */ function() {
    function t(t1, e2) {
        this.db = t1, this.garbageCollector = (function(t2, e3) {
            return new gi(t2, e3);
        })(this, e2);
    }
    return t.prototype.he = function(t1) {
        var e2 = this.de(t1);
        return this.db.getTargetCache().getTargetCount(t1).next(function(t2) {
            return e2.next(function(e3) {
                return t2 + e3;
            });
        });
    }, t.prototype.de = function(t1) {
        var e2 = 0;
        return this.le(t1, function(t2) {
            e2++;
        }).next(function() {
            return e2;
        });
    }, t.prototype.forEachTarget = function(t1, e2) {
        return this.db.getTargetCache().forEachTarget(t1, e2);
    }, t.prototype.le = function(t1, e2) {
        return this.we(t1, function(t2, n12) {
            return e2(n12);
        });
    }, t.prototype.addReference = function(t1, e2, n12) {
        return bi(t1, n12);
    }, t.prototype.removeReference = function(t1, e2, n12) {
        return bi(t1, n12);
    }, t.prototype.removeTargets = function(t1, e2, n12) {
        return this.db.getTargetCache().removeTargets(t1, e2, n12);
    }, t.prototype.markPotentiallyOrphaned = function(t1, e2) {
        return bi(t1, e2);
    }, /**
     * Returns true if anything would prevent this document from being garbage
     * collected, given that the document in question is not present in any
     * targets and has a sequence number less than or equal to the upper bound for
     * the collection run.
     */ t.prototype._e = function(t1, e2) {
        return (function(t2, e3) {
            var n12 = false;
            return ai(t2).Ot(function(r6) {
                return oi(t2, r6, e3).next(function(t3) {
                    return t3 && (n12 = true), Ir.resolve(!t3);
                });
            }).next(function() {
                return n12;
            });
        })(t1, e2);
    }, t.prototype.removeOrphanedDocuments = function(t1, e2) {
        var n12 = this, r6 = this.db.getRemoteDocumentCache().newChangeBuffer(), i = [], o = 0;
        return this.we(t1, function(s, u) {
            if (u <= e2) {
                var a = n12._e(t1, s).next(function(e3) {
                    if (!e3) // Our size accounting requires us to read all documents before
                    // removing them.
                    return o++, r6.getEntry(t1, s).next(function() {
                        return r6.removeEntry(s), di(t1).delete([
                            0,
                            Xn(s.path)
                        ]);
                    });
                });
                i.push(a);
            }
        }).next(function() {
            return Ir.waitFor(i);
        }).next(function() {
            return r6.apply(t1);
        }).next(function() {
            return o;
        });
    }, t.prototype.removeTarget = function(t1, e2) {
        var n12 = e2.withSequenceNumber(t1.currentSequenceNumber);
        return this.db.getTargetCache().updateTargetData(t1, n12);
    }, t.prototype.updateLimboDocument = function(t1, e2) {
        return bi(t1, e2);
    }, /**
     * Call provided function for each document in the cache that is 'orphaned'. Orphaned
     * means not a part of any target, so the only entry in the target-document index for
     * that document will be the sentinel row (targetId 0), which will also have the sequence
     * number for the last time the document was accessed.
     */ t.prototype.we = function(t1, e2) {
        var n12, r6 = di(t1), i = S.o;
        return r6.$t({
            index: fr.documentTargetsIndex
        }, function(t2, r7) {
            var o = t2[0];
            t2[1];
            var s = r7.path, u = r7.sequenceNumber;
            0 === o ? // if nextToReport is valid, report it, this is a new key so the
            // last one must not be a member of any targets.
            (i !== S.o && e2(new ct(tr(n12)), i), // set nextToReport to be this sequence number. It's the next one we
            // might report, if we don't find any targets for this document.
            // Note that the sequence number must be defined when the targetId
            // is 0.
            i = u, n12 = s) : // set nextToReport to be invalid, we know we don't need to report
            // this one since we found a target for it.
            i = S.o;
        }).next(function() {
            // Since we report sequence numbers after getting to the next key, we
            // need to check if the last key we iterated over was an orphaned
            // document and report it.
            i !== S.o && e2(new ct(tr(n12)), i);
        });
    }, t.prototype.getCacheSize = function(t1) {
        return this.db.getRemoteDocumentCache().getSize(t1);
    }, t;
}();
/**
 * This class is responsible for the scheduling of LRU garbage collection. It handles checking
 * whether or not GC is enabled, as well as which delay to use before the next run.
 */ function bi(t, e2) {
    return di(t).put(/**
 * @returns A value suitable for writing a sentinel row in the target-document
 * store.
 */ function(t1, e3) {
        return new fr(0, Xn(t1.path), e3);
    }(e2, t.currentSequenceNumber));
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A map implementation that uses objects as keys. Objects must have an
 * associated equals function and must be immutable. Entries in the map are
 * stored together with the key being produced from the mapKeyFn. This map
 * automatically handles collisions of keys.
 */ var Ii = /** @class */ function() {
    function t(t1, e2) {
        this.mapKeyFn = t1, this.equalsFn = e2, /**
             * The inner map for a key/value pair. Due to the possibility of collisions we
             * keep a list of entries that we do a linear search through to find an actual
             * match. Note that collisions should be rare, so we still expect near
             * constant time lookups in practice.
             */ this.inner = {
        };
    }
    return t.prototype.get = function(t1) {
        var e2 = this.mapKeyFn(t1), n12 = this.inner[e2];
        if ((void 0) !== n12) for(var r6 = 0, i = n12; r6 < i.length; r6++){
            var o = i[r6], s = o[0], u = o[1];
            if (this.equalsFn(s, t1)) return u;
        }
    }, t.prototype.has = function(t1) {
        return (void 0) !== this.get(t1);
    }, /** Put this key and value in the map. */ t.prototype.set = function(t1, e2) {
        var n12 = this.mapKeyFn(t1), r6 = this.inner[n12];
        if ((void 0) !== r6) {
            for(var i = 0; i < r6.length; i++)if (this.equalsFn(r6[i][0], t1)) return void (r6[i] = [
                t1,
                e2
            ]);
            r6.push([
                t1,
                e2
            ]);
        } else this.inner[n12] = [
            [
                t1,
                e2
            ]
        ];
    }, /**
     * Remove this key from the map. Returns a boolean if anything was deleted.
     */ t.prototype.delete = function(t1) {
        var e2 = this.mapKeyFn(t1), n12 = this.inner[e2];
        if ((void 0) === n12) return false;
        for(var r6 = 0; r6 < n12.length; r6++)if (this.equalsFn(n12[r6][0], t1)) return 1 === n12.length ? delete this.inner[e2] : n12.splice(r6, 1), true;
        return false;
    }, t.prototype.forEach = function(t1) {
        G(this.inner, function(e2, n12) {
            for(var r6 = 0, i = n12; r6 < i.length; r6++){
                var o = i[r6], s = o[0], u = o[1];
                t1(s, u);
            }
        });
    }, t.prototype.isEmpty = function() {
        return z(this.inner);
    }, t;
}(), Ti = /** @class */ function() {
    function t() {
        // A mapping of document key to the new cache entry that should be written (or null if any
        // existing cache entry should be removed).
        this.changes = new Ii(function(t1) {
            return t1.toString();
        }, function(t1, e2) {
            return t1.isEqual(e2);
        }), this.changesApplied = false;
    }
    return t.prototype.getReadTime = function(t1) {
        var e2 = this.changes.get(t1);
        return e2 ? e2.readTime : K.min();
    }, /**
     * Buffers a `RemoteDocumentCache.addEntry()` call.
     *
     * You can only modify documents that have already been retrieved via
     * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
     */ t.prototype.addEntry = function(t1, e2) {
        this.assertNotApplied(), this.changes.set(t1.key, {
            document: t1,
            readTime: e2
        });
    }, /**
     * Buffers a `RemoteDocumentCache.removeEntry()` call.
     *
     * You can only remove documents that have already been retrieved via
     * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
     */ t.prototype.removeEntry = function(t1, e2) {
        (void 0) === e2 && (e2 = null), this.assertNotApplied(), this.changes.set(t1, {
            document: Nt.newInvalidDocument(t1),
            readTime: e2
        });
    }, /**
     * Looks up an entry in the cache. The buffered changes will first be checked,
     * and if no buffered change applies, this will forward to
     * `RemoteDocumentCache.getEntry()`.
     *
     * @param transaction - The transaction in which to perform any persistence
     *     operations.
     * @param documentKey - The key of the entry to look up.
     * @returns The cached document or an invalid document if we have nothing
     * cached.
     */ t.prototype.getEntry = function(t1, e2) {
        this.assertNotApplied();
        var n12 = this.changes.get(e2);
        return (void 0) !== n12 ? Ir.resolve(n12.document) : this.getFromCache(t1, e2);
    }, /**
     * Looks up several entries in the cache, forwarding to
     * `RemoteDocumentCache.getEntry()`.
     *
     * @param transaction - The transaction in which to perform any persistence
     *     operations.
     * @param documentKeys - The keys of the entries to look up.
     * @returns A map of cached documents, indexed by key. If an entry cannot be
     *     found, the corresponding key will be mapped to an invalid document.
     */ t.prototype.getEntries = function(t1, e2) {
        return this.getAllFromCache(t1, e2);
    }, /**
     * Applies buffered changes to the underlying RemoteDocumentCache, using
     * the provided transaction.
     */ t.prototype.apply = function(t1) {
        return this.assertNotApplied(), this.changesApplied = true, this.applyChanges(t1);
    }, /** Helper to assert this.changes is not null  */ t.prototype.assertNotApplied = function() {
    }, t;
}(), Ei = /** @class */ function() {
    /**
     * @param serializer - The document serializer.
     * @param indexManager - The query indexes that need to be maintained.
     */ function t(t1, e2) {
        this.R = t1, this.Ut = e2;
    }
    return t.prototype.addEntry = function(t1, e2, n12) {
        return Ni(t1).put(Di(e2), n12);
    }, /**
     * Removes a document from the cache.
     *
     * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
     */ t.prototype.removeEntry = function(t1, e2) {
        var n12 = Ni(t1), r6 = Di(e2);
        return n12.delete(r6);
    }, /**
     * Updates the current cache size.
     *
     * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the
     * cache's metadata.
     */ t.prototype.updateMetadata = function(t1, e2) {
        var n12 = this;
        return this.getMetadata(t1).next(function(r6) {
            return r6.byteSize += e2, n12.me(t1, r6);
        });
    }, t.prototype.getEntry = function(t1, e2) {
        var n12 = this;
        return Ni(t1).get(Di(e2)).next(function(t2) {
            return n12.ye(e2, t2);
        });
    }, /**
     * Looks up an entry in the cache.
     *
     * @param documentKey - The key of the entry to look up.
     * @returns The cached document entry and its size.
     */ t.prototype.ge = function(t1, e2) {
        var n12 = this;
        return Ni(t1).get(Di(e2)).next(function(t2) {
            return {
                document: n12.ye(e2, t2),
                size: ri(t2)
            };
        });
    }, t.prototype.getEntries = function(t1, e2) {
        var n12 = this, r6 = Ze();
        return this.pe(t1, e2, function(t2, e3) {
            var i = n12.ye(t2, e3);
            r6 = r6.insert(t2, i);
        }).next(function() {
            return r6;
        });
    }, /**
     * Looks up several entries in the cache.
     *
     * @param documentKeys - The set of keys entries to look up.
     * @returns A map of documents indexed by key and a map of sizes indexed by
     *     key (zero if the document does not exist).
     */ t.prototype.Ee = function(t1, e2) {
        var n12 = this, r6 = Ze(), i = new We(ct.comparator);
        return this.pe(t1, e2, function(t2, e3) {
            var o = n12.ye(t2, e3);
            r6 = r6.insert(t2, o), i = i.insert(t2, ri(e3));
        }).next(function() {
            return {
                documents: r6,
                Te: i
            };
        });
    }, t.prototype.pe = function(t1, e2, n12) {
        if (e2.isEmpty()) return Ir.resolve();
        var r6 = IDBKeyRange.bound(e2.first().path.toArray(), e2.last().path.toArray()), i = e2.getIterator(), o = i.getNext();
        return Ni(t1).$t({
            range: r6
        }, function(t2, e3, r7) {
            // Go through keys not found in cache.
            for(var s = ct.fromSegments(t2); o && ct.comparator(o, s) < 0;)n12(o, null), o = i.getNext();
            o && o.isEqual(s) && // Key found in cache.
            (n12(o, e3), o = i.hasNext() ? i.getNext() : null), // Skip to the next key (if there is one).
            o ? r7.Ct(o.path.toArray()) : r7.done();
        }).next(function() {
            // The rest of the keys are not in the cache. One case where `iterate`
            // above won't go through them is when the cache is empty.
            for(; o;)n12(o, null), o = i.hasNext() ? i.getNext() : null;
        });
    }, t.prototype.getDocumentsMatchingQuery = function(t1, e2, n12) {
        var r6 = this, i = Ze(), o = e2.path.length + 1, s = {
        };
        if (n12.isEqual(K.min())) {
            // Documents are ordered by key, so we can use a prefix scan to narrow
            // down the documents we need to match the query against.
            var u = e2.path.toArray();
            s.range = IDBKeyRange.lowerBound(u);
        } else {
            // Execute an index-free query and filter by read time. This is safe
            // since all document changes to queries that have a
            // lastLimboFreeSnapshotVersion (`sinceReadTime`) have a read time set.
            var a = e2.path.toArray(), c = qr(n12);
            s.range = IDBKeyRange.lowerBound([
                a,
                c
            ], /* open= */ true), s.index = ar.collectionReadTimeIndex;
        }
        return Ni(t1).$t(s, function(t2, n13, s1) {
            // The query is actually returning any path that starts with the query
            // path prefix which may include documents in subcollections. For
            // example, a query on 'rooms' will return rooms/abc/messages/xyx but we
            // shouldn't match it. Fix this by discarding rows with document keys
            // more than one segment longer than the query path.
            if (t2.length === o) {
                var u = Mr(r6.R, n13);
                e2.path.isPrefixOf(u.key.path) ? ue(e2, u) && (i = i.insert(u.key, u)) : s1.done();
            }
        }).next(function() {
            return i;
        });
    }, t.prototype.newChangeBuffer = function(t1) {
        return new _i(this, !!t1 && t1.trackRemovals);
    }, t.prototype.getSize = function(t1) {
        return this.getMetadata(t1).next(function(t2) {
            return t2.byteSize;
        });
    }, t.prototype.getMetadata = function(t1) {
        return Si(t1).get(cr.key).next(function(t2) {
            return P(!!t2), t2;
        });
    }, t.prototype.me = function(t1, e2) {
        return Si(t1).put(cr.key, e2);
    }, /**
     * Decodes `remoteDoc` and returns the document (or null, if the document
     * corresponds to the format used for sentinel deletes).
     */ t.prototype.ye = function(t1, e2) {
        if (e2) {
            var n12 = Mr(this.R, e2);
            // Whether the document is a sentinel removal and should only be used in the
            // `getNewDocumentChanges()`
            if (!n12.isNoDocument() || !n12.version.isEqual(K.min())) return n12;
        }
        return Nt.newInvalidDocument(t1);
    }, t;
}(), _i = /** @class */ function(e2) {
    /**
     * @param documentCache - The IndexedDbRemoteDocumentCache to apply the changes to.
     * @param trackRemovals - Whether to create sentinel deletes that can be tracked by
     * `getNewDocumentChanges()`.
     */ function n13(t, n14) {
        var r6 = this;
        return (r6 = e2.call(this) || this).Ie = t, r6.trackRemovals = n14, // A map of document sizes prior to applying the changes in this buffer.
        r6.Ae = new Ii(function(t1) {
            return t1.toString();
        }, function(t1, e3) {
            return t1.isEqual(e3);
        }), r6;
    }
    return _tslib.__extends(n13, e2), n13.prototype.applyChanges = function(t) {
        var e3 = this, n14 = [], r6 = 0, i = new $e(function(t1, e4) {
            return q(t1.canonicalString(), e4.canonicalString());
        });
        return this.changes.forEach(function(o, s) {
            var u = e3.Ae.get(o);
            if (s.document.isValidDocument()) {
                var a = Vr(e3.Ie.R, s.document, e3.getReadTime(o));
                i = i.add(o.path.popLast());
                var c = ri(a);
                r6 += c - u, n14.push(e3.Ie.addEntry(t, o, a));
            } else if (r6 -= u, e3.trackRemovals) {
                // In order to track removals, we store a "sentinel delete" in the
                // RemoteDocumentCache. This entry is represented by a NoDocument
                // with a version of 0 and ignored by `maybeDecodeDocument()` but
                // preserved in `getNewDocumentChanges()`.
                var h = Vr(e3.Ie.R, Nt.newNoDocument(o, K.min()), e3.getReadTime(o));
                n14.push(e3.Ie.addEntry(t, o, h));
            } else n14.push(e3.Ie.removeEntry(t, o));
        }), i.forEach(function(r7) {
            n14.push(e3.Ie.Ut.addToCollectionParentIndex(t, r7));
        }), n14.push(this.Ie.updateMetadata(t, r6)), Ir.waitFor(n14);
    }, n13.prototype.getFromCache = function(t, e3) {
        var n14 = this;
        // Record the size of everything we load from the cache so we can compute a delta later.
        return this.Ie.ge(t, e3).next(function(t1) {
            return n14.Ae.set(e3, t1.size), t1.document;
        });
    }, n13.prototype.getAllFromCache = function(t, e3) {
        var n14 = this;
        // Record the size of everything we load from the cache so we can compute
        // a delta later.
        return this.Ie.Ee(t, e3).next(function(t1) {
            var e4 = t1.documents;
            // Note: `getAllFromCache` returns two maps instead of a single map from
            // keys to `DocumentSizeEntry`s. This is to allow returning the
            // `MutableDocumentMap` directly, without a conversion.
            return t1.Te.forEach(function(t2, e5) {
                n14.Ae.set(t2, e5);
            }), e4;
        });
    }, n13;
}(Ti);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An in-memory buffer of entries to be written to a RemoteDocumentCache.
 * It can be used to batch up a set of changes to be written to the cache, but
 * additionally supports reading entries back with the `getEntry()` method,
 * falling back to the underlying RemoteDocumentCache if no entry is
 * buffered.
 *
 * Entries added to the cache *must* be read first. This is to facilitate
 * calculating the size delta of the pending changes.
 *
 * PORTING NOTE: This class was implemented then removed from other platforms.
 * If byte-counting ends up being needed on the other platforms, consider
 * porting this class as part of that implementation work.
 */ function Si(t) {
    return Rr(t, cr.store);
}
/**
 * Helper to get a typed SimpleDbStore for the remoteDocuments object store.
 */ function Ni(t) {
    return Rr(t, ar.store);
}
function Di(t) {
    return t.path.toArray();
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Performs database creation and schema upgrades. */ var Ai = /** @class */ function() {
    function t(t1) {
        this.R = t1;
    }
    /**
     * Performs database creation and schema upgrades.
     *
     * Note that in production, this method is only ever used to upgrade the schema
     * to SCHEMA_VERSION. Different values of toVersion are only used for testing
     * and local feature development.
     */ return t.prototype.Rt = function(t1, e2, n13, r6) {
        var i = this;
        P(n13 < r6 && n13 >= 0 && r6 <= 11);
        var o = new Tr("createOrUpgrade", e2);
        n13 < 1 && r6 >= 1 && ((function(t2) {
            t2.createObjectStore(nr.store);
        })(t1), (function(t2) {
            t2.createObjectStore(rr.store, {
                keyPath: rr.keyPath
            }), t2.createObjectStore(ir.store, {
                keyPath: ir.keyPath,
                autoIncrement: true
            }).createIndex(ir.userMutationsIndex, ir.userMutationsKeyPath, {
                unique: true
            }), t2.createObjectStore(or.store);
        })(t1), ki(t1), (function(t2) {
            t2.createObjectStore(ar.store);
        })(t1));
        // Migration 2 to populate the targetGlobal object no longer needed since
        // migration 3 unconditionally clears it.
        var s = Ir.resolve();
        return n13 < 3 && r6 >= 3 && // Brand new clients don't need to drop and recreate--only clients that
        // potentially have corrupt data.
        (0 !== n13 && ((function(t2) {
            t2.deleteObjectStore(fr.store), t2.deleteObjectStore(hr.store), t2.deleteObjectStore(lr.store);
        })(t1), ki(t1)), s = s.next(function() {
            /**
     * Creates the target global singleton row.
     *
     * @param txn - The version upgrade transaction for indexeddb
     */ return (function(t2) {
                var e3 = t2.store(lr.store), n14 = new lr(/*highestTargetId=*/ 0, /*lastListenSequenceNumber=*/ 0, K.min().toTimestamp(), /*targetCount=*/ 0);
                return e3.put(lr.key, n14);
            })(o);
        })), n13 < 4 && r6 >= 4 && (0 !== n13 && // Schema version 3 uses auto-generated keys to generate globally unique
        // mutation batch IDs (this was previously ensured internally by the
        // client). To migrate to the new schema, we have to read all mutations
        // and write them back out. We preserve the existing batch IDs to guarantee
        // consistency with other object stores. Any further mutation batch IDs will
        // be auto-generated.
        (s = s.next(function() {
            return (function(t2, e3) {
                return e3.store(ir.store).Nt().next(function(n14) {
                    t2.deleteObjectStore(ir.store), t2.createObjectStore(ir.store, {
                        keyPath: ir.keyPath,
                        autoIncrement: true
                    }).createIndex(ir.userMutationsIndex, ir.userMutationsKeyPath, {
                        unique: true
                    });
                    var r7 = e3.store(ir.store), i1 = n14.map(function(t3) {
                        return r7.put(t3);
                    });
                    return Ir.waitFor(i1);
                });
            })(t1, o);
        })), s = s.next(function() {
            (function(t2) {
                t2.createObjectStore(pr.store, {
                    keyPath: pr.keyPath
                });
            })(t1);
        })), n13 < 5 && r6 >= 5 && (s = s.next(function() {
            return i.Re(o);
        })), n13 < 6 && r6 >= 6 && (s = s.next(function() {
            return (function(t2) {
                t2.createObjectStore(cr.store);
            })(t1), i.be(o);
        })), n13 < 7 && r6 >= 7 && (s = s.next(function() {
            return i.ve(o);
        })), n13 < 8 && r6 >= 8 && (s = s.next(function() {
            return i.Pe(t1, o);
        })), n13 < 9 && r6 >= 9 && (s = s.next(function() {
            // Multi-Tab used to manage its own changelog, but this has been moved
            // to the DbRemoteDocument object store itself. Since the previous change
            // log only contained transient data, we can drop its object store.
            (function(t2) {
                t2.objectStoreNames.contains("remoteDocumentChanges") && t2.deleteObjectStore("remoteDocumentChanges");
            })(t1), (function(t2) {
                var e3 = t2.objectStore(ar.store);
                e3.createIndex(ar.readTimeIndex, ar.readTimeIndexPath, {
                    unique: false
                }), e3.createIndex(ar.collectionReadTimeIndex, ar.collectionReadTimeIndexPath, {
                    unique: false
                });
            })(e2);
        })), n13 < 10 && r6 >= 10 && (s = s.next(function() {
            return i.Ve(o);
        })), n13 < 11 && r6 >= 11 && (s = s.next(function() {
            (function(t2) {
                t2.createObjectStore(yr.store, {
                    keyPath: yr.keyPath
                });
            })(t1), (function(t2) {
                t2.createObjectStore(vr.store, {
                    keyPath: vr.keyPath
                });
            })(t1);
        })), s;
    }, t.prototype.be = function(t1) {
        var e2 = 0;
        return t1.store(ar.store).$t(function(t2, n13) {
            e2 += ri(n13);
        }).next(function() {
            var n13 = new cr(e2);
            return t1.store(cr.store).put(cr.key, n13);
        });
    }, t.prototype.Re = function(t1) {
        var e2 = this, n13 = t1.store(rr.store), r6 = t1.store(ir.store);
        return n13.Nt().next(function(n14) {
            return Ir.forEach(n14, function(n15) {
                var i = IDBKeyRange.bound([
                    n15.userId,
                    -1
                ], [
                    n15.userId,
                    n15.lastAcknowledgedBatchId
                ]);
                return r6.Nt(ir.userMutationsIndex, i).next(function(r7) {
                    return Ir.forEach(r7, function(r8) {
                        P(r8.userId === n15.userId);
                        var i1 = Kr(e2.R, r8);
                        return ni(t1, n15.userId, i1).next(function() {
                        });
                    });
                });
            });
        });
    }, /**
     * Ensures that every document in the remote document cache has a corresponding sentinel row
     * with a sequence number. Missing rows are given the most recently used sequence number.
     */ t.prototype.ve = function(t1) {
        var e2 = t1.store(fr.store), n13 = t1.store(ar.store);
        return t1.store(lr.store).get(lr.key).next(function(t2) {
            var r6 = [];
            return n13.$t(function(n14, i) {
                var o = new H(n14), s = function(t3) {
                    return [
                        0,
                        Xn(t3)
                    ];
                }(o);
                r6.push(e2.get(s).next(function(n15) {
                    return n15 ? Ir.resolve() : (function(n16) {
                        return e2.put(new fr(0, Xn(n16), t2.highestListenSequenceNumber));
                    })(o);
                }));
            }).next(function() {
                return Ir.waitFor(r6);
            });
        });
    }, t.prototype.Pe = function(t1, e2) {
        // Create the index.
        t1.createObjectStore(dr.store, {
            keyPath: dr.keyPath
        });
        var n13 = e2.store(dr.store), r6 = new Xr, i = function(t2) {
            if (r6.add(t2)) {
                var e3 = t2.lastSegment(), i1 = t2.popLast();
                return n13.put({
                    collectionId: e3,
                    parent: Xn(i1)
                });
            }
        };
        // Helper to add an index entry iff we haven't already written it.
        // Index existing remote documents.
        return e2.store(ar.store).$t({
            Ft: true
        }, function(t2, e4) {
            var n14 = new H(t2);
            return i(n14.popLast());
        }).next(function() {
            return e2.store(or.store).$t({
                Ft: true
            }, function(t2, e4) {
                t2[0];
                var n14 = t2[1];
                t2[2];
                var r7 = tr(n14);
                return i(r7.popLast());
            });
        });
    }, t.prototype.Ve = function(t1) {
        var e2 = this, n13 = t1.store(hr.store);
        return n13.$t(function(t2, r6) {
            var i2 = Qr(r6), o = Gr(e2.R, i2);
            return n13.put(o);
        });
    }, t;
}();
function ki(t) {
    t.createObjectStore(fr.store, {
        keyPath: fr.keyPath
    }).createIndex(fr.documentTargetsIndex, fr.documentTargetsKeyPath, {
        unique: true
    }), // NOTE: This is unique only because the TargetId is the suffix.
    t.createObjectStore(hr.store, {
        keyPath: hr.keyPath
    }).createIndex(hr.queryTargetsIndexName, hr.queryTargetsKeyPath, {
        unique: true
    }), t.createObjectStore(lr.store);
}
var Ci = "Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.", xi = /** @class */ function() {
    function t(/**
     * Whether to synchronize the in-memory state of multiple tabs and share
     * access to local persistence.
     */ e2, n13, r6, i2, o, s, u, a, c, /**
     * If set to true, forcefully obtains database access. Existing tabs will
     * no longer be able to access IndexedDB.
     */ h) {
        if (this.allowTabSynchronization = e2, this.persistenceKey = n13, this.clientId = r6, this.Se = o, this.window = s, this.document = u, this.De = c, this.Ce = h, this.Ne = null, this.xe = false, this.isPrimary = false, this.networkEnabled = true, /** Our window.unload handler, if registered. */ this.ke = null, this.inForeground = false, /** Our 'visibilitychange' listener if registered. */ this.Fe = null, /** The client metadata refresh task. */ this.$e = null, /** The last time we garbage collected the client metadata object store. */ this.Oe = Number.NEGATIVE_INFINITY, /** A listener to notify on primary state changes. */ this.Me = function(t1) {
            return Promise.resolve();
        }, !t.yt()) throw new D(N.UNIMPLEMENTED, "This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");
        this.referenceDelegate = new wi(this, i2), this.Le = n13 + "main", this.R = new Fr(a), this.Be = new Er(this.Le, 11, new Ai(this.R)), this.qe = new hi(this.referenceDelegate, this.R), this.Ut = new Jr, this.Ue = (function(t1, e4) {
            return new Ei(t1, e4);
        })(this.R, this.Ut), this.Ke = new Wr, this.window && this.window.localStorage ? this.Qe = this.window.localStorage : (this.Qe = null, false === h && x("IndexedDbPersistence", "LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page."));
    }
    /**
     * Attempt to start IndexedDb persistence.
     *
     * @returns Whether persistence was enabled.
     */ return t.prototype.start = function() {
        var t1 = this;
        // NOTE: This is expected to fail sometimes (in the case of another tab
        // already having the persistence lock), so it's the first thing we should
        // do.
        return this.je().then(function() {
            if (!t1.isPrimary && !t1.allowTabSynchronization) // Fail `start()` if `synchronizeTabs` is disabled and we cannot
            // obtain the primary lease.
            throw new D(N.FAILED_PRECONDITION, Ci);
            return t1.We(), t1.Ge(), t1.ze(), t1.runTransaction("getHighestListenSequenceNumber", "readonly", function(e2) {
                return t1.qe.getHighestSequenceNumber(e2);
            });
        }).then(function(e2) {
            t1.Ne = new S(e2, t1.De);
        }).then(function() {
            t1.xe = true;
        }).catch(function(e2) {
            return t1.Be && t1.Be.close(), Promise.reject(e2);
        });
    }, /**
     * Registers a listener that gets called when the primary state of the
     * instance changes. Upon registering, this listener is invoked immediately
     * with the current primary state.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */ t.prototype.He = function(t1) {
        var e2 = this;
        return this.Me = function(i2) {
            return _tslib.__awaiter(e2, void 0, void 0, function() {
                return _tslib.__generator(this, function(e4) {
                    return this.started ? [
                        2,
                        t1(i2)
                    ] : [
                        2
                    ];
                });
            });
        }, t1(this.isPrimary);
    }, /**
     * Registers a listener that gets called when the database receives a
     * version change event indicating that it has deleted.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */ t.prototype.setDatabaseDeletedListener = function(t1) {
        var e2 = this;
        this.Be.vt(function(i2) {
            return _tslib.__awaiter(e2, void 0, void 0, function() {
                return _tslib.__generator(this, function(e4) {
                    switch(e4.label){
                        case 0:
                            return null === i2.newVersion ? [
                                4,
                                t1()
                            ] : [
                                3,
                                2
                            ];
                        case 1:
                            e4.sent(), e4.label = 2;
                        case 2:
                            return [
                                2
                            ];
                    }
                });
            });
        });
    }, /**
     * Adjusts the current network state in the client's metadata, potentially
     * affecting the primary lease.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */ t.prototype.setNetworkEnabled = function(t1) {
        var e2 = this;
        this.networkEnabled !== t1 && (this.networkEnabled = t1, // Schedule a primary lease refresh for immediate execution. The eventual
        // lease update will be propagated via `primaryStateListener`.
        this.Se.enqueueAndForget(function() {
            return _tslib.__awaiter(e2, void 0, void 0, function() {
                return _tslib.__generator(this, function(t2) {
                    switch(t2.label){
                        case 0:
                            return this.started ? [
                                4,
                                this.je()
                            ] : [
                                3,
                                2
                            ];
                        case 1:
                            t2.sent(), t2.label = 2;
                        case 2:
                            return [
                                2
                            ];
                    }
                });
            });
        }));
    }, /**
     * Updates the client metadata in IndexedDb and attempts to either obtain or
     * extend the primary lease for the local client. Asynchronously notifies the
     * primary state listener if the client either newly obtained or released its
     * primary lease.
     */ t.prototype.je = function() {
        var t1 = this;
        return this.runTransaction("updateClientMetadataAndTryBecomePrimary", "readwrite", function(e2) {
            return Li(e2).put(new pr(t1.clientId, Date.now(), t1.networkEnabled, t1.inForeground)).next(function() {
                if (t1.isPrimary) return t1.Je(e2).next(function(e4) {
                    e4 || (t1.isPrimary = false, t1.Se.enqueueRetryable(function() {
                        return t1.Me(false);
                    }));
                });
            }).next(function() {
                return t1.Ye(e2);
            }).next(function(n13) {
                return t1.isPrimary && !n13 ? t1.Xe(e2).next(function() {
                    return false;
                }) : !!n13 && t1.Ze(e2).next(function() {
                    return true;
                });
            });
        }).catch(function(e2) {
            if (Nr(e2)) // Proceed with the existing state. Any subsequent access to
            // IndexedDB will verify the lease.
            return C("IndexedDbPersistence", "Failed to extend owner lease: ", e2), t1.isPrimary;
            if (!t1.allowTabSynchronization) throw e2;
            return C("IndexedDbPersistence", "Releasing owner lease after error during lease refresh", e2), /* isPrimary= */ false;
        }).then(function(e2) {
            t1.isPrimary !== e2 && t1.Se.enqueueRetryable(function() {
                return t1.Me(e2);
            }), t1.isPrimary = e2;
        });
    }, t.prototype.Je = function(t1) {
        var e2 = this;
        return Ri(t1).get(nr.key).next(function(t2) {
            return Ir.resolve(e2.tn(t2));
        });
    }, t.prototype.en = function(t1) {
        return Li(t1).delete(this.clientId);
    }, /**
     * If the garbage collection threshold has passed, prunes the
     * RemoteDocumentChanges and the ClientMetadata store based on the last update
     * time of all clients.
     */ t.prototype.nn = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var t1, e2, n13, i2, o = this;
            return _tslib.__generator(this, function(r6) {
                switch(r6.label){
                    case 0:
                        return !this.isPrimary || this.sn(this.Oe, 1800000) ? [
                            3,
                            2
                        ] : (this.Oe = Date.now(), [
                            4,
                            this.runTransaction("maybeGarbageCollectMultiClientState", "readwrite-primary", function(t2) {
                                var e4 = Rr(t2, pr.store);
                                return e4.Nt().next(function(t3) {
                                    var n14 = o.rn(t3, 1800000), r7 = t3.filter(function(t4) {
                                        return -1 === n14.indexOf(t4);
                                    });
                                    // Delete metadata for clients that are no longer considered active.
                                    return Ir.forEach(r7, function(t4) {
                                        return e4.delete(t4.clientId);
                                    }).next(function() {
                                        return r7;
                                    });
                                });
                            }).catch(function() {
                                return [];
                            })
                        ]);
                    case 1:
                        // Delete potential leftover entries that may continue to mark the
                        // inactive clients as zombied in LocalStorage.
                        // Ideally we'd delete the IndexedDb and LocalStorage zombie entries for
                        // the client atomically, but we can't. So we opt to delete the IndexedDb
                        // entries first to avoid potentially reviving a zombied client.
                        if (t1 = r6.sent(), this.Qe) for(e2 = 0, n13 = t1; e2 < n13.length; e2++)i2 = n13[e2], this.Qe.removeItem(this.on(i2.clientId));
                        r6.label = 2;
                    case 2:
                        return [
                            2
                        ];
                }
            });
        });
    }, /**
     * Schedules a recurring timer to update the client metadata and to either
     * extend or acquire the primary lease if the client is eligible.
     */ t.prototype.ze = function() {
        var t1 = this;
        this.$e = this.Se.enqueueAfterDelay("client_metadata_refresh"/* ClientMetadataRefresh */ , 4000, function() {
            return t1.je().then(function() {
                return t1.nn();
            }).then(function() {
                return t1.ze();
            });
        });
    }, /** Checks whether `client` is the local client. */ t.prototype.tn = function(t1) {
        return !!t1 && t1.ownerId === this.clientId;
    }, /**
     * Evaluate the state of all active clients and determine whether the local
     * client is or can act as the holder of the primary lease. Returns whether
     * the client is eligible for the lease, but does not actually acquire it.
     * May return 'false' even if there is no active leaseholder and another
     * (foreground) client should become leaseholder instead.
     */ t.prototype.Ye = function(t1) {
        var e2 = this;
        return this.Ce ? Ir.resolve(true) : Ri(t1).get(nr.key).next(function(n13) {
            // A client is eligible for the primary lease if:
            // - its network is enabled and the client's tab is in the foreground.
            // - its network is enabled and no other client's tab is in the
            //   foreground.
            // - every clients network is disabled and the client's tab is in the
            //   foreground.
            // - every clients network is disabled and no other client's tab is in
            //   the foreground.
            // - the `forceOwningTab` setting was passed in.
            if (null !== n13 && e2.sn(n13.leaseTimestampMs, 5000) && !e2.cn(n13.ownerId)) {
                if (e2.tn(n13) && e2.networkEnabled) return true;
                if (!e2.tn(n13)) {
                    if (!n13.allowTabSynchronization) // Fail the `canActAsPrimary` check if the current leaseholder has
                    // not opted into multi-tab synchronization. If this happens at
                    // client startup, we reject the Promise returned by
                    // `enablePersistence()` and the user can continue to use Firestore
                    // with in-memory persistence.
                    // If this fails during a lease refresh, we will instead block the
                    // AsyncQueue from executing further operations. Note that this is
                    // acceptable since mixing & matching different `synchronizeTabs`
                    // settings is not supported.
                    // TODO(b/114226234): Remove this check when `synchronizeTabs` can
                    // no longer be turned off.
                    throw new D(N.FAILED_PRECONDITION, Ci);
                    return false;
                }
            }
            return !(!e2.networkEnabled || !e2.inForeground) || Li(t1).Nt().next(function(t2) {
                return (void 0) === e2.rn(t2, 5000).find(function(t3) {
                    if (e2.clientId !== t3.clientId) {
                        var n14 = !e2.networkEnabled && t3.networkEnabled, r6 = !e2.inForeground && t3.inForeground, i2 = e2.networkEnabled === t3.networkEnabled;
                        if (n14 || r6 && i2) return true;
                    }
                    return false;
                });
            });
        }).next(function(t2) {
            return e2.isPrimary !== t2 && C("IndexedDbPersistence", "Client " + (t2 ? "is" : "is not") + " eligible for a primary lease."), t2;
        });
    }, t.prototype.shutdown = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var t1 = this;
            return _tslib.__generator(this, function(e2) {
                switch(e2.label){
                    case 0:
                        // Use `SimpleDb.runTransaction` directly to avoid failing if another tab
                        // has obtained the primary lease.
                        // The shutdown() operations are idempotent and can be called even when
                        // start() aborted (e.g. because it couldn't acquire the persistence lease).
                        return this.xe = false, this.un(), this.$e && (this.$e.cancel(), this.$e = null), this.an(), this.hn(), [
                            4,
                            this.Be.runTransaction("shutdown", "readwrite", [
                                nr.store,
                                pr.store
                            ], function(e4) {
                                var n13 = new xr(e4, S.o);
                                return t1.Xe(n13).next(function() {
                                    return t1.en(n13);
                                });
                            })
                        ];
                    case 1:
                        // The shutdown() operations are idempotent and can be called even when
                        // start() aborted (e.g. because it couldn't acquire the persistence lease).
                        // Use `SimpleDb.runTransaction` directly to avoid failing if another tab
                        // has obtained the primary lease.
                        return e2.sent(), this.Be.close(), // Remove the entry marking the client as zombied from LocalStorage since
                        // we successfully deleted its metadata from IndexedDb.
                        this.ln(), [
                            2
                        ];
                }
            });
        });
    }, /**
     * Returns clients that are not zombied and have an updateTime within the
     * provided threshold.
     */ t.prototype.rn = function(t1, e2) {
        var n13 = this;
        return t1.filter(function(t2) {
            return n13.sn(t2.updateTimeMs, e2) && !n13.cn(t2.clientId);
        });
    }, /**
     * Returns the IDs of the clients that are currently active. If multi-tab
     * is not supported, returns an array that only contains the local client's
     * ID.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */ t.prototype.fn = function() {
        var t1 = this;
        return this.runTransaction("getActiveClients", "readonly", function(e2) {
            return Li(e2).Nt().next(function(e4) {
                return t1.rn(e4, 1800000).map(function(t2) {
                    return t2.clientId;
                });
            });
        });
    }, Object.defineProperty(t.prototype, "started", {
        get: function() {
            return this.xe;
        },
        enumerable: false,
        configurable: true
    }), t.prototype.getMutationQueue = function(t1) {
        return ii.Qt(t1, this.R, this.Ut, this.referenceDelegate);
    }, t.prototype.getTargetCache = function() {
        return this.qe;
    }, t.prototype.getRemoteDocumentCache = function() {
        return this.Ue;
    }, t.prototype.getIndexManager = function() {
        return this.Ut;
    }, t.prototype.getBundleCache = function() {
        return this.Ke;
    }, t.prototype.runTransaction = function(t1, e2, n13) {
        var r7 = this;
        C("IndexedDbPersistence", "Starting transaction:", t1);
        var i3, o = "readonly" === e2 ? "readonly" : "readwrite";
        // Do all transactions as readwrite against all object stores, since we
        // are the only reader/writer.
        return this.Be.runTransaction(t1, o, mr, function(o1) {
            return i3 = new xr(o1, r7.Ne ? r7.Ne.next() : S.o), "readwrite-primary" === e2 ? r7.Je(i3).next(function(t2) {
                return !!t2 || r7.Ye(i3);
            }).next(function(e4) {
                if (!e4) throw x("Failed to obtain primary lease for action '" + t1 + "'."), r7.isPrimary = false, r7.Se.enqueueRetryable(function() {
                    return r7.Me(false);
                }), new D(N.FAILED_PRECONDITION, gr);
                return n13(i3);
            }).next(function(t2) {
                return r7.Ze(i3).next(function() {
                    return t2;
                });
            }) : r7.dn(i3).next(function() {
                return n13(i3);
            });
        }).then(function(t2) {
            return i3.raiseOnCommittedEvent(), t2;
        });
    }, /**
     * Verifies that the current tab is the primary leaseholder or alternatively
     * that the leaseholder has opted into multi-tab synchronization.
     */ // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer
    // be turned off.
    t.prototype.dn = function(t1) {
        var e2 = this;
        return Ri(t1).get(nr.key).next(function(t2) {
            if (null !== t2 && e2.sn(t2.leaseTimestampMs, 5000) && !e2.cn(t2.ownerId) && !e2.tn(t2) && !(e2.Ce || e2.allowTabSynchronization && t2.allowTabSynchronization)) throw new D(N.FAILED_PRECONDITION, Ci);
        });
    }, /**
     * Obtains or extends the new primary lease for the local client. This
     * method does not verify that the client is eligible for this lease.
     */ t.prototype.Ze = function(t1) {
        var e2 = new nr(this.clientId, this.allowTabSynchronization, Date.now());
        return Ri(t1).put(nr.key, e2);
    }, t.yt = function() {
        return Er.yt();
    }, /** Checks the primary lease and removes it if we are the current primary. */ t.prototype.Xe = function(t1) {
        var e2 = this, n13 = Ri(t1);
        return n13.get(nr.key).next(function(t2) {
            return e2.tn(t2) ? (C("IndexedDbPersistence", "Releasing primary lease."), n13.delete(nr.key)) : Ir.resolve();
        });
    }, /** Verifies that `updateTimeMs` is within `maxAgeMs`. */ t.prototype.sn = function(t1, e2) {
        var n13 = Date.now();
        return !(t1 < n13 - e2 || t1 > n13 && (x("Detected an update time that is in the future: " + t1 + " > " + n13), 1));
    }, t.prototype.We = function() {
        var t1 = this;
        null !== this.document && "function" == typeof this.document.addEventListener && (this.Fe = function() {
            t1.Se.enqueueAndForget(function() {
                return t1.inForeground = "visible" === t1.document.visibilityState, t1.je();
            });
        }, this.document.addEventListener("visibilitychange", this.Fe), this.inForeground = "visible" === this.document.visibilityState);
    }, t.prototype.an = function() {
        this.Fe && (this.document.removeEventListener("visibilitychange", this.Fe), this.Fe = null);
    }, /**
     * Attaches a window.unload handler that will synchronously write our
     * clientId to a "zombie client id" location in LocalStorage. This can be used
     * by tabs trying to acquire the primary lease to determine that the lease
     * is no longer valid even if the timestamp is recent. This is particularly
     * important for the refresh case (so the tab correctly re-acquires the
     * primary lease). LocalStorage is used for this rather than IndexedDb because
     * it is a synchronous API and so can be used reliably from  an unload
     * handler.
     */ t.prototype.Ge = function() {
        var t1, e2 = this;
        "function" == typeof (null === (t1 = this.window) || (void 0) === t1 ? void 0 : t1.addEventListener) && (this.ke = function() {
            // Note: In theory, this should be scheduled on the AsyncQueue since it
            // accesses internal state. We execute this code directly during shutdown
            // to make sure it gets a chance to run.
            e2.un(), _util.isSafari() && navigator.appVersion.match("Version/14") && // On Safari 14, we do not run any cleanup actions as it might trigger
            // a bug that prevents Safari from re-opening IndexedDB during the
            // next page load.
            // See https://bugs.webkit.org/show_bug.cgi?id=226547
            e2.Se.enterRestrictedMode(/* purgeExistingTasks= */ true), e2.Se.enqueueAndForget(function() {
                return e2.shutdown();
            });
        }, this.window.addEventListener("pagehide", this.ke));
    }, t.prototype.hn = function() {
        this.ke && (this.window.removeEventListener("pagehide", this.ke), this.ke = null);
    }, /**
     * Returns whether a client is "zombied" based on its LocalStorage entry.
     * Clients become zombied when their tab closes without running all of the
     * cleanup logic in `shutdown()`.
     */ t.prototype.cn = function(t1) {
        var e2;
        try {
            var n13 = null !== (null === (e2 = this.Qe) || (void 0) === e2 ? void 0 : e2.getItem(this.on(t1)));
            return C("IndexedDbPersistence", "Client '" + t1 + "' " + (n13 ? "is" : "is not") + " zombied in LocalStorage"), n13;
        } catch (t2) {
            // Gracefully handle if LocalStorage isn't working.
            return x("IndexedDbPersistence", "Failed to get zombied client id.", t2), false;
        }
    }, /**
     * Record client as zombied (a client that had its tab closed). Zombied
     * clients are ignored during primary tab selection.
     */ t.prototype.un = function() {
        if (this.Qe) try {
            this.Qe.setItem(this.on(this.clientId), String(Date.now()));
        } catch (t1) {
            // Gracefully handle if LocalStorage isn't available / working.
            x("Failed to set zombie client id.", t1);
        }
    }, /** Removes the zombied client entry if it exists. */ t.prototype.ln = function() {
        if (this.Qe) try {
            this.Qe.removeItem(this.on(this.clientId));
        } catch (t1) {
        // Ignore
        }
    }, t.prototype.on = function(t1) {
        return "firestore_zombie_" + this.persistenceKey + "_" + t1;
    }, t;
}();
/**
 * Oldest acceptable age in milliseconds for client metadata before the client
 * is considered inactive and its associated data is garbage collected.
 */ /**
 * An IndexedDB-backed instance of Persistence. Data is stored persistently
 * across sessions.
 *
 * On Web only, the Firestore SDKs support shared access to its persistence
 * layer. This allows multiple browser tabs to read and write to IndexedDb and
 * to synchronize state even without network connectivity. Shared access is
 * currently optional and not enabled unless all clients invoke
 * `enablePersistence()` with `{synchronizeTabs:true}`.
 *
 * In multi-tab mode, if multiple clients are active at the same time, the SDK
 * will designate one client as the “primary client”. An effort is made to pick
 * a visible, network-connected and active client, and this client is
 * responsible for letting other clients know about its presence. The primary
 * client writes a unique client-generated identifier (the client ID) to
 * IndexedDb’s “owner” store every 4 seconds. If the primary client fails to
 * update this entry, another client can acquire the lease and take over as
 * primary.
 *
 * Some persistence operations in the SDK are designated as primary-client only
 * operations. This includes the acknowledgment of mutations and all updates of
 * remote documents. The effects of these operations are written to persistence
 * and then broadcast to other tabs via LocalStorage (see
 * `WebStorageSharedClientState`), which then refresh their state from
 * persistence.
 *
 * Similarly, the primary client listens to notifications sent by secondary
 * clients to discover persistence changes written by secondary clients, such as
 * the addition of new mutations and query targets.
 *
 * If multi-tab is not enabled and another tab already obtained the primary
 * lease, IndexedDbPersistence enters a failed state and all subsequent
 * operations will automatically fail.
 *
 * Additionally, there is an optimization so that when a tab is closed, the
 * primary lease is released immediately (this is especially important to make
 * sure that a refreshed tab is able to immediately re-acquire the primary
 * lease). Unfortunately, IndexedDB cannot be reliably used in window.unload
 * since it is an asynchronous API. So in addition to attempting to give up the
 * lease, the leaseholder writes its client ID to a "zombiedClient" entry in
 * LocalStorage which acts as an indicator that another tab should go ahead and
 * take the primary lease immediately regardless of the current lease timestamp.
 *
 * TODO(b/114226234): Remove `synchronizeTabs` section when multi-tab is no
 * longer optional.
 */ /**
 * Helper to get a typed SimpleDbStore for the primary client object store.
 */ function Ri(t) {
    return Rr(t, nr.store);
}
/**
 * Helper to get a typed SimpleDbStore for the client metadata object store.
 */ function Li(t) {
    return Rr(t, pr.store);
}
/**
 * Generates a string used as a prefix when storing data in IndexedDB and
 * LocalStorage.
 */ function Oi(t, e2) {
    // Use two different prefix formats:
    //   * firestore / persistenceKey / projectID . databaseID / ...
    //   * firestore / persistenceKey / projectID / ...
    // projectIDs are DNS-compatible names and cannot contain dots
    // so there's no danger of collisions.
    var n13 = t.projectId;
    return t.isDefaultDatabase || (n13 += "." + t.database), "firestore/" + e2 + "/" + n13 + "/";
}
var Pi = function(t, e2) {
    this.progress = t, this.wn = e2;
}, Fi = /** @class */ function() {
    function t(t1, e2, n13) {
        this.Ue = t1, this._n = e2, this.Ut = n13;
    }
    return t.prototype.mn = function(t1, e2) {
        var n13 = this;
        return this._n.getAllMutationBatchesAffectingDocumentKey(t1, e2).next(function(r7) {
            return n13.yn(t1, e2, r7);
        });
    }, /** Internal version of `getDocument` that allows reusing batches. */ t.prototype.yn = function(t1, e2, n13) {
        return this.Ue.getEntry(t1, e2).next(function(t2) {
            for(var e4 = 0, r7 = n13; e4 < r7.length; e4++)r7[e4].applyToLocalView(t2);
            return t2;
        });
    }, // Returns the view of the given `docs` as they would appear after applying
    // all mutations in the given `batches`.
    t.prototype.gn = function(t1, e2) {
        t1.forEach(function(t2, n13) {
            for(var r7 = 0, i3 = e2; r7 < i3.length; r7++)i3[r7].applyToLocalView(n13);
        });
    }, /**
     * Gets the local view of the documents identified by `keys`.
     *
     * If we don't have cached state for a document in `keys`, a NoDocument will
     * be stored for that key in the resulting set.
     */ t.prototype.pn = function(t1, e2) {
        var n13 = this;
        return this.Ue.getEntries(t1, e2).next(function(e4) {
            return n13.En(t1, e4).next(function() {
                return e4;
            });
        });
    }, /**
     * Applies the local view the given `baseDocs` without retrieving documents
     * from the local store.
     */ t.prototype.En = function(t1, e2) {
        var n13 = this;
        return this._n.getAllMutationBatchesAffectingDocumentKeys(t1, e2).next(function(t2) {
            return n13.gn(e2, t2);
        });
    }, /**
     * Performs a query against the local view of all documents.
     *
     * @param transaction - The persistence transaction.
     * @param query - The query to match documents against.
     * @param sinceReadTime - If not set to SnapshotVersion.min(), return only
     *     documents that have been read since this snapshot version (exclusive).
     */ t.prototype.getDocumentsMatchingQuery = function(t1, e2, n13) {
        /**
 * Returns whether the query matches a single document by path (rather than a
 * collection).
 */ return (function(t2) {
            return ct.isDocumentKey(t2.path) && null === t2.collectionGroup && 0 === t2.filters.length;
        })(e2) ? this.Tn(t1, e2.path) : te(e2) ? this.In(t1, e2, n13) : this.An(t1, e2, n13);
    }, t.prototype.Tn = function(t1, e2) {
        // Just do a simple document lookup.
        return this.mn(t1, new ct(e2)).next(function(t2) {
            var e4 = en();
            return t2.isFoundDocument() && (e4 = e4.insert(t2.key, t2)), e4;
        });
    }, t.prototype.In = function(t1, e2, n13) {
        var r7 = this, i3 = e2.collectionGroup, o = en();
        return this.Ut.getCollectionParents(t1, i3).next(function(s) {
            return Ir.forEach(s, function(s1) {
                var u = function(t2, e4) {
                    return new Wt(e4, /*collectionGroup=*/ null, t2.explicitOrderBy.slice(), t2.filters.slice(), t2.limit, t2.limitType, t2.startAt, t2.endAt);
                }(e2, s1.child(i3));
                return r7.An(t1, u, n13).next(function(t2) {
                    t2.forEach(function(t3, e4) {
                        o = o.insert(t3, e4);
                    });
                });
            }).next(function() {
                return o;
            });
        });
    }, t.prototype.An = function(t1, e2, n13) {
        var r7, i3, o = this;
        // Query the remote documents and overlay mutations.
        return this.Ue.getDocumentsMatchingQuery(t1, e2, n13).next(function(n15) {
            return r7 = n15, o._n.getAllMutationBatchesAffectingQuery(t1, e2);
        }).next(function(e4) {
            return i3 = e4, o.Rn(t1, i3, r7).next(function(t2) {
                r7 = t2;
                for(var e5 = 0, n15 = i3; e5 < n15.length; e5++)for(var o1 = n15[e5], s = 0, u = o1.mutations; s < u.length; s++){
                    var a = u[s], c = a.key, h = r7.get(c);
                    null == h && // Create invalid document to apply mutations on top of
                    (h = Nt.newInvalidDocument(c), r7 = r7.insert(c, h)), xe(a, h, o1.localWriteTime), h.isFoundDocument() || (r7 = r7.remove(c));
                }
            });
        }).next(function() {
            // Finally, filter out any documents that don't actually match
            // the query.
            return r7.forEach(function(t2, n15) {
                ue(e2, n15) || (r7 = r7.remove(t2));
            }), r7;
        });
    }, t.prototype.Rn = function(t1, e2, n13) {
        for(var r7 = sn(), i3 = 0, o = e2; i3 < o.length; i3++)for(var s = 0, u = o[i3].mutations; s < u.length; s++){
            var a = u[s];
            a instanceof Fe && null === n13.get(a.key) && (r7 = r7.add(a.key));
        }
        var c = n13;
        return this.Ue.getEntries(t1, r7).next(function(t2) {
            return t2.forEach(function(t3, e4) {
                e4.isFoundDocument() && (c = c.insert(t3, e4));
            }), c;
        });
    }, t;
}(), Mi = /** @class */ function() {
    function t(t1, e2, n13, r7) {
        this.targetId = t1, this.fromCache = e2, this.bn = n13, this.vn = r7;
    }
    return t.Pn = function(e2, n13) {
        for(var r7 = sn(), i3 = sn(), o = 0, s = n13.docChanges; o < s.length; o++){
            var u = s[o];
            switch(u.type){
                case 0:
                    r7 = r7.add(u.doc.key);
                    break;
                case 1:
                    i3 = i3.add(u.doc.key);
            }
        }
        return new t(e2, n13.fromCache, r7, i3);
    }, t;
}(), Vi = /** @class */ function() {
    function t() {
    }
    /** Sets the document view to query against. */ return t.prototype.Vn = function(t1) {
        this.Sn = t1;
    }, /** Returns all local documents matching the specified query. */ t.prototype.getDocumentsMatchingQuery = function(t1, e2, n13, r7) {
        var i3 = this;
        // Queries that match all documents don't benefit from using
        // key-based lookups. It is more efficient to scan all documents in a
        // collection, rather than to perform individual lookups.
        return (function(t2) {
            return 0 === t2.filters.length && null === t2.limit && null == t2.startAt && null == t2.endAt && (0 === t2.explicitOrderBy.length || 1 === t2.explicitOrderBy.length && t2.explicitOrderBy[0].field.isKeyField());
        })(e2) || n13.isEqual(K.min()) ? this.Dn(t1, e2) : this.Sn.pn(t1, r7).next(function(o) {
            var s = i3.Cn(e2, o);
            return ($t(e2) || Xt(e2)) && i3.Nn(e2.limitType, s, r7, n13) ? i3.Dn(t1, e2) : (k() <= _logger.LogLevel.DEBUG && C("QueryEngine", "Re-using previous result from %s to execute query: %s", n13.toString(), se(e2)), i3.Sn.getDocumentsMatchingQuery(t1, e2, n13).next(function(t2) {
                // We merge `previousResults` into `updateResults`, since
                // `updateResults` is already a DocumentMap. If a document is
                // contained in both lists, then its contents are the same.
                return s.forEach(function(e4) {
                    t2 = t2.insert(e4.key, e4);
                }), t2;
            }));
        });
    // Queries that have never seen a snapshot without limbo free documents
    // should also be run as a full collection scan.
    }, /** Applies the query filter and sorting to the provided documents.  */ t.prototype.Cn = function(t1, e2) {
        // Sort the documents and re-apply the query filter since previously
        // matching documents do not necessarily still match the query.
        var n13 = new $e(ae(t1));
        return e2.forEach(function(e4, r7) {
            ue(t1, r7) && (n13 = n13.add(r7));
        }), n13;
    }, /**
     * Determines if a limit query needs to be refilled from cache, making it
     * ineligible for index-free execution.
     *
     * @param sortedPreviousResults - The documents that matched the query when it
     * was last synchronized, sorted by the query's comparator.
     * @param remoteKeys - The document keys that matched the query at the last
     * snapshot.
     * @param limboFreeSnapshotVersion - The version of the snapshot when the
     * query was last synchronized.
     */ t.prototype.Nn = function(t1, e2, n13, r7) {
        // The query needs to be refilled if a previously matching document no
        // longer matches.
        if (n13.size !== e2.size) return true;
        // Limit queries are not eligible for index-free query execution if there is
        // a potential that an older document from cache now sorts before a document
        // that was previously part of the limit. This, however, can only happen if
        // the document at the edge of the limit goes out of limit.
        // If a document that is not the limit boundary sorts differently,
        // the boundary of the limit itself did not change and documents from cache
        // will continue to be "rejected" by this boundary. Therefore, we can ignore
        // any modifications that don't affect the last document.
        var i3 = "F" === t1 ? e2.last() : e2.first();
        return !!i3 && (i3.hasPendingWrites || i3.version.compareTo(r7) > 0);
    }, t.prototype.Dn = function(t1, e2) {
        return k() <= _logger.LogLevel.DEBUG && C("QueryEngine", "Using full collection scan to execute query:", se(e2)), this.Sn.getDocumentsMatchingQuery(t1, e2, K.min());
    }, t;
}(), qi = /** @class */ function() {
    function t(/** Manages our in-memory or durable persistence. */ t1, e2, n13, r7) {
        this.persistence = t1, this.xn = e2, this.R = r7, /**
             * Maps a targetID to data about its target.
             *
             * PORTING NOTE: We are using an immutable data structure on Web to make re-runs
             * of `applyRemoteEvent()` idempotent.
             */ this.kn = new We(q), /** Maps a target to its targetID. */ // TODO(wuandy): Evaluate if TargetId can be part of Target.
        this.Fn = new Ii(function(t2) {
            return kt(t2);
        }, Ct), /**
             * The read time of the last entry processed by `getNewDocumentChanges()`.
             *
             * PORTING NOTE: This is only used for multi-tab synchronization.
             */ this.$n = K.min(), this._n = t1.getMutationQueue(n13), this.On = t1.getRemoteDocumentCache(), this.qe = t1.getTargetCache(), this.Mn = new Fi(this.On, this._n, this.persistence.getIndexManager()), this.Ke = t1.getBundleCache(), this.xn.Vn(this.Mn);
    }
    return t.prototype.collectGarbage = function(t1) {
        var e2 = this;
        return this.persistence.runTransaction("Collect garbage", "readwrite-primary", function(n13) {
            return t1.collect(n13, e2.kn);
        });
    }, t;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A readonly view of the local state of all documents we're tracking (i.e. we
 * have a cached version in remoteDocumentCache or local mutations for the
 * document). The view is computed by applying the mutations in the
 * MutationQueue to the RemoteDocumentCache.
 */ function Ui(/** Manages our in-memory or durable persistence. */ t, e2, n13, r7) {
    return new qi(t, e2, n13, r7);
}
/**
 * Tells the LocalStore that the currently authenticated user has changed.
 *
 * In response the local store switches the mutation queue to the new user and
 * returns any resulting document changes.
 */ // PORTING NOTE: Android and iOS only return the documents affected by the
// change.
function Bi(t, e2) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var n13, i3, o, s;
        return _tslib.__generator(this, function(r7) {
            switch(r7.label){
                case 0:
                    return n13 = F(t), i3 = n13._n, o = n13.Mn, [
                        4,
                        n13.persistence.runTransaction("Handle user change", "readonly", function(t1) {
                            // Swap out the mutation queue, grabbing the pending mutation batches
                            // before and after.
                            var r8;
                            return n13._n.getAllMutationBatches(t1).next(function(s1) {
                                return r8 = s1, i3 = n13.persistence.getMutationQueue(e2), // Recreate our LocalDocumentsView using the new
                                // MutationQueue.
                                o = new Fi(n13.On, i3, n13.persistence.getIndexManager()), i3.getAllMutationBatches(t1);
                            }).next(function(e4) {
                                for(var n15 = [], i4 = [], s1 = sn(), u = 0, a = r8; u < a.length; u++){
                                    var c = a[u];
                                    n15.push(c.batchId);
                                    for(var h = 0, f = c.mutations; h < f.length; h++){
                                        var l = f[h];
                                        s1 = s1.add(l.key);
                                    }
                                }
                                for(var d = 0, p = e4; d < p.length; d++){
                                    var y = p[d];
                                    i4.push(y.batchId);
                                    for(var v = 0, m = y.mutations; v < m.length; v++){
                                        var g = m[v];
                                        s1 = s1.add(g.key);
                                    }
                                }
                                // Return the set of all (potentially) changed documents and the list
                                // of mutation batch IDs that were affected by change.
                                return o.pn(t1, s1).next(function(t2) {
                                    return {
                                        Ln: t2,
                                        removedBatchIds: n15,
                                        addedBatchIds: i4
                                    };
                                });
                            });
                        })
                    ];
                case 1:
                    return s = r7.sent(), [
                        2,
                        (n13._n = i3, n13.Mn = o, n13.xn.Vn(n13.Mn), s)
                    ];
            }
        });
    });
}
/* Accepts locally generated Mutations and commit them to storage. */ /**
 * Acknowledges the given batch.
 *
 * On the happy path when a batch is acknowledged, the local store will
 *
 *  + remove the batch from the mutation queue;
 *  + apply the changes to the remote document cache;
 *  + recalculate the latency compensated view implied by those changes (there
 *    may be mutations in the queue that affect the documents but haven't been
 *    acknowledged yet); and
 *  + give the changed documents back the sync engine
 *
 * @returns The resulting (modified) documents.
 */ function ji(t, e2) {
    var n13 = F(t);
    return n13.persistence.runTransaction("Acknowledge batch", "readwrite-primary", function(t1) {
        var r7 = e2.batch.keys(), i3 = n13.On.newChangeBuffer({
            trackRemovals: true
        });
        return (function(t2, e4, n15, r8) {
            var i4 = n15.batch, o = i4.keys(), s = Ir.resolve();
            return o.forEach(function(t3) {
                s = s.next(function() {
                    return r8.getEntry(e4, t3);
                }).next(function(e5) {
                    var o1 = n15.docVersions.get(t3);
                    P(null !== o1), e5.version.compareTo(o1) < 0 && (i4.applyToRemoteDocument(e5, n15), e5.isValidDocument() && // We use the commitVersion as the readTime rather than the
                    // document's updateTime since the updateTime is not advanced
                    // for updates that do not modify the underlying document.
                    r8.addEntry(e5, n15.commitVersion));
                });
            }), s.next(function() {
                return t2._n.removeMutationBatch(e4, i4);
            });
        })(n13, t1, e2, i3).next(function() {
            return i3.apply(t1);
        }).next(function() {
            return n13._n.performConsistencyCheck(t1);
        }).next(function() {
            return n13.Mn.pn(t1, r7);
        });
    });
}
/**
 * Removes mutations from the MutationQueue for the specified batch;
 * LocalDocuments will be recalculated.
 *
 * @returns The resulting modified documents.
 */ /**
 * Returns the last consistent snapshot processed (used by the RemoteStore to
 * determine whether to buffer incoming snapshots from the backend).
 */ function Ki(t) {
    var e2 = F(t);
    return e2.persistence.runTransaction("Get last remote snapshot version", "readonly", function(t1) {
        return e2.qe.getLastRemoteSnapshotVersion(t1);
    });
}
/**
 * Updates the "ground-state" (remote) documents. We assume that the remote
 * event reflects any write batches that have been acknowledged or rejected
 * (i.e. we do not re-apply local mutations to updates from this event).
 *
 * LocalDocuments are re-calculated if there are remaining mutations in the
 * queue.
 */ function Qi(t, e2) {
    var n13 = F(t), r7 = e2.snapshotVersion, i3 = n13.kn;
    return n13.persistence.runTransaction("Apply remote event", "readwrite-primary", function(t1) {
        var o = n13.On.newChangeBuffer({
            trackRemovals: true
        });
        // Reset newTargetDataByTargetMap in case this transaction gets re-run.
        i3 = n13.kn;
        var s = [];
        e2.targetChanges.forEach(function(e4, o1) {
            var u = i3.get(o1);
            if (u) {
                // Only update the remote keys if the target is still active. This
                // ensures that we can persist the updated target data along with
                // the updated assignment.
                s.push(n13.qe.removeMatchingKeys(t1, e4.removedDocuments, o1).next(function() {
                    return n13.qe.addMatchingKeys(t1, e4.addedDocuments, o1);
                }));
                var a = e4.resumeToken;
                // Update the resume token if the change includes one.
                if (a.approximateByteSize() > 0) {
                    var c = u.withResumeToken(a, r7).withSequenceNumber(t1.currentSequenceNumber);
                    i3 = i3.insert(o1, c), // Update the target data if there are target changes (or if
                    // sufficient time has passed since the last update).
                    /**
     * Returns true if the newTargetData should be persisted during an update of
     * an active target. TargetData should always be persisted when a target is
     * being released and should not call this function.
     *
     * While the target is active, TargetData updates can be omitted when nothing
     * about the target has changed except metadata like the resume token or
     * snapshot version. Occasionally it's worth the extra write to prevent these
     * values from getting too stale after a crash, but this doesn't have to be
     * too frequent.
     */ (function(t2, e5, n15) {
                        // Always persist target data if we don't already have a resume token.
                        return P(e5.resumeToken.approximateByteSize() > 0), 0 === t2.resumeToken.approximateByteSize() || // Don't allow resume token changes to be buffered indefinitely. This
                        // allows us to be reasonably up-to-date after a crash and avoids needing
                        // to loop over all active queries on shutdown. Especially in the browser
                        // we may not get time to do anything interesting while the current tab is
                        // closing.
                        e5.snapshotVersion.toMicroseconds() - t2.snapshotVersion.toMicroseconds() >= 300000000 || n15.addedDocuments.size + n15.modifiedDocuments.size + n15.removedDocuments.size > 0;
                    })(u, c, e4) && s.push(n13.qe.updateTargetData(t1, c));
                }
            }
        });
        var u = Ze();
        // HACK: The only reason we allow a null snapshot version is so that we
        // can synthesize remote events when we get permission denied errors while
        // trying to resolve the state of a locally cached document that is in
        // limbo.
        if (e2.documentUpdates.forEach(function(r8, i4) {
            e2.resolvedLimboDocuments.has(r8) && s.push(n13.persistence.referenceDelegate.updateLimboDocument(t1, r8));
        }), // Each loop iteration only affects its "own" doc, so it's safe to get all the remote
        // documents in advance in a single call.
        s.push(Gi(t1, o, e2.documentUpdates, r7, void 0).next(function(t2) {
            u = t2;
        })), !r7.isEqual(K.min())) {
            var a = n13.qe.getLastRemoteSnapshotVersion(t1).next(function(e4) {
                return n13.qe.setTargetsMetadata(t1, t1.currentSequenceNumber, r7);
            });
            s.push(a);
        }
        return Ir.waitFor(s).next(function() {
            return o.apply(t1);
        }).next(function() {
            return n13.Mn.En(t1, u);
        }).next(function() {
            return u;
        });
    }).then(function(t1) {
        return n13.kn = i3, t1;
    });
}
/**
 * Populates document change buffer with documents from backend or a bundle.
 * Returns the document changes resulting from applying those documents.
 *
 * @param txn - Transaction to use to read existing documents from storage.
 * @param documentBuffer - Document buffer to collect the resulted changes to be
 *        applied to storage.
 * @param documents - Documents to be applied.
 * @param globalVersion - A `SnapshotVersion` representing the read time if all
 *        documents have the same read time.
 * @param documentVersions - A DocumentKey-to-SnapshotVersion map if documents
 *        have their own read time.
 *
 * Note: this function will use `documentVersions` if it is defined;
 * when it is not defined, resorts to `globalVersion`.
 */ function Gi(t, e2, n13, r7, // TODO(wuandy): We could add `readTime` to MaybeDocument instead to remove
// this parameter.
i3) {
    var o = sn();
    return n13.forEach(function(t1) {
        return o = o.add(t1);
    }), e2.getEntries(t, o).next(function(t1) {
        var o1 = Ze();
        return n13.forEach(function(n15, s) {
            var u = t1.get(n15), a = (null == i3 ? void 0 : i3.get(n15)) || r7;
            // Note: The order of the steps below is important, since we want
            // to ensure that rejected limbo resolutions (which fabricate
            // NoDocuments with SnapshotVersion.min()) never add documents to
            // cache.
            s.isNoDocument() && s.version.isEqual(K.min()) ? // NoDocuments with SnapshotVersion.min() are used in manufactured
            // events. We remove these documents from cache since we lost
            // access.
            (e2.removeEntry(n15, a), o1 = o1.insert(n15, s)) : !u.isValidDocument() || s.version.compareTo(u.version) > 0 || 0 === s.version.compareTo(u.version) && u.hasPendingWrites ? (e2.addEntry(s, a), o1 = o1.insert(n15, s)) : C("LocalStore", "Ignoring outdated watch update for ", n15, ". Current version:", u.version, " Watch version:", s.version);
        }), o1;
    });
}
function zi(t, e2) {
    var n13 = F(t);
    return n13.persistence.runTransaction("Get next mutation batch", "readonly", function(t1) {
        return (void 0) === e2 && (e2 = -1), n13._n.getNextMutationBatchAfterBatchId(t1, e2);
    });
}
/**
 * Reads the current value of a Document with a given key or null if not
 * found - used for testing.
 */ /**
 * Assigns the given target an internal ID so that its results can be pinned so
 * they don't get GC'd. A target must be allocated in the local store before
 * the store can be used to manage its view.
 *
 * Allocating an already allocated `Target` will return the existing `TargetData`
 * for that `Target`.
 */ function Wi(t, e2) {
    var n13 = F(t);
    return n13.persistence.runTransaction("Allocate target", "readwrite", function(t1) {
        var r7;
        return n13.qe.getTargetData(t1, e2).next(function(i3) {
            return i3 ? // This target has been listened to previously, so reuse the
            // previous targetID.
            // TODO(mcg): freshen last accessed date?
            (r7 = i3, Ir.resolve(r7)) : n13.qe.allocateTargetId(t1).next(function(i4) {
                return r7 = new Pr(e2, i4, 0/* Listen */ , t1.currentSequenceNumber), n13.qe.addTargetData(t1, r7).next(function() {
                    return r7;
                });
            });
        });
    }).then(function(t1) {
        // If Multi-Tab is enabled, the existing target data may be newer than
        // the in-memory data
        var r7 = n13.kn.get(t1.targetId);
        return (null === r7 || t1.snapshotVersion.compareTo(r7.snapshotVersion) > 0) && (n13.kn = n13.kn.insert(t1.targetId, t1), n13.Fn.set(e2, t1.targetId)), t1;
    });
}
/**
 * Returns the TargetData as seen by the LocalStore, including updates that may
 * have not yet been persisted to the TargetCache.
 */ // Visible for testing.
/**
 * Unpins all the documents associated with the given target. If
 * `keepPersistedTargetData` is set to false and Eager GC enabled, the method
 * directly removes the associated target data from the target cache.
 *
 * Releasing a non-existing `Target` is a no-op.
 */ // PORTING NOTE: `keepPersistedTargetData` is multi-tab only.
function Hi(t, e2, i3) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var n13, o, s, u;
        return _tslib.__generator(this, function(r7) {
            switch(r7.label){
                case 0:
                    n13 = F(t), o = n13.kn.get(e2), s = i3 ? "readwrite" : "readwrite-primary", r7.label = 1;
                case 1:
                    return r7.trys.push([
                        1,
                        4,
                        ,
                        5
                    ]), i3 ? [
                        3,
                        3
                    ] : [
                        4,
                        n13.persistence.runTransaction("Release target", s, function(t1) {
                            return n13.persistence.referenceDelegate.removeTarget(t1, o);
                        })
                    ];
                case 2:
                    r7.sent(), r7.label = 3;
                case 3:
                    return [
                        3,
                        5
                    ];
                case 4:
                    if (!Nr(u = r7.sent())) throw u;
                    // All `releaseTarget` does is record the final metadata state for the
                    // target, but we've been recording this periodically during target
                    // activity. If we lose this write this could cause a very slight
                    // difference in the order of target deletion during GC, but we
                    // don't define exact LRU semantics so this is acceptable.
                    return C("LocalStore", "Failed to update sequence numbers for target " + e2 + ": " + u), [
                        3,
                        5
                    ];
                case 5:
                    return n13.kn = n13.kn.remove(e2), n13.Fn.delete(o.target), [
                        2
                    ];
            }
        });
    });
}
/**
 * Runs the specified query against the local store and returns the results,
 * potentially taking advantage of query data from previous executions (such
 * as the set of remote keys).
 *
 * @param usePreviousResults - Whether results from previous executions can
 * be used to optimize this query execution.
 */ function Yi(t, e2, n13) {
    var r7 = F(t), i3 = K.min(), o = sn();
    return r7.persistence.runTransaction("Execute query", "readonly", function(t1) {
        return (function(t2, e4, n15) {
            var r8 = F(t2), i4 = r8.Fn.get(n15);
            return (void 0) !== i4 ? Ir.resolve(r8.kn.get(i4)) : r8.qe.getTargetData(e4, n15);
        })(r7, t1, ne(e2)).next(function(e4) {
            if (e4) return i3 = e4.lastLimboFreeSnapshotVersion, r7.qe.getMatchingKeysForTargetId(t1, e4.targetId).next(function(t2) {
                o = t2;
            });
        }).next(function() {
            return r7.xn.getDocumentsMatchingQuery(t1, e2, n13 ? i3 : K.min(), n13 ? o : sn());
        }).next(function(t2) {
            return {
                documents: t2,
                Bn: o
            };
        });
    });
}
// PORTING NOTE: Multi-Tab only.
function $i(t, e2) {
    var n13 = F(t), r7 = F(n13.qe), i3 = n13.kn.get(e2);
    return i3 ? Promise.resolve(i3.target) : n13.persistence.runTransaction("Get target data", "readonly", function(t1) {
        return r7.lt(t1, e2).next(function(t2) {
            return t2 ? t2.target : null;
        });
    });
}
/**
 * Returns the set of documents that have been updated since the last call.
 * If this is the first call, returns the set of changes since client
 * initialization. Further invocations will return document that have changed
 * since the prior call.
 */ // PORTING NOTE: Multi-Tab only.
function Xi(t) {
    var e2 = F(t);
    return e2.persistence.runTransaction("Get new document changes", "readonly", function(t1) {
        return (function(t2, e4, n13) {
            var r7 = F(t2), i3 = Ze(), o = qr(n13), s = Ni(e4), u = IDBKeyRange.lowerBound(o, true);
            return s.$t({
                index: ar.readTimeIndex,
                range: u
            }, function(t3, e5) {
                // Unlike `getEntry()` and others, `getNewDocumentChanges()` parses
                // the documents directly since we want to keep sentinel deletes.
                var n15 = Mr(r7.R, e5);
                i3 = i3.insert(n15.key, n15), o = e5.readTime;
            }).next(function() {
                return {
                    wn: i3,
                    readTime: Ur(o)
                };
            });
        })(e2.On, t1, e2.$n);
    }).then(function(t1) {
        var n13 = t1.wn, r7 = t1.readTime;
        return e2.$n = r7, n13;
    });
}
/**
 * Reads the newest document change from persistence and moves the internal
 * synchronization marker forward so that calls to `getNewDocumentChanges()`
 * only return changes that happened after client initialization.
 */ // PORTING NOTE: Multi-Tab only.
function Ji(t) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var e2;
        return _tslib.__generator(this, function(n13) {
            return [
                2,
                (e2 = F(t)).persistence.runTransaction("Synchronize last document change read time", "readonly", function(t1) {
                    return (function(t2) {
                        var e4 = Ni(t2), n15 = K.min();
                        // If there are no existing entries, we return SnapshotVersion.min().
                        return e4.$t({
                            index: ar.readTimeIndex,
                            reverse: true
                        }, function(t3, e5, r7) {
                            e5.readTime && (n15 = Ur(e5.readTime)), r7.done();
                        }).next(function() {
                            return n15;
                        });
                    })(t1);
                }).then(function(t1) {
                    e2.$n = t1;
                })
            ];
        });
    });
}
/**
 * Creates a new target using the given bundle name, which will be used to
 * hold the keys of all documents from the bundle in query-document mappings.
 * This ensures that the loaded documents do not get garbage collected
 * right away.
 */ /**
 * Applies the documents from a bundle to the "ground-state" (remote)
 * documents.
 *
 * LocalDocuments are re-calculated if there are remaining mutations in the
 * queue.
 */ function Zi(t, e2, i3, o) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var n13, s, u, a, c, h, f, l, d, p;
        return _tslib.__generator(this, function(r7) {
            switch(r7.label){
                case 0:
                    for(n13 = F(t), s = sn(), u = Ze(), a = rn(), c = 0, h = i3; c < h.length; c++)f = h[c], l = e2.qn(f.metadata.name), f.document && (s = s.add(l)), u = u.insert(l, e2.Un(f)), a = a.insert(l, e2.Kn(f.metadata.readTime));
                    return d = n13.On.newChangeBuffer({
                        trackRemovals: true
                    }), [
                        4,
                        Wi(n13, function(t1) {
                            // It is OK that the path used for the query is not valid, because this will
                            // not be read and queried.
                            return ne(Yt(H.fromString("__bundle__/docs/" + t1)));
                        }(o))
                    ];
                case 1:
                    // Allocates a target to hold all document keys from the bundle, such that
                    // they will not get garbage collected right away.
                    return p = r7.sent(), [
                        2,
                        n13.persistence.runTransaction("Apply bundle documents", "readwrite", function(t1) {
                            return Gi(t1, d, u, K.min(), a).next(function(e4) {
                                return d.apply(t1), e4;
                            }).next(function(e4) {
                                return n13.qe.removeMatchingKeysForTargetId(t1, p.targetId).next(function() {
                                    return n13.qe.addMatchingKeys(t1, s, p.targetId);
                                }).next(function() {
                                    return n13.Mn.En(t1, e4);
                                }).next(function() {
                                    return e4;
                                });
                            });
                        })
                    ];
            }
        });
    });
}
/**
 * Returns a promise of a boolean to indicate if the given bundle has already
 * been loaded and the create time is newer than the current loading bundle.
 */ /**
 * Saves the given `NamedQuery` to local persistence.
 */ function to(t, e2, i3) {
    return (void 0) === i3 && (i3 = sn()), _tslib.__awaiter(this, void 0, void 0, function() {
        var n13, o;
        return _tslib.__generator(this, function(r7) {
            switch(r7.label){
                case 0:
                    return [
                        4,
                        Wi(t, ne(zr(e2.bundledQuery)))
                    ];
                case 1:
                    return n13 = r7.sent(), [
                        2,
                        (o = F(t)).persistence.runTransaction("Save named query", "readwrite", function(t1) {
                            var r8 = _n(e2.readTime);
                            // Simply save the query itself if it is older than what the SDK already
                            // has.
                            if (n13.snapshotVersion.compareTo(r8) >= 0) return o.Ke.saveNamedQuery(t1, e2);
                            // Update existing target data because the query from the bundle is newer.
                            var s = n13.withResumeToken(J.EMPTY_BYTE_STRING, r8);
                            return o.kn = o.kn.insert(s.targetId, s), o.qe.updateTargetData(t1, s).next(function() {
                                return o.qe.removeMatchingKeysForTargetId(t1, n13.targetId);
                            }).next(function() {
                                return o.qe.addMatchingKeys(t1, i3, n13.targetId);
                            }).next(function() {
                                return o.Ke.saveNamedQuery(t1, e2);
                            });
                        })
                    ];
            }
        });
    });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var eo = /** @class */ function() {
    function t(t1) {
        this.R = t1, this.Qn = new Map, this.jn = new Map;
    }
    return t.prototype.getBundleMetadata = function(t1, e2) {
        return Ir.resolve(this.Qn.get(e2));
    }, t.prototype.saveBundleMetadata = function(t1, e2) {
        /** Decodes a BundleMetadata proto into a BundleMetadata object. */ var n13;
        return this.Qn.set(e2.id, {
            id: (n13 = e2).id,
            version: n13.version,
            createTime: _n(n13.createTime)
        }), Ir.resolve();
    }, t.prototype.getNamedQuery = function(t1, e2) {
        return Ir.resolve(this.jn.get(e2));
    }, t.prototype.saveNamedQuery = function(t1, e2) {
        return this.jn.set(e2.name, function(t2) {
            return {
                name: t2.name,
                query: zr(t2.bundledQuery),
                readTime: _n(t2.readTime)
            };
        }(e2)), Ir.resolve();
    }, t;
}(), no = /** @class */ function() {
    function t() {
        // A set of outstanding references to a document sorted by key.
        this.Wn = new $e(ro.Gn), // A set of outstanding references to a document sorted by target id.
        this.zn = new $e(ro.Hn);
    }
    return t.prototype.isEmpty = function() {
        return this.Wn.isEmpty();
    }, /** Adds a reference to the given document key for the given ID. */ t.prototype.addReference = function(t1, e2) {
        var n13 = new ro(t1, e2);
        this.Wn = this.Wn.add(n13), this.zn = this.zn.add(n13);
    }, /** Add references to the given document keys for the given ID. */ t.prototype.Jn = function(t1, e2) {
        var n13 = this;
        t1.forEach(function(t2) {
            return n13.addReference(t2, e2);
        });
    }, /**
     * Removes a reference to the given document key for the given
     * ID.
     */ t.prototype.removeReference = function(t1, e2) {
        this.Yn(new ro(t1, e2));
    }, t.prototype.Xn = function(t1, e2) {
        var n13 = this;
        t1.forEach(function(t2) {
            return n13.removeReference(t2, e2);
        });
    }, /**
     * Clears all references with a given ID. Calls removeRef() for each key
     * removed.
     */ t.prototype.Zn = function(t1) {
        var e2 = this, n13 = new ct(new H([])), r7 = new ro(n13, t1), i3 = new ro(n13, t1 + 1), o = [];
        return this.zn.forEachInRange([
            r7,
            i3
        ], function(t2) {
            e2.Yn(t2), o.push(t2.key);
        }), o;
    }, t.prototype.ts = function() {
        var t1 = this;
        this.Wn.forEach(function(e2) {
            return t1.Yn(e2);
        });
    }, t.prototype.Yn = function(t1) {
        this.Wn = this.Wn.delete(t1), this.zn = this.zn.delete(t1);
    }, t.prototype.es = function(t1) {
        var e2 = new ct(new H([])), n13 = new ro(e2, t1), r7 = new ro(e2, t1 + 1), i3 = sn();
        return this.zn.forEachInRange([
            n13,
            r7
        ], function(t2) {
            i3 = i3.add(t2.key);
        }), i3;
    }, t.prototype.containsKey = function(t1) {
        var e2 = new ro(t1, 0), n13 = this.Wn.firstAfterOrEqual(e2);
        return null !== n13 && t1.isEqual(n13.key);
    }, t;
}(), ro = /** @class */ function() {
    function t(t1, e2) {
        this.key = t1, this.ns = e2;
    }
    return t.Gn = function(t1, e2) {
        return ct.comparator(t1.key, e2.key) || q(t1.ns, e2.ns);
    }, /** Compare by ID then by key */ t.Hn = function(t1, e2) {
        return q(t1.ns, e2.ns) || ct.comparator(t1.key, e2.key);
    }, t;
}(), io = /** @class */ function() {
    function t(t1, e2) {
        this.Ut = t1, this.referenceDelegate = e2, /**
             * The set of all mutations that have been sent but not yet been applied to
             * the backend.
             */ this._n = [], /** Next value to use when assigning sequential IDs to each mutation batch. */ this.ss = 1, /** An ordered mapping between documents and the mutations batch IDs. */ this.rs = new $e(ro.Gn);
    }
    return t.prototype.checkEmpty = function(t1) {
        return Ir.resolve(0 === this._n.length);
    }, t.prototype.addMutationBatch = function(t1, e2, n13, r7) {
        var i3 = this.ss;
        this.ss++, this._n.length > 0 && this._n[this._n.length - 1];
        var o = new Lr(i3, e2, n13, r7);
        this._n.push(o);
        // Track references by document key and index collection parents.
        for(var s = 0, u = r7; s < u.length; s++){
            var a = u[s];
            this.rs = this.rs.add(new ro(a.key, i3)), this.Ut.addToCollectionParentIndex(t1, a.key.path.popLast());
        }
        return Ir.resolve(o);
    }, t.prototype.lookupMutationBatch = function(t1, e2) {
        return Ir.resolve(this.os(e2));
    }, t.prototype.getNextMutationBatchAfterBatchId = function(t1, e2) {
        var n13 = e2 + 1, r7 = this.cs(n13), i3 = r7 < 0 ? 0 : r7;
        // The requested batchId may still be out of range so normalize it to the
        // start of the queue.
        return Ir.resolve(this._n.length > i3 ? this._n[i3] : null);
    }, t.prototype.getHighestUnacknowledgedBatchId = function() {
        return Ir.resolve(0 === this._n.length ? -1 : this.ss - 1);
    }, t.prototype.getAllMutationBatches = function(t1) {
        return Ir.resolve(this._n.slice());
    }, t.prototype.getAllMutationBatchesAffectingDocumentKey = function(t1, e2) {
        var n13 = this, r7 = new ro(e2, 0), i3 = new ro(e2, Number.POSITIVE_INFINITY), o = [];
        return this.rs.forEachInRange([
            r7,
            i3
        ], function(t2) {
            var e4 = n13.os(t2.ns);
            o.push(e4);
        }), Ir.resolve(o);
    }, t.prototype.getAllMutationBatchesAffectingDocumentKeys = function(t1, e2) {
        var n13 = this, r7 = new $e(q);
        return e2.forEach(function(t2) {
            var e4 = new ro(t2, 0), i3 = new ro(t2, Number.POSITIVE_INFINITY);
            n13.rs.forEachInRange([
                e4,
                i3
            ], function(t3) {
                r7 = r7.add(t3.ns);
            });
        }), Ir.resolve(this.us(r7));
    }, t.prototype.getAllMutationBatchesAffectingQuery = function(t1, e2) {
        // Use the query path as a prefix for testing if a document matches the
        // query.
        var n13 = e2.path, r7 = n13.length + 1, i3 = n13;
        // Construct a document reference for actually scanning the index. Unlike
        // the prefix the document key in this reference must have an even number of
        // segments. The empty segment can be used a suffix of the query path
        // because it precedes all other segments in an ordered traversal.
        ct.isDocumentKey(i3) || (i3 = i3.child(""));
        var o = new ro(new ct(i3), 0), s = new $e(q);
        // Find unique batchIDs referenced by all documents potentially matching the
        // query.
        return this.rs.forEachWhile(function(t2) {
            var e4 = t2.key.path;
            return !!n13.isPrefixOf(e4) && // Rows with document keys more than one segment longer than the query
            // path can't be matches. For example, a query on 'rooms' can't match
            // the document /rooms/abc/messages/xyx.
            // TODO(mcg): we'll need a different scanner when we implement
            // ancestor queries.
            (e4.length === r7 && (s = s.add(t2.ns)), true);
        }, o), Ir.resolve(this.us(s));
    }, t.prototype.us = function(t1) {
        var e2 = this, n13 = [];
        // Construct an array of matching batches, sorted by batchID to ensure that
        // multiple mutations affecting the same document key are applied in order.
        return t1.forEach(function(t2) {
            var r7 = e2.os(t2);
            null !== r7 && n13.push(r7);
        }), n13;
    }, t.prototype.removeMutationBatch = function(t1, e2) {
        var n13 = this;
        P(0 === this.hs(e2.batchId, "removed")), this._n.shift();
        var r7 = this.rs;
        return Ir.forEach(e2.mutations, function(i3) {
            var o = new ro(i3.key, e2.batchId);
            return r7 = r7.delete(o), n13.referenceDelegate.markPotentiallyOrphaned(t1, i3.key);
        }).next(function() {
            n13.rs = r7;
        });
    }, t.prototype.Gt = function(t1) {
    // No-op since the memory mutation queue does not maintain a separate cache.
    }, t.prototype.containsKey = function(t1, e2) {
        var n13 = new ro(e2, 0), r7 = this.rs.firstAfterOrEqual(n13);
        return Ir.resolve(e2.isEqual(r7 && r7.key));
    }, t.prototype.performConsistencyCheck = function(t1) {
        return this._n.length, Ir.resolve();
    }, /**
     * Finds the index of the given batchId in the mutation queue and asserts that
     * the resulting index is within the bounds of the queue.
     *
     * @param batchId - The batchId to search for
     * @param action - A description of what the caller is doing, phrased in passive
     * form (e.g. "acknowledged" in a routine that acknowledges batches).
     */ t.prototype.hs = function(t1, e2) {
        return this.cs(t1);
    }, /**
     * Finds the index of the given batchId in the mutation queue. This operation
     * is O(1).
     *
     * @returns The computed index of the batch with the given batchId, based on
     * the state of the queue. Note this index can be negative if the requested
     * batchId has already been remvoed from the queue or past the end of the
     * queue if the batchId is larger than the last added batch.
     */ t.prototype.cs = function(t1) {
        return 0 === this._n.length ? 0 : t1 - this._n[0].batchId;
    // Examine the front of the queue to figure out the difference between the
    // batchId and indexes in the array. Note that since the queue is ordered
    // by batchId, if the first batch has a larger batchId then the requested
    // batchId doesn't exist in the queue.
    }, /**
     * A version of lookupMutationBatch that doesn't return a promise, this makes
     * other functions that uses this code easier to read and more efficent.
     */ t.prototype.os = function(t1) {
        var e2 = this.cs(t1);
        return e2 < 0 || e2 >= this._n.length ? null : this._n[e2];
    }, t;
}(), oo = /** @class */ function() {
    /**
     * @param sizer - Used to assess the size of a document. For eager GC, this is
     * expected to just return 0 to avoid unnecessarily doing the work of
     * calculating the size.
     */ function t(t1, e2) {
        this.Ut = t1, this.ls = e2, /** Underlying cache of documents and their read times. */ this.docs = new We(ct.comparator), /** Size of all cached documents. */ this.size = 0;
    }
    return t.prototype.addEntry = function(t1, e2, n13) {
        var r7 = e2.key, i3 = this.docs.get(r7), o = i3 ? i3.size : 0, s = this.ls(e2);
        return this.docs = this.docs.insert(r7, {
            document: e2.clone(),
            size: s,
            readTime: n13
        }), this.size += s - o, this.Ut.addToCollectionParentIndex(t1, r7.path.popLast());
    }, /**
     * Removes the specified entry from the cache and updates the cache size as appropriate.
     *
     * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()`.
     */ t.prototype.removeEntry = function(t1) {
        var e2 = this.docs.get(t1);
        e2 && (this.docs = this.docs.remove(t1), this.size -= e2.size);
    }, t.prototype.getEntry = function(t1, e2) {
        var n13 = this.docs.get(e2);
        return Ir.resolve(n13 ? n13.document.clone() : Nt.newInvalidDocument(e2));
    }, t.prototype.getEntries = function(t1, e2) {
        var n13 = this, r7 = Ze();
        return e2.forEach(function(t2) {
            var e4 = n13.docs.get(t2);
            r7 = r7.insert(t2, e4 ? e4.document.clone() : Nt.newInvalidDocument(t2));
        }), Ir.resolve(r7);
    }, t.prototype.getDocumentsMatchingQuery = function(t1, e2, n13) {
        for(var r7 = Ze(), i3 = new ct(e2.path.child("")), o = this.docs.getIteratorFrom(i3); o.hasNext();){
            var s = o.getNext(), u = s.key, a = s.value, c = a.document, h = a.readTime;
            if (!e2.path.isPrefixOf(u.path)) break;
            h.compareTo(n13) <= 0 || ue(e2, c) && (r7 = r7.insert(c.key, c.clone()));
        }
        return Ir.resolve(r7);
    }, t.prototype.fs = function(t1, e2) {
        return Ir.forEach(this.docs, function(t2) {
            return e2(t2);
        });
    }, t.prototype.newChangeBuffer = function(t1) {
        // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps
        // a separate changelog and does not need special handling for removals.
        return new so(this);
    }, t.prototype.getSize = function(t1) {
        return Ir.resolve(this.size);
    }, t;
}(), so = /** @class */ function(e2) {
    function n13(t) {
        var n15 = this;
        return (n15 = e2.call(this) || this).Ie = t, n15;
    }
    return _tslib.__extends(n13, e2), n13.prototype.applyChanges = function(t) {
        var e4 = this, n15 = [];
        return this.changes.forEach(function(r7, i3) {
            i3.document.isValidDocument() ? n15.push(e4.Ie.addEntry(t, i3.document, e4.getReadTime(r7))) : e4.Ie.removeEntry(r7);
        }), Ir.waitFor(n15);
    }, n13.prototype.getFromCache = function(t, e4) {
        return this.Ie.getEntry(t, e4);
    }, n13.prototype.getAllFromCache = function(t, e4) {
        return this.Ie.getEntries(t, e4);
    }, n13;
}(Ti), uo = /** @class */ function() {
    function t(t1) {
        this.persistence = t1, /**
             * Maps a target to the data about that target
             */ this.ds = new Ii(function(t2) {
            return kt(t2);
        }, Ct), /** The last received snapshot version. */ this.lastRemoteSnapshotVersion = K.min(), /** The highest numbered target ID encountered. */ this.highestTargetId = 0, /** The highest sequence number encountered. */ this.ws = 0, /**
             * A ordered bidirectional mapping between documents and the remote target
             * IDs.
             */ this._s = new no, this.targetCount = 0, this.ys = ci.Jt();
    }
    return t.prototype.forEachTarget = function(t1, e2) {
        return this.ds.forEach(function(t2, n13) {
            return e2(n13);
        }), Ir.resolve();
    }, t.prototype.getLastRemoteSnapshotVersion = function(t1) {
        return Ir.resolve(this.lastRemoteSnapshotVersion);
    }, t.prototype.getHighestSequenceNumber = function(t1) {
        return Ir.resolve(this.ws);
    }, t.prototype.allocateTargetId = function(t1) {
        return this.highestTargetId = this.ys.next(), Ir.resolve(this.highestTargetId);
    }, t.prototype.setTargetsMetadata = function(t1, e2, n13) {
        return n13 && (this.lastRemoteSnapshotVersion = n13), e2 > this.ws && (this.ws = e2), Ir.resolve();
    }, t.prototype.te = function(t1) {
        this.ds.set(t1.target, t1);
        var e2 = t1.targetId;
        e2 > this.highestTargetId && (this.ys = new ci(e2), this.highestTargetId = e2), t1.sequenceNumber > this.ws && (this.ws = t1.sequenceNumber);
    }, t.prototype.addTargetData = function(t1, e2) {
        return this.te(e2), this.targetCount += 1, Ir.resolve();
    }, t.prototype.updateTargetData = function(t1, e2) {
        return this.te(e2), Ir.resolve();
    }, t.prototype.removeTargetData = function(t1, e2) {
        return this.ds.delete(e2.target), this._s.Zn(e2.targetId), this.targetCount -= 1, Ir.resolve();
    }, t.prototype.removeTargets = function(t1, e2, n13) {
        var r7 = this, i3 = 0, o = [];
        return this.ds.forEach(function(s, u) {
            u.sequenceNumber <= e2 && null === n13.get(u.targetId) && (r7.ds.delete(s), o.push(r7.removeMatchingKeysForTargetId(t1, u.targetId)), i3++);
        }), Ir.waitFor(o).next(function() {
            return i3;
        });
    }, t.prototype.getTargetCount = function(t1) {
        return Ir.resolve(this.targetCount);
    }, t.prototype.getTargetData = function(t1, e2) {
        var n13 = this.ds.get(e2) || null;
        return Ir.resolve(n13);
    }, t.prototype.addMatchingKeys = function(t1, e2, n13) {
        return this._s.Jn(e2, n13), Ir.resolve();
    }, t.prototype.removeMatchingKeys = function(t1, e2, n13) {
        this._s.Xn(e2, n13);
        var r7 = this.persistence.referenceDelegate, i3 = [];
        return r7 && e2.forEach(function(e4) {
            i3.push(r7.markPotentiallyOrphaned(t1, e4));
        }), Ir.waitFor(i3);
    }, t.prototype.removeMatchingKeysForTargetId = function(t1, e2) {
        return this._s.Zn(e2), Ir.resolve();
    }, t.prototype.getMatchingKeysForTargetId = function(t1, e2) {
        var n13 = this._s.es(e2);
        return Ir.resolve(n13);
    }, t.prototype.containsKey = function(t1, e2) {
        return Ir.resolve(this._s.containsKey(e2));
    }, t;
}(), ao = /** @class */ function() {
    /**
     * The constructor accepts a factory for creating a reference delegate. This
     * allows both the delegate and this instance to have strong references to
     * each other without having nullable fields that would then need to be
     * checked or asserted on every access.
     */ function t(t1, e2) {
        var n13 = this;
        this.gs = {
        }, this.Ne = new S(0), this.xe = false, this.xe = true, this.referenceDelegate = t1(this), this.qe = new uo(this), this.Ut = new $r, this.Ue = (function(t2, e4) {
            return new oo(t2, function(t3) {
                return n13.referenceDelegate.ps(t3);
            });
        })(this.Ut), this.R = new Fr(e2), this.Ke = new eo(this.R);
    }
    return t.prototype.start = function() {
        return Promise.resolve();
    }, t.prototype.shutdown = function() {
        // No durable state to ensure is closed on shutdown.
        return this.xe = false, Promise.resolve();
    }, Object.defineProperty(t.prototype, "started", {
        get: function() {
            return this.xe;
        },
        enumerable: false,
        configurable: true
    }), t.prototype.setDatabaseDeletedListener = function() {
    // No op.
    }, t.prototype.setNetworkEnabled = function() {
    // No op.
    }, t.prototype.getIndexManager = function() {
        return this.Ut;
    }, t.prototype.getMutationQueue = function(t1) {
        var e2 = this.gs[t1.toKey()];
        return e2 || (e2 = new io(this.Ut, this.referenceDelegate), this.gs[t1.toKey()] = e2), e2;
    }, t.prototype.getTargetCache = function() {
        return this.qe;
    }, t.prototype.getRemoteDocumentCache = function() {
        return this.Ue;
    }, t.prototype.getBundleCache = function() {
        return this.Ke;
    }, t.prototype.runTransaction = function(t1, e2, n13) {
        var r7 = this;
        C("MemoryPersistence", "Starting transaction:", t1);
        var i3 = new co(this.Ne.next());
        return this.referenceDelegate.Es(), n13(i3).next(function(t2) {
            return r7.referenceDelegate.Ts(i3).next(function() {
                return t2;
            });
        }).toPromise().then(function(t2) {
            return i3.raiseOnCommittedEvent(), t2;
        });
    }, t.prototype.Is = function(t1, e2) {
        return Ir.or(Object.values(this.gs).map(function(n13) {
            return function() {
                return n13.containsKey(t1, e2);
            };
        }));
    }, t;
}(), co = /** @class */ function(e2) {
    function n13(t) {
        var n15 = this;
        return (n15 = e2.call(this) || this).currentSequenceNumber = t, n15;
    }
    return _tslib.__extends(n13, e2), n13;
}(wr), ho = /** @class */ function() {
    function t(t1) {
        this.persistence = t1, /** Tracks all documents that are active in Query views. */ this.As = new no, /** The list of documents that are potentially GCed after each transaction. */ this.Rs = null;
    }
    return t.bs = function(e2) {
        return new t(e2);
    }, Object.defineProperty(t.prototype, "vs", {
        get: function() {
            if (this.Rs) return this.Rs;
            throw O();
        },
        enumerable: false,
        configurable: true
    }), t.prototype.addReference = function(t1, e2, n13) {
        return this.As.addReference(n13, e2), this.vs.delete(n13.toString()), Ir.resolve();
    }, t.prototype.removeReference = function(t1, e2, n13) {
        return this.As.removeReference(n13, e2), this.vs.add(n13.toString()), Ir.resolve();
    }, t.prototype.markPotentiallyOrphaned = function(t1, e2) {
        return this.vs.add(e2.toString()), Ir.resolve();
    }, t.prototype.removeTarget = function(t1, e2) {
        var n13 = this;
        this.As.Zn(e2.targetId).forEach(function(t2) {
            return n13.vs.add(t2.toString());
        });
        var r7 = this.persistence.getTargetCache();
        return r7.getMatchingKeysForTargetId(t1, e2.targetId).next(function(t2) {
            t2.forEach(function(t3) {
                return n13.vs.add(t3.toString());
            });
        }).next(function() {
            return r7.removeTargetData(t1, e2);
        });
    }, t.prototype.Es = function() {
        this.Rs = new Set;
    }, t.prototype.Ts = function(t1) {
        var e2 = this, n13 = this.persistence.getRemoteDocumentCache().newChangeBuffer();
        // Remove newly orphaned documents.
        return Ir.forEach(this.vs, function(r7) {
            var i3 = ct.fromPath(r7);
            return e2.Ps(t1, i3).next(function(t2) {
                t2 || n13.removeEntry(i3);
            });
        }).next(function() {
            return e2.Rs = null, n13.apply(t1);
        });
    }, t.prototype.updateLimboDocument = function(t1, e2) {
        var n13 = this;
        return this.Ps(t1, e2).next(function(t2) {
            t2 ? n13.vs.delete(e2.toString()) : n13.vs.add(e2.toString());
        });
    }, t.prototype.ps = function(t1) {
        // For eager GC, we don't care about the document size, there are no size thresholds.
        return 0;
    }, t.prototype.Ps = function(t1, e2) {
        var n13 = this;
        return Ir.or([
            function() {
                return Ir.resolve(n13.As.containsKey(e2));
            },
            function() {
                return n13.persistence.getTargetCache().containsKey(t1, e2);
            },
            function() {
                return n13.persistence.Is(t1, e2);
            }
        ]);
    }, t;
}(), fo = /** @class */ function() {
    function t(t1) {
        this.uid = t1;
    }
    return t.prototype.isAuthenticated = function() {
        return null != this.uid;
    }, /**
     * Returns a key representing this user, suitable for inclusion in a
     * dictionary.
     */ t.prototype.toKey = function() {
        return this.isAuthenticated() ? "uid:" + this.uid : "anonymous-user";
    }, t.prototype.isEqual = function(t1) {
        return t1.uid === this.uid;
    }, t;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A collection of references to a document from some kind of numbered entity
 * (either a target ID or batch ID). As references are added to or removed from
 * the set corresponding events are emitted to a registered garbage collector.
 *
 * Each reference is represented by a DocumentReference object. Each of them
 * contains enough information to uniquely identify the reference. They are all
 * stored primarily in a set sorted by key. A document is considered garbage if
 * there's no references in that set (this can be efficiently checked thanks to
 * sorting by key).
 *
 * ReferenceSet also keeps a secondary set that contains references sorted by
 * IDs. This one is used to efficiently implement removal of all references by
 * some target ID.
 */ /** Assembles the key for a client state in WebStorage */ function lo(t, e2) {
    return "firestore_clients_" + t + "_" + e2;
}
// The format of the WebStorage key that stores the mutation state is:
//     firestore_mutations_<persistence_prefix>_<batch_id>
//     (for unauthenticated users)
// or: firestore_mutations_<persistence_prefix>_<batch_id>_<user_uid>
// 'user_uid' is last to avoid needing to escape '_' characters that it might
// contain.
/** Assembles the key for a mutation batch in WebStorage */ function po(t, e2, n13) {
    var r7 = "firestore_mutations_" + t + "_" + n13;
    return e2.isAuthenticated() && (r7 += "_" + e2.uid), r7;
}
// The format of the WebStorage key that stores a query target's metadata is:
//     firestore_targets_<persistence_prefix>_<target_id>
/** Assembles the key for a query state in WebStorage */ function yo(t, e2) {
    return "firestore_targets_" + t + "_" + e2;
}
// The WebStorage prefix that stores the primary tab's online state. The
// format of the key is:
//     firestore_online_state_<persistence_prefix>
/**
 * Holds the state of a mutation batch, including its user ID, batch ID and
 * whether the batch is 'pending', 'acknowledged' or 'rejected'.
 */ // Visible for testing
/** A user with a null UID. */ fo.UNAUTHENTICATED = new fo(null), // TODO(mikelehen): Look into getting a proper uid-equivalent for
// non-FirebaseAuth providers.
fo.GOOGLE_CREDENTIALS = new fo("google-credentials-uid"), fo.FIRST_PARTY = new fo("first-party-uid"), fo.MOCK_USER = new fo("mock-user");
var vo = /** @class */ function() {
    function t(t1, e2, n13, r7) {
        this.user = t1, this.batchId = e2, this.state = n13, this.error = r7;
    }
    return t.Vs = function(e2, n13, r7) {
        var i3, o = JSON.parse(r7), s = "object" == typeof o && -1 !== [
            "pending",
            "acknowledged",
            "rejected"
        ].indexOf(o.state) && ((void 0) === o.error || "object" == typeof o.error);
        return s && o.error && (s = "string" == typeof o.error.message && "string" == typeof o.error.code) && (i3 = new D(o.error.code, o.error.message)), s ? new t(e2, n13, o.state, i3) : (x("SharedClientState", "Failed to parse mutation state for ID '" + n13 + "': " + r7), null);
    }, t.prototype.Ss = function() {
        var t1 = {
            state: this.state,
            updateTimeMs: Date.now()
        };
        return this.error && (t1.error = {
            code: this.error.code,
            message: this.error.message
        }), JSON.stringify(t1);
    }, t;
}(), mo = /** @class */ function() {
    function t(t1, e2, n13) {
        this.targetId = t1, this.state = e2, this.error = n13;
    }
    return t.Vs = function(e2, n13) {
        var r7, i3 = JSON.parse(n13), o = "object" == typeof i3 && -1 !== [
            "not-current",
            "current",
            "rejected"
        ].indexOf(i3.state) && ((void 0) === i3.error || "object" == typeof i3.error);
        return o && i3.error && (o = "string" == typeof i3.error.message && "string" == typeof i3.error.code) && (r7 = new D(i3.error.code, i3.error.message)), o ? new t(e2, i3.state, r7) : (x("SharedClientState", "Failed to parse target state for ID '" + e2 + "': " + n13), null);
    }, t.prototype.Ss = function() {
        var t1 = {
            state: this.state,
            updateTimeMs: Date.now()
        };
        return this.error && (t1.error = {
            code: this.error.code,
            message: this.error.message
        }), JSON.stringify(t1);
    }, t;
}(), go = /** @class */ function() {
    function t(t1, e2) {
        this.clientId = t1, this.activeTargetIds = e2;
    }
    return t.Vs = function(e2, n13) {
        for(var r7 = JSON.parse(n13), i3 = "object" == typeof r7 && r7.activeTargetIds instanceof Array, o = an(), s = 0; i3 && s < r7.activeTargetIds.length; ++s)i3 = at(r7.activeTargetIds[s]), o = o.add(r7.activeTargetIds[s]);
        return i3 ? new t(e2, o) : (x("SharedClientState", "Failed to parse client data for instance '" + e2 + "': " + n13), null);
    }, t;
}(), wo = /** @class */ function() {
    function t(t1, e2) {
        this.clientId = t1, this.onlineState = e2;
    }
    return t.Vs = function(e2) {
        var n13 = JSON.parse(e2);
        return "object" == typeof n13 && -1 !== [
            "Unknown",
            "Online",
            "Offline"
        ].indexOf(n13.onlineState) && "string" == typeof n13.clientId ? new t(n13.clientId, n13.onlineState) : (x("SharedClientState", "Failed to parse online state: " + e2), null);
    }, t;
}(), bo = /** @class */ function() {
    function t() {
        this.activeTargetIds = an();
    }
    return t.prototype.Ds = function(t1) {
        this.activeTargetIds = this.activeTargetIds.add(t1);
    }, t.prototype.Cs = function(t1) {
        this.activeTargetIds = this.activeTargetIds.delete(t1);
    }, /**
     * Converts this entry into a JSON-encoded format we can use for WebStorage.
     * Does not encode `clientId` as it is part of the key in WebStorage.
     */ t.prototype.Ss = function() {
        var t1 = {
            activeTargetIds: this.activeTargetIds.toArray(),
            updateTimeMs: Date.now()
        };
        return JSON.stringify(t1);
    }, t;
}(), Io = /** @class */ function() {
    function t(t1, e2, n13, r7, i3) {
        this.window = t1, this.Se = e2, this.persistenceKey = n13, this.Ns = r7, this.syncEngine = null, this.onlineStateHandler = null, this.sequenceNumberHandler = null, this.xs = this.ks.bind(this), this.Fs = new We(q), this.started = false, /**
             * Captures WebStorage events that occur before `start()` is called. These
             * events are replayed once `WebStorageSharedClientState` is started.
             */ this.$s = [];
        // Escape the special characters mentioned here:
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
        var o = n13.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
        this.storage = this.window.localStorage, this.currentUser = i3, this.Os = lo(this.persistenceKey, this.Ns), this.Ms = /** Assembles the key for the current sequence number. */ (function(t2) {
            return "firestore_sequence_number_" + t2;
        })(this.persistenceKey), this.Fs = this.Fs.insert(this.Ns, new bo), this.Ls = new RegExp("^firestore_clients_" + o + "_([^_]*)$"), this.Bs = new RegExp("^firestore_mutations_" + o + "_(\\d+)(?:_(.*))?$"), this.qs = new RegExp("^firestore_targets_" + o + "_(\\d+)$"), this.Us = /** Assembles the key for the online state of the primary tab. */ (function(t2) {
            return "firestore_online_state_" + t2;
        })(this.persistenceKey), this.Ks = (function(t2) {
            return "firestore_bundle_loaded_" + t2;
        })(this.persistenceKey), // Rather than adding the storage observer during start(), we add the
        // storage observer during initialization. This ensures that we collect
        // events before other components populate their initial state (during their
        // respective start() calls). Otherwise, we might for example miss a
        // mutation that is added after LocalStore's start() processed the existing
        // mutations but before we observe WebStorage events.
        this.window.addEventListener("storage", this.xs);
    }
    /** Returns 'true' if WebStorage is available in the current environment. */ return t.yt = function(t1) {
        return !(!t1 || !t1.localStorage);
    }, t.prototype.start = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var t1, e2, n13, i3, o, s, u, a, c, h, f, l = this;
            return _tslib.__generator(this, function(r7) {
                switch(r7.label){
                    case 0:
                        return [
                            4,
                            this.syncEngine.fn()
                        ];
                    case 1:
                        for(t1 = r7.sent(), e2 = 0, n13 = t1; e2 < n13.length; e2++)(i3 = n13[e2]) !== this.Ns && (o = this.getItem(lo(this.persistenceKey, i3))) && (s = go.Vs(i3, o)) && (this.Fs = this.Fs.insert(s.clientId, s));
                        for(this.Qs(), (u = this.storage.getItem(this.Us)) && (a = this.js(u)) && this.Ws(a), c = 0, h = this.$s; c < h.length; c++)f = h[c], this.ks(f);
                        return this.$s = [], // Register a window unload hook to remove the client metadata entry from
                        // WebStorage even if `shutdown()` was not called.
                        this.window.addEventListener("pagehide", function() {
                            return l.shutdown();
                        }), this.started = true, [
                            2
                        ];
                }
            });
        });
    }, t.prototype.writeSequenceNumber = function(t1) {
        this.setItem(this.Ms, JSON.stringify(t1));
    }, t.prototype.getAllActiveQueryTargets = function() {
        return this.Gs(this.Fs);
    }, t.prototype.isActiveQueryTarget = function(t1) {
        var e2 = false;
        return this.Fs.forEach(function(n13, r7) {
            r7.activeTargetIds.has(t1) && (e2 = true);
        }), e2;
    }, t.prototype.addPendingMutation = function(t1) {
        this.zs(t1, "pending");
    }, t.prototype.updateMutationState = function(t1, e2, n13) {
        this.zs(t1, e2, n13), // Once a final mutation result is observed by other clients, they no longer
        // access the mutation's metadata entry. Since WebStorage replays events
        // in order, it is safe to delete the entry right after updating it.
        this.Hs(t1);
    }, t.prototype.addLocalQueryTarget = function(t1) {
        var e2 = "not-current";
        // Lookup an existing query state if the target ID was already registered
        // by another tab
        if (this.isActiveQueryTarget(t1)) {
            var n13 = this.storage.getItem(yo(this.persistenceKey, t1));
            if (n13) {
                var r7 = mo.Vs(t1, n13);
                r7 && (e2 = r7.state);
            }
        }
        return this.Js.Ds(t1), this.Qs(), e2;
    }, t.prototype.removeLocalQueryTarget = function(t1) {
        this.Js.Cs(t1), this.Qs();
    }, t.prototype.isLocalQueryTarget = function(t1) {
        return this.Js.activeTargetIds.has(t1);
    }, t.prototype.clearQueryState = function(t1) {
        this.removeItem(yo(this.persistenceKey, t1));
    }, t.prototype.updateQueryState = function(t1, e2, n15) {
        this.Ys(t1, e2, n15);
    }, t.prototype.handleUserChange = function(t1, e2, n15) {
        var r8 = this;
        e2.forEach(function(t2) {
            r8.Hs(t2);
        }), this.currentUser = t1, n15.forEach(function(t2) {
            r8.addPendingMutation(t2);
        });
    }, t.prototype.setOnlineState = function(t1) {
        this.Xs(t1);
    }, t.prototype.notifyBundleLoaded = function() {
        this.Zs();
    }, t.prototype.shutdown = function() {
        this.started && (this.window.removeEventListener("storage", this.xs), this.removeItem(this.Os), this.started = false);
    }, t.prototype.getItem = function(t1) {
        var e2 = this.storage.getItem(t1);
        return C("SharedClientState", "READ", t1, e2), e2;
    }, t.prototype.setItem = function(t1, e2) {
        C("SharedClientState", "SET", t1, e2), this.storage.setItem(t1, e2);
    }, t.prototype.removeItem = function(t1) {
        C("SharedClientState", "REMOVE", t1), this.storage.removeItem(t1);
    }, t.prototype.ks = function(t1) {
        var e2 = this, i3 = t1;
        // Note: The function is typed to take Event to be interface-compatible with
        // `Window.addEventListener`.
        if (i3.storageArea === this.storage) {
            if (C("SharedClientState", "EVENT", i3.key, i3.newValue), i3.key === this.Os) return void x("Received WebStorage notification for local change. Another client might have garbage-collected our state");
            this.Se.enqueueRetryable(function() {
                return _tslib.__awaiter(e2, void 0, void 0, function() {
                    var t2, e4, n15, o, s, u;
                    return _tslib.__generator(this, function(r8) {
                        if (this.started) {
                            if (null !== i3.key) {
                                if (this.Ls.test(i3.key)) {
                                    if (null == i3.newValue) return t2 = this.ti(i3.key), [
                                        2,
                                        this.ei(t2, null)
                                    ];
                                    if (e4 = this.ni(i3.key, i3.newValue)) return [
                                        2,
                                        this.ei(e4.clientId, e4)
                                    ];
                                } else if (this.Bs.test(i3.key)) {
                                    if (null !== i3.newValue && (n15 = this.si(i3.key, i3.newValue))) return [
                                        2,
                                        this.ii(n15)
                                    ];
                                } else if (this.qs.test(i3.key)) {
                                    if (null !== i3.newValue && (o = this.ri(i3.key, i3.newValue))) return [
                                        2,
                                        this.oi(o)
                                    ];
                                } else if (i3.key === this.Us) {
                                    if (null !== i3.newValue && (s = this.js(i3.newValue))) return [
                                        2,
                                        this.Ws(s)
                                    ];
                                } else if (i3.key === this.Ms) (u = (function(t3) {
                                    var e5 = S.o;
                                    if (null != t3) try {
                                        var n16 = JSON.parse(t3);
                                        P("number" == typeof n16), e5 = n16;
                                    } catch (t4) {
                                        x("SharedClientState", "Failed to read sequence number from WebStorage", t4);
                                    }
                                    return e5;
                                })(i3.newValue)) !== S.o && this.sequenceNumberHandler(u);
                                else if (i3.key === this.Ks) return [
                                    2,
                                    this.syncEngine.ci()
                                ];
                            }
                        } else this.$s.push(i3);
                        return [
                            2
                        ];
                    });
                });
            });
        }
    }, Object.defineProperty(t.prototype, "Js", {
        get: function() {
            return this.Fs.get(this.Ns);
        },
        enumerable: false,
        configurable: true
    }), t.prototype.Qs = function() {
        this.setItem(this.Os, this.Js.Ss());
    }, t.prototype.zs = function(t1, e2, n15) {
        var r8 = new vo(this.currentUser, t1, e2, n15), i3 = po(this.persistenceKey, this.currentUser, t1);
        this.setItem(i3, r8.Ss());
    }, t.prototype.Hs = function(t1) {
        var e2 = po(this.persistenceKey, this.currentUser, t1);
        this.removeItem(e2);
    }, t.prototype.Xs = function(t1) {
        var e2 = {
            clientId: this.Ns,
            onlineState: t1
        };
        this.storage.setItem(this.Us, JSON.stringify(e2));
    }, t.prototype.Ys = function(t1, e2, n15) {
        var r8 = yo(this.persistenceKey, t1), i3 = new mo(t1, e2, n15);
        this.setItem(r8, i3.Ss());
    }, t.prototype.Zs = function() {
        this.setItem(this.Ks, "value-not-used");
    }, /**
     * Parses a client state key in WebStorage. Returns null if the key does not
     * match the expected key format.
     */ t.prototype.ti = function(t1) {
        var e2 = this.Ls.exec(t1);
        return e2 ? e2[1] : null;
    }, /**
     * Parses a client state in WebStorage. Returns 'null' if the value could not
     * be parsed.
     */ t.prototype.ni = function(t1, e2) {
        var n15 = this.ti(t1);
        return go.Vs(n15, e2);
    }, /**
     * Parses a mutation batch state in WebStorage. Returns 'null' if the value
     * could not be parsed.
     */ t.prototype.si = function(t1, e2) {
        var n15 = this.Bs.exec(t1), r8 = Number(n15[1]), i3 = (void 0) !== n15[2] ? n15[2] : null;
        return vo.Vs(new fo(i3), r8, e2);
    }, /**
     * Parses a query target state from WebStorage. Returns 'null' if the value
     * could not be parsed.
     */ t.prototype.ri = function(t1, e2) {
        var n15 = this.qs.exec(t1), r8 = Number(n15[1]);
        return mo.Vs(r8, e2);
    }, /**
     * Parses an online state from WebStorage. Returns 'null' if the value
     * could not be parsed.
     */ t.prototype.js = function(t1) {
        return wo.Vs(t1);
    }, t.prototype.ii = function(t1) {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            return _tslib.__generator(this, function(e2) {
                return t1.user.uid === this.currentUser.uid ? [
                    2,
                    this.syncEngine.ui(t1.batchId, t1.state, t1.error)
                ] : (C("SharedClientState", "Ignoring mutation for non-active user " + t1.user.uid), [
                    2
                ]);
            });
        });
    }, t.prototype.oi = function(t1) {
        return this.syncEngine.ai(t1.targetId, t1.state, t1.error);
    }, t.prototype.ei = function(t1, e2) {
        var n15 = this, r8 = e2 ? this.Fs.insert(t1, e2) : this.Fs.remove(t1), i3 = this.Gs(this.Fs), o = this.Gs(r8), s = [], u = [];
        return o.forEach(function(t2) {
            i3.has(t2) || s.push(t2);
        }), i3.forEach(function(t2) {
            o.has(t2) || u.push(t2);
        }), this.syncEngine.hi(s, u).then(function() {
            n15.Fs = r8;
        });
    }, t.prototype.Ws = function(t1) {
        // We check whether the client that wrote this online state is still active
        // by comparing its client ID to the list of clients kept active in
        // IndexedDb. If a client does not update their IndexedDb client state
        // within 5 seconds, it is considered inactive and we don't emit an online
        // state event.
        this.Fs.get(t1.clientId) && this.onlineStateHandler(t1.onlineState);
    }, t.prototype.Gs = function(t1) {
        var e2 = an();
        return t1.forEach(function(t2, n15) {
            e2 = e2.unionWith(n15.activeTargetIds);
        }), e2;
    }, t;
}(), To = /** @class */ function() {
    function t() {
        this.li = new bo, this.fi = {
        }, this.onlineStateHandler = null, this.sequenceNumberHandler = null;
    }
    return t.prototype.addPendingMutation = function(t1) {
    // No op.
    }, t.prototype.updateMutationState = function(t1, e2, n15) {
    // No op.
    }, t.prototype.addLocalQueryTarget = function(t1) {
        return this.li.Ds(t1), this.fi[t1] || "not-current";
    }, t.prototype.updateQueryState = function(t1, e2, n15) {
        this.fi[t1] = e2;
    }, t.prototype.removeLocalQueryTarget = function(t1) {
        this.li.Cs(t1);
    }, t.prototype.isLocalQueryTarget = function(t1) {
        return this.li.activeTargetIds.has(t1);
    }, t.prototype.clearQueryState = function(t1) {
        delete this.fi[t1];
    }, t.prototype.getAllActiveQueryTargets = function() {
        return this.li.activeTargetIds;
    }, t.prototype.isActiveQueryTarget = function(t1) {
        return this.li.activeTargetIds.has(t1);
    }, t.prototype.start = function() {
        return this.li = new bo, Promise.resolve();
    }, t.prototype.handleUserChange = function(t1, e2, n15) {
    // No op.
    }, t.prototype.setOnlineState = function(t1) {
    // No op.
    }, t.prototype.shutdown = function() {
    }, t.prototype.writeSequenceNumber = function(t1) {
    }, t.prototype.notifyBundleLoaded = function() {
    // No op.
    }, t;
}(), Eo = /** @class */ function() {
    function t() {
    }
    return t.prototype.di = function(t1) {
    // No-op.
    }, t.prototype.shutdown = function() {
    // No-op.
    }, t;
}(), _o = /** @class */ function() {
    function t() {
        var t1 = this;
        this.wi = function() {
            return t1._i();
        }, this.mi = function() {
            return t1.yi();
        }, this.gi = [], this.pi();
    }
    return t.prototype.di = function(t1) {
        this.gi.push(t1);
    }, t.prototype.shutdown = function() {
        window.removeEventListener("online", this.wi), window.removeEventListener("offline", this.mi);
    }, t.prototype.pi = function() {
        window.addEventListener("online", this.wi), window.addEventListener("offline", this.mi);
    }, t.prototype._i = function() {
        C("ConnectivityMonitor", "Network connectivity changed: AVAILABLE");
        for(var t1 = 0, e2 = this.gi; t1 < e2.length; t1++)e2[t1](0/* AVAILABLE */ );
    }, t.prototype.yi = function() {
        C("ConnectivityMonitor", "Network connectivity changed: UNAVAILABLE");
        for(var t1 = 0, e2 = this.gi; t1 < e2.length; t1++)e2[t1](1/* UNAVAILABLE */ );
    }, // TODO(chenbrian): Consider passing in window either into this component or
    // here for testing via FakeWindow.
    /** Checks that all used attributes of window are available. */ t.yt = function() {
        return "undefined" != typeof window && (void 0) !== window.addEventListener && (void 0) !== window.removeEventListener;
    }, t;
}(), So = {
    BatchGetDocuments: "batchGet",
    Commit: "commit",
    RunQuery: "runQuery"
}, No = /** @class */ function() {
    function t(t1) {
        this.Ei = t1.Ei, this.Ti = t1.Ti;
    }
    return t.prototype.Ii = function(t1) {
        this.Ai = t1;
    }, t.prototype.Ri = function(t1) {
        this.bi = t1;
    }, t.prototype.onMessage = function(t1) {
        this.vi = t1;
    }, t.prototype.close = function() {
        this.Ti();
    }, t.prototype.send = function(t1) {
        this.Ei(t1);
    }, t.prototype.Pi = function() {
        this.Ai();
    }, t.prototype.Vi = function(t1) {
        this.bi(t1);
    }, t.prototype.Si = function(t1) {
        this.vi(t1);
    }, t;
}(), Do = /** @class */ function(e2) {
    function n15(t) {
        var n16 = this;
        return (n16 = e2.call(this, t) || this).forceLongPolling = t.forceLongPolling, n16.autoDetectLongPolling = t.autoDetectLongPolling, n16.useFetchStreams = t.useFetchStreams, n16;
    }
    /**
     * Base class for all Rest-based connections to the backend (WebChannel and
     * HTTP).
     */ return _tslib.__extends(n15, e2), n15.prototype.Fi = function(t, e4, n16, r8) {
        return new Promise(function(i3, o) {
            var s = new _webchannelWrapper.XhrIo;
            s.listenOnce(_webchannelWrapper.EventType.COMPLETE, function() {
                try {
                    switch(s.getLastErrorCode()){
                        case _webchannelWrapper.ErrorCode.NO_ERROR:
                            var e5 = s.getResponseJson();
                            C("Connection", "XHR received:", JSON.stringify(e5)), i3(e5);
                            break;
                        case _webchannelWrapper.ErrorCode.TIMEOUT:
                            C("Connection", 'RPC "' + t + '" timed out'), o(new D(N.DEADLINE_EXCEEDED, "Request time out"));
                            break;
                        case _webchannelWrapper.ErrorCode.HTTP_ERROR:
                            var n17 = s.getStatus();
                            if (C("Connection", 'RPC "' + t + '" failed with status:', n17, "response text:", s.getResponseText()), n17 > 0) {
                                var r9 = s.getResponseJson().error;
                                if (r9 && r9.status && r9.message) {
                                    var u = function(t1) {
                                        var e6 = t1.toLowerCase().replace(/_/g, "-");
                                        return Object.values(N).indexOf(e6) >= 0 ? e6 : N.UNKNOWN;
                                    }(r9.status);
                                    o(new D(u, r9.message));
                                } else o(new D(N.UNKNOWN, "Server responded with status " + s.getStatus()));
                            } else // If we received an HTTP_ERROR but there's no status code,
                            // it's most probably a connection issue
                            o(new D(N.UNAVAILABLE, "Connection failed."));
                            break;
                        default:
                            O();
                    }
                } finally{
                    C("Connection", 'RPC "' + t + '" completed.');
                }
            });
            var u = JSON.stringify(r8);
            s.send(e4, "POST", u, n16, 15);
        });
    }, n15.prototype.Oi = function(t, e4) {
        var n16 = [
            this.Di,
            "/",
            "google.firestore.v1.Firestore",
            "/",
            t,
            "/channel"
        ], r8 = _webchannelWrapper.createWebChannelTransport(), i3 = _webchannelWrapper.getStatEventTarget(), o = {
            // Required for backend stickiness, routing behavior is based on this
            // parameter.
            httpSessionIdParam: "gsessionid",
            initMessageHeaders: {
            },
            messageUrlParams: {
                // This param is used to improve routing and project isolation by the
                // backend and must be included in every request.
                database: "projects/" + this.databaseId.projectId + "/databases/" + this.databaseId.database
            },
            sendRawJson: true,
            supportsCrossDomainXhr: true,
            internalChannelParams: {
                // Override the default timeout (randomized between 10-20 seconds) since
                // a large write batch on a slow internet connection may take a long
                // time to send to the backend. Rather than have WebChannel impose a
                // tight timeout which could lead to infinite timeouts and retries, we
                // set it very large (5-10 minutes) and rely on the browser's builtin
                // timeouts to kick in if the request isn't working.
                forwardChannelRequestTimeoutMs: 600000
            },
            forceLongPolling: this.forceLongPolling,
            detectBufferingProxy: this.autoDetectLongPolling
        };
        this.useFetchStreams && (o.xmlHttpFactory = new _webchannelWrapper.FetchXmlHttpFactory({
        })), this.ki(o.initMessageHeaders, e4), // Sending the custom headers we just added to request.initMessageHeaders
        // (Authorization, etc.) will trigger the browser to make a CORS preflight
        // request because the XHR will no longer meet the criteria for a "simple"
        // CORS request:
        // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
        // Therefore to avoid the CORS preflight request (an extra network
        // roundtrip), we use the httpHeadersOverwriteParam option to specify that
        // the headers should instead be encoded into a special "$httpHeaders" query
        // parameter, which is recognized by the webchannel backend. This is
        // formally defined here:
        // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32
        // TODO(b/145624756): There is a backend bug where $httpHeaders isn't respected if the request
        // doesn't have an Origin header. So we have to exclude a few browser environments that are
        // known to (sometimes) not include an Origin. See
        // https://github.com/firebase/firebase-js-sdk/issues/1491.
        _util.isMobileCordova() || _util.isReactNative() || _util.isElectron() || _util.isIE() || _util.isUWP() || _util.isBrowserExtension() || (o.httpHeadersOverwriteParam = "$httpHeaders");
        var l = n16.join("");
        C("Connection", "Creating WebChannel: " + l, o);
        var d = r8.createWebChannel(l, o), p = false, y = false, v = new No({
            Ei: function(t1) {
                y ? C("Connection", "Not sending because WebChannel is closed:", t1) : (p || (C("Connection", "Opening WebChannel transport."), d.open(), p = true), C("Connection", "WebChannel sending:", t1), d.send(t1));
            },
            Ti: function() {
                return d.close();
            }
        }), m = function(t1, e5, n17) {
            // TODO(dimond): closure typing seems broken because WebChannel does
            // not implement goog.events.Listenable
            t1.listen(e5, function(t2) {
                try {
                    n17(t2);
                } catch (t3) {
                    setTimeout(function() {
                        throw t3;
                    }, 0);
                }
            });
        };
        // WebChannel supports sending the first message with the handshake - saving
        // a network round trip. However, it will have to call send in the same
        // JS event loop as open. In order to enforce this, we delay actually
        // opening the WebChannel until send is called. Whether we have called
        // open is tracked with this variable.
        // Closure events are guarded and exceptions are swallowed, so catch any
        // exception and rethrow using a setTimeout so they become visible again.
        // Note that eventually this function could go away if we are confident
        // enough the code is exception free.
        return m(d, _webchannelWrapper.WebChannel.EventType.OPEN, function() {
            y || C("Connection", "WebChannel transport opened.");
        }), m(d, _webchannelWrapper.WebChannel.EventType.CLOSE, function() {
            y || (y = true, C("Connection", "WebChannel transport closed"), v.Vi());
        }), m(d, _webchannelWrapper.WebChannel.EventType.ERROR, function(t1) {
            y || (y = true, R("Connection", "WebChannel transport errored:", t1), v.Vi(new D(N.UNAVAILABLE, "The operation could not be completed")));
        }), m(d, _webchannelWrapper.WebChannel.EventType.MESSAGE, function(t1) {
            var e5;
            if (!y) {
                var n17 = t1.data[0];
                P(!!n17);
                // TODO(b/35143891): There is a bug in One Platform that caused errors
                // (and only errors) to be wrapped in an extra array. To be forward
                // compatible with the bug we need to check either condition. The latter
                // can be removed once the fix has been rolled out.
                // Use any because msgData.error is not typed.
                var r10 = n17, i4 = r10.error || (null === (e5 = r10[0]) || (void 0) === e5 ? void 0 : e5.error);
                if (i4) {
                    C("Connection", "WebChannel received error:", i4);
                    // error.status will be a string like 'OK' or 'NOT_FOUND'.
                    var o1 = i4.status, s = /**
 * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
 *
 * @returns The Code equivalent to the given status string or undefined if
 *     there is no match.
 */ function(t2) {
                        // lookup by string
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        var e6 = Ue[t2];
                        if ((void 0) !== e6) return ze(e6);
                    }(o1), u = i4.message;
                    (void 0) === s && (s = N.INTERNAL, u = "Unknown error status: " + o1 + " with message " + i4.message), // Mark closed so no further events are propagated
                    y = true, v.Vi(new D(s, u)), d.close();
                } else C("Connection", "WebChannel received:", n17), v.Si(n17);
            }
        }), m(i3, _webchannelWrapper.Event.STAT_EVENT, function(t1) {
            t1.stat === _webchannelWrapper.Stat.PROXY ? C("Connection", "Detected buffering proxy") : t1.stat === _webchannelWrapper.Stat.NOPROXY && C("Connection", "Detected no buffering proxy");
        }), setTimeout(function() {
            // Technically we could/should wait for the WebChannel opened event,
            // but because we want to send the first message with the WebChannel
            // handshake we pretend the channel opened here (asynchronously), and
            // then delay the actual open until the first message is sent.
            v.Pi();
        }, 0), v;
    }, n15;
}(/** @class */ function() {
    function t(t1) {
        this.databaseInfo = t1, this.databaseId = t1.databaseId;
        var e2 = t1.ssl ? "https" : "http";
        this.Di = e2 + "://" + t1.host, this.Ci = "projects/" + this.databaseId.projectId + "/databases/" + this.databaseId.database + "/documents";
    }
    return t.prototype.Ni = function(t1, e2, n15, r8) {
        var i3 = this.xi(t1, e2);
        C("RestConnection", "Sending: ", i3, n15);
        var o2 = {
        };
        return this.ki(o2, r8), this.Fi(t1, i3, o2, n15).then(function(t2) {
            return C("RestConnection", "Received: ", t2), t2;
        }, function(e4) {
            throw R("RestConnection", t1 + " failed with error: ", e4, "url: ", i3, "request:", n15), e4;
        });
    }, t.prototype.$i = function(t1, e2, n15, r8) {
        // The REST API automatically aggregates all of the streamed results, so we
        // can just use the normal invoke() method.
        return this.Ni(t1, e2, n15, r8);
    }, /**
     * Modifies the headers for a request, adding any authorization token if
     * present and any additional headers for the request.
     */ t.prototype.ki = function(t1, e2) {
        if (t1["X-Goog-Api-Client"] = "gl-js/ fire/8.10.0", // Content-Type: text/plain will avoid preflight requests which might
        // mess with CORS and redirects by proxies. If we add custom headers
        // we will need to change this code to potentially use the $httpOverwrite
        // parameter supported by ESF to avoid triggering preflight requests.
        t1["Content-Type"] = "text/plain", this.databaseInfo.appId && (t1["X-Firebase-GMPID"] = this.databaseInfo.appId), e2) for(var n15 in e2.authHeaders)e2.authHeaders.hasOwnProperty(n15) && (t1[n15] = e2.authHeaders[n15]);
    }, t.prototype.xi = function(t1, e2) {
        var n15 = So[t1];
        return this.Di + "/v1/" + e2 + ":" + n15;
    }, t;
}());
/**
 * Holds the state of a query target, including its target ID and whether the
 * target is 'not-current', 'current' or 'rejected'.
 */ // Visible for testing
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Initializes the WebChannelConnection for the browser. */ /**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** The Platform's 'window' implementation or null if not available. */ function Ao() {
    // `window` is not always available, e.g. in ReactNative and WebWorkers.
    // eslint-disable-next-line no-restricted-globals
    return "undefined" != typeof window ? window : null;
}
/** The Platform's 'document' implementation or null if not available. */ function ko() {
    // `document` is not always available, e.g. in ReactNative and WebWorkers.
    // eslint-disable-next-line no-restricted-globals
    return "undefined" != typeof document ? document : null;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function Co(t) {
    return new bn(t, /* useProto3Json= */ true);
}
/**
 * An instance of the Platform's 'TextEncoder' implementation.
 */ /**
 * A helper for running delayed tasks following an exponential backoff curve
 * between attempts.
 *
 * Each delay is made up of a "base" delay which follows the exponential
 * backoff curve, and a +/- 50% "jitter" that is calculated and added to the
 * base delay. This prevents clients from accidentally synchronizing their
 * delays causing spikes of load to the backend.
 */ var xo = /** @class */ function() {
    function t(/**
     * The AsyncQueue to run backoff operations on.
     */ t1, /**
     * The ID to use when scheduling backoff operations on the AsyncQueue.
     */ e2, /**
     * The initial delay (used as the base delay on the first retry attempt).
     * Note that jitter will still be applied, so the actual delay could be as
     * little as 0.5*initialDelayMs.
     */ n15, r8, i3) {
        (void 0) === n15 && (n15 = 1000), (void 0) === r8 && (r8 = 1.5), (void 0) === i3 && (i3 = 60000), this.Se = t1, this.timerId = e2, this.Mi = n15, this.Li = r8, this.Bi = i3, this.qi = 0, this.Ui = null, /** The last backoff attempt, as epoch milliseconds. */ this.Ki = Date.now(), this.reset();
    }
    /**
     * Resets the backoff delay.
     *
     * The very next backoffAndWait() will have no delay. If it is called again
     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
     * subsequent ones will increase according to the backoffFactor.
     */ return t.prototype.reset = function() {
        this.qi = 0;
    }, /**
     * Resets the backoff delay to the maximum delay (e.g. for use after a
     * RESOURCE_EXHAUSTED error).
     */ t.prototype.Qi = function() {
        this.qi = this.Bi;
    }, /**
     * Returns a promise that resolves after currentDelayMs, and increases the
     * delay for any subsequent attempts. If there was a pending backoff operation
     * already, it will be canceled.
     */ t.prototype.ji = function(t1) {
        var e2 = this;
        // Cancel any pending backoff operation.
        this.cancel();
        // First schedule using the current base (which may be 0 and should be
        // honored as such).
        var n15 = Math.floor(this.qi + this.Wi()), r8 = Math.max(0, Date.now() - this.Ki), i3 = Math.max(0, n15 - r8);
        // Guard against lastAttemptTime being in the future due to a clock change.
        i3 > 0 && C("ExponentialBackoff", "Backing off for " + i3 + " ms (base delay: " + this.qi + " ms, delay with jitter: " + n15 + " ms, last attempt: " + r8 + " ms ago)"), this.Ui = this.Se.enqueueAfterDelay(this.timerId, i3, function() {
            return e2.Ki = Date.now(), t1();
        }), // Apply backoff factor to determine next delay and ensure it is within
        // bounds.
        this.qi *= this.Li, this.qi < this.Mi && (this.qi = this.Mi), this.qi > this.Bi && (this.qi = this.Bi);
    }, t.prototype.Gi = function() {
        null !== this.Ui && (this.Ui.skipDelay(), this.Ui = null);
    }, t.prototype.cancel = function() {
        null !== this.Ui && (this.Ui.cancel(), this.Ui = null);
    }, /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */ t.prototype.Wi = function() {
        return (Math.random() - 0.5) * this.qi;
    }, t;
}(), Ro = /** @class */ function() {
    function t(t1, e2, n15, r8, i3, o2) {
        this.Se = t1, this.zi = n15, this.Hi = r8, this.Ji = i3, this.listener = o2, this.state = 0, /**
             * A close count that's incremented every time the stream is closed; used by
             * getCloseGuardedDispatcher() to invalidate callbacks that happen after
             * close.
             */ this.Yi = 0, this.Xi = null, this.stream = null, this.Zi = new xo(t1, e2);
    }
    return t.prototype.tr = function() {
        return 1 === this.state || 2 === this.state || 4 === this.state;
    }, /**
     * Returns true if the underlying RPC is open (the onOpen() listener has been
     * called) and the stream is ready for outbound requests.
     */ t.prototype.er = function() {
        return 2 === this.state;
    }, /**
     * Starts the RPC. Only allowed if isStarted() returns false. The stream is
     * not immediately ready for use: onOpen() will be invoked when the RPC is
     * ready for outbound requests, at which point isOpen() will return true.
     *
     * When start returns, isStarted() will return true.
     */ t.prototype.start = function() {
        3 !== this.state ? this.auth() : this.nr();
    }, /**
     * Stops the RPC. This call is idempotent and allowed regardless of the
     * current isStarted() state.
     *
     * When stop returns, isStarted() and isOpen() will both return false.
     */ t.prototype.stop = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            return _tslib.__generator(this, function(t1) {
                switch(t1.label){
                    case 0:
                        return this.tr() ? [
                            4,
                            this.close(0/* Initial */ )
                        ] : [
                            3,
                            2
                        ];
                    case 1:
                        t1.sent(), t1.label = 2;
                    case 2:
                        return [
                            2
                        ];
                }
            });
        });
    }, /**
     * After an error the stream will usually back off on the next attempt to
     * start it. If the error warrants an immediate restart of the stream, the
     * sender can use this to indicate that the receiver should not back off.
     *
     * Each error will call the onClose() listener. That function can decide to
     * inhibit backoff if required.
     */ t.prototype.sr = function() {
        this.state = 0, this.Zi.reset();
    }, /**
     * Marks this stream as idle. If no further actions are performed on the
     * stream for one minute, the stream will automatically close itself and
     * notify the stream's onClose() handler with Status.OK. The stream will then
     * be in a !isStarted() state, requiring the caller to start the stream again
     * before further use.
     *
     * Only streams that are in state 'Open' can be marked idle, as all other
     * states imply pending network operations.
     */ t.prototype.ir = function() {
        var t1 = this;
        // Starts the idle time if we are in state 'Open' and are not yet already
        // running a timer (in which case the previous idle timeout still applies).
        this.er() && null === this.Xi && (this.Xi = this.Se.enqueueAfterDelay(this.zi, 60000, function() {
            return t1.rr();
        }));
    }, /** Sends a message to the underlying stream. */ t.prototype.cr = function(t1) {
        this.ur(), this.stream.send(t1);
    }, /** Called by the idle timer when the stream should close due to inactivity. */ t.prototype.rr = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            return _tslib.__generator(this, function(t1) {
                return this.er() ? [
                    2,
                    this.close(0/* Initial */ )
                ] : [
                    2
                ];
            });
        });
    }, /** Marks the stream as active again. */ t.prototype.ur = function() {
        this.Xi && (this.Xi.cancel(), this.Xi = null);
    }, /**
     * Closes the stream and cleans up as necessary:
     *
     * * closes the underlying GRPC stream;
     * * calls the onClose handler with the given 'error';
     * * sets internal stream state to 'finalState';
     * * adjusts the backoff timer based on the error
     *
     * A new stream can be opened by calling start().
     *
     * @param finalState - the intended state of the stream after closing.
     * @param error - the error the connection was closed with.
     */ t.prototype.close = function(t1, e2) {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            return _tslib.__generator(this, function(n15) {
                switch(n15.label){
                    case 0:
                        // Notify the listener that the stream closed.
                        // Cancel any outstanding timers (they're guaranteed not to execute).
                        return this.ur(), this.Zi.cancel(), // Invalidates any stream-related callbacks (e.g. from auth or the
                        // underlying stream), guaranteeing they won't execute.
                        this.Yi++, 3 !== t1 ? // If this is an intentional close ensure we don't delay our next connection attempt.
                        this.Zi.reset() : e2 && e2.code === N.RESOURCE_EXHAUSTED ? // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
                        (x(e2.toString()), x("Using maximum backoff delay to prevent overloading the backend."), this.Zi.Qi()) : e2 && e2.code === N.UNAUTHENTICATED && // "unauthenticated" error means the token was rejected. Try force refreshing it in case it
                        // just expired.
                        this.Ji.invalidateToken(), // Clean up the underlying stream because we are no longer interested in events.
                        null !== this.stream && (this.ar(), this.stream.close(), this.stream = null), // This state must be assigned before calling onClose() to allow the callback to
                        // inhibit backoff or otherwise manipulate the state in its non-started state.
                        this.state = t1, [
                            4,
                            this.listener.Ri(e2)
                        ];
                    case 1:
                        // Cancel any outstanding timers (they're guaranteed not to execute).
                        // Notify the listener that the stream closed.
                        return n15.sent(), [
                            2
                        ];
                }
            });
        });
    }, /**
     * Can be overridden to perform additional cleanup before the stream is closed.
     * Calling super.tearDown() is not required.
     */ t.prototype.ar = function() {
    }, t.prototype.auth = function() {
        var t1 = this;
        this.state = 1;
        var e2 = this.hr(this.Yi), n15 = this.Yi;
        // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.
        this.Ji.getToken().then(function(e4) {
            // Stream can be stopped while waiting for authentication.
            // TODO(mikelehen): We really should just use dispatchIfNotClosed
            // and let this dispatch onto the queue, but that opened a spec test can
            // of worms that I don't want to deal with in this PR.
            t1.Yi === n15 && // Normally we'd have to schedule the callback on the AsyncQueue.
            // However, the following calls are safe to be called outside the
            // AsyncQueue since they don't chain asynchronous calls
            t1.lr(e4);
        }, function(n16) {
            e2(function() {
                var e4 = new D(N.UNKNOWN, "Fetching auth token failed: " + n16.message);
                return t1.dr(e4);
            });
        });
    }, t.prototype.lr = function(t1) {
        var e2 = this, n15 = this.hr(this.Yi);
        this.stream = this.wr(t1), this.stream.Ii(function() {
            n15(function() {
                return e2.state = 2, e2.listener.Ii();
            });
        }), this.stream.Ri(function(t2) {
            n15(function() {
                return e2.dr(t2);
            });
        }), this.stream.onMessage(function(t2) {
            n15(function() {
                return e2.onMessage(t2);
            });
        });
    }, t.prototype.nr = function() {
        var t1 = this;
        this.state = 4, this.Zi.ji(function() {
            return _tslib.__awaiter(t1, void 0, void 0, function() {
                return _tslib.__generator(this, function(t2) {
                    return this.state = 0, this.start(), [
                        2
                    ];
                });
            });
        });
    }, // Visible for tests
    t.prototype.dr = function(t1) {
        // In theory the stream could close cleanly, however, in our current model
        // we never expect this to happen because if we stop a stream ourselves,
        // this callback will never be called. To prevent cases where we retry
        // without a backoff accidentally, we set the stream to error in all cases.
        return C("PersistentStream", "close with error: " + t1), this.stream = null, this.close(3/* Error */ , t1);
    }, /**
     * Returns a "dispatcher" function that dispatches operations onto the
     * AsyncQueue but only runs them if closeCount remains unchanged. This allows
     * us to turn auth / stream callbacks into no-ops if the stream is closed /
     * re-opened, etc.
     */ t.prototype.hr = function(t1) {
        var e2 = this;
        return function(n15) {
            e2.Se.enqueueAndForget(function() {
                return e2.Yi === t1 ? n15() : (C("PersistentStream", "stream callback skipped by getCloseGuardedDispatcher."), Promise.resolve());
            });
        };
    }, t;
}(), Lo = /** @class */ function(e2) {
    function n15(t, n16, r8, i3, o2) {
        var s = this;
        return (s = e2.call(this, t, "listen_stream_connection_backoff"/* ListenStreamConnectionBackoff */ , "listen_stream_idle"/* ListenStreamIdle */ , n16, r8, o2) || this).R = i3, s;
    }
    return _tslib.__extends(n15, e2), n15.prototype.wr = function(t) {
        return this.Hi.Oi("Listen", t);
    }, n15.prototype.onMessage = function(t) {
        // A successful response means the stream is healthy
        this.Zi.reset();
        var e4 = function(t1, e5) {
            var n16;
            if ("targetChange" in e5) {
                e5.targetChange;
                // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'
                // if unset
                var r8 = function(t2) {
                    return "NO_CHANGE" === t2 ? 0 : "ADD" === t2 ? 1 : "REMOVE" === t2 ? 2 : "CURRENT" === t2 ? 3 : "RESET" === t2 ? 4 : O();
                }(e5.targetChange.targetChangeType || "NO_CHANGE"), i3 = e5.targetChange.targetIds || [], o2 = function(t2, e6) {
                    return t2.I ? (P((void 0) === e6 || "string" == typeof e6), J.fromBase64String(e6 || "")) : (P((void 0) === e6 || e6 instanceof Uint8Array), J.fromUint8Array(e6 || new Uint8Array));
                }(t1, e5.targetChange.resumeToken), s = (u = e5.targetChange.cause) && function(t2) {
                    var e6 = (void 0) === t2.code ? N.UNKNOWN : ze(t2.code);
                    return new D(e6, t2.message || "");
                }(u);
                n16 = new dn(r8, i3, o2, s || null);
            } else if ("documentChange" in e5) {
                e5.documentChange, (r8 = e5.documentChange).document, r8.document.name, r8.document.updateTime, i3 = An(t1, r8.document.name), o2 = _n(r8.document.updateTime);
                var u = new _t({
                    mapValue: {
                        fields: r8.document.fields
                    }
                }), a = (s = Nt.newFoundDocument(i3, o2, u), r8.targetIds || []), c = r8.removedTargetIds || [];
                n16 = new fn(a, c, s.key, s);
            } else if ("documentDelete" in e5) e5.documentDelete, (r8 = e5.documentDelete).document, i3 = An(t1, r8.document), o2 = r8.readTime ? _n(r8.readTime) : K.min(), u = Nt.newNoDocument(i3, o2), s = r8.removedTargetIds || [], n16 = new fn([], s, u.key, u);
            else if ("documentRemove" in e5) e5.documentRemove, (r8 = e5.documentRemove).document, i3 = An(t1, r8.document), o2 = r8.removedTargetIds || [], n16 = new fn([], o2, i3, null);
            else {
                if (!("filter" in e5)) return O();
                e5.filter;
                var h = e5.filter;
                h.targetId, r8 = h.count || 0, i3 = new Qe(r8), o2 = h.targetId, n16 = new ln(o2, i3);
            }
            return n16;
        }(this.R, t), n16 = function(t1) {
            // We have only reached a consistent snapshot for the entire stream if there
            // is a read_time set and it applies to all targets (i.e. the list of
            // targets is empty). The backend is guaranteed to send such responses.
            if (!("targetChange" in t1)) return K.min();
            var e5 = t1.targetChange;
            return e5.targetIds && e5.targetIds.length ? K.min() : e5.readTime ? _n(e5.readTime) : K.min();
        }(t);
        return this.listener._r(e4, n16);
    }, /**
     * Registers interest in the results of the given target. If the target
     * includes a resumeToken it will be included in the request. Results that
     * affect the target will be streamed back as WatchChange messages that
     * reference the targetId.
     */ n15.prototype.mr = function(t) {
        var e4 = {
        };
        e4.database = xn(this.R), e4.addTarget = (function(t1, e5) {
            var n16, r11 = e5.target;
            return (n16 = xt(r11) ? {
                documents: Mn(t1, r11)
            } : {
                query: Vn(t1, r11)
            }).targetId = e5.targetId, e5.resumeToken.approximateByteSize() > 0 ? n16.resumeToken = Tn(t1, e5.resumeToken) : e5.snapshotVersion.compareTo(K.min()) > 0 && // TODO(wuandy): Consider removing above check because it is most likely true.
            // Right now, many tests depend on this behaviour though (leaving min() out
            // of serialization).
            (n16.readTime = In(t1, e5.snapshotVersion.toTimestamp())), n16;
        })(this.R, t);
        var n16 = function(t1, e5) {
            var n18 = function(t2, e6) {
                switch(e6){
                    case 0:
                        return null;
                    case 1:
                        return "existence-filter-mismatch";
                    case 2:
                        return "limbo-document";
                    default:
                        return O();
                }
            }(0, e5.purpose);
            return null == n18 ? null : {
                "goog-listen-tags": n18
            };
        }(this.R, t);
        n16 && (e4.labels = n16), this.cr(e4);
    }, /**
     * Unregisters interest in the results of the target associated with the
     * given targetId.
     */ n15.prototype.yr = function(t) {
        var e4 = {
        };
        e4.database = xn(this.R), e4.removeTarget = t, this.cr(e4);
    }, n15;
}(Ro), Oo = /** @class */ function(e2) {
    function n15(t, n16, r11, i5, o3) {
        var s = this;
        return (s = e2.call(this, t, "write_stream_connection_backoff"/* WriteStreamConnectionBackoff */ , "write_stream_idle"/* WriteStreamIdle */ , n16, r11, o3) || this).R = i5, s.gr = false, s;
    }
    return _tslib.__extends(n15, e2), Object.defineProperty(n15.prototype, "pr", {
        /**
         * Tracks whether or not a handshake has been successfully exchanged and
         * the stream is ready to accept mutations.
         */ get: function() {
            return this.gr;
        },
        enumerable: false,
        configurable: true
    }), // Override of PersistentStream.start
    n15.prototype.start = function() {
        this.gr = false, this.lastStreamToken = void 0, e2.prototype.start.call(this);
    }, n15.prototype.ar = function() {
        this.gr && this.Er([]);
    }, n15.prototype.wr = function(t) {
        return this.Hi.Oi("Write", t);
    }, n15.prototype.onMessage = function(t) {
        if (// Always capture the last stream token.
        P(!!t.streamToken), this.lastStreamToken = t.streamToken, this.gr) {
            // A successful first write response means the stream is healthy,
            // Note, that we could consider a successful handshake healthy, however,
            // the write itself might be causing an error we want to back off from.
            this.Zi.reset();
            var e4 = function(t1, e5) {
                return t1 && t1.length > 0 ? (P((void 0) !== e5), t1.map(function(t2) {
                    return (function(t3, e6) {
                        // NOTE: Deletes don't have an updateTime.
                        var n16 = t3.updateTime ? _n(t3.updateTime) : _n(e6);
                        return n16.isEqual(K.min()) && // The Firestore Emulator currently returns an update time of 0 for
                        // deletes of non-existing documents (rather than null). This breaks the
                        // test "get deleted doc while offline with source=cache" as NoDocuments
                        // with version 0 are filtered by IndexedDb's RemoteDocumentCache.
                        // TODO(#2149): Remove this when Emulator is fixed
                        (n16 = _n(e6)), new Ne(n16, t3.transformResults || []);
                    })(t2, e5);
                })) : [];
            }(t.writeResults, t.commitTime), n16 = _n(t.commitTime);
            return this.listener.Tr(n16, e4);
        }
        // The first response is always the handshake response
        return P(!t.writeResults || 0 === t.writeResults.length), this.gr = true, this.listener.Ir();
    }, /**
     * Sends an initial streamToken to the server, performing the handshake
     * required to make the StreamingWrite RPC work. Subsequent
     * calls should wait until onHandshakeComplete was called.
     */ n15.prototype.Ar = function() {
        // TODO(dimond): Support stream resumption. We intentionally do not set the
        // stream token on the handshake, ignoring any stream token we might have.
        var t = {
        };
        t.database = xn(this.R), this.cr(t);
    }, /** Sends a group of mutations to the Firestore backend to apply. */ n15.prototype.Er = function(t) {
        var e5 = this, n18 = {
            streamToken: this.lastStreamToken,
            writes: t.map(function(t1) {
                return Pn(e5.R, t1);
            })
        };
        this.cr(n18);
    }, n15;
}(Ro), Po = /** @class */ function(e2) {
    function n15(t, n18, r11) {
        var i5 = this;
        return (i5 = e2.call(this) || this).credentials = t, i5.Hi = n18, i5.R = r11, i5.Rr = false, i5;
    }
    return _tslib.__extends(n15, e2), n15.prototype.br = function() {
        if (this.Rr) throw new D(N.FAILED_PRECONDITION, "The client has already been terminated.");
    }, /** Gets an auth token and invokes the provided RPC. */ n15.prototype.Ni = function(t, e5, n18) {
        var r11 = this;
        return this.br(), this.credentials.getToken().then(function(i5) {
            return r11.Hi.Ni(t, e5, n18, i5);
        }).catch(function(t1) {
            throw "FirebaseError" === t1.name ? (t1.code === N.UNAUTHENTICATED && r11.credentials.invalidateToken(), t1) : new D(N.UNKNOWN, t1.toString());
        });
    }, /** Gets an auth token and invokes the provided RPC with streamed results. */ n15.prototype.$i = function(t, e5, n18) {
        var r11 = this;
        return this.br(), this.credentials.getToken().then(function(i5) {
            return r11.Hi.$i(t, e5, n18, i5);
        }).catch(function(t1) {
            throw "FirebaseError" === t1.name ? (t1.code === N.UNAUTHENTICATED && r11.credentials.invalidateToken(), t1) : new D(N.UNKNOWN, t1.toString());
        });
    }, n15.prototype.terminate = function() {
        this.Rr = true;
    }, n15;
}(function() {
}), Fo = /** @class */ function() {
    function t(t1, e2) {
        this.asyncQueue = t1, this.onlineStateHandler = e2, /** The current OnlineState. */ this.state = "Unknown", /**
             * A count of consecutive failures to open the stream. If it reaches the
             * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
             * Offline.
             */ this.vr = 0, /**
             * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
             * transition from OnlineState.Unknown to OnlineState.Offline without waiting
             * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
             */ this.Pr = null, /**
             * Whether the client should log a warning message if it fails to connect to
             * the backend (initially true, cleared after a successful stream, or if we've
             * logged the message already).
             */ this.Vr = true;
    }
    return t.prototype.Sr = function() {
        var t1 = this;
        0 === this.vr && (this.Dr("Unknown"/* Unknown */ ), this.Pr = this.asyncQueue.enqueueAfterDelay("online_state_timeout"/* OnlineStateTimeout */ , 10000, function() {
            return t1.Pr = null, t1.Cr("Backend didn't respond within 10 seconds."), t1.Dr("Offline"/* Offline */ ), Promise.resolve();
        }));
    }, /**
     * Updates our OnlineState as appropriate after the watch stream reports a
     * failure. The first failure moves us to the 'Unknown' state. We then may
     * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
     * actually transition to the 'Offline' state.
     */ t.prototype.Nr = function(t1) {
        "Online" === this.state ? this.Dr("Unknown"/* Unknown */ ) : (this.vr++, this.vr >= 1 && (this.kr(), this.Cr("Connection failed 1 times. Most recent error: " + t1.toString()), this.Dr("Offline"/* Offline */ )));
    }, /**
     * Explicitly sets the OnlineState to the specified state.
     *
     * Note that this resets our timers / failure counters, etc. used by our
     * Offline heuristics, so must not be used in place of
     * handleWatchStreamStart() and handleWatchStreamFailure().
     */ t.prototype.set = function(t1) {
        this.kr(), this.vr = 0, "Online" === t1 && // We've connected to watch at least once. Don't warn the developer
        // about being offline going forward.
        (this.Vr = false), this.Dr(t1);
    }, t.prototype.Dr = function(t1) {
        t1 !== this.state && (this.state = t1, this.onlineStateHandler(t1));
    }, t.prototype.Cr = function(t1) {
        var e2 = "Could not reach Cloud Firestore backend. " + t1 + "\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.";
        this.Vr ? (x(e2), this.Vr = false) : C("OnlineStateTracker", e2);
    }, t.prototype.kr = function() {
        null !== this.Pr && (this.Pr.cancel(), this.Pr = null);
    }, t;
}(), Mo = function(/**
     * The local store, used to fill the write pipeline with outbound mutations.
     */ t, /** The client-side proxy for interacting with the backend. */ e2, i5, o3, s) {
    var u = this;
    this.localStore = t, this.datastore = e2, this.asyncQueue = i5, this.remoteSyncer = {
    }, /**
             * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
             * LocalStore via fillWritePipeline() and have or will send to the write
             * stream.
             *
             * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
             * restart the write stream. When the stream is established the writes in the
             * pipeline will be sent in order.
             *
             * Writes remain in writePipeline until they are acknowledged by the backend
             * and thus will automatically be re-sent if the stream is interrupted /
             * restarted before they're acknowledged.
             *
             * Write responses from the backend are linked to their originating request
             * purely based on order, and so we can just shift() writes from the front of
             * the writePipeline as we receive responses.
             */ this.Fr = [], /**
             * A mapping of watched targets that the client cares about tracking and the
             * user has explicitly called a 'listen' for this target.
             *
             * These targets may or may not have been sent to or acknowledged by the
             * server. On re-establishing the listen stream, these targets should be sent
             * to the server. The targets removed with unlistens are removed eagerly
             * without waiting for confirmation from the listen stream.
             */ this.$r = new Map, /**
             * A set of reasons for why the RemoteStore may be offline. If empty, the
             * RemoteStore may start its network connections.
             */ this.Or = new Set, /**
             * Event handlers that get called when the network is disabled or enabled.
             *
             * PORTING NOTE: These functions are used on the Web client to create the
             * underlying streams (to support tree-shakeable streams). On Android and iOS,
             * the streams are created during construction of RemoteStore.
             */ this.Mr = [], this.Lr = s, this.Lr.di(function(t1) {
        i5.enqueueAndForget(function() {
            return _tslib.__awaiter(u, void 0, void 0, function() {
                return _tslib.__generator(this, function(t2) {
                    switch(t2.label){
                        case 0:
                            return zo(this) ? (C("RemoteStore", "Restarting streams for network reachability change."), [
                                4,
                                function(t3) {
                                    return _tslib.__awaiter(this, void 0, void 0, function() {
                                        var e5;
                                        return _tslib.__generator(this, function(n15) {
                                            switch(n15.label){
                                                case 0:
                                                    return (e5 = F(t3)).Or.add(4/* ConnectivityChange */ ), [
                                                        4,
                                                        qo(e5)
                                                    ];
                                                case 1:
                                                    return n15.sent(), e5.Br.set("Unknown"/* Unknown */ ), e5.Or.delete(4/* ConnectivityChange */ ), [
                                                        4,
                                                        Vo(e5)
                                                    ];
                                                case 2:
                                                    return n15.sent(), [
                                                        2
                                                    ];
                                            }
                                        });
                                    });
                                }(this)
                            ]) : [
                                3,
                                2
                            ];
                        case 1:
                            t2.sent(), t2.label = 2;
                        case 2:
                            return [
                                2
                            ];
                    }
                });
            });
        });
    }), this.Br = new Fo(i5, o3);
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A PersistentStream is an abstract base class that represents a streaming RPC
 * to the Firestore backend. It's built on top of the connections own support
 * for streaming RPCs, and adds several critical features for our clients:
 *
 *   - Exponential backoff on failure
 *   - Authentication via CredentialsProvider
 *   - Dispatching all callbacks into the shared worker queue
 *   - Closing idle streams after 60 seconds of inactivity
 *
 * Subclasses of PersistentStream implement serialization of models to and
 * from the JSON representation of the protocol buffers for a specific
 * streaming RPC.
 *
 * ## Starting and Stopping
 *
 * Streaming RPCs are stateful and need to be start()ed before messages can
 * be sent and received. The PersistentStream will call the onOpen() function
 * of the listener once the stream is ready to accept requests.
 *
 * Should a start() fail, PersistentStream will call the registered onClose()
 * listener with a FirestoreError indicating what went wrong.
 *
 * A PersistentStream can be started and stopped repeatedly.
 *
 * Generic types:
 *  SendType: The type of the outgoing message of the underlying
 *    connection stream
 *  ReceiveType: The type of the incoming message of the underlying
 *    connection stream
 *  ListenerType: The type of the listener that will be used for callbacks
 */ function Vo(t) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var e2, n15;
        return _tslib.__generator(this, function(r11) {
            switch(r11.label){
                case 0:
                    if (!zo(t)) return [
                        3,
                        4
                    ];
                    e2 = 0, n15 = t.Mr, r11.label = 1;
                case 1:
                    return e2 < n15.length ? [
                        4,
                        n15[e2](/* enabled= */ true)
                    ] : [
                        3,
                        4
                    ];
                case 2:
                    r11.sent(), r11.label = 3;
                case 3:
                    return e2++, [
                        3,
                        1
                    ];
                case 4:
                    return [
                        2
                    ];
            }
        });
    });
}
/**
 * Temporarily disables the network. The network can be re-enabled using
 * enableNetwork().
 */ function qo(t) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var e2, n15;
        return _tslib.__generator(this, function(r11) {
            switch(r11.label){
                case 0:
                    e2 = 0, n15 = t.Mr, r11.label = 1;
                case 1:
                    return e2 < n15.length ? [
                        4,
                        n15[e2](/* enabled= */ false)
                    ] : [
                        3,
                        4
                    ];
                case 2:
                    r11.sent(), r11.label = 3;
                case 3:
                    return e2++, [
                        3,
                        1
                    ];
                case 4:
                    return [
                        2
                    ];
            }
        });
    });
}
/**
 * Starts new listen for the given target. Uses resume token if provided. It
 * is a no-op if the target of given `TargetData` is already being listened to.
 */ function Uo(t, e2) {
    var n15 = F(t);
    n15.$r.has(e2.targetId) || // Mark this as something the client is currently listening for.
    (n15.$r.set(e2.targetId, e2), Go(n15) ? // The listen will be sent in onWatchStreamOpen
    Qo(n15) : us(n15).er() && jo(n15, e2));
}
/**
 * Removes the listen from server. It is a no-op if the given target id is
 * not being listened to.
 */ function Bo(t, e2) {
    var n15 = F(t), r11 = us(n15);
    n15.$r.delete(e2), r11.er() && Ko(n15, e2), 0 === n15.$r.size && (r11.er() ? r11.ir() : zo(n15) && // Revert to OnlineState.Unknown if the watch stream is not open and we
    // have no listeners, since without any listens to send we cannot
    // confirm if the stream is healthy and upgrade to OnlineState.Online.
    n15.Br.set("Unknown"/* Unknown */ ));
}
/**
 * We need to increment the the expected number of pending responses we're due
 * from watch so we wait for the ack to process any messages from this target.
 */ function jo(t, e2) {
    t.qr.U(e2.targetId), us(t).mr(e2);
}
function Ko(t, e2) {
    t.qr.U(e2), us(t).yr(e2);
}
function Qo(t) {
    t.qr = new yn({
        getRemoteKeysForTarget: function(e2) {
            return t.remoteSyncer.getRemoteKeysForTarget(e2);
        },
        lt: function(e2) {
            return t.$r.get(e2) || null;
        }
    }), us(t).start(), t.Br.Sr();
}
function Go(t) {
    return zo(t) && !us(t).tr() && t.$r.size > 0;
}
function zo(t) {
    return 0 === F(t).Or.size;
}
function Wo(t) {
    t.qr = void 0;
}
function Ho(t) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        return _tslib.__generator(this, function(e2) {
            return t.$r.forEach(function(e5, n15) {
                jo(t, e5);
            }), [
                2
            ];
        });
    });
}
function Yo(t, e2) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        return _tslib.__generator(this, function(n15) {
            return Wo(t), // If we still need the watch stream, retry the connection.
            Go(t) ? (t.Br.Nr(e2), Qo(t)) : // No need to restart watch stream because there are no active targets.
            // The online state is set to unknown because there is no active attempt
            // at establishing a connection
            t.Br.set("Unknown"/* Unknown */ ), [
                2
            ];
        });
    });
}
function $o(t, e2, i5) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var o3, s, u;
        return _tslib.__generator(this, function(a) {
            switch(a.label){
                case 0:
                    if (t.Br.set("Online"/* Online */ ), !(e2 instanceof dn && 2 === e2.state && e2.cause)) // Mark the client as online since we got a message from the server
                    return [
                        3,
                        6
                    ];
                    a.label = 1;
                case 1:
                    return a.trys.push([
                        1,
                        3,
                        ,
                        5
                    ]), [
                        4,
                        /** Handles an error on a target */ function(t1, e5) {
                            return _tslib.__awaiter(this, void 0, void 0, function() {
                                var n15, i6, o4, s1;
                                return _tslib.__generator(this, function(r11) {
                                    switch(r11.label){
                                        case 0:
                                            n15 = e5.cause, i6 = 0, o4 = e5.targetIds, r11.label = 1;
                                        case 1:
                                            return i6 < o4.length ? (s1 = o4[i6], t1.$r.has(s1) ? [
                                                4,
                                                t1.remoteSyncer.rejectListen(s1, n15)
                                            ] : [
                                                3,
                                                3
                                            ]) : [
                                                3,
                                                5
                                            ];
                                        case 2:
                                            r11.sent(), t1.$r.delete(s1), t1.qr.removeTarget(s1), r11.label = 3;
                                        case 3:
                                            r11.label = 4;
                                        case 4:
                                            return i6++, [
                                                3,
                                                1
                                            ];
                                        case 5:
                                            return [
                                                2
                                            ];
                                    }
                                });
                            });
                        }(t, e2)
                    ];
                case 2:
                    return a.sent(), [
                        3,
                        5
                    ];
                case 3:
                    return o3 = a.sent(), C("RemoteStore", "Failed to remove targets %s: %s ", e2.targetIds.join(","), o3), [
                        4,
                        Xo(t, o3)
                    ];
                case 4:
                    return a.sent(), [
                        3,
                        5
                    ];
                case 5:
                    return [
                        3,
                        13
                    ];
                case 6:
                    if (e2 instanceof fn ? t.qr.X(e2) : e2 instanceof ln ? t.qr.rt(e2) : t.qr.et(e2), i5.isEqual(K.min())) return [
                        3,
                        13
                    ];
                    a.label = 7;
                case 7:
                    return a.trys.push([
                        7,
                        11,
                        ,
                        13
                    ]), [
                        4,
                        Ki(t.localStore)
                    ];
                case 8:
                    return s = a.sent(), i5.compareTo(s) >= 0 ? [
                        4,
                        /**
                 * Takes a batch of changes from the Datastore, repackages them as a
                 * RemoteEvent, and passes that on to the listener, which is typically the
                 * SyncEngine.
                 */ function(t1, e5) {
                            var n15 = t1.qr.ut(e5);
                            // Update in-memory resume tokens. LocalStore will update the
                            // persistent view of these when applying the completed RemoteEvent.
                            return n15.targetChanges.forEach(function(n18, r11) {
                                if (n18.resumeToken.approximateByteSize() > 0) {
                                    var i6 = t1.$r.get(r11);
                                    // A watched target might have been removed already.
                                    i6 && t1.$r.set(r11, i6.withResumeToken(n18.resumeToken, e5));
                                }
                            }), // Re-establish listens for the targets that have been invalidated by
                            // existence filter mismatches.
                            n15.targetMismatches.forEach(function(e6) {
                                var n18 = t1.$r.get(e6);
                                if (n18) {
                                    // Clear the resume token for the target, since we're in a known mismatch
                                    // state.
                                    t1.$r.set(e6, n18.withResumeToken(J.EMPTY_BYTE_STRING, n18.snapshotVersion)), // Cause a hard reset by unwatching and rewatching immediately, but
                                    // deliberately don't send a resume token so that we get a full update.
                                    Ko(t1, e6);
                                    // Mark the target we send as being on behalf of an existence filter
                                    // mismatch, but don't actually retain that in listenTargets. This ensures
                                    // that we flag the first re-listen this way without impacting future
                                    // listens of this target (that might happen e.g. on reconnect).
                                    var r11 = new Pr(n18.target, e6, 1/* ExistenceFilterMismatch */ , n18.sequenceNumber);
                                    jo(t1, r11);
                                }
                            }), t1.remoteSyncer.applyRemoteEvent(n15);
                        }(t, i5)
                    ] : [
                        3,
                        10
                    ];
                // We have received a target change with a global snapshot if the snapshot
                // version is not equal to SnapshotVersion.min().
                case 9:
                    // We have received a target change with a global snapshot if the snapshot
                    // version is not equal to SnapshotVersion.min().
                    a.sent(), a.label = 10;
                case 10:
                    return [
                        3,
                        13
                    ];
                case 11:
                    return C("RemoteStore", "Failed to raise snapshot:", u = a.sent()), [
                        4,
                        Xo(t, u)
                    ];
                case 12:
                    return a.sent(), [
                        3,
                        13
                    ];
                case 13:
                    return [
                        2
                    ];
            }
        });
    });
}
/**
 * Recovery logic for IndexedDB errors that takes the network offline until
 * `op` succeeds. Retries are scheduled with backoff using
 * `enqueueRetryable()`. If `op()` is not provided, IndexedDB access is
 * validated via a generic operation.
 *
 * The returned Promise is resolved once the network is disabled and before
 * any retry attempt.
 */ function Xo(t, e2, i5) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var o3 = this;
        return _tslib.__generator(this, function(s) {
            switch(s.label){
                case 0:
                    if (!Nr(e2)) throw e2;
                    // Disable network and raise offline snapshots
                    return t.Or.add(1/* IndexedDbFailed */ ), [
                        4,
                        qo(t)
                    ];
                case 1:
                    // Disable network and raise offline snapshots
                    return s.sent(), t.Br.set("Offline"/* Offline */ ), i5 || // Use a simple read operation to determine if IndexedDB recovered.
                    // Ideally, we would expose a health check directly on SimpleDb, but
                    // RemoteStore only has access to persistence through LocalStore.
                    (i5 = function() {
                        return Ki(t.localStore);
                    }), // Probe IndexedDB periodically and re-enable network
                    t.asyncQueue.enqueueRetryable(function() {
                        return _tslib.__awaiter(o3, void 0, void 0, function() {
                            return _tslib.__generator(this, function(e5) {
                                switch(e5.label){
                                    case 0:
                                        return C("RemoteStore", "Retrying IndexedDB access"), [
                                            4,
                                            i5()
                                        ];
                                    case 1:
                                        return e5.sent(), t.Or.delete(1/* IndexedDbFailed */ ), [
                                            4,
                                            Vo(t)
                                        ];
                                    case 2:
                                        return e5.sent(), [
                                            2
                                        ];
                                }
                            });
                        });
                    }), [
                        2
                    ];
            }
        });
    });
}
/**
 * Executes `op`. If `op` fails, takes the network offline until `op`
 * succeeds. Returns after the first attempt.
 */ function Jo(t, e2) {
    return e2().catch(function(n15) {
        return Xo(t, n15, e2);
    });
}
function Zo(t) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var e2, n15, i5, o3, s;
        return _tslib.__generator(this, function(r12) {
            switch(r12.label){
                case 0:
                    e2 = F(t), n15 = as(e2), i5 = e2.Fr.length > 0 ? e2.Fr[e2.Fr.length - 1].batchId : -1, r12.label = 1;
                case 1:
                    if (!/**
 * Returns true if we can add to the write pipeline (i.e. the network is
 * enabled and the write pipeline is not full).
 */ function(t1) {
                        return zo(t1) && t1.Fr.length < 10;
                    }(e2)) return [
                        3,
                        7
                    ];
                    r12.label = 2;
                case 2:
                    return r12.trys.push([
                        2,
                        4,
                        ,
                        6
                    ]), [
                        4,
                        zi(e2.localStore, i5)
                    ];
                case 3:
                    return null === (o3 = r12.sent()) ? (0 === e2.Fr.length && n15.ir(), [
                        3,
                        7
                    ]) : (i5 = o3.batchId, (function(t1, e5) {
                        t1.Fr.push(e5);
                        var n18 = as(t1);
                        n18.er() && n18.pr && n18.Er(e5.mutations);
                    })(e2, o3), [
                        3,
                        6
                    ]);
                case 4:
                    return s = r12.sent(), [
                        4,
                        Xo(e2, s)
                    ];
                case 5:
                    return r12.sent(), [
                        3,
                        6
                    ];
                case 6:
                    return [
                        3,
                        1
                    ];
                case 7:
                    return ts(e2) && es(e2), [
                        2
                    ];
            }
        });
    });
}
function ts(t) {
    return zo(t) && !as(t).tr() && t.Fr.length > 0;
}
function es(t) {
    as(t).start();
}
function ns(t) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        return _tslib.__generator(this, function(e2) {
            return as(t).Ar(), [
                2
            ];
        });
    });
}
function rs(t) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var e2, n15, i5, o3;
        return _tslib.__generator(this, function(r12) {
            // Send the write pipeline now that the stream is established.
            for(e2 = as(t), n15 = 0, i5 = t.Fr; n15 < i5.length; n15++)o3 = i5[n15], e2.Er(o3.mutations);
            return [
                2
            ];
        });
    });
}
function is(t, e2, i5) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var n15, o3;
        return _tslib.__generator(this, function(r12) {
            switch(r12.label){
                case 0:
                    return n15 = t.Fr.shift(), o3 = Or.from(n15, e2, i5), [
                        4,
                        Jo(t, function() {
                            return t.remoteSyncer.applySuccessfulWrite(o3);
                        })
                    ];
                case 1:
                    // It's possible that with the completion of this mutation another
                    // slot has freed up.
                    return r12.sent(), [
                        4,
                        Zo(t)
                    ];
                case 2:
                    // It's possible that with the completion of this mutation another
                    // slot has freed up.
                    return r12.sent(), [
                        2
                    ];
            }
        });
    });
}
function os(t, e2) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        return _tslib.__generator(this, function(i5) {
            switch(i5.label){
                case 0:
                    return e2 && as(t).pr ? [
                        4,
                        function(t1, e5) {
                            return _tslib.__awaiter(this, void 0, void 0, function() {
                                var n15, i7;
                                return _tslib.__generator(this, function(r12) {
                                    switch(r12.label){
                                        case 0:
                                            return Ge(i7 = e5.code) && i7 !== N.ABORTED ? (n15 = t1.Fr.shift(), // In this case it's also unlikely that the server itself is melting
                                            // down -- this was just a bad request so inhibit backoff on the next
                                            // restart.
                                            as(t1).sr(), [
                                                4,
                                                Jo(t1, function() {
                                                    return t1.remoteSyncer.rejectFailedWrite(n15.batchId, e5);
                                                })
                                            ]) : [
                                                3,
                                                3
                                            ];
                                        case 1:
                                            // It's possible that with the completion of this mutation
                                            // another slot has freed up.
                                            return r12.sent(), [
                                                4,
                                                Zo(t1)
                                            ];
                                        case 2:
                                            // In this case it's also unlikely that the server itself is melting
                                            // down -- this was just a bad request so inhibit backoff on the next
                                            // restart.
                                            // It's possible that with the completion of this mutation
                                            // another slot has freed up.
                                            r12.sent(), r12.label = 3;
                                        case 3:
                                            return [
                                                2
                                            ];
                                    }
                                });
                            });
                        }(t, e2)
                    ] : [
                        3,
                        2
                    ];
                // This error affects the actual write.
                case 1:
                    // This error affects the actual write.
                    i5.sent(), i5.label = 2;
                case 2:
                    // If the write stream closed after the write handshake completes, a write
                    // operation failed and we fail the pending operation.
                    // The write stream might have been started by refilling the write
                    // pipeline for failed writes
                    return ts(t) && es(t), [
                        2
                    ];
            }
        });
    });
}
/**
 * Toggles the network state when the client gains or loses its primary lease.
 */ function ss(t, e2) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var n15;
        return _tslib.__generator(this, function(r12) {
            switch(r12.label){
                case 0:
                    return n15 = F(t), e2 ? (n15.Or.delete(2/* IsSecondary */ ), [
                        4,
                        Vo(n15)
                    ]) : [
                        3,
                        2
                    ];
                case 1:
                    return r12.sent(), [
                        3,
                        5
                    ];
                case 2:
                    return e2 ? [
                        3,
                        4
                    ] : (n15.Or.add(2/* IsSecondary */ ), [
                        4,
                        qo(n15)
                    ]);
                case 3:
                    r12.sent(), n15.Br.set("Unknown"/* Unknown */ ), r12.label = 4;
                case 4:
                    r12.label = 5;
                case 5:
                    return [
                        2
                    ];
            }
        });
    });
}
/**
 * If not yet initialized, registers the WatchStream and its network state
 * callback with `remoteStoreImpl`. Returns the existing stream if one is
 * already available.
 *
 * PORTING NOTE: On iOS and Android, the WatchStream gets registered on startup.
 * This is not done on Web to allow it to be tree-shaken.
 */ function us(t) {
    var e2 = this;
    return t.Ur || // Create stream (but note that it is not started yet).
    (t.Ur = (function(t1, e5, n15) {
        var r12 = F(t1);
        return r12.br(), new Lo(e5, r12.Hi, r12.credentials, r12.R, n15);
    })(t.datastore, t.asyncQueue, {
        Ii: Ho.bind(null, t),
        Ri: Yo.bind(null, t),
        _r: $o.bind(null, t)
    }), t.Mr.push(function(i5) {
        return _tslib.__awaiter(e2, void 0, void 0, function() {
            return _tslib.__generator(this, function(e5) {
                switch(e5.label){
                    case 0:
                        return i5 ? (t.Ur.sr(), Go(t) ? Qo(t) : t.Br.set("Unknown"/* Unknown */ ), [
                            3,
                            3
                        ]) : [
                            3,
                            1
                        ];
                    case 1:
                        return [
                            4,
                            t.Ur.stop()
                        ];
                    case 2:
                        e5.sent(), Wo(t), e5.label = 3;
                    case 3:
                        return [
                            2
                        ];
                }
            });
        });
    })), t.Ur;
}
function as(t) {
    var e2 = this;
    return t.Kr || // Create stream (but note that it is not started yet).
    (t.Kr = (function(t1, e5, n15) {
        var r12 = F(t1);
        return r12.br(), new Oo(e5, r12.Hi, r12.credentials, r12.R, n15);
    })(t.datastore, t.asyncQueue, {
        Ii: ns.bind(null, t),
        Ri: os.bind(null, t),
        Ir: rs.bind(null, t),
        Tr: is.bind(null, t)
    }), t.Mr.push(function(i5) {
        return _tslib.__awaiter(e2, void 0, void 0, function() {
            return _tslib.__generator(this, function(e5) {
                switch(e5.label){
                    case 0:
                        return i5 ? (t.Kr.sr(), [
                            4,
                            Zo(t)
                        ]) : [
                            3,
                            2
                        ];
                    case 1:
                        // This will start the write stream if necessary.
                        return e5.sent(), [
                            3,
                            4
                        ];
                    case 2:
                        return [
                            4,
                            t.Kr.stop()
                        ];
                    case 3:
                        e5.sent(), t.Fr.length > 0 && (C("RemoteStore", "Stopping write stream with " + t.Fr.length + " pending writes"), t.Fr = []), e5.label = 4;
                    case 4:
                        return [
                            2
                        ];
                }
            });
        });
    })), t.Kr;
}
var cs = /** @class */ function() {
    function t(t1, e2, n15, r12, i5) {
        this.asyncQueue = t1, this.timerId = e2, this.targetTimeMs = n15, this.op = r12, this.removalCallback = i5, this.deferred = new br, this.then = this.deferred.promise.then.bind(this.deferred.promise), // It's normal for the deferred promise to be canceled (due to cancellation)
        // and so we attach a dummy catch callback to avoid
        // 'UnhandledPromiseRejectionWarning' log spam.
        this.deferred.promise.catch(function(t2) {
        });
    }
    return t.createAndSchedule = function(e2, n15, r12, i5, o3) {
        var s = new t(e2, n15, Date.now() + r12, i5, o3);
        return s.start(r12), s;
    }, /**
     * Starts the timer. This is called immediately after construction by
     * createAndSchedule().
     */ t.prototype.start = function(t1) {
        var e2 = this;
        this.timerHandle = setTimeout(function() {
            return e2.handleDelayElapsed();
        }, t1);
    }, /**
     * Queues the operation to run immediately (if it hasn't already been run or
     * canceled).
     */ t.prototype.skipDelay = function() {
        return this.handleDelayElapsed();
    }, /**
     * Cancels the operation if it hasn't already been executed or canceled. The
     * promise will be rejected.
     *
     * As long as the operation has not yet been run, calling cancel() provides a
     * guarantee that the operation will not be run.
     */ t.prototype.cancel = function(t1) {
        null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new D(N.CANCELLED, "Operation cancelled" + (t1 ? ": " + t1 : ""))));
    }, t.prototype.handleDelayElapsed = function() {
        var t1 = this;
        this.asyncQueue.enqueueAndForget(function() {
            return null !== t1.timerHandle ? (t1.clearTimeout(), t1.op().then(function(e2) {
                return t1.deferred.resolve(e2);
            })) : Promise.resolve();
        });
    }, t.prototype.clearTimeout = function() {
        null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), this.timerHandle = null);
    }, t;
}();
/**
 * Returns a FirestoreError that can be surfaced to the user if the provided
 * error is an IndexedDbTransactionError. Re-throws the error otherwise.
 */ function hs(t, e2) {
    if (x("AsyncQueue", e2 + ": " + t), Nr(t)) return new D(N.UNAVAILABLE, e2 + ": " + t);
    throw t;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * DocumentSet is an immutable (copy-on-write) collection that holds documents
 * in order specified by the provided comparator. We always add a document key
 * comparator on top of what is provided to guarantee document equality based on
 * the key.
 */ var fs = /** @class */ function() {
    /** The default ordering is by key if the comparator is omitted */ function t(t1) {
        // We are adding document key comparator to the end as it's the only
        // guaranteed unique property of a document.
        this.comparator = t1 ? function(e2, n15) {
            return t1(e2, n15) || ct.comparator(e2.key, n15.key);
        } : function(t2, e2) {
            return ct.comparator(t2.key, e2.key);
        }, this.keyedMap = en(), this.sortedSet = new We(this.comparator);
    }
    return t.emptySet = function(e2) {
        return new t(e2.comparator);
    }, t.prototype.has = function(t1) {
        return null != this.keyedMap.get(t1);
    }, t.prototype.get = function(t1) {
        return this.keyedMap.get(t1);
    }, t.prototype.first = function() {
        return this.sortedSet.minKey();
    }, t.prototype.last = function() {
        return this.sortedSet.maxKey();
    }, t.prototype.isEmpty = function() {
        return this.sortedSet.isEmpty();
    }, /**
     * Returns the index of the provided key in the document set, or -1 if the
     * document key is not present in the set;
     */ t.prototype.indexOf = function(t1) {
        var e2 = this.keyedMap.get(t1);
        return e2 ? this.sortedSet.indexOf(e2) : -1;
    }, Object.defineProperty(t.prototype, "size", {
        get: function() {
            return this.sortedSet.size;
        },
        enumerable: false,
        configurable: true
    }), /** Iterates documents in order defined by "comparator" */ t.prototype.forEach = function(t1) {
        this.sortedSet.inorderTraversal(function(e2, n15) {
            return t1(e2), false;
        });
    }, /** Inserts or updates a document with the same key */ t.prototype.add = function(t1) {
        // First remove the element if we have it.
        var e2 = this.delete(t1.key);
        return e2.copy(e2.keyedMap.insert(t1.key, t1), e2.sortedSet.insert(t1, null));
    }, /** Deletes a document with a given key */ t.prototype.delete = function(t1) {
        var e2 = this.get(t1);
        return e2 ? this.copy(this.keyedMap.remove(t1), this.sortedSet.remove(e2)) : this;
    }, t.prototype.isEqual = function(e2) {
        if (!(e2 instanceof t)) return false;
        if (this.size !== e2.size) return false;
        for(var n15 = this.sortedSet.getIterator(), r12 = e2.sortedSet.getIterator(); n15.hasNext();){
            var i5 = n15.getNext().key, o3 = r12.getNext().key;
            if (!i5.isEqual(o3)) return false;
        }
        return true;
    }, t.prototype.toString = function() {
        var t1 = [];
        return this.forEach(function(e2) {
            t1.push(e2.toString());
        }), 0 === t1.length ? "DocumentSet ()" : "DocumentSet (\n  " + t1.join("  \n") + "\n)";
    }, t.prototype.copy = function(e2, n15) {
        var r12 = new t;
        return r12.comparator = this.comparator, r12.keyedMap = e2, r12.sortedSet = n15, r12;
    }, t;
}(), ls = /** @class */ function() {
    function t() {
        this.Qr = new We(ct.comparator);
    }
    return t.prototype.track = function(t1) {
        var e2 = t1.doc.key, n15 = this.Qr.get(e2);
        n15 ? // Merge the new change with the existing change.
        0 !== t1.type && 3 === n15.type ? this.Qr = this.Qr.insert(e2, t1) : 3 === t1.type && 1 !== n15.type ? this.Qr = this.Qr.insert(e2, {
            type: n15.type,
            doc: t1.doc
        }) : 2 === t1.type && 2 === n15.type ? this.Qr = this.Qr.insert(e2, {
            type: 2,
            doc: t1.doc
        }) : 2 === t1.type && 0 === n15.type ? this.Qr = this.Qr.insert(e2, {
            type: 0,
            doc: t1.doc
        }) : 1 === t1.type && 0 === n15.type ? this.Qr = this.Qr.remove(e2) : 1 === t1.type && 2 === n15.type ? this.Qr = this.Qr.insert(e2, {
            type: 1,
            doc: n15.doc
        }) : 0 === t1.type && 1 === n15.type ? this.Qr = this.Qr.insert(e2, {
            type: 2,
            doc: t1.doc
        }) : // This includes these cases, which don't make sense:
        // Added->Added
        // Removed->Removed
        // Modified->Added
        // Removed->Modified
        // Metadata->Added
        // Removed->Metadata
        O() : this.Qr = this.Qr.insert(e2, t1);
    }, t.prototype.jr = function() {
        var t1 = [];
        return this.Qr.inorderTraversal(function(e2, n15) {
            t1.push(n15);
        }), t1;
    }, t;
}(), ds = /** @class */ function() {
    function t(t1, e2, n15, r12, i7, o4, s, u) {
        this.query = t1, this.docs = e2, this.oldDocs = n15, this.docChanges = r12, this.mutatedKeys = i7, this.fromCache = o4, this.syncStateChanged = s, this.excludesMetadataChanges = u;
    }
    return t.fromInitialDocuments = function(e2, n15, r12, i7) {
        var o4 = [];
        return n15.forEach(function(t1) {
            o4.push({
                type: 0,
                doc: t1
            });
        }), new t(e2, n15, fs.emptySet(n15), o4, r12, i7, /* syncStateChanged= */ true, /* excludesMetadataChanges= */ false);
    }, Object.defineProperty(t.prototype, "hasPendingWrites", {
        get: function() {
            return !this.mutatedKeys.isEmpty();
        },
        enumerable: false,
        configurable: true
    }), t.prototype.isEqual = function(t1) {
        if (!(this.fromCache === t1.fromCache && this.syncStateChanged === t1.syncStateChanged && this.mutatedKeys.isEqual(t1.mutatedKeys) && ie(this.query, t1.query) && this.docs.isEqual(t1.docs) && this.oldDocs.isEqual(t1.oldDocs))) return false;
        var e2 = this.docChanges, n15 = t1.docChanges;
        if (e2.length !== n15.length) return false;
        for(var r12 = 0; r12 < e2.length; r12++)if (e2[r12].type !== n15[r12].type || !e2[r12].doc.isEqual(n15[r12].doc)) return false;
        return true;
    }, t;
}(), ps = function() {
    this.Wr = void 0, this.listeners = [];
}, ys = function() {
    this.queries = new Ii(function(t) {
        return oe(t);
    }, ie), this.onlineState = "Unknown", this.Gr = new Set;
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * DocumentChangeSet keeps track of a set of changes to docs in a query, merging
 * duplicate events for the same doc.
 */ function vs(t, e2) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var n15, i7, o4, s, u, a, c;
        return _tslib.__generator(this, function(r12) {
            switch(r12.label){
                case 0:
                    if (n15 = F(t), i7 = e2.query, o4 = false, (s = n15.queries.get(i7)) || (o4 = true, s = new ps), !o4) return [
                        3,
                        4
                    ];
                    r12.label = 1;
                case 1:
                    return r12.trys.push([
                        1,
                        3,
                        ,
                        4
                    ]), u = s, [
                        4,
                        n15.onListen(i7)
                    ];
                case 2:
                    return u.Wr = r12.sent(), [
                        3,
                        4
                    ];
                case 3:
                    return a = r12.sent(), c = hs(a, "Initialization of query '" + se(e2.query) + "' failed"), [
                        2,
                        void e2.onError(c)
                    ];
                case 4:
                    return n15.queries.set(i7, s), s.listeners.push(e2), // Run global snapshot listeners if a consistent snapshot has been emitted.
                    e2.zr(n15.onlineState), s.Wr && e2.Hr(s.Wr) && bs(n15), [
                        2
                    ];
            }
        });
    });
}
function ms(t, e2) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var n15, i7, o4, s, u;
        return _tslib.__generator(this, function(r12) {
            return n15 = F(t), i7 = e2.query, o4 = false, (s = n15.queries.get(i7)) && (u = s.listeners.indexOf(e2)) >= 0 && (s.listeners.splice(u, 1), o4 = 0 === s.listeners.length), o4 ? [
                2,
                (n15.queries.delete(i7), n15.onUnlisten(i7))
            ] : [
                2
            ];
        });
    });
}
function gs(t, e2) {
    for(var n15 = F(t), r12 = false, i7 = 0, o4 = e2; i7 < o4.length; i7++){
        var s = o4[i7], u = s.query, a = n15.queries.get(u);
        if (a) {
            for(var c = 0, h = a.listeners; c < h.length; c++)h[c].Hr(s) && (r12 = true);
            a.Wr = s;
        }
    }
    r12 && bs(n15);
}
function ws(t, e2, n15) {
    var r12 = F(t), i7 = r12.queries.get(e2);
    if (i7) for(var o4 = 0, s = i7.listeners; o4 < s.length; o4++)s[o4].onError(n15);
    // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()
    // after an error.
    r12.queries.delete(e2);
}
// Call all global snapshot listeners that have been set.
function bs(t) {
    t.Gr.forEach(function(t1) {
        t1.next();
    });
}
/**
 * QueryListener takes a series of internal view snapshots and determines
 * when to raise the event.
 *
 * It uses an Observer to dispatch events.
 */ var Is = /** @class */ function() {
    function t(t1, e2, n15) {
        this.query = t1, this.Jr = e2, /**
             * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
             * observer. This flag is set to true once we've actually raised an event.
             */ this.Yr = false, this.Xr = null, this.onlineState = "Unknown", this.options = n15 || {
        };
    }
    return t.prototype.Hr = function(t1) {
        if (!this.options.includeMetadataChanges) {
            for(// Remove the metadata only changes.
            var e2 = [], n15 = 0, r12 = t1.docChanges; n15 < r12.length; n15++){
                var i7 = r12[n15];
                3 !== i7.type && e2.push(i7);
            }
            t1 = new ds(t1.query, t1.docs, t1.oldDocs, e2, t1.mutatedKeys, t1.fromCache, t1.syncStateChanged, /* excludesMetadataChanges= */ true);
        }
        var o4 = false;
        return this.Yr ? this.Zr(t1) && (this.Jr.next(t1), o4 = true) : this.eo(t1, this.onlineState) && (this.no(t1), o4 = true), this.Xr = t1, o4;
    }, t.prototype.onError = function(t1) {
        this.Jr.error(t1);
    }, /** Returns whether a snapshot was raised. */ t.prototype.zr = function(t1) {
        this.onlineState = t1;
        var e5 = false;
        return this.Xr && !this.Yr && this.eo(this.Xr, t1) && (this.no(this.Xr), e5 = true), e5;
    }, t.prototype.eo = function(t1, e5) {
        // Always raise the first event when we're synced
        if (!t1.fromCache) return true;
        // NOTE: We consider OnlineState.Unknown as online (it should become Offline
        // or Online if we wait long enough).
        var n18 = "Offline" !== e5;
        // Don't raise the event if we're online, aren't synced yet (checked
        // above) and are waiting for a sync.
        return !(this.options.so && n18 || t1.docs.isEmpty() && "Offline" !== e5);
    // Raise data from cache if we have any documents or we are offline
    }, t.prototype.Zr = function(t1) {
        // We don't need to handle includeDocumentMetadataChanges here because
        // the Metadata only changes have already been stripped out if needed.
        // At this point the only changes we will see are the ones we should
        // propagate.
        if (t1.docChanges.length > 0) return true;
        var e5 = this.Xr && this.Xr.hasPendingWrites !== t1.hasPendingWrites;
        return !(!t1.syncStateChanged && !e5) && true === this.options.includeMetadataChanges;
    // Generally we should have hit one of the cases above, but it's possible
    // to get here if there were only metadata docChanges and they got
    // stripped out.
    }, t.prototype.no = function(t1) {
        t1 = ds.fromInitialDocuments(t1.query, t1.docs, t1.mutatedKeys, t1.fromCache), this.Yr = true, this.Jr.next(t1);
    }, t;
}(), Ts = /** @class */ function() {
    function t(t1, // How many bytes this element takes to store in the bundle.
    e5) {
        this.payload = t1, this.byteLength = e5;
    }
    return t.prototype.io = function() {
        return "metadata" in this.payload;
    }, t;
}(), Es = /** @class */ function() {
    function t(t1) {
        this.R = t1;
    }
    return t.prototype.qn = function(t1) {
        return An(this.R, t1);
    }, /**
     * Converts a BundleDocument to a MutableDocument.
     */ t.prototype.Un = function(t1) {
        return t1.metadata.exists ? On(this.R, t1.document, false) : Nt.newNoDocument(this.qn(t1.metadata.name), this.Kn(t1.metadata.readTime));
    }, t.prototype.Kn = function(t1) {
        return _n(t1);
    }, t;
}(), _s = /** @class */ function() {
    function t(t1, e5, n18) {
        this.ro = t1, this.localStore = e5, this.R = n18, /** Batched queries to be saved into storage */ this.queries = [], /** Batched documents to be saved into storage */ this.documents = [], this.progress = Ss(t1);
    }
    return t.prototype.oo = function(t1) {
        this.progress.bytesLoaded += t1.byteLength;
        var e5 = this.progress.documentsLoaded;
        return t1.payload.namedQuery ? this.queries.push(t1.payload.namedQuery) : t1.payload.documentMetadata ? (this.documents.push({
            metadata: t1.payload.documentMetadata
        }), t1.payload.documentMetadata.exists || ++e5) : t1.payload.document && (this.documents[this.documents.length - 1].document = t1.payload.document, ++e5), e5 !== this.progress.documentsLoaded ? (this.progress.documentsLoaded = e5, Object.assign({
        }, this.progress)) : null;
    }, t.prototype.co = function(t1) {
        for(var e5 = new Map, n18 = new Es(this.R), r13 = 0, i8 = t1; r13 < i8.length; r13++){
            var o4 = i8[r13];
            if (o4.metadata.queries) for(var s = n18.qn(o4.metadata.name), u = 0, a = o4.metadata.queries; u < a.length; u++){
                var c = a[u], h = (e5.get(c) || sn()).add(s);
                e5.set(c, h);
            }
        }
        return e5;
    }, /**
     * Update the progress to 'Success' and return the updated progress.
     */ t.prototype.complete = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var t1, e5, n18, i8, o5;
            return _tslib.__generator(this, function(r13) {
                switch(r13.label){
                    case 0:
                        return [
                            4,
                            Zi(this.localStore, new Es(this.R), this.documents, this.ro.id)
                        ];
                    case 1:
                        t1 = r13.sent(), e5 = this.co(this.documents), n18 = 0, i8 = this.queries, r13.label = 2;
                    case 2:
                        return n18 < i8.length ? (o5 = i8[n18], [
                            4,
                            to(this.localStore, o5, e5.get(o5.name))
                        ]) : [
                            3,
                            5
                        ];
                    case 3:
                        r13.sent(), r13.label = 4;
                    case 4:
                        return n18++, [
                            3,
                            2
                        ];
                    case 5:
                        return [
                            2,
                            (this.progress.taskState = "Success", new Pi(Object.assign({
                            }, this.progress), t1))
                        ];
                }
            });
        });
    }, t;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A complete element in the bundle stream, together with the byte length it
 * occupies in the stream.
 */ /**
 * Returns a `LoadBundleTaskProgress` representing the initial progress of
 * loading a bundle.
 */ function Ss(t) {
    return {
        taskState: "Running",
        documentsLoaded: 0,
        bytesLoaded: 0,
        totalDocuments: t.totalDocuments,
        totalBytes: t.totalBytes
    };
}
/**
 * Returns a `LoadBundleTaskProgress` representing the progress that the loading
 * has succeeded.
 */ /**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var Ns = function(t) {
    this.key = t;
}, Ds = function(t) {
    this.key = t;
}, As = /** @class */ function() {
    function t(t1, /** Documents included in the remote target */ e5) {
        this.query = t1, this.uo = e5, this.ao = null, /**
             * A flag whether the view is current with the backend. A view is considered
             * current after it has seen the current flag from the backend and did not
             * lose consistency within the watch stream (e.g. because of an existence
             * filter mismatch).
             */ this.current = false, /** Documents in the view but not in the remote target */ this.ho = sn(), /** Document Keys that have local changes */ this.mutatedKeys = sn(), this.lo = ae(t1), this.fo = new fs(this.lo);
    }
    return Object.defineProperty(t.prototype, "wo", {
        /**
         * The set of remote documents that the server has told us belongs to the target associated with
         * this view.
         */ get: function() {
            return this.uo;
        },
        enumerable: false,
        configurable: true
    }), /**
     * Iterates over a set of doc changes, applies the query limit, and computes
     * what the new results should be, what the changes were, and whether we may
     * need to go back to the local cache for more results. Does not make any
     * changes to the view.
     * @param docChanges - The doc changes to apply to this view.
     * @param previousChanges - If this is being called with a refill, then start
     *        with this set of docs and changes instead of the current view.
     * @returns a new set of docs, changes, and refill flag.
     */ t.prototype._o = function(t1, e5) {
        var n18 = this, r13 = e5 ? e5.mo : new ls, i8 = e5 ? e5.fo : this.fo, o5 = e5 ? e5.mutatedKeys : this.mutatedKeys, s = i8, u = false, a = $t(this.query) && i8.size === this.query.limit ? i8.last() : null, c = Xt(this.query) && i8.size === this.query.limit ? i8.first() : null;
        // Drop documents out to meet limit/limitToLast requirement.
        if (t1.inorderTraversal(function(t2, e6) {
            var h = i8.get(t2), f = ue(n18.query, e6) ? e6 : null, l = !!h && n18.mutatedKeys.has(h.key), d = !!f && (f.hasLocalMutations || // We only consider committed mutations for documents that were
            // mutated during the lifetime of the view.
            n18.mutatedKeys.has(f.key) && f.hasCommittedMutations), p = false;
            // Calculate change
            h && f ? h.data.isEqual(f.data) ? l !== d && (r13.track({
                type: 3,
                doc: f
            }), p = true) : n18.yo(h, f) || (r13.track({
                type: 2,
                doc: f
            }), p = true, (a && n18.lo(f, a) > 0 || c && n18.lo(f, c) < 0) && // This doc moved from inside the limit to outside the limit.
            // That means there may be some other doc in the local cache
            // that should be included instead.
            (u = true)) : !h && f ? (r13.track({
                type: 0,
                doc: f
            }), p = true) : h && !f && (r13.track({
                type: 1,
                doc: h
            }), p = true, (a || c) && // A doc was removed from a full limit query. We'll need to
            // requery from the local cache to see if we know about some other
            // doc that should be in the results.
            (u = true)), p && (f ? (s = s.add(f), o5 = d ? o5.add(t2) : o5.delete(t2)) : (s = s.delete(t2), o5 = o5.delete(t2)));
        }), $t(this.query) || Xt(this.query)) for(; s.size > this.query.limit;){
            var h = $t(this.query) ? s.last() : s.first();
            s = s.delete(h.key), o5 = o5.delete(h.key), r13.track({
                type: 1,
                doc: h
            });
        }
        return {
            fo: s,
            mo: r13,
            Nn: u,
            mutatedKeys: o5
        };
    }, t.prototype.yo = function(t1, e5) {
        // We suppress the initial change event for documents that were modified as
        // part of a write acknowledgment (e.g. when the value of a server transform
        // is applied) as Watch will send us the same document again.
        // By suppressing the event, we only raise two user visible events (one with
        // `hasPendingWrites` and the final state of the document) instead of three
        // (one with `hasPendingWrites`, the modified document with
        // `hasPendingWrites` and the final state of the document).
        return t1.hasLocalMutations && e5.hasCommittedMutations && !e5.hasLocalMutations;
    }, /**
     * Updates the view with the given ViewDocumentChanges and optionally updates
     * limbo docs and sync state from the provided target change.
     * @param docChanges - The set of changes to make to the view's docs.
     * @param updateLimboDocuments - Whether to update limbo documents based on
     *        this change.
     * @param targetChange - A target change to apply for computing limbo docs and
     *        sync state.
     * @returns A new ViewChange with the given docs, changes, and sync state.
     */ // PORTING NOTE: The iOS/Android clients always compute limbo document changes.
    t.prototype.applyChanges = function(t1, e5, n18) {
        var r13 = this, i8 = this.fo;
        this.fo = t1.fo, this.mutatedKeys = t1.mutatedKeys;
        // Sort changes based on type and query comparator
        var o5 = t1.mo.jr();
        o5.sort(function(t2, e6) {
            return (function(t3, e7) {
                var n19 = function(t4) {
                    switch(t4){
                        case 0:
                            return 1;
                        case 2:
                        case 3:
                            // A metadata change is converted to a modified change at the public
                            // api layer.  Since we sort by document key and then change type,
                            // metadata and modified changes must be sorted equivalently.
                            return 2;
                        case 1:
                            return 0;
                        default:
                            return O();
                    }
                };
                return n19(t3) - n19(e7);
            })(t2.type, e6.type) || r13.lo(t2.doc, e6.doc);
        }), this.po(n18);
        var s = e5 ? this.Eo() : [], u = 0 === this.ho.size && this.current ? 1 : 0/* Local */ , a = u !== this.ao;
        return this.ao = u, 0 !== o5.length || a ? {
            snapshot: new ds(this.query, t1.fo, i8, o5, t1.mutatedKeys, 0 === u, a, /* excludesMetadataChanges= */ false),
            To: s
        } : {
            To: s
        };
    // no changes
    }, /**
     * Applies an OnlineState change to the view, potentially generating a
     * ViewChange if the view's syncState changes as a result.
     */ t.prototype.zr = function(t1) {
        return this.current && "Offline" === t1 ? // If we're offline, set `current` to false and then call applyChanges()
        // to refresh our syncState and generate a ViewChange as appropriate. We
        // are guaranteed to get a new TargetChange that sets `current` back to
        // true once the client is back online.
        (this.current = false, this.applyChanges({
            fo: this.fo,
            mo: new ls,
            mutatedKeys: this.mutatedKeys,
            Nn: false
        }, /* updateLimboDocuments= */ false)) : {
            To: []
        };
    }, /**
     * Returns whether the doc for the given key should be in limbo.
     */ t.prototype.Io = function(t1) {
        // If the remote end says it's part of this query, it's not in limbo.
        return !this.uo.has(t1) && // The local store doesn't think it's a result, so it shouldn't be in limbo.
        !!this.fo.has(t1) && !this.fo.get(t1).hasLocalMutations;
    }, /**
     * Updates syncedDocuments, current, and limbo docs based on the given change.
     * Returns the list of changes to which docs are in limbo.
     */ t.prototype.po = function(t1) {
        var e5 = this;
        t1 && (t1.addedDocuments.forEach(function(t2) {
            return e5.uo = e5.uo.add(t2);
        }), t1.modifiedDocuments.forEach(function(t2) {
        }), t1.removedDocuments.forEach(function(t2) {
            return e5.uo = e5.uo.delete(t2);
        }), this.current = t1.current);
    }, t.prototype.Eo = function() {
        var t1 = this;
        // We can only determine limbo documents when we're in-sync with the server.
        if (!this.current) return [];
        // TODO(klimt): Do this incrementally so that it's not quadratic when
        // updating many documents.
        var e5 = this.ho;
        this.ho = sn(), this.fo.forEach(function(e6) {
            t1.Io(e6.key) && (t1.ho = t1.ho.add(e6.key));
        });
        // Diff the new limbo docs with the old limbo docs.
        var n18 = [];
        return e5.forEach(function(e6) {
            t1.ho.has(e6) || n18.push(new Ds(e6));
        }), this.ho.forEach(function(t2) {
            e5.has(t2) || n18.push(new Ns(t2));
        }), n18;
    }, /**
     * Update the in-memory state of the current view with the state read from
     * persistence.
     *
     * We update the query view whenever a client's primary status changes:
     * - When a client transitions from primary to secondary, it can miss
     *   LocalStorage updates and its query views may temporarily not be
     *   synchronized with the state on disk.
     * - For secondary to primary transitions, the client needs to update the list
     *   of `syncedDocuments` since secondary clients update their query views
     *   based purely on synthesized RemoteEvents.
     *
     * @param queryResult.documents - The documents that match the query according
     * to the LocalStore.
     * @param queryResult.remoteKeys - The keys of the documents that match the
     * query according to the backend.
     *
     * @returns The ViewChange that resulted from this synchronization.
     */ // PORTING NOTE: Multi-tab only.
    t.prototype.Ao = function(t1) {
        this.uo = t1.Bn, this.ho = sn();
        var e5 = this._o(t1.documents);
        return this.applyChanges(e5, /*updateLimboDocuments=*/ true);
    }, /**
     * Returns a view snapshot as if this query was just listened to. Contains
     * a document add for every existing document and the `fromCache` and
     * `hasPendingWrites` status of the already established view.
     */ // PORTING NOTE: Multi-tab only.
    t.prototype.Ro = function() {
        return ds.fromInitialDocuments(this.query, this.fo, this.mutatedKeys, 0 === this.ao);
    }, t;
}(), ks = function(/**
     * The query itself.
     */ t, /**
     * The target number created by the client that is used in the watch
     * stream to identify this query.
     */ e5, /**
     * The view is responsible for computing the final merged truth of what
     * docs are in the query. It gets notified of local and remote changes,
     * and applies the query filters and limits to determine the most correct
     * possible results.
     */ n18) {
    this.query = t, this.targetId = e5, this.view = n18;
}, Cs = function(t) {
    this.key = t, /**
             * Set to true once we've received a document. This is used in
             * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to
             * decide whether it needs to manufacture a delete event for the target once
             * the target is CURRENT.
             */ this.bo = false;
}, xs = /** @class */ function() {
    function t(t1, e5, n18, // PORTING NOTE: Manages state synchronization in multi-tab environments.
    r13, i8, o5) {
        this.localStore = t1, this.remoteStore = e5, this.eventManager = n18, this.sharedClientState = r13, this.currentUser = i8, this.maxConcurrentLimboResolutions = o5, this.vo = {
        }, this.Po = new Ii(function(t2) {
            return oe(t2);
        }, ie), this.Vo = new Map, /**
             * The keys of documents that are in limbo for which we haven't yet started a
             * limbo resolution query. The strings in this set are the result of calling
             * `key.path.canonicalString()` where `key` is a `DocumentKey` object.
             *
             * The `Set` type was chosen because it provides efficient lookup and removal
             * of arbitrary elements and it also maintains insertion order, providing the
             * desired queue-like FIFO semantics.
             */ this.So = new Set, /**
             * Keeps track of the target ID for each document that is in limbo with an
             * active target.
             */ this.Do = new We(ct.comparator), /**
             * Keeps track of the information about an active limbo resolution for each
             * active target ID that was started for the purpose of limbo resolution.
             */ this.Co = new Map, this.No = new no, /** Stores user completion handlers, indexed by User and BatchId. */ this.xo = {
        }, /** Stores user callbacks waiting for all pending writes to be acknowledged. */ this.ko = new Map, this.Fo = ci.Yt(), this.onlineState = "Unknown", // The primary state is set to `true` or `false` immediately after Firestore
        // startup. In the interim, a client should only be considered primary if
        // `isPrimary` is true.
        this.$o = void 0;
    }
    return Object.defineProperty(t.prototype, "isPrimaryClient", {
        get: function() {
            return true === this.$o;
        },
        enumerable: false,
        configurable: true
    }), t;
}();
/**
 * Initiates the new listen, resolves promise when listen enqueued to the
 * server. All the subsequent view snapshots or errors are sent to the
 * subscribed handlers. Returns the initial snapshot.
 */ function Rs(t, e5) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var n18, i8, o5, s, u, a;
        return _tslib.__generator(this, function(r13) {
            switch(r13.label){
                case 0:
                    return n18 = uu(t), (s = n18.Po.get(e5)) ? // PORTING NOTE: With Multi-Tab Web, it is possible that a query view
                    // already exists when EventManager calls us for the first time. This
                    // happens when the primary tab is already listening to this query on
                    // behalf of another tab and the user of the primary also starts listening
                    // to the query. EventManager will not have an assigned target ID in this
                    // case and calls `listen` to obtain this ID.
                    (i8 = s.targetId, n18.sharedClientState.addLocalQueryTarget(i8), o5 = s.view.Ro(), [
                        3,
                        4
                    ]) : [
                        3,
                        1
                    ];
                case 1:
                    return [
                        4,
                        Wi(n18.localStore, ne(e5))
                    ];
                case 2:
                    return u = r13.sent(), a = n18.sharedClientState.addLocalQueryTarget(u.targetId), i8 = u.targetId, [
                        4,
                        Ls(n18, e5, i8, "current" === a)
                    ];
                case 3:
                    o5 = r13.sent(), n18.isPrimaryClient && Uo(n18.remoteStore, u), r13.label = 4;
                case 4:
                    return [
                        2,
                        o5
                    ];
            }
        });
    });
}
/**
 * Registers a view for a previously unknown query and computes its initial
 * snapshot.
 */ function Ls(t, e5, i8, o5) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var s, u, a, c, h, f;
        return _tslib.__generator(this, function(l) {
            switch(l.label){
                case 0:
                    // PORTING NOTE: On Web only, we inject the code that registers new Limbo
                    // targets based on view changes. This allows us to only depend on Limbo
                    // changes when user code includes queries.
                    return t.Oo = function(e6, i9, o6) {
                        return (function(t1, e7, i10, o7) {
                            return _tslib.__awaiter(this, void 0, void 0, function() {
                                var n18, s1, u1;
                                return _tslib.__generator(this, function(r13) {
                                    switch(r13.label){
                                        case 0:
                                            return n18 = e7.view._o(i10), n18.Nn ? [
                                                4,
                                                Yi(t1.localStore, e7.query, /* usePreviousResults= */ false).then(function(t2) {
                                                    var r14 = t2.documents;
                                                    return e7.view._o(r14, n18);
                                                })
                                            ] : [
                                                3,
                                                2
                                            ];
                                        case 1:
                                            // The query has a limit and some docs were removed, so we need
                                            // to re-run the query against the local store to make sure we
                                            // didn't lose any good docs that had been past the limit.
                                            n18 = r13.sent(), r13.label = 2;
                                        case 2:
                                            return s1 = o7 && o7.targetChanges.get(e7.targetId), u1 = e7.view.applyChanges(n18, /* updateLimboDocuments= */ t1.isPrimaryClient, s1), [
                                                2,
                                                (zs(t1, e7.targetId, u1.To), u1.snapshot)
                                            ];
                                    }
                                });
                            });
                        })(t, e6, i9, o6);
                    }, [
                        4,
                        Yi(t.localStore, e5, /* usePreviousResults= */ true)
                    ];
                case 1:
                    return s = l.sent(), u = new As(e5, s.Bn), a = u._o(s.documents), c = hn.createSynthesizedTargetChangeForCurrentChange(i8, o5 && "Offline" !== t.onlineState), h = u.applyChanges(a, /* updateLimboDocuments= */ t.isPrimaryClient, c), zs(t, i8, h.To), f = new ks(e5, i8, u), [
                        2,
                        (t.Po.set(e5, f), t.Vo.has(i8) ? t.Vo.get(i8).push(e5) : t.Vo.set(i8, [
                            e5
                        ]), h.snapshot)
                    ];
            }
        });
    });
}
/** Stops listening to the query. */ function Os(t, e5) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var n18, i8, o5;
        return _tslib.__generator(this, function(r13) {
            switch(r13.label){
                case 0:
                    return n18 = F(t), i8 = n18.Po.get(e5), (o5 = n18.Vo.get(i8.targetId)).length > 1 ? [
                        2,
                        (n18.Vo.set(i8.targetId, o5.filter(function(t1) {
                            return !ie(t1, e5);
                        })), void n18.Po.delete(e5))
                    ] : n18.isPrimaryClient ? // We need to remove the local query target first to allow us to verify
                    // whether any other client is still interested in this target.
                    (n18.sharedClientState.removeLocalQueryTarget(i8.targetId), n18.sharedClientState.isActiveQueryTarget(i8.targetId) ? [
                        3,
                        2
                    ] : [
                        4,
                        Hi(n18.localStore, i8.targetId, /*keepPersistedTargetData=*/ false).then(function() {
                            n18.sharedClientState.clearQueryState(i8.targetId), Bo(n18.remoteStore, i8.targetId), Qs(n18, i8.targetId);
                        }).catch(pi)
                    ]) : [
                        3,
                        3
                    ];
                case 1:
                    r13.sent(), r13.label = 2;
                case 2:
                    return [
                        3,
                        5
                    ];
                case 3:
                    return Qs(n18, i8.targetId), [
                        4,
                        Hi(n18.localStore, i8.targetId, /*keepPersistedTargetData=*/ true)
                    ];
                case 4:
                    r13.sent(), r13.label = 5;
                case 5:
                    return [
                        2
                    ];
            }
        });
    });
}
/**
 * Initiates the write of local mutation batch which involves adding the
 * writes to the mutation queue, notifying the remote store about new
 * mutations and raising events for any changes this write caused.
 *
 * The promise returned by this call is resolved when the above steps
 * have completed, *not* when the write was acked by the backend. The
 * userCallback is resolved once the write was acked/rejected by the
 * backend (or failed locally for any other reason).
 */ function Ps(t, e5, i8) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var n18, o5, s, u;
        return _tslib.__generator(this, function(r13) {
            switch(r13.label){
                case 0:
                    n18 = au(t), r13.label = 1;
                case 1:
                    return r13.trys.push([
                        1,
                        5,
                        ,
                        6
                    ]), [
                        4,
                        function(t1, e6) {
                            var n19, r14 = F(t1), i9 = j.now(), o6 = e6.reduce(function(t2, e7) {
                                return t2.add(e7.key);
                            }, sn());
                            return r14.persistence.runTransaction("Locally write mutations", "readwrite", function(t2) {
                                return r14.Mn.pn(t2, o6).next(function(o7) {
                                    n19 = o7;
                                    for(// For non-idempotent mutations (such as `FieldValue.increment()`),
                                    // we record the base state in a separate patch mutation. This is
                                    // later used to guarantee consistent values and prevents flicker
                                    // even if the backend sends us an update that already includes our
                                    // transform.
                                    var s1 = [], u1 = 0, a = e6; u1 < a.length; u1++){
                                        var c = a[u1], h = Re(c, n19.get(c.key));
                                        null != h && // NOTE: The base state should only be applied if there's some
                                        // existing document to override, so use a Precondition of
                                        // exists=true
                                        s1.push(new Fe(c.key, h, St(h.value.mapValue), De.exists(true)));
                                    }
                                    return r14._n.addMutationBatch(t2, i9, s1, e6);
                                });
                            }).then(function(t2) {
                                return t2.applyToLocalDocumentSet(n19), {
                                    batchId: t2.batchId,
                                    changes: n19
                                };
                            });
                        }(n18.localStore, e5)
                    ];
                case 2:
                    return o5 = r13.sent(), n18.sharedClientState.addPendingMutation(o5.batchId), (function(t1, e6, n19) {
                        var r14 = t1.xo[t1.currentUser.toKey()];
                        r14 || (r14 = new We(q)), r14 = r14.insert(e6, n19), t1.xo[t1.currentUser.toKey()] = r14;
                    })(n18, o5.batchId, i8), [
                        4,
                        Ys(n18, o5.changes)
                    ];
                case 3:
                    return r13.sent(), [
                        4,
                        Zo(n18.remoteStore)
                    ];
                case 4:
                    return r13.sent(), [
                        3,
                        6
                    ];
                case 5:
                    return s = r13.sent(), u = hs(s, "Failed to persist write"), i8.reject(u), [
                        3,
                        6
                    ];
                case 6:
                    return [
                        2
                    ];
            }
        });
    });
}
/**
 * Applies one remote event to the sync engine, notifying any views of the
 * changes, and releasing any pending mutation batches that would become
 * visible because of the snapshot version the remote event contains.
 */ function Fs(t, e5) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var n18, i8;
        return _tslib.__generator(this, function(r13) {
            switch(r13.label){
                case 0:
                    n18 = F(t), r13.label = 1;
                case 1:
                    return r13.trys.push([
                        1,
                        4,
                        ,
                        6
                    ]), [
                        4,
                        Qi(n18.localStore, e5)
                    ];
                case 2:
                    return i8 = r13.sent(), // Update `receivedDocument` as appropriate for any limbo targets.
                    e5.targetChanges.forEach(function(t1, e6) {
                        var r14 = n18.Co.get(e6);
                        r14 && // Since this is a limbo resolution lookup, it's for a single document
                        // and it could be added, modified, or removed, but not a combination.
                        (P(t1.addedDocuments.size + t1.modifiedDocuments.size + t1.removedDocuments.size <= 1), t1.addedDocuments.size > 0 ? r14.bo = true : t1.modifiedDocuments.size > 0 ? P(r14.bo) : t1.removedDocuments.size > 0 && (P(r14.bo), r14.bo = false));
                    }), [
                        4,
                        Ys(n18, i8, e5)
                    ];
                case 3:
                    // Update `receivedDocument` as appropriate for any limbo targets.
                    return r13.sent(), [
                        3,
                        6
                    ];
                case 4:
                    return [
                        4,
                        pi(r13.sent())
                    ];
                case 5:
                    return r13.sent(), [
                        3,
                        6
                    ];
                case 6:
                    return [
                        2
                    ];
            }
        });
    });
}
/**
 * Applies an OnlineState change to the sync engine and notifies any views of
 * the change.
 */ function Ms(t, e5, n18) {
    var r13 = F(t);
    // If we are the secondary client, we explicitly ignore the remote store's
    // online state (the local client may go offline, even though the primary
    // tab remains online) and only apply the primary tab's online state from
    // SharedClientState.
    if (r13.isPrimaryClient && 0 === n18 || !r13.isPrimaryClient && 1 === n18) {
        var i8 = [];
        r13.Po.forEach(function(t1, n19) {
            var r14 = n19.view.zr(e5);
            r14.snapshot && i8.push(r14.snapshot);
        }), (function(t1, e6) {
            var n19 = F(t1);
            n19.onlineState = e6;
            var r14 = false;
            n19.queries.forEach(function(t2, n20) {
                for(var i9 = 0, o5 = n20.listeners; i9 < o5.length; i9++)// Run global snapshot listeners if a consistent snapshot has been emitted.
                o5[i9].zr(e6) && (r14 = true);
            }), r14 && bs(n19);
        })(r13.eventManager, e5), i8.length && r13.vo._r(i8), r13.onlineState = e5, r13.isPrimaryClient && r13.sharedClientState.setOnlineState(e5);
    }
}
/**
 * Rejects the listen for the given targetID. This can be triggered by the
 * backend for any active target.
 *
 * @param syncEngine - The sync engine implementation.
 * @param targetId - The targetID corresponds to one previously initiated by the
 * user as part of TargetData passed to listen() on RemoteStore.
 * @param err - A description of the condition that has forced the rejection.
 * Nearly always this will be an indication that the user is no longer
 * authorized to see the data matching the target.
 */ function Vs(t, e5, i9) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var n18, o5, s, u, a, c;
        return _tslib.__generator(this, function(r13) {
            switch(r13.label){
                case 0:
                    // PORTING NOTE: Multi-tab only.
                    return (n18 = F(t)).sharedClientState.updateQueryState(e5, "rejected", i9), o5 = n18.Co.get(e5), (s = o5 && o5.key) ? (u = (u = new We(ct.comparator)).insert(s, Nt.newNoDocument(s, K.min())), a = sn().add(s), c = new cn(K.min(), /* targetChanges= */ new Map, /* targetMismatches= */ new $e(q), u, a), [
                        4,
                        Fs(n18, c)
                    ]) : [
                        3,
                        2
                    ];
                case 1:
                    return r13.sent(), // Since this query failed, we won't want to manually unlisten to it.
                    // We only remove it from bookkeeping after we successfully applied the
                    // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to
                    // this query when the RemoteStore restarts the Watch stream, which should
                    // re-trigger the target failure.
                    n18.Do = n18.Do.remove(s), n18.Co.delete(e5), Hs(n18), [
                        3,
                        4
                    ];
                case 2:
                    return [
                        4,
                        Hi(n18.localStore, e5, /* keepPersistedTargetData */ false).then(function() {
                            return Qs(n18, e5, i9);
                        }).catch(pi)
                    ];
                case 3:
                    r13.sent(), r13.label = 4;
                case 4:
                    return [
                        2
                    ];
            }
        });
    });
}
function qs(t, e5) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var n18, i9, o5;
        return _tslib.__generator(this, function(r13) {
            switch(r13.label){
                case 0:
                    n18 = F(t), i9 = e5.batch.batchId, r13.label = 1;
                case 1:
                    return r13.trys.push([
                        1,
                        4,
                        ,
                        6
                    ]), [
                        4,
                        ji(n18.localStore, e5)
                    ];
                case 2:
                    return o5 = r13.sent(), // The local store may or may not be able to apply the write result and
                    // raise events immediately (depending on whether the watcher is caught
                    // up), so we raise user callbacks first so that they consistently happen
                    // before listen events.
                    Ks(n18, i9, /*error=*/ null), js(n18, i9), n18.sharedClientState.updateMutationState(i9, "acknowledged"), [
                        4,
                        Ys(n18, o5)
                    ];
                case 3:
                    // The local store may or may not be able to apply the write result and
                    // raise events immediately (depending on whether the watcher is caught
                    // up), so we raise user callbacks first so that they consistently happen
                    // before listen events.
                    return r13.sent(), [
                        3,
                        6
                    ];
                case 4:
                    return [
                        4,
                        pi(r13.sent())
                    ];
                case 5:
                    return r13.sent(), [
                        3,
                        6
                    ];
                case 6:
                    return [
                        2
                    ];
            }
        });
    });
}
function Us(t, e5, i9) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var n18, o5;
        return _tslib.__generator(this, function(r13) {
            switch(r13.label){
                case 0:
                    n18 = F(t), r13.label = 1;
                case 1:
                    return r13.trys.push([
                        1,
                        4,
                        ,
                        6
                    ]), [
                        4,
                        function(t1, e6) {
                            var n19 = F(t1);
                            return n19.persistence.runTransaction("Reject batch", "readwrite-primary", function(t2) {
                                var r14;
                                return n19._n.lookupMutationBatch(t2, e6).next(function(e7) {
                                    return P(null !== e7), r14 = e7.keys(), n19._n.removeMutationBatch(t2, e7);
                                }).next(function() {
                                    return n19._n.performConsistencyCheck(t2);
                                }).next(function() {
                                    return n19.Mn.pn(t2, r14);
                                });
                            });
                        }(n18.localStore, e5)
                    ];
                case 2:
                    return o5 = r13.sent(), // The local store may or may not be able to apply the write result and
                    // raise events immediately (depending on whether the watcher is caught up),
                    // so we raise user callbacks first so that they consistently happen before
                    // listen events.
                    Ks(n18, e5, i9), js(n18, e5), n18.sharedClientState.updateMutationState(e5, "rejected", i9), [
                        4,
                        Ys(n18, o5)
                    ];
                case 3:
                    // The local store may or may not be able to apply the write result and
                    // raise events immediately (depending on whether the watcher is caught up),
                    // so we raise user callbacks first so that they consistently happen before
                    // listen events.
                    return r13.sent(), [
                        3,
                        6
                    ];
                case 4:
                    return [
                        4,
                        pi(r13.sent())
                    ];
                case 5:
                    return r13.sent(), [
                        3,
                        6
                    ];
                case 6:
                    return [
                        2
                    ];
            }
        });
    });
}
/**
 * Registers a user callback that resolves when all pending mutations at the moment of calling
 * are acknowledged .
 */ function Bs(t, e5) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var n18, i9, o5, s, u;
        return _tslib.__generator(this, function(r13) {
            switch(r13.label){
                case 0:
                    zo((n18 = F(t)).remoteStore) || C("SyncEngine", "The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled."), r13.label = 1;
                case 1:
                    return r13.trys.push([
                        1,
                        3,
                        ,
                        4
                    ]), [
                        4,
                        function(t1) {
                            var e6 = F(t1);
                            return e6.persistence.runTransaction("Get highest unacknowledged batch id", "readonly", function(t2) {
                                return e6._n.getHighestUnacknowledgedBatchId(t2);
                            });
                        }(n18.localStore)
                    ];
                case 2:
                    return -1 === (i9 = r13.sent()) ? [
                        2,
                        void e5.resolve()
                    ] : ((o5 = n18.ko.get(i9) || []).push(e5), n18.ko.set(i9, o5), [
                        3,
                        4
                    ]);
                case 3:
                    return s = r13.sent(), u = hs(s, "Initialization of waitForPendingWrites() operation failed"), e5.reject(u), [
                        3,
                        4
                    ];
                case 4:
                    return [
                        2
                    ];
            }
        });
    });
}
/**
 * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,
 * if there are any.
 */ function js(t, e5) {
    (t.ko.get(e5) || []).forEach(function(t1) {
        t1.resolve();
    }), t.ko.delete(e5);
}
function Ks(t, e5, n18) {
    var r13 = F(t), i9 = r13.xo[r13.currentUser.toKey()];
    // NOTE: Mutations restored from persistence won't have callbacks, so it's
    // okay for there to be no callback for this ID.
    if (i9) {
        var o5 = i9.get(e5);
        o5 && (n18 ? o5.reject(n18) : o5.resolve(), i9 = i9.remove(e5)), r13.xo[r13.currentUser.toKey()] = i9;
    }
}
function Qs(t, e5, n18) {
    (void 0) === n18 && (n18 = null), t.sharedClientState.removeLocalQueryTarget(e5);
    for(var r13 = 0, i9 = t.Vo.get(e5); r13 < i9.length; r13++){
        var o6 = i9[r13];
        t.Po.delete(o6), n18 && t.vo.Mo(o6, n18);
    }
    t.Vo.delete(e5), t.isPrimaryClient && t.No.Zn(e5).forEach(function(e6) {
        t.No.containsKey(e6) || // We removed the last reference for this key
        Gs(t, e6);
    });
}
function Gs(t, e5) {
    t.So.delete(e5.path.canonicalString());
    // It's possible that the target already got removed because the query failed. In that case,
    // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.
    var n18 = t.Do.get(e5);
    null !== n18 && (Bo(t.remoteStore, n18), t.Do = t.Do.remove(e5), t.Co.delete(n18), Hs(t));
}
function zs(t, e5, n18) {
    for(var r13 = 0, i9 = n18; r13 < i9.length; r13++){
        var o7 = i9[r13];
        o7 instanceof Ns ? (t.No.addReference(o7.key, e5), Ws(t, o7)) : o7 instanceof Ds ? (C("SyncEngine", "Document no longer in limbo: " + o7.key), t.No.removeReference(o7.key, e5), t.No.containsKey(o7.key) || // We removed the last reference for this key
        Gs(t, o7.key)) : O();
    }
}
function Ws(t, e5) {
    var n18 = e5.key, r13 = n18.path.canonicalString();
    t.Do.get(n18) || t.So.has(r13) || (C("SyncEngine", "New document in limbo: " + n18), t.So.add(r13), Hs(t));
}
/**
 * Starts listens for documents in limbo that are enqueued for resolution,
 * subject to a maximum number of concurrent resolutions.
 *
 * Without bounding the number of concurrent resolutions, the server can fail
 * with "resource exhausted" errors which can lead to pathological client
 * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.
 */ function Hs(t) {
    for(; t.So.size > 0 && t.Do.size < t.maxConcurrentLimboResolutions;){
        var e5 = t.So.values().next().value;
        t.So.delete(e5);
        var n18 = new ct(H.fromString(e5)), r13 = t.Fo.next();
        t.Co.set(r13, new Cs(n18)), t.Do = t.Do.insert(n18, r13), Uo(t.remoteStore, new Pr(ne(Yt(n18.path)), r13, 2/* LimboResolution */ , S.o));
    }
}
function Ys(t, e6, i9) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var o8, s, u, a;
        return _tslib.__generator(this, function(c) {
            switch(c.label){
                case 0:
                    return o8 = F(t), s = [], u = [], a = [], o8.Po.isEmpty() ? [
                        3,
                        3
                    ] : (o8.Po.forEach(function(t1, n19) {
                        a.push(o8.Oo(n19, e6, i9).then(function(t2) {
                            if (t2) {
                                o8.isPrimaryClient && o8.sharedClientState.updateQueryState(n19.targetId, t2.fromCache ? "not-current" : "current"), s.push(t2);
                                var e7 = Mi.Pn(n19.targetId, t2);
                                u.push(e7);
                            }
                        }));
                    }), [
                        4,
                        Promise.all(a)
                    ]);
                case 1:
                    return c.sent(), o8.vo._r(s), [
                        4,
                        function(t1, e8) {
                            return _tslib.__awaiter(this, void 0, void 0, function() {
                                var n19, i10, o9, s1, u1, a1, c1, h, f;
                                return _tslib.__generator(this, function(r14) {
                                    switch(r14.label){
                                        case 0:
                                            n19 = F(t1), r14.label = 1;
                                        case 1:
                                            return r14.trys.push([
                                                1,
                                                3,
                                                ,
                                                4
                                            ]), [
                                                4,
                                                n19.persistence.runTransaction("notifyLocalViewChanges", "readwrite", function(t2) {
                                                    return Ir.forEach(e8, function(e9) {
                                                        return Ir.forEach(e9.bn, function(r15) {
                                                            return n19.persistence.referenceDelegate.addReference(t2, e9.targetId, r15);
                                                        }).next(function() {
                                                            return Ir.forEach(e9.vn, function(r15) {
                                                                return n19.persistence.referenceDelegate.removeReference(t2, e9.targetId, r15);
                                                            });
                                                        });
                                                    });
                                                })
                                            ];
                                        case 2:
                                            return r14.sent(), [
                                                3,
                                                4
                                            ];
                                        case 3:
                                            if (!Nr(i10 = r14.sent())) throw i10;
                                            // If `notifyLocalViewChanges` fails, we did not advance the sequence
                                            // number for the documents that were included in this transaction.
                                            // This might trigger them to be deleted earlier than they otherwise
                                            // would have, but it should not invalidate the integrity of the data.
                                            return C("LocalStore", "Failed to update sequence numbers: " + i10), [
                                                3,
                                                4
                                            ];
                                        case 4:
                                            for(o9 = 0, s1 = e8; o9 < s1.length; o9++)u1 = s1[o9], a1 = u1.targetId, u1.fromCache || (c1 = n19.kn.get(a1), h = c1.snapshotVersion, f = c1.withLastLimboFreeSnapshotVersion(h), // Advance the last limbo free snapshot version
                                            n19.kn = n19.kn.insert(a1, f));
                                            return [
                                                2
                                            ];
                                    }
                                });
                            });
                        }(o8.localStore, u)
                    ];
                case 2:
                    c.sent(), c.label = 3;
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
}
function $s(t, e6) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var n19, i9;
        return _tslib.__generator(this, function(r14) {
            switch(r14.label){
                case 0:
                    return (n19 = F(t)).currentUser.isEqual(e6) ? [
                        3,
                        3
                    ] : (C("SyncEngine", "User change. New user:", e6.toKey()), [
                        4,
                        Bi(n19.localStore, e6)
                    ]);
                case 1:
                    return i9 = r14.sent(), n19.currentUser = e6, // Fails tasks waiting for pending writes requested by previous user.
                    (function(t1, e8) {
                        t1.ko.forEach(function(t2) {
                            t2.forEach(function(t3) {
                                t3.reject(new D(N.CANCELLED, "'waitForPendingWrites' promise is rejected due to a user change."));
                            });
                        }), t1.ko.clear();
                    })(n19), // TODO(b/114226417): Consider calling this only in the primary tab.
                    n19.sharedClientState.handleUserChange(e6, i9.removedBatchIds, i9.addedBatchIds), [
                        4,
                        Ys(n19, i9.Ln)
                    ];
                case 2:
                    r14.sent(), r14.label = 3;
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
}
function Xs(t, e6) {
    var n19 = F(t), r14 = n19.Co.get(e6);
    if (r14 && r14.bo) return sn().add(r14.key);
    var i9 = sn(), o8 = n19.Vo.get(e6);
    if (!o8) return i9;
    for(var s = 0, u = o8; s < u.length; s++){
        var a = u[s], c = n19.Po.get(a);
        i9 = i9.unionWith(c.view.wo);
    }
    return i9;
}
/**
 * Reconcile the list of synced documents in an existing view with those
 * from persistence.
 */ function Js(t, e6) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var n19, i9, o8;
        return _tslib.__generator(this, function(r14) {
            switch(r14.label){
                case 0:
                    return [
                        4,
                        Yi((n19 = F(t)).localStore, e6.query, /* usePreviousResults= */ true)
                    ];
                case 1:
                    return i9 = r14.sent(), o8 = e6.view.Ao(i9), [
                        2,
                        (n19.isPrimaryClient && zs(n19, e6.targetId, o8.To), o8)
                    ];
            }
        });
    });
}
/**
 * Retrieves newly changed documents from remote document cache and raises
 * snapshots if needed.
 */ // PORTING NOTE: Multi-Tab only.
function Zs(t) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var e6;
        return _tslib.__generator(this, function(n19) {
            return [
                2,
                Xi((e6 = F(t)).localStore).then(function(t1) {
                    return Ys(e6, t1);
                })
            ];
        });
    });
}
/** Applies a mutation state to an existing batch.  */ // PORTING NOTE: Multi-Tab only.
function tu(t, e6, i9, o8) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var n19, s;
        return _tslib.__generator(this, function(r14) {
            switch(r14.label){
                case 0:
                    return [
                        4,
                        function(t1, e8) {
                            var n20 = F(t1), r15 = F(n20._n);
                            return n20.persistence.runTransaction("Lookup mutation documents", "readonly", function(t2) {
                                return r15.jt(t2, e8).next(function(e9) {
                                    return e9 ? n20.Mn.pn(t2, e9) : Ir.resolve(null);
                                });
                            });
                        }((n19 = F(t)).localStore, e6)
                    ];
                case 1:
                    return null === (s = r14.sent()) ? [
                        3,
                        6
                    ] : "pending" !== i9 ? [
                        3,
                        3
                    ] : [
                        4,
                        Zo(n19.remoteStore)
                    ];
                case 2:
                    // If we are the primary client, we need to send this write to the
                    // backend. Secondary clients will ignore these writes since their remote
                    // connection is disabled.
                    return r14.sent(), [
                        3,
                        4
                    ];
                case 3:
                    "acknowledged" === i9 || "rejected" === i9 ? // NOTE: Both these methods are no-ops for batches that originated from
                    // other clients.
                    (Ks(n19, e6, o8 || null), js(n19, e6), (function(t1, e8) {
                        F(F(t1)._n).Gt(e8);
                    })(n19.localStore, e6)) : O(), r14.label = 4;
                case 4:
                    return [
                        4,
                        Ys(n19, s)
                    ];
                case 5:
                    return r14.sent(), [
                        3,
                        7
                    ];
                case 6:
                    // A throttled tab may not have seen the mutation before it was completed
                    // and removed from the mutation queue, in which case we won't have cached
                    // the affected documents. In this case we can safely ignore the update
                    // since that means we didn't apply the mutation locally at all (if we
                    // had, we would have cached the affected documents), and so we will just
                    // see any resulting document changes via normal remote document updates
                    // as applicable.
                    C("SyncEngine", "Cannot apply mutation batch with id: " + e6), r14.label = 7;
                case 7:
                    return [
                        2
                    ];
            }
        });
    });
}
/** Applies a query target change from a different tab. */ // PORTING NOTE: Multi-Tab only.
function eu(t, e6) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var n19, i9, o8, s, u, a, c, h;
        return _tslib.__generator(this, function(r14) {
            switch(r14.label){
                case 0:
                    return uu(n19 = F(t)), au(n19), true !== e6 || true === n19.$o ? [
                        3,
                        3
                    ] : (i9 = n19.sharedClientState.getAllActiveQueryTargets(), [
                        4,
                        nu(n19, i9.toArray())
                    ]);
                case 1:
                    return o8 = r14.sent(), n19.$o = true, [
                        4,
                        ss(n19.remoteStore, true)
                    ];
                case 2:
                    for(r14.sent(), s = 0, u = o8; s < u.length; s++)a = u[s], Uo(n19.remoteStore, a);
                    return [
                        3,
                        7
                    ];
                case 3:
                    return false !== e6 || false === n19.$o ? [
                        3,
                        7
                    ] : (c = [], h = Promise.resolve(), n19.Vo.forEach(function(t1, e8) {
                        n19.sharedClientState.isLocalQueryTarget(e8) ? c.push(e8) : h = h.then(function() {
                            return Qs(n19, e8), Hi(n19.localStore, e8, /*keepPersistedTargetData=*/ true);
                        }), Bo(n19.remoteStore, e8);
                    }), [
                        4,
                        h
                    ]);
                case 4:
                    return r14.sent(), [
                        4,
                        nu(n19, c)
                    ];
                case 5:
                    return r14.sent(), // PORTING NOTE: Multi-Tab only.
                    (function(t1) {
                        var e8 = F(t1);
                        e8.Co.forEach(function(t2, n20) {
                            Bo(e8.remoteStore, n20);
                        }), e8.No.ts(), e8.Co = new Map, e8.Do = new We(ct.comparator);
                    })(n19), n19.$o = false, [
                        4,
                        ss(n19.remoteStore, false)
                    ];
                case 6:
                    r14.sent(), r14.label = 7;
                case 7:
                    return [
                        2
                    ];
            }
        });
    });
}
function nu(t, e6, i9) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var n19, i10, o8, s, u, a, c, h, f, l, d, p, y, v;
        return _tslib.__generator(this, function(r14) {
            switch(r14.label){
                case 0:
                    n19 = F(t), i10 = [], o8 = [], s = 0, u = e6, r14.label = 1;
                case 1:
                    return s < u.length ? (a = u[s], c = void 0, (h = n19.Vo.get(a)) && 0 !== h.length ? [
                        4,
                        Wi(n19.localStore, ne(h[0]))
                    ] : [
                        3,
                        7
                    ]) : [
                        3,
                        13
                    ];
                case 2:
                    // For queries that have a local View, we fetch their current state
                    // from LocalStore (as the resume token and the snapshot version
                    // might have changed) and reconcile their views with the persisted
                    // state (the list of syncedDocuments may have gotten out of sync).
                    c = r14.sent(), f = 0, l = h, r14.label = 3;
                case 3:
                    return f < l.length ? (d = l[f], p = n19.Po.get(d), [
                        4,
                        Js(n19, p)
                    ]) : [
                        3,
                        6
                    ];
                case 4:
                    (y = r14.sent()).snapshot && o8.push(y.snapshot), r14.label = 5;
                case 5:
                    return f++, [
                        3,
                        3
                    ];
                case 6:
                    return [
                        3,
                        11
                    ];
                case 7:
                    return [
                        4,
                        $i(n19.localStore, a)
                    ];
                case 8:
                    return v = r14.sent(), [
                        4,
                        Wi(n19.localStore, v)
                    ];
                case 9:
                    return c = r14.sent(), [
                        4,
                        Ls(n19, ru(v), a, /*current=*/ false)
                    ];
                case 10:
                    r14.sent(), r14.label = 11;
                case 11:
                    i10.push(c), r14.label = 12;
                case 12:
                    return s++, [
                        3,
                        1
                    ];
                case 13:
                    return [
                        2,
                        (n19.vo._r(o8), i10)
                    ];
            }
        });
    });
}
/**
 * Creates a `Query` object from the specified `Target`. There is no way to
 * obtain the original `Query`, so we synthesize a `Query` from the `Target`
 * object.
 *
 * The synthesized result might be different from the original `Query`, but
 * since the synthesized `Query` should return the same results as the
 * original one (only the presentation of results might differ), the potential
 * difference will not cause issues.
 */ // PORTING NOTE: Multi-Tab only.
function ru(t) {
    return Ht(t.path, t.collectionGroup, t.orderBy, t.filters, t.limit, "F"/* First */ , t.startAt, t.endAt);
}
/** Returns the IDs of the clients that are currently active. */ // PORTING NOTE: Multi-Tab only.
function iu(t) {
    var e6 = F(t);
    return F(F(e6.localStore).persistence).fn();
}
/** Applies a query target change from a different tab. */ // PORTING NOTE: Multi-Tab only.
function ou(t, e6, i9, o8) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var n19, s, u;
        return _tslib.__generator(this, function(r14) {
            switch(r14.label){
                case 0:
                    return (n19 = F(t)).$o ? // If we receive a target state notification via WebStorage, we are
                    // either already secondary or another tab has taken the primary lease.
                    (C("SyncEngine", "Ignoring unexpected query state notification."), [
                        3,
                        8
                    ]) : [
                        3,
                        1
                    ];
                case 1:
                    if (!n19.Vo.has(e6)) return [
                        3,
                        8
                    ];
                    switch(i9){
                        case "current":
                        case "not-current":
                            return [
                                3,
                                2
                            ];
                        case "rejected":
                            return [
                                3,
                                5
                            ];
                    }
                    return [
                        3,
                        7
                    ];
                case 2:
                    return [
                        4,
                        Xi(n19.localStore)
                    ];
                case 3:
                    return s = r14.sent(), u = cn.createSynthesizedRemoteEventForCurrentChange(e6, "current" === i9), [
                        4,
                        Ys(n19, s, u)
                    ];
                case 4:
                    return r14.sent(), [
                        3,
                        8
                    ];
                case 5:
                    return [
                        4,
                        Hi(n19.localStore, e6, /* keepPersistedTargetData */ true)
                    ];
                case 6:
                    return r14.sent(), Qs(n19, e6, o8), [
                        3,
                        8
                    ];
                case 7:
                    O(), r14.label = 8;
                case 8:
                    return [
                        2
                    ];
            }
        });
    });
}
/** Adds or removes Watch targets for queries from different tabs. */ function su(t, e6, i9) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var n19, o8, s, u, a, c, h, f, l, d;
        return _tslib.__generator(this, function(p) {
            switch(p.label){
                case 0:
                    if (!(n19 = uu(t)).$o) return [
                        3,
                        10
                    ];
                    o8 = 0, s = e6, p.label = 1;
                case 1:
                    return o8 < s.length ? (u = s[o8], n19.Vo.has(u) ? // A target might have been added in a previous attempt
                    (C("SyncEngine", "Adding an already active target " + u), [
                        3,
                        5
                    ]) : [
                        4,
                        $i(n19.localStore, u)
                    ]) : [
                        3,
                        6
                    ];
                case 2:
                    return a = p.sent(), [
                        4,
                        Wi(n19.localStore, a)
                    ];
                case 3:
                    return c = p.sent(), [
                        4,
                        Ls(n19, ru(a), c.targetId, /*current=*/ false)
                    ];
                case 4:
                    p.sent(), Uo(n19.remoteStore, c), p.label = 5;
                case 5:
                    return o8++, [
                        3,
                        1
                    ];
                case 6:
                    h = function(t1) {
                        return _tslib.__generator(this, function(e8) {
                            switch(e8.label){
                                case 0:
                                    return n19.Vo.has(t1) ? [
                                        4,
                                        Hi(n19.localStore, t1, /* keepPersistedTargetData */ false).then(function() {
                                            Bo(n19.remoteStore, t1), Qs(n19, t1);
                                        }).catch(pi)
                                    ] : [
                                        3,
                                        2
                                    ];
                                // Release queries that are still active.
                                case 1:
                                    // Release queries that are still active.
                                    e8.sent(), e8.label = 2;
                                case 2:
                                    return [
                                        2
                                    ];
                            }
                        });
                    }, f = 0, l = i9, p.label = 7;
                case 7:
                    return f < l.length ? (d = l[f], [
                        5,
                        h(d)
                    ]) : [
                        3,
                        10
                    ];
                case 8:
                    p.sent(), p.label = 9;
                case 9:
                    return f++, [
                        3,
                        7
                    ];
                case 10:
                    return [
                        2
                    ];
            }
        });
    });
}
function uu(t) {
    var e6 = F(t);
    return e6.remoteStore.remoteSyncer.applyRemoteEvent = Fs.bind(null, e6), e6.remoteStore.remoteSyncer.getRemoteKeysForTarget = Xs.bind(null, e6), e6.remoteStore.remoteSyncer.rejectListen = Vs.bind(null, e6), e6.vo._r = gs.bind(null, e6.eventManager), e6.vo.Mo = ws.bind(null, e6.eventManager), e6;
}
function au(t) {
    var e6 = F(t);
    return e6.remoteStore.remoteSyncer.applySuccessfulWrite = qs.bind(null, e6), e6.remoteStore.remoteSyncer.rejectFailedWrite = Us.bind(null, e6), e6;
}
function cu(t, e6, i9) {
    var o8 = F(t);
    // eslint-disable-next-line @typescript-eslint/no-floating-promises
    (function(t1, e8, i10) {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var n19, o9, s, u, a, c;
            return _tslib.__generator(this, function(r14) {
                switch(r14.label){
                    case 0:
                        return r14.trys.push([
                            0,
                            14,
                            ,
                            15
                        ]), [
                            4,
                            e8.getMetadata()
                        ];
                    case 1:
                        return n19 = r14.sent(), [
                            4,
                            function(t2, e9) {
                                var n20 = F(t2), r15 = _n(e9.createTime);
                                return n20.persistence.runTransaction("hasNewerBundle", "readonly", function(t3) {
                                    return n20.Ke.getBundleMetadata(t3, e9.id);
                                }).then(function(t3) {
                                    return !!t3 && t3.createTime.compareTo(r15) >= 0;
                                });
                            }(t1.localStore, n19)
                        ];
                    case 2:
                        return r14.sent() ? [
                            4,
                            e8.close()
                        ] : [
                            3,
                            4
                        ];
                    case 3:
                        return [
                            2,
                            (r14.sent(), void i10._completeWith(function(t2) {
                                return {
                                    taskState: "Success",
                                    documentsLoaded: t2.totalDocuments,
                                    bytesLoaded: t2.totalBytes,
                                    totalDocuments: t2.totalDocuments,
                                    totalBytes: t2.totalBytes
                                };
                            }(n19)))
                        ];
                    case 4:
                        return i10._updateProgress(Ss(n19)), o9 = new _s(n19, t1.localStore, e8.R), [
                            4,
                            e8.Lo()
                        ];
                    case 5:
                        s = r14.sent(), r14.label = 6;
                    case 6:
                        return s ? [
                            4,
                            o9.oo(s)
                        ] : [
                            3,
                            10
                        ];
                    case 7:
                        return (u = r14.sent()) && i10._updateProgress(u), [
                            4,
                            e8.Lo()
                        ];
                    case 8:
                        s = r14.sent(), r14.label = 9;
                    case 9:
                        return [
                            3,
                            6
                        ];
                    case 10:
                        return [
                            4,
                            o9.complete()
                        ];
                    case 11:
                        // TODO(b/160876443): This currently raises snapshots with
                        // `fromCache=false` if users already listen to some queries and bundles
                        // has newer version.
                        return a = r14.sent(), [
                            4,
                            Ys(t1, a.wn, /* remoteEvent */ void 0)
                        ];
                    case 12:
                        // Save metadata, so loading the same bundle will skip.
                        // TODO(b/160876443): This currently raises snapshots with
                        // `fromCache=false` if users already listen to some queries and bundles
                        // has newer version.
                        return r14.sent(), [
                            4,
                            function(t2, e9) {
                                var n20 = F(t2);
                                return n20.persistence.runTransaction("Save bundle", "readwrite", function(t3) {
                                    return n20.Ke.saveBundleMetadata(t3, e9);
                                });
                            }(t1.localStore, n19)
                        ];
                    case 13:
                        // TODO(b/160876443): This currently raises snapshots with
                        // `fromCache=false` if users already listen to some queries and bundles
                        // has newer version.
                        // Save metadata, so loading the same bundle will skip.
                        return r14.sent(), i10._completeWith(a.progress), [
                            3,
                            15
                        ];
                    case 14:
                        return R("SyncEngine", "Loading bundle failed with " + (c = r14.sent())), i10._failWith(c), [
                            3,
                            15
                        ];
                    case 15:
                        return [
                            2
                        ];
                }
            });
        });
    })(o8, e6, i9).then(function() {
        o8.sharedClientState.notifyBundleLoaded();
    });
}
var hu = /** @class */ function() {
    function t() {
        this.synchronizeTabs = false;
    }
    return t.prototype.initialize = function(t1) {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            return _tslib.__generator(this, function(e6) {
                switch(e6.label){
                    case 0:
                        return this.R = Co(t1.databaseInfo.databaseId), this.sharedClientState = this.Bo(t1), this.persistence = this.qo(t1), [
                            4,
                            this.persistence.start()
                        ];
                    case 1:
                        return e6.sent(), this.gcScheduler = this.Uo(t1), this.localStore = this.Ko(t1), [
                            2
                        ];
                }
            });
        });
    }, t.prototype.Uo = function(t1) {
        return null;
    }, t.prototype.Ko = function(t1) {
        return Ui(this.persistence, new Vi, t1.initialUser, this.R);
    }, t.prototype.qo = function(t1) {
        return new ao(ho.bs, this.R);
    }, t.prototype.Bo = function(t1) {
        return new To;
    }, t.prototype.terminate = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            return _tslib.__generator(this, function(t1) {
                switch(t1.label){
                    case 0:
                        return this.gcScheduler && this.gcScheduler.stop(), [
                            4,
                            this.sharedClientState.shutdown()
                        ];
                    case 1:
                        return t1.sent(), [
                            4,
                            this.persistence.shutdown()
                        ];
                    case 2:
                        return t1.sent(), [
                            2
                        ];
                }
            });
        });
    }, t;
}(), fu = /** @class */ function(e6) {
    function i9(t, n19, r14) {
        var i10 = this;
        return (i10 = e6.call(this) || this).Qo = t, i10.cacheSizeBytes = n19, i10.forceOwnership = r14, i10.synchronizeTabs = false, i10;
    }
    return _tslib.__extends(i9, e6), i9.prototype.initialize = function(t) {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var n19 = this;
            return _tslib.__generator(this, function(r14) {
                switch(r14.label){
                    case 0:
                        return [
                            4,
                            e6.prototype.initialize.call(this, t)
                        ];
                    case 1:
                        return r14.sent(), [
                            4,
                            Ji(this.localStore)
                        ];
                    case 2:
                        return r14.sent(), [
                            4,
                            this.Qo.initialize(this, t)
                        ];
                    case 3:
                        // Enqueue writes from a previous session
                        return r14.sent(), [
                            4,
                            au(this.Qo.syncEngine)
                        ];
                    case 4:
                        // Enqueue writes from a previous session
                        return r14.sent(), [
                            4,
                            Zo(this.Qo.remoteStore)
                        ];
                    case 5:
                        // NOTE: This will immediately call the listener, so we make sure to
                        // set it after localStore / remoteStore are started.
                        return r14.sent(), [
                            4,
                            this.persistence.He(function() {
                                return n19.gcScheduler && !n19.gcScheduler.started && n19.gcScheduler.start(n19.localStore), Promise.resolve();
                            })
                        ];
                    case 6:
                        // NOTE: This will immediately call the listener, so we make sure to
                        // set it after localStore / remoteStore are started.
                        return r14.sent(), [
                            2
                        ];
                }
            });
        });
    }, i9.prototype.Ko = function(t) {
        return Ui(this.persistence, new Vi, t.initialUser, this.R);
    }, i9.prototype.Uo = function(t) {
        var e8 = this.persistence.referenceDelegate.garbageCollector;
        return new mi(e8, t.asyncQueue);
    }, i9.prototype.qo = function(t) {
        var e8 = Oi(t.databaseInfo.databaseId, t.databaseInfo.persistenceKey), n19 = (void 0) !== this.cacheSizeBytes ? ei.withCacheSize(this.cacheSizeBytes) : ei.DEFAULT;
        return new xi(this.synchronizeTabs, e8, t.clientId, n19, t.asyncQueue, Ao(), ko(), this.R, this.sharedClientState, !!this.forceOwnership);
    }, i9.prototype.Bo = function(t) {
        return new To;
    }, i9;
}(hu), lu = /** @class */ function(e6) {
    function i9(t, n19) {
        var r14 = this;
        return (r14 = e6.call(this, t, n19, /* forceOwnership= */ !1) || this).Qo = t, r14.cacheSizeBytes = n19, r14.synchronizeTabs = true, r14;
    }
    return _tslib.__extends(i9, e6), i9.prototype.initialize = function(t) {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var i10, o8 = this;
            return _tslib.__generator(this, function(s) {
                switch(s.label){
                    case 0:
                        return [
                            4,
                            e6.prototype.initialize.call(this, t)
                        ];
                    case 1:
                        return s.sent(), i10 = this.Qo.syncEngine, this.sharedClientState instanceof Io ? (this.sharedClientState.syncEngine = {
                            ui: tu.bind(null, i10),
                            ai: ou.bind(null, i10),
                            hi: su.bind(null, i10),
                            fn: iu.bind(null, i10),
                            ci: Zs.bind(null, i10)
                        }, [
                            4,
                            this.sharedClientState.start()
                        ]) : [
                            3,
                            3
                        ];
                    case 2:
                        s.sent(), s.label = 3;
                    case 3:
                        // NOTE: This will immediately call the listener, so we make sure to
                        // set it after localStore / remoteStore are started.
                        return [
                            4,
                            this.persistence.He(function(t1) {
                                return _tslib.__awaiter(o8, void 0, void 0, function() {
                                    return _tslib.__generator(this, function(e8) {
                                        switch(e8.label){
                                            case 0:
                                                return [
                                                    4,
                                                    eu(this.Qo.syncEngine, t1)
                                                ];
                                            case 1:
                                                return e8.sent(), this.gcScheduler && (t1 && !this.gcScheduler.started ? this.gcScheduler.start(this.localStore) : t1 || this.gcScheduler.stop()), [
                                                    2
                                                ];
                                        }
                                    });
                                });
                            })
                        ];
                    case 4:
                        // NOTE: This will immediately call the listener, so we make sure to
                        // set it after localStore / remoteStore are started.
                        return s.sent(), [
                            2
                        ];
                }
            });
        });
    }, i9.prototype.Bo = function(t) {
        var e8 = Ao();
        if (!Io.yt(e8)) throw new D(N.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
        var n19 = Oi(t.databaseInfo.databaseId, t.databaseInfo.persistenceKey);
        return new Io(e8, t.asyncQueue, n19, t.clientId, t.initialUser);
    }, i9;
}(fu), du = /** @class */ function() {
    function t() {
    }
    return t.prototype.initialize = function(t1, e6) {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var n19 = this;
            return _tslib.__generator(this, function(r14) {
                switch(r14.label){
                    case 0:
                        return this.localStore ? [
                            3,
                            2
                        ] : (this.localStore = t1.localStore, this.sharedClientState = t1.sharedClientState, this.datastore = this.createDatastore(e6), this.remoteStore = this.createRemoteStore(e6), this.eventManager = this.createEventManager(e6), this.syncEngine = this.createSyncEngine(e6, /* startAsPrimary=*/ !t1.synchronizeTabs), this.sharedClientState.onlineStateHandler = function(t2) {
                            return Ms(n19.syncEngine, t2, 1/* SharedClientState */ );
                        }, this.remoteStore.remoteSyncer.handleCredentialChange = $s.bind(null, this.syncEngine), [
                            4,
                            ss(this.remoteStore, this.syncEngine.isPrimaryClient)
                        ]);
                    case 1:
                        r14.sent(), r14.label = 2;
                    case 2:
                        return [
                            2
                        ];
                }
            });
        });
    }, t.prototype.createEventManager = function(t1) {
        return new ys;
    }, t.prototype.createDatastore = function(t1) {
        var e6, n19 = Co(t1.databaseInfo.databaseId), r14 = (e6 = t1.databaseInfo, new Do(e6));
        /** Return the Platform-specific connectivity monitor. */ return (function(t2, e8, n20) {
            return new Po(t2, e8, n20);
        })(t1.credentials, r14, n19);
    }, t.prototype.createRemoteStore = function(t1) {
        var e6, n19, r14, i9, o8, s = this;
        return e6 = this.localStore, n19 = this.datastore, r14 = t1.asyncQueue, i9 = function(t2) {
            return Ms(s.syncEngine, t2, 0/* RemoteStore */ );
        }, o8 = _o.yt() ? new _o : new Eo, new Mo(e6, n19, r14, i9, o8);
    }, t.prototype.createSyncEngine = function(t1, e6) {
        return (function(t2, e8, n19, // PORTING NOTE: Manages state synchronization in multi-tab environments.
        r14, i9, o8, s) {
            var u = new xs(t2, e8, n19, r14, i9, o8);
            return s && (u.$o = true), u;
        })(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, t1.initialUser, t1.maxConcurrentLimboResolutions, e6);
    }, t.prototype.terminate = function() {
        return (function(t1) {
            return _tslib.__awaiter(this, void 0, void 0, function() {
                var e6;
                return _tslib.__generator(this, function(n19) {
                    switch(n19.label){
                        case 0:
                            return e6 = F(t1), C("RemoteStore", "RemoteStore shutting down."), e6.Or.add(5/* Shutdown */ ), [
                                4,
                                qo(e6)
                            ];
                        case 1:
                            return n19.sent(), e6.Lr.shutdown(), // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
                            // triggering spurious listener events with cached data, etc.
                            e6.Br.set("Unknown"/* Unknown */ ), [
                                2
                            ];
                    }
                });
            });
        })(this.remoteStore);
    }, t;
}();
/**
 * Provides all components needed for Firestore with IndexedDB persistence.
 */ /**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * How many bytes to read each time when `ReadableStreamReader.read()` is
 * called. Only applicable for byte streams that we control (e.g. those backed
 * by an UInt8Array).
 */ /**
 * Builds a `ByteStreamReader` from a UInt8Array.
 * @param source - The data source to use.
 * @param bytesPerRead - How many bytes each `read()` from the returned reader
 *        will read.
 */ function pu(t, e6) {
    (void 0) === e6 && (e6 = 10240);
    var i9 = 0;
    return {
        read: function() {
            return _tslib.__awaiter(this, void 0, void 0, function() {
                var n19;
                return _tslib.__generator(this, function(r14) {
                    return i9 < t.byteLength ? (n19 = {
                        value: t.slice(i9, i9 + e6),
                        done: false
                    }, [
                        2,
                        (i9 += e6, n19)
                    ]) : [
                        2,
                        {
                            done: true
                        }
                    ];
                });
            });
        },
        cancel: function() {
            return _tslib.__awaiter(this, void 0, void 0, function() {
                return _tslib.__generator(this, function(t1) {
                    return [
                        2
                    ];
                });
            });
        },
        releaseLock: function() {
        },
        closed: Promise.reject("unimplemented")
    };
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * On web, a `ReadableStream` is wrapped around by a `ByteStreamReader`.
 */ /**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * A wrapper implementation of Observer<T> that will dispatch events
 * asynchronously. To allow immediate silencing, a mute call is added which
 * causes events scheduled to no longer be raised.
 */ var yu = /** @class */ function() {
    function t(t1) {
        this.observer = t1, /**
             * When set to true, will not raise future events. Necessary to deal with
             * async detachment of listener.
             */ this.muted = false;
    }
    return t.prototype.next = function(t1) {
        this.observer.next && this.jo(this.observer.next, t1);
    }, t.prototype.error = function(t1) {
        this.observer.error ? this.jo(this.observer.error, t1) : console.error("Uncaught Error in snapshot listener:", t1);
    }, t.prototype.Wo = function() {
        this.muted = true;
    }, t.prototype.jo = function(t1, e6) {
        var n19 = this;
        this.muted || setTimeout(function() {
            n19.muted || t1(e6);
        }, 0);
    }, t;
}(), vu = /** @class */ function() {
    function t(/** The reader to read from underlying binary bundle data source. */ t1, e6) {
        var n19 = this;
        this.Go = t1, this.R = e6, /** Cached bundle metadata. */ this.metadata = new br, /**
             * Internal buffer to hold bundle content, accumulating incomplete element
             * content.
             */ this.buffer = new Uint8Array, this.zo = new TextDecoder("utf-8"), // Read the metadata (which is the first element).
        this.Ho().then(function(t2) {
            t2 && t2.io() ? n19.metadata.resolve(t2.payload.metadata) : n19.metadata.reject(new Error("The first element of the bundle is not a metadata, it is\n             " + JSON.stringify(null == t2 ? void 0 : t2.payload)));
        }, function(t2) {
            return n19.metadata.reject(t2);
        });
    }
    return t.prototype.close = function() {
        return this.Go.cancel();
    }, t.prototype.getMetadata = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            return _tslib.__generator(this, function(t1) {
                return [
                    2,
                    this.metadata.promise
                ];
            });
        });
    }, t.prototype.Lo = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            return _tslib.__generator(this, function(t1) {
                switch(t1.label){
                    case 0:
                        return [
                            4,
                            this.getMetadata()
                        ];
                    case 1:
                        // Makes sure metadata is read before proceeding.
                        return [
                            2,
                            (t1.sent(), this.Ho())
                        ];
                }
            });
        });
    }, /**
     * Reads from the head of internal buffer, and pulling more data from
     * underlying stream if a complete element cannot be found, until an
     * element(including the prefixed length and the JSON string) is found.
     *
     * Once a complete element is read, it is dropped from internal buffer.
     *
     * Returns either the bundled element, or null if we have reached the end of
     * the stream.
     */ t.prototype.Ho = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var t1, e6, n19, i9;
            return _tslib.__generator(this, function(r14) {
                switch(r14.label){
                    case 0:
                        return [
                            4,
                            this.Jo()
                        ];
                    case 1:
                        return null === (t1 = r14.sent()) ? [
                            2,
                            null
                        ] : (e6 = this.zo.decode(t1), n19 = Number(e6), isNaN(n19) && this.Yo("length string (" + e6 + ") is not valid number"), [
                            4,
                            this.Xo(n19)
                        ]);
                    case 2:
                        return i9 = r14.sent(), [
                            2,
                            new Ts(JSON.parse(i9), t1.length + n19)
                        ];
                }
            });
        });
    }, /** First index of '{' from the underlying buffer. */ t.prototype.Zo = function() {
        return this.buffer.findIndex(function(t1) {
            return t1 === "{".charCodeAt(0);
        });
    }, /**
     * Reads from the beginning of the internal buffer, until the first '{', and
     * return the content.
     *
     * If reached end of the stream, returns a null.
     */ t.prototype.Jo = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var t1, e6;
            return _tslib.__generator(this, function(n19) {
                switch(n19.label){
                    case 0:
                        return this.Zo() < 0 ? [
                            4,
                            this.tc()
                        ] : [
                            3,
                            3
                        ];
                    case 1:
                        if (n19.sent()) return [
                            3,
                            3
                        ];
                        n19.label = 2;
                    case 2:
                        return [
                            3,
                            0
                        ];
                    case 3:
                        // Broke out of the loop because underlying stream is closed, and there
                        // happens to be no more data to process.
                        return 0 === this.buffer.length ? [
                            2,
                            null
                        ] : // Broke out of the loop because underlying stream is closed, but still
                        // cannot find an open bracket.
                        ((t1 = this.Zo()) < 0 && this.Yo("Reached the end of bundle when a length string is expected."), e6 = this.buffer.slice(0, t1), [
                            2,
                            (this.buffer = this.buffer.slice(t1), e6)
                        ]);
                }
            });
        });
    }, /**
     * Reads from a specified position from the internal buffer, for a specified
     * number of bytes, pulling more data from the underlying stream if needed.
     *
     * Returns a string decoded from the read bytes.
     */ t.prototype.Xo = function(t1) {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var e6;
            return _tslib.__generator(this, function(n19) {
                switch(n19.label){
                    case 0:
                        return this.buffer.length < t1 ? [
                            4,
                            this.tc()
                        ] : [
                            3,
                            3
                        ];
                    case 1:
                        n19.sent() && this.Yo("Reached the end of bundle when more is expected."), n19.label = 2;
                    case 2:
                        return [
                            3,
                            0
                        ];
                    case 3:
                        // Update the internal buffer to drop the read json string.
                        return e6 = this.zo.decode(this.buffer.slice(0, t1)), [
                            2,
                            (this.buffer = this.buffer.slice(t1), e6)
                        ];
                }
            });
        });
    }, t.prototype.Yo = function(t1) {
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        throw this.Go.cancel(), new Error("Invalid bundle format: " + t1);
    }, /**
     * Pulls more data from underlying stream to internal buffer.
     * Returns a boolean indicating whether the stream is finished.
     */ t.prototype.tc = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var t1, e6;
            return _tslib.__generator(this, function(n19) {
                switch(n19.label){
                    case 0:
                        return [
                            4,
                            this.Go.read()
                        ];
                    case 1:
                        return (t1 = n19.sent()).done || ((e6 = new Uint8Array(this.buffer.length + t1.value.length)).set(this.buffer), e6.set(t1.value, this.buffer.length), this.buffer = e6), [
                            2,
                            t1.done
                        ];
                }
            });
        });
    }, t;
}(), mu = /** @class */ function() {
    function t(t1) {
        this.datastore = t1, // The version of each document that was read during this transaction.
        this.readVersions = new Map, this.mutations = [], this.committed = false, /**
             * A deferred usage error that occurred previously in this transaction that
             * will cause the transaction to fail once it actually commits.
             */ this.lastWriteError = null, /**
             * Set of documents that have been written in the transaction.
             *
             * When there's more than one write to the same key in a transaction, any
             * writes after the first are handled differently.
             */ this.writtenDocs = new Set;
    }
    return t.prototype.lookup = function(t1) {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var e6, i9 = this;
            return _tslib.__generator(this, function(o8) {
                switch(o8.label){
                    case 0:
                        if (this.ensureCommitNotCalled(), this.mutations.length > 0) throw new D(N.INVALID_ARGUMENT, "Firestore transactions require all reads to be executed before all writes.");
                        return [
                            4,
                            function(t2, e8) {
                                return _tslib.__awaiter(this, void 0, void 0, function() {
                                    var n19, i10, o9, s, u, a;
                                    return _tslib.__generator(this, function(r14) {
                                        switch(r14.label){
                                            case 0:
                                                return n19 = F(t2), i10 = xn(n19.R) + "/documents", o9 = {
                                                    documents: e8.map(function(t3) {
                                                        return Dn(n19.R, t3);
                                                    })
                                                }, [
                                                    4,
                                                    n19.$i("BatchGetDocuments", i10, o9)
                                                ];
                                            case 1:
                                                return s = r14.sent(), u = new Map, s.forEach(function(t3) {
                                                    var e9 = function(t4, e10) {
                                                        return "found" in e10 ? (function(t5, e11) {
                                                            P(!!e11.found), e11.found.name, e11.found.updateTime;
                                                            var n20 = An(t5, e11.found.name), r15 = _n(e11.found.updateTime), i11 = new _t({
                                                                mapValue: {
                                                                    fields: e11.found.fields
                                                                }
                                                            });
                                                            return Nt.newFoundDocument(n20, r15, i11);
                                                        })(t4, e10) : "missing" in e10 ? (function(t5, e11) {
                                                            P(!!e11.missing), P(!!e11.readTime);
                                                            var n20 = An(t5, e11.missing), r15 = _n(e11.readTime);
                                                            return Nt.newNoDocument(n20, r15);
                                                        })(t4, e10) : O();
                                                    }(n19.R, t3);
                                                    u.set(e9.key.toString(), e9);
                                                }), a = [], [
                                                    2,
                                                    (e8.forEach(function(t3) {
                                                        var e9 = u.get(t3.toString());
                                                        P(!!e9), a.push(e9);
                                                    }), a)
                                                ];
                                        }
                                    });
                                });
                            }(this.datastore, t1)
                        ];
                    case 1:
                        return [
                            2,
                            ((e6 = o8.sent()).forEach(function(t2) {
                                return i9.recordVersion(t2);
                            }), e6)
                        ];
                }
            });
        });
    }, t.prototype.set = function(t1, e6) {
        this.write(e6.toMutation(t1, this.precondition(t1))), this.writtenDocs.add(t1.toString());
    }, t.prototype.update = function(t1, e6) {
        try {
            this.write(e6.toMutation(t1, this.preconditionForUpdate(t1)));
        } catch (t2) {
            this.lastWriteError = t2;
        }
        this.writtenDocs.add(t1.toString());
    }, t.prototype.delete = function(t1) {
        this.write(new je(t1, this.precondition(t1))), this.writtenDocs.add(t1.toString());
    }, t.prototype.commit = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var t1, e6 = this;
            return _tslib.__generator(this, function(i9) {
                switch(i9.label){
                    case 0:
                        if (this.ensureCommitNotCalled(), this.lastWriteError) throw this.lastWriteError;
                        return t1 = this.readVersions, // For each mutation, note that the doc was written.
                        this.mutations.forEach(function(e8) {
                            t1.delete(e8.key.toString());
                        }), // For each document that was read but not written to, we want to perform
                        // a `verify` operation.
                        t1.forEach(function(t2, n19) {
                            var r14 = ct.fromPath(n19);
                            e6.mutations.push(new Ke(r14, e6.precondition(r14)));
                        }), [
                            4,
                            function(t2, e8) {
                                return _tslib.__awaiter(this, void 0, void 0, function() {
                                    var n19, i10, o8;
                                    return _tslib.__generator(this, function(r14) {
                                        switch(r14.label){
                                            case 0:
                                                return n19 = F(t2), i10 = xn(n19.R) + "/documents", o8 = {
                                                    writes: e8.map(function(t3) {
                                                        return Pn(n19.R, t3);
                                                    })
                                                }, [
                                                    4,
                                                    n19.Ni("Commit", i10, o8)
                                                ];
                                            case 1:
                                                return r14.sent(), [
                                                    2
                                                ];
                                        }
                                    });
                                });
                            }(this.datastore, this.mutations)
                        ];
                    case 1:
                        // For each mutation, note that the doc was written.
                        return i9.sent(), this.committed = true, [
                            2
                        ];
                }
            });
        });
    }, t.prototype.recordVersion = function(t1) {
        var e6;
        if (t1.isFoundDocument()) e6 = t1.version;
        else {
            if (!t1.isNoDocument()) throw O();
            // For deleted docs, we must use baseVersion 0 when we overwrite them.
            e6 = K.min();
        }
        var n19 = this.readVersions.get(t1.key.toString());
        if (n19) {
            if (!e6.isEqual(n19)) // This transaction will fail no matter what.
            throw new D(N.ABORTED, "Document version changed between two reads.");
        } else this.readVersions.set(t1.key.toString(), e6);
    }, /**
     * Returns the version of this document when it was read in this transaction,
     * as a precondition, or no precondition if it was not read.
     */ t.prototype.precondition = function(t1) {
        var e6 = this.readVersions.get(t1.toString());
        return !this.writtenDocs.has(t1.toString()) && e6 ? De.updateTime(e6) : De.none();
    }, /**
     * Returns the precondition for a document if the operation is an update.
     */ t.prototype.preconditionForUpdate = function(t1) {
        var e6 = this.readVersions.get(t1.toString());
        // The first time a document is written, we want to take into account the
        // read time and existence
        if (!this.writtenDocs.has(t1.toString()) && e6) {
            if (e6.isEqual(K.min())) // The document doesn't exist, so fail the transaction.
            // This has to be validated locally because you can't send a
            // precondition that a document does not exist without changing the
            // semantics of the backend write to be an insert. This is the reverse
            // of what we want, since we want to assert that the document doesn't
            // exist but then send the update and have it fail. Since we can't
            // express that to the backend, we have to validate locally.
            // Note: this can change once we can send separate verify writes in the
            // transaction.
            throw new D(N.INVALID_ARGUMENT, "Can't update a document that doesn't exist.");
            // Document exists, base precondition on document update time.
            return De.updateTime(e6);
        }
        // Document was not read, so we just use the preconditions for a blind
        // update.
        return De.exists(true);
    }, t.prototype.write = function(t1) {
        this.ensureCommitNotCalled(), this.mutations.push(t1);
    }, t.prototype.ensureCommitNotCalled = function() {
    }, t;
}(), gu = /** @class */ function() {
    function t(t1, e6, n19, r14) {
        this.asyncQueue = t1, this.datastore = e6, this.updateFunction = n19, this.deferred = r14, this.ec = 5, this.Zi = new xo(this.asyncQueue, "transaction_retry"/* TransactionRetry */ );
    }
    return t.prototype.run = function() {
        this.ec -= 1, this.nc();
    }, t.prototype.nc = function() {
        var t1 = this;
        this.Zi.ji(function() {
            return _tslib.__awaiter(t1, void 0, void 0, function() {
                var t2, e6, n19 = this;
                return _tslib.__generator(this, function(r14) {
                    return t2 = new mu(this.datastore), (e6 = this.sc(t2)) && e6.then(function(e8) {
                        n19.asyncQueue.enqueueAndForget(function() {
                            return t2.commit().then(function() {
                                n19.deferred.resolve(e8);
                            }).catch(function(t3) {
                                n19.ic(t3);
                            });
                        });
                    }).catch(function(t3) {
                        n19.ic(t3);
                    }), [
                        2
                    ];
                });
            });
        });
    }, t.prototype.sc = function(t1) {
        try {
            var e6 = this.updateFunction(t1);
            return !st(e6) && e6.catch && e6.then ? e6 : (this.deferred.reject(Error("Transaction callback must return a Promise")), null);
        } catch (t2) {
            // Do not retry errors thrown by user provided updateFunction.
            return this.deferred.reject(t2), null;
        }
    }, t.prototype.ic = function(t1) {
        var e6 = this;
        this.ec > 0 && this.rc(t1) ? (this.ec -= 1, this.asyncQueue.enqueueAndForget(function() {
            return e6.nc(), Promise.resolve();
        })) : this.deferred.reject(t1);
    }, t.prototype.rc = function(t1) {
        if ("FirebaseError" === t1.name) {
            // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and
            // non-matching document versions with ABORTED. These errors should be retried.
            var e6 = t1.code;
            return "aborted" === e6 || "failed-precondition" === e6 || !Ge(e6);
        }
        return false;
    }, t;
}(), wu = /** @class */ function() {
    function t(t1, /**
     * Asynchronous queue responsible for all of our internal processing. When
     * we get incoming work from the user (via public API) or the network
     * (incoming GRPC messages), we should always schedule onto this queue.
     * This ensures all of our work is properly serialized (e.g. we don't
     * start processing a new operation while the previous one is waiting for
     * an async I/O to complete).
     */ e8, i9) {
        var o8 = this;
        this.credentials = t1, this.asyncQueue = e8, this.databaseInfo = i9, this.user = fo.UNAUTHENTICATED, this.clientId = V.u(), this.credentialListener = function() {
            return Promise.resolve();
        }, this.credentials.setChangeListener(e8, function(t2) {
            return _tslib.__awaiter(o8, void 0, void 0, function() {
                return _tslib.__generator(this, function(e9) {
                    switch(e9.label){
                        case 0:
                            return C("FirestoreClient", "Received user=", t2.uid), [
                                4,
                                this.credentialListener(t2)
                            ];
                        case 1:
                            return e9.sent(), this.user = t2, [
                                2
                            ];
                    }
                });
            });
        });
    }
    return t.prototype.getConfiguration = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            return _tslib.__generator(this, function(t1) {
                return [
                    2,
                    {
                        asyncQueue: this.asyncQueue,
                        databaseInfo: this.databaseInfo,
                        clientId: this.clientId,
                        credentials: this.credentials,
                        initialUser: this.user,
                        maxConcurrentLimboResolutions: 100
                    }
                ];
            });
        });
    }, t.prototype.setCredentialChangeListener = function(t1) {
        this.credentialListener = t1;
    }, /**
     * Checks that the client has not been terminated. Ensures that other methods on
     * this class cannot be called after the client is terminated.
     */ t.prototype.verifyNotTerminated = function() {
        if (this.asyncQueue.isShuttingDown) throw new D(N.FAILED_PRECONDITION, "The client has already been terminated.");
    }, t.prototype.terminate = function() {
        var t1 = this;
        this.asyncQueue.enterRestrictedMode();
        var e8 = new br;
        return this.asyncQueue.enqueueAndForgetEvenWhileRestricted(function() {
            return _tslib.__awaiter(t1, void 0, void 0, function() {
                var t2, n19;
                return _tslib.__generator(this, function(r14) {
                    switch(r14.label){
                        case 0:
                            return r14.trys.push([
                                0,
                                5,
                                ,
                                6
                            ]), this.onlineComponents ? [
                                4,
                                this.onlineComponents.terminate()
                            ] : [
                                3,
                                2
                            ];
                        case 1:
                            r14.sent(), r14.label = 2;
                        case 2:
                            return this.offlineComponents ? [
                                4,
                                this.offlineComponents.terminate()
                            ] : [
                                3,
                                4
                            ];
                        case 3:
                            r14.sent(), r14.label = 4;
                        case 4:
                            // `removeChangeListener` must be called after shutting down the
                            // RemoteStore as it will prevent the RemoteStore from retrieving
                            // auth tokens.
                            return this.credentials.removeChangeListener(), e8.resolve(), [
                                3,
                                6
                            ];
                        case 5:
                            return t2 = r14.sent(), n19 = hs(t2, "Failed to shutdown persistence"), e8.reject(n19), [
                                3,
                                6
                            ];
                        case 6:
                            return [
                                2
                            ];
                    }
                });
            });
        }), e8.promise;
    }, t;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A class representing a bundle.
 *
 * Takes a bundle stream or buffer, and presents abstractions to read bundled
 * elements out of the underlying content.
 */ function bu(t, e8) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var i9, o8, s = this;
        return _tslib.__generator(this, function(u) {
            switch(u.label){
                case 0:
                    return t.asyncQueue.verifyOperationInProgress(), C("FirestoreClient", "Initializing OfflineComponentProvider"), [
                        4,
                        t.getConfiguration()
                    ];
                case 1:
                    return i9 = u.sent(), [
                        4,
                        e8.initialize(i9)
                    ];
                case 2:
                    return u.sent(), o8 = i9.initialUser, t.setCredentialChangeListener(function(t1) {
                        return _tslib.__awaiter(s, void 0, void 0, function() {
                            return _tslib.__generator(this, function(n19) {
                                switch(n19.label){
                                    case 0:
                                        return o8.isEqual(t1) ? [
                                            3,
                                            2
                                        ] : [
                                            4,
                                            Bi(e8.localStore, t1)
                                        ];
                                    case 1:
                                        n19.sent(), o8 = t1, n19.label = 2;
                                    case 2:
                                        return [
                                            2
                                        ];
                                }
                            });
                        });
                    }), // When a user calls clearPersistence() in one client, all other clients
                    // need to be terminated to allow the delete to succeed.
                    e8.persistence.setDatabaseDeletedListener(function() {
                        return t.terminate();
                    }), t.offlineComponents = e8, [
                        2
                    ];
            }
        });
    });
}
function Iu(t, e8) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var i9, o8;
        return _tslib.__generator(this, function(s) {
            switch(s.label){
                case 0:
                    return t.asyncQueue.verifyOperationInProgress(), [
                        4,
                        Tu(t)
                    ];
                case 1:
                    return i9 = s.sent(), C("FirestoreClient", "Initializing OnlineComponentProvider"), [
                        4,
                        t.getConfiguration()
                    ];
                case 2:
                    return o8 = s.sent(), [
                        4,
                        e8.initialize(i9, o8)
                    ];
                case 3:
                    return s.sent(), // The CredentialChangeListener of the online component provider takes
                    // precedence over the offline component provider.
                    t.setCredentialChangeListener(function(t1) {
                        return (function(t2, e9) {
                            return _tslib.__awaiter(this, void 0, void 0, function() {
                                var n19, i10;
                                return _tslib.__generator(this, function(r14) {
                                    switch(r14.label){
                                        case 0:
                                            return (n19 = F(t2)).asyncQueue.verifyOperationInProgress(), C("RemoteStore", "RemoteStore received new credentials"), i10 = zo(n19), // Tear down and re-create our network streams. This will ensure we get a
                                            // fresh auth token for the new user and re-fill the write pipeline with
                                            // new mutations from the LocalStore (since mutations are per-user).
                                            n19.Or.add(3/* CredentialChange */ ), [
                                                4,
                                                qo(n19)
                                            ];
                                        case 1:
                                            return r14.sent(), i10 && // Don't set the network status to Unknown if we are offline.
                                            n19.Br.set("Unknown"/* Unknown */ ), [
                                                4,
                                                n19.remoteSyncer.handleCredentialChange(e9)
                                            ];
                                        case 2:
                                            return r14.sent(), n19.Or.delete(3/* CredentialChange */ ), [
                                                4,
                                                Vo(n19)
                                            ];
                                        case 3:
                                            // Tear down and re-create our network streams. This will ensure we get a
                                            // fresh auth token for the new user and re-fill the write pipeline with
                                            // new mutations from the LocalStore (since mutations are per-user).
                                            return r14.sent(), [
                                                2
                                            ];
                                    }
                                });
                            });
                        })(e8.remoteStore, t1);
                    }), t.onlineComponents = e8, [
                        2
                    ];
            }
        });
    });
}
function Tu(t) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        return _tslib.__generator(this, function(e8) {
            switch(e8.label){
                case 0:
                    return t.offlineComponents ? [
                        3,
                        2
                    ] : (C("FirestoreClient", "Using default OfflineComponentProvider"), [
                        4,
                        bu(t, new hu)
                    ]);
                case 1:
                    e8.sent(), e8.label = 2;
                case 2:
                    return [
                        2,
                        t.offlineComponents
                    ];
            }
        });
    });
}
function Eu(t) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        return _tslib.__generator(this, function(e8) {
            switch(e8.label){
                case 0:
                    return t.onlineComponents ? [
                        3,
                        2
                    ] : (C("FirestoreClient", "Using default OnlineComponentProvider"), [
                        4,
                        Iu(t, new du)
                    ]);
                case 1:
                    e8.sent(), e8.label = 2;
                case 2:
                    return [
                        2,
                        t.onlineComponents
                    ];
            }
        });
    });
}
function _u(t) {
    return Tu(t).then(function(t1) {
        return t1.persistence;
    });
}
function Su(t) {
    return Tu(t).then(function(t1) {
        return t1.localStore;
    });
}
function Nu(t) {
    return Eu(t).then(function(t1) {
        return t1.remoteStore;
    });
}
function Du(t) {
    return Eu(t).then(function(t1) {
        return t1.syncEngine;
    });
}
function Au(t) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var e8, n19;
        return _tslib.__generator(this, function(r14) {
            switch(r14.label){
                case 0:
                    return [
                        4,
                        Eu(t)
                    ];
                case 1:
                    return e8 = r14.sent(), [
                        2,
                        ((n19 = e8.eventManager).onListen = Rs.bind(null, e8.syncEngine), n19.onUnlisten = Os.bind(null, e8.syncEngine), n19)
                    ];
            }
        });
    });
}
/** Enables the network connection and re-enqueues all pending operations. */ function ku(t, e8, i9) {
    var o8 = this;
    (void 0) === i9 && (i9 = {
    });
    var s1 = new br;
    return t.asyncQueue.enqueueAndForget(function() {
        return _tslib.__awaiter(o8, void 0, void 0, function() {
            var n19;
            return _tslib.__generator(this, function(r14) {
                switch(r14.label){
                    case 0:
                        return n19 = function(t1, e9, n20, r15, i10) {
                            var o9 = new yu({
                                next: function(o10) {
                                    // Remove query first before passing event to user to avoid
                                    // user actions affecting the now stale query.
                                    e9.enqueueAndForget(function() {
                                        return ms(t1, s2);
                                    });
                                    var u = o10.docs.has(n20);
                                    !u && o10.fromCache ? // TODO(dimond): If we're online and the document doesn't
                                    // exist then we resolve with a doc.exists set to false. If
                                    // we're offline however, we reject the Promise in this
                                    // case. Two options: 1) Cache the negative response from
                                    // the server so we can deliver that even when you're
                                    // offline 2) Actually reject the Promise in the online case
                                    // if the document doesn't exist.
                                    i10.reject(new D(N.UNAVAILABLE, "Failed to get document because the client is offline.")) : u && o10.fromCache && r15 && "server" === r15.source ? i10.reject(new D(N.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')) : i10.resolve(o10);
                                },
                                error: function(t2) {
                                    return i10.reject(t2);
                                }
                            }), s2 = new Is(Yt(n20.path), o9, {
                                includeMetadataChanges: true,
                                so: true
                            });
                            return vs(t1, s2);
                        }, [
                            4,
                            Au(t)
                        ];
                    case 1:
                        return [
                            2,
                            n19.apply(void 0, [
                                r14.sent(),
                                t.asyncQueue,
                                e8,
                                i9,
                                s1
                            ])
                        ];
                }
            });
        });
    }), s1.promise;
}
function Cu(t, e8, i9) {
    var o8 = this;
    (void 0) === i9 && (i9 = {
    });
    var s1 = new br;
    return t.asyncQueue.enqueueAndForget(function() {
        return _tslib.__awaiter(o8, void 0, void 0, function() {
            var n19;
            return _tslib.__generator(this, function(r14) {
                switch(r14.label){
                    case 0:
                        return n19 = function(t1, e9, n20, r15, i10) {
                            var o9 = new yu({
                                next: function(n21) {
                                    // Remove query first before passing event to user to avoid
                                    // user actions affecting the now stale query.
                                    e9.enqueueAndForget(function() {
                                        return ms(t1, s2);
                                    }), n21.fromCache && "server" === r15.source ? i10.reject(new D(N.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')) : i10.resolve(n21);
                                },
                                error: function(t2) {
                                    return i10.reject(t2);
                                }
                            }), s2 = new Is(n20, o9, {
                                includeMetadataChanges: true,
                                so: true
                            });
                            return vs(t1, s2);
                        }, [
                            4,
                            Au(t)
                        ];
                    case 1:
                        return [
                            2,
                            n19.apply(void 0, [
                                r14.sent(),
                                t.asyncQueue,
                                e8,
                                i9,
                                s1
                            ])
                        ];
                }
            });
        });
    }), s1.promise;
}
var xu = /**
     * Constructs a DatabaseInfo using the provided host, databaseId and
     * persistenceKey.
     *
     * @param databaseId - The database to use.
     * @param appId - The Firebase App Id.
     * @param persistenceKey - A unique identifier for this Firestore's local
     * storage (used in conjunction with the databaseId).
     * @param host - The Firestore backend host to connect to.
     * @param ssl - Whether to use SSL when connecting.
     * @param forceLongPolling - Whether to use the forceLongPolling option
     * when using WebChannel as the network transport.
     * @param autoDetectLongPolling - Whether to use the detectBufferingProxy
     * option when using WebChannel as the network transport.
     * @param useFetchStreams Whether to use the Fetch API instead of
     * XMLHTTPRequest
     */ function(t, e8, n19, r14, i9, o8, s, u) {
    this.databaseId = t, this.appId = e8, this.persistenceKey = n19, this.host = r14, this.ssl = i9, this.forceLongPolling = o8, this.autoDetectLongPolling = s, this.useFetchStreams = u;
}, Ru = /** @class */ function() {
    function t(t1, e8) {
        this.projectId = t1, this.database = e8 || "(default)";
    }
    return Object.defineProperty(t.prototype, "isDefaultDatabase", {
        get: function() {
            return "(default)" === this.database;
        },
        enumerable: false,
        configurable: true
    }), t.prototype.isEqual = function(e8) {
        return e8 instanceof t && e8.projectId === this.projectId && e8.database === this.database;
    }, t;
}(), Lu = new Map, Ou = function(t, e8) {
    this.user = e8, this.type = "OAuth", this.authHeaders = {
    }, // Set the headers using Object Literal notation to avoid minification
    this.authHeaders.Authorization = "Bearer " + t;
}, Pu = /** @class */ function() {
    function t() {
        /**
         * Stores the listener registered with setChangeListener()
         * This isn't actually necessary since the UID never changes, but we use this
         * to verify the listen contract is adhered to in tests.
         */ this.changeListener = null;
    }
    return t.prototype.getToken = function() {
        return Promise.resolve(null);
    }, t.prototype.invalidateToken = function() {
    }, t.prototype.setChangeListener = function(t1, e8) {
        this.changeListener = e8, // Fire with initial user.
        t1.enqueueRetryable(function() {
            return e8(fo.UNAUTHENTICATED);
        });
    }, t.prototype.removeChangeListener = function() {
        this.changeListener = null;
    }, t;
}(), Fu = /** @class */ function() {
    function t(t1) {
        this.token = t1, /**
             * Stores the listener registered with setChangeListener()
             * This isn't actually necessary since the UID never changes, but we use this
             * to verify the listen contract is adhered to in tests.
             */ this.changeListener = null;
    }
    return t.prototype.getToken = function() {
        return Promise.resolve(this.token);
    }, t.prototype.invalidateToken = function() {
    }, t.prototype.setChangeListener = function(t1, e8) {
        var n19 = this;
        this.changeListener = e8, // Fire with initial user.
        t1.enqueueRetryable(function() {
            return e8(n19.token.user);
        });
    }, t.prototype.removeChangeListener = function() {
        this.changeListener = null;
    }, t;
}(), Mu = /** @class */ function() {
    function t(t1) {
        var e8 = this;
        /** Tracks the current User. */ this.currentUser = fo.UNAUTHENTICATED, /** Promise that allows blocking on the initialization of Firebase Auth. */ this.oc = new br, /**
             * Counter used to detect if the token changed while a getToken request was
             * outstanding.
             */ this.cc = 0, this.forceRefresh = false, this.auth = null, this.asyncQueue = null, this.uc = function() {
            e8.cc++, e8.currentUser = e8.ac(), e8.oc.resolve(), e8.changeListener && e8.asyncQueue.enqueueRetryable(function() {
                return e8.changeListener(e8.currentUser);
            });
        };
        var n19 = function(t2) {
            C("FirebaseCredentialsProvider", "Auth detected"), e8.auth = t2, e8.auth.addAuthTokenListener(e8.uc);
        };
        t1.onInit(function(t2) {
            return n19(t2);
        }), // Our users can initialize Auth right after Firestore, so we give it
        // a chance to register itself with the component framework before we
        // determine whether to start up in unauthenticated mode.
        setTimeout(function() {
            if (!e8.auth) {
                var r14 = t1.getImmediate({
                    optional: true
                });
                r14 ? n19(r14) : // If auth is still not available, proceed with `null` user
                (C("FirebaseCredentialsProvider", "Auth not yet detected"), e8.oc.resolve());
            }
        }, 0);
    }
    return t.prototype.getToken = function() {
        var t1 = this, e8 = this.cc, n19 = this.forceRefresh;
        // Take note of the current value of the tokenCounter so that this method
        // can fail (with an ABORTED error) if there is a token change while the
        // request is outstanding.
        return this.forceRefresh = false, this.auth ? this.auth.getToken(n19).then(function(n20) {
            // Cancel the request since the token changed while the request was
            // outstanding so the response is potentially for a previous user (which
            // user, we can't be sure).
            return t1.cc !== e8 ? (C("FirebaseCredentialsProvider", "getToken aborted due to token change."), t1.getToken()) : n20 ? (P("string" == typeof n20.accessToken), new Ou(n20.accessToken, t1.currentUser)) : null;
        }) : Promise.resolve(null);
    }, t.prototype.invalidateToken = function() {
        this.forceRefresh = true;
    }, t.prototype.setChangeListener = function(t1, e8) {
        var i9 = this;
        this.asyncQueue = t1, // Blocks the AsyncQueue until the next user is available.
        this.asyncQueue.enqueueRetryable(function() {
            return _tslib.__awaiter(i9, void 0, void 0, function() {
                return _tslib.__generator(this, function(t2) {
                    switch(t2.label){
                        case 0:
                            return [
                                4,
                                this.oc.promise
                            ];
                        case 1:
                            return t2.sent(), [
                                4,
                                e8(this.currentUser)
                            ];
                        case 2:
                            return t2.sent(), this.changeListener = e8, [
                                2
                            ];
                    }
                });
            });
        });
    }, t.prototype.removeChangeListener = function() {
        this.auth && this.auth.removeAuthTokenListener(this.uc), this.changeListener = function() {
            return Promise.resolve();
        };
    }, // Auth.getUid() can return null even with a user logged in. It is because
    // getUid() is synchronous, but the auth code populating Uid is asynchronous.
    // This method should only be called in the AuthTokenListener callback
    // to guarantee to get the actual user.
    t.prototype.ac = function() {
        var t1 = this.auth && this.auth.getUid();
        return P(null === t1 || "string" == typeof t1), new fo(t1);
    }, t;
}(), Vu = /** @class */ function() {
    function t(t1, e8, n19) {
        this.hc = t1, this.lc = e8, this.fc = n19, this.type = "FirstParty", this.user = fo.FIRST_PARTY;
    }
    return Object.defineProperty(t.prototype, "authHeaders", {
        get: function() {
            var t1 = {
                "X-Goog-AuthUser": this.lc
            }, e8 = this.hc.auth.getAuthHeaderValueForFirstParty([]);
            // Use array notation to prevent minification
            return e8 && (t1.Authorization = e8), this.fc && (t1["X-Goog-Iam-Authorization-Token"] = this.fc), t1;
        },
        enumerable: false,
        configurable: true
    }), t;
}(), qu = /** @class */ function() {
    function t(t1, e8, n19) {
        this.hc = t1, this.lc = e8, this.fc = n19;
    }
    return t.prototype.getToken = function() {
        return Promise.resolve(new Vu(this.hc, this.lc, this.fc));
    }, t.prototype.setChangeListener = function(t1, e8) {
        // Fire with initial uid.
        t1.enqueueRetryable(function() {
            return e8(fo.FIRST_PARTY);
        });
    }, t.prototype.removeChangeListener = function() {
    }, t.prototype.invalidateToken = function() {
    }, t;
}();
/** The default database name for a project. */ /** Represents the database ID a Firestore client is associated with. */ /**
 * Builds a CredentialsProvider depending on the type of
 * the credentials passed in.
 */ /**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function Uu(t, e8, n19) {
    if (!n19) throw new D(N.INVALID_ARGUMENT, "Function " + t + "() cannot be called with an empty " + e8 + ".");
}
function Bu(t, e8) {
    if ((void 0) === e8) return {
        merge: false
    };
    if ((void 0) !== e8.mergeFields && (void 0) !== e8.merge) throw new D(N.INVALID_ARGUMENT, "Invalid options passed to function " + t + '(): You cannot specify both "merge" and "mergeFields".');
    return e8;
}
/**
 * Validates that two boolean options are not set at the same time.
 */ function ju(t, e8, n19, r15) {
    if (true === e8 && true === r15) throw new D(N.INVALID_ARGUMENT, t + " and " + n19 + " cannot be used together.");
}
/**
 * Validates that `path` refers to a document (indicated by the fact it contains
 * an even numbers of segments).
 */ function Ku(t) {
    if (!ct.isDocumentKey(t)) throw new D(N.INVALID_ARGUMENT, "Invalid document reference. Document references must have an even number of segments, but " + t + " has " + t.length + ".");
}
/**
 * Validates that `path` refers to a collection (indicated by the fact it
 * contains an odd numbers of segments).
 */ function Qu(t) {
    if (ct.isDocumentKey(t)) throw new D(N.INVALID_ARGUMENT, "Invalid collection reference. Collection references must have an odd number of segments, but " + t + " has " + t.length + ".");
}
/**
 * Returns true if it's a non-null object without a custom prototype
 * (i.e. excludes Array, Date, etc.).
 */ /** Returns a string describing the type / value of the provided input. */ function Gu(t) {
    if ((void 0) === t) return "undefined";
    if (null === t) return "null";
    if ("string" == typeof t) return t.length > 20 && (t = t.substring(0, 20) + "..."), JSON.stringify(t);
    if ("number" == typeof t || "boolean" == typeof t) return "" + t;
    if ("object" == typeof t) {
        if (t instanceof Array) return "an array";
        var e8 = /** Hacky method to try to get the constructor name for an object. */ function(t1) {
            if (t1.constructor) {
                var e9 = /function\s+([^\s(]+)\s*\(/.exec(t1.constructor.toString());
                if (e9 && e9.length > 1) return e9[1];
            }
            return null;
        }(t);
        return e8 ? "a custom " + e8 + " object" : "an object";
    }
    return "function" == typeof t ? "a function" : O();
}
function zu(t, // eslint-disable-next-line @typescript-eslint/no-explicit-any
e10) {
    if ("_delegate" in t && // Unwrap Compat types
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (t = t._delegate), !(t instanceof e10)) {
        if (e10.name === t.constructor.name) throw new D(N.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
        var n19 = Gu(t);
        throw new D(N.INVALID_ARGUMENT, "Expected type '" + e10.name + "', but it was: " + n19);
    }
    return t;
}
function Wu(t, e10) {
    if (e10 <= 0) throw new D(N.INVALID_ARGUMENT, "Function " + t + "() requires a positive number, but it was: " + e10 + ".");
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // settings() defaults:
/**
 * A concrete type describing all the values that can be applied via a
 * user-supplied firestore.Settings object. This is a separate type so that
 * defaults can be supplied and the value can be checked for equality.
 */ var Hu = /** @class */ function() {
    function t(t1) {
        var e10;
        if ((void 0) === t1.host) {
            if ((void 0) !== t1.ssl) throw new D(N.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
            this.host = "firestore.googleapis.com", this.ssl = true;
        } else this.host = t1.host, this.ssl = null === (e10 = t1.ssl) || (void 0) === e10 || e10;
        if (this.credentials = t1.credentials, this.ignoreUndefinedProperties = !!t1.ignoreUndefinedProperties, (void 0) === t1.cacheSizeBytes) this.cacheSizeBytes = 41943040;
        else {
            if (-1 !== t1.cacheSizeBytes && t1.cacheSizeBytes < 1048576) throw new D(N.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
            this.cacheSizeBytes = t1.cacheSizeBytes;
        }
        this.experimentalForceLongPolling = !!t1.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t1.experimentalAutoDetectLongPolling, this.useFetchStreams = !!t1.useFetchStreams, ju("experimentalForceLongPolling", t1.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", t1.experimentalAutoDetectLongPolling);
    }
    return t.prototype.isEqual = function(t1) {
        return this.host === t1.host && this.ssl === t1.ssl && this.credentials === t1.credentials && this.cacheSizeBytes === t1.cacheSizeBytes && this.experimentalForceLongPolling === t1.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t1.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t1.ignoreUndefinedProperties && this.useFetchStreams === t1.useFetchStreams;
    }, t;
}(), Yu = /** @class */ function() {
    /** @hideconstructor */ function t(t1, e10) {
        /**
         * Whether it's a Firestore or Firestore Lite instance.
         */ this.type = "firestore-lite", this._persistenceKey = "(lite)", this._settings = new Hu({
        }), this._settingsFrozen = false, t1 instanceof Ru ? (this._databaseId = t1, this._credentials = new Pu) : (this._app = t1, this._databaseId = (function(t2) {
            if (!Object.prototype.hasOwnProperty.apply(t2.options, [
                "projectId"
            ])) throw new D(N.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
            return new Ru(t2.options.projectId);
        })(t1), this._credentials = new Mu(e10));
    }
    return Object.defineProperty(t.prototype, "app", {
        /**
         * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service
         * instance.
         */ get: function() {
            if (!this._app) throw new D(N.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
            return this._app;
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t.prototype, "_initialized", {
        get: function() {
            return this._settingsFrozen;
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t.prototype, "_terminated", {
        get: function() {
            return (void 0) !== this._terminateTask;
        },
        enumerable: false,
        configurable: true
    }), t.prototype._setSettings = function(t1) {
        if (this._settingsFrozen) throw new D(N.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
        this._settings = new Hu(t1), (void 0) !== t1.credentials && (this._credentials = (function(t2) {
            if (!t2) return new Pu;
            switch(t2.type){
                case "gapi":
                    var e10 = t2.client;
                    // Make sure this really is a Gapi client.
                    return P(!("object" != typeof e10 || null === e10 || !e10.auth || !e10.auth.getAuthHeaderValueForFirstParty)), new qu(e10, t2.sessionIndex || "0", t2.iamToken || null);
                case "provider":
                    return t2.client;
                default:
                    throw new D(N.INVALID_ARGUMENT, "makeCredentialsProvider failed due to invalid credential type");
            }
        })(t1.credentials));
    }, t.prototype._getSettings = function() {
        return this._settings;
    }, t.prototype._freezeSettings = function() {
        return this._settingsFrozen = true, this._settings;
    }, t.prototype._delete = function() {
        return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;
    }, /** Returns a JSON-serializable representation of this Firestore instance. */ t.prototype.toJSON = function() {
        return {
            app: this._app,
            databaseId: this._databaseId,
            settings: this._settings
        };
    }, /**
     * Terminates all components used by this client. Subclasses can override
     * this method to clean up their own dependencies, but must also call this
     * method.
     *
     * Only ever called once.
     */ t.prototype._terminate = function() {
        var t1, e10;
        /**
 * Removes all components associated with the provided instance. Must be called
 * when the `Firestore` instance is terminated.
 */ return t1 = this, (e10 = Lu.get(t1)) && (C("ComponentProvider", "Removing Datastore"), Lu.delete(t1), e10.terminate()), Promise.resolve();
    }, t;
}(), $u = /** @class */ function() {
    /** @hideconstructor */ function t(t1, /**
     * If provided, the `FirestoreDataConverter` associated with this instance.
     */ e10, n20) {
        this.converter = e10, this._key = n20, /** The type of this Firestore reference. */ this.type = "document", this.firestore = t1;
    }
    return Object.defineProperty(t.prototype, "_path", {
        get: function() {
            return this._key.path;
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t.prototype, "id", {
        /**
         * The document's identifier within its collection.
         */ get: function() {
            return this._key.path.lastSegment();
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t.prototype, "path", {
        /**
         * A string representing the path of the referenced document (relative
         * to the root of the database).
         */ get: function() {
            return this._key.path.canonicalString();
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t.prototype, "parent", {
        /**
         * The collection this `DocumentReference` belongs to.
         */ get: function() {
            return new Ju(this.firestore, this.converter, this._key.path.popLast());
        },
        enumerable: false,
        configurable: true
    }), t.prototype.withConverter = function(e10) {
        return new t(this.firestore, e10, this._key);
    }, t;
}(), Xu = /** @class */ function() {
    // This is the lite version of the Query class in the main SDK.
    /** @hideconstructor protected */ function t(t1, /**
     * If provided, the `FirestoreDataConverter` associated with this instance.
     */ e10, n20) {
        this.converter = e10, this._query = n20, /** The type of this Firestore reference. */ this.type = "query", this.firestore = t1;
    }
    return t.prototype.withConverter = function(e10) {
        return new t(this.firestore, e10, this._query);
    }, t;
}(), Ju = /** @class */ function(e10) {
    /** @hideconstructor */ function n20(t, n21, r15) {
        var i9 = this;
        return (i9 = e10.call(this, t, n21, Yt(r15)) || this)._path = r15, /** The type of this Firestore reference. */ i9.type = "collection", i9;
    }
    return _tslib.__extends(n20, e10), Object.defineProperty(n20.prototype, "id", {
        /** The collection's identifier. */ get: function() {
            return this._query.path.lastSegment();
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(n20.prototype, "path", {
        /**
         * A string representing the path of the referenced collection (relative
         * to the root of the database).
         */ get: function() {
            return this._query.path.canonicalString();
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(n20.prototype, "parent", {
        /**
         * A reference to the containing `DocumentReference` if this is a
         * subcollection. If this isn't a subcollection, the reference is null.
         */ get: function() {
            var t = this._path.popLast();
            return t.isEmpty() ? null : new $u(this.firestore, /* converter= */ null, new ct(t));
        },
        enumerable: false,
        configurable: true
    }), n20.prototype.withConverter = function(t) {
        return new n20(this.firestore, t, this._path);
    }, n20;
}(Xu);
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The Cloud Firestore service interface.
 *
 * Do not call this constructor directly. Instead, use {@link getFirestore}.
 */ function Zu(t, n20) {
    for(var r15, i9 = [], o8 = 2; o8 < arguments.length; o8++)i9[o8 - 2] = arguments[o8];
    if (t = _util.getModularInstance(t), Uu("collection", "path", n20), t instanceof Yu) return Qu(r15 = H.fromString.apply(H, _tslib.__spreadArray([
        n20
    ], i9))), new Ju(t, /* converter= */ null, r15);
    if (!(t instanceof $u || t instanceof Ju)) throw new D(N.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
    return Qu(r15 = H.fromString.apply(H, _tslib.__spreadArray([
        t.path
    ], i9)).child(H.fromString(n20))), new Ju(t.firestore, /* converter= */ null, r15);
}
// TODO(firestorelite): Consider using ErrorFactory -
// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106
/**
 * Creates and returns a new `Query` instance that includes all documents in the
 * database that are contained in a collection or subcollection with the
 * given `collectionId`.
 *
 * @param firestore - A reference to the root Firestore instance.
 * @param collectionId - Identifies the collections to query over. Every
 * collection or subcollection with this ID as the last segment of its path
 * will be included. Cannot contain a slash.
 * @returns The created `Query`.
 */ function ta(t, n20) {
    for(var r15, i9 = [], o8 = 2; o8 < arguments.length; o8++)i9[o8 - 2] = arguments[o8];
    if (t = _util.getModularInstance(t), // We allow omission of 'pathString' but explicitly prohibit passing in both
    // 'undefined' and 'null'.
    1 === arguments.length && (n20 = V.u()), Uu("doc", "path", n20), t instanceof Yu) return Ku(r15 = H.fromString.apply(H, _tslib.__spreadArray([
        n20
    ], i9))), new $u(t, /* converter= */ null, new ct(r15));
    if (!(t instanceof $u || t instanceof Ju)) throw new D(N.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
    return Ku(r15 = t._path.child(H.fromString.apply(H, _tslib.__spreadArray([
        n20
    ], i9)))), new $u(t.firestore, t instanceof Ju ? t.converter : null, new ct(r15));
}
/**
 * Returns true if the provided references are equal.
 *
 * @param left - A reference to compare.
 * @param right - A reference to compare.
 * @returns true if the references point to the same location in the same
 * Firestore database.
 */ function ea(t, e10) {
    return t = _util.getModularInstance(t), e10 = _util.getModularInstance(e10), (t instanceof $u || t instanceof Ju) && (e10 instanceof $u || e10 instanceof Ju) && t.firestore === e10.firestore && t.path === e10.path && t.converter === e10.converter;
}
function na(t, e10) {
    return t = _util.getModularInstance(t), e10 = _util.getModularInstance(e10), t instanceof Xu && e10 instanceof Xu && t.firestore === e10.firestore && ie(t._query, e10._query) && t.converter === e10.converter;
}
var ra = /** @class */ function() {
    function t() {
        var t1 = this;
        // The last promise in the queue.
        this.dc = Promise.resolve(), // A list of retryable operations. Retryable operations are run in order and
        // retried with backoff.
        this.wc = [], // Is this AsyncQueue being shut down? Once it is set to true, it will not
        // be changed again.
        this._c = false, // Operations scheduled to be queued in the future. Operations are
        // automatically removed after they are run or canceled.
        this.mc = [], // visible for testing
        this.yc = null, // Flag set while there's an outstanding AsyncQueue operation, used for
        // assertion sanity-checks.
        this.gc = false, // Enabled during shutdown on Safari to prevent future access to IndexedDB.
        this.Ec = false, // List of TimerIds to fast-forward delays for.
        this.Tc = [], // Backoff timer used to schedule retries for retryable operations
        this.Zi = new xo(this, "async_queue_retry"/* AsyncQueueRetry */ ), // Visibility handler that triggers an immediate retry of all retryable
        // operations. Meant to speed up recovery when we regain file system access
        // after page comes into foreground.
        this.Ic = function() {
            var e10 = ko();
            e10 && C("AsyncQueue", "Visibility state changed to " + e10.visibilityState), t1.Zi.Gi();
        };
        var e10 = ko();
        e10 && "function" == typeof e10.addEventListener && e10.addEventListener("visibilitychange", this.Ic);
    }
    return Object.defineProperty(t.prototype, "isShuttingDown", {
        get: function() {
            return this._c;
        },
        enumerable: false,
        configurable: true
    }), /**
     * Adds a new operation to the queue without waiting for it to complete (i.e.
     * we ignore the Promise result).
     */ t.prototype.enqueueAndForget = function(t1) {
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.enqueue(t1);
    }, t.prototype.enqueueAndForgetEvenWhileRestricted = function(t1) {
        this.Ac(), // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.Rc(t1);
    }, t.prototype.enterRestrictedMode = function(t1) {
        if (!this._c) {
            this._c = true, this.Ec = t1 || false;
            var e10 = ko();
            e10 && "function" == typeof e10.removeEventListener && e10.removeEventListener("visibilitychange", this.Ic);
        }
    }, t.prototype.enqueue = function(t1) {
        var e11 = this;
        if (this.Ac(), this._c) // Return a Promise which never resolves.
        return new Promise(function() {
        });
        // Create a deferred Promise that we can return to the callee. This
        // allows us to return a "hanging Promise" only to the callee and still
        // advance the queue even when the operation is not run.
        var n20 = new br;
        return this.Rc(function() {
            return e11._c && e11.Ec ? Promise.resolve() : (t1().then(n20.resolve, n20.reject), n20.promise);
        }).then(function() {
            return n20.promise;
        });
    }, t.prototype.enqueueRetryable = function(t1) {
        var e11 = this;
        this.enqueueAndForget(function() {
            return e11.wc.push(t1), e11.bc();
        });
    }, /**
     * Runs the next operation from the retryable queue. If the operation fails,
     * reschedules with backoff.
     */ t.prototype.bc = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var t1, e11 = this;
            return _tslib.__generator(this, function(n20) {
                switch(n20.label){
                    case 0:
                        if (0 === this.wc.length) return [
                            3,
                            5
                        ];
                        n20.label = 1;
                    case 1:
                        return n20.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]), [
                            4,
                            this.wc[0]()
                        ];
                    case 2:
                        return n20.sent(), this.wc.shift(), this.Zi.reset(), [
                            3,
                            4
                        ];
                    case 3:
                        if (!Nr(t1 = n20.sent())) throw t1;
                        // Failure will be handled by AsyncQueue
                        return C("AsyncQueue", "Operation failed with retryable error: " + t1), [
                            3,
                            4
                        ];
                    case 4:
                        this.wc.length > 0 && // If there are additional operations, we re-schedule `retryNextOp()`.
                        // This is necessary to run retryable operations that failed during
                        // their initial attempt since we don't know whether they are already
                        // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
                        // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
                        // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
                        // call scheduled here.
                        // Since `backoffAndRun()` cancels an existing backoff and schedules a
                        // new backoff on every call, there is only ever a single additional
                        // operation in the queue.
                        this.Zi.ji(function() {
                            return e11.bc();
                        }), n20.label = 5;
                    case 5:
                        return [
                            2
                        ];
                }
            });
        });
    }, t.prototype.Rc = function(t1) {
        var e11 = this, n20 = this.dc.then(function() {
            return e11.gc = true, t1().catch(function(t2) {
                // Re-throw the error so that this.tail becomes a rejected Promise and
                // all further attempts to chain (via .then) will just short-circuit
                // and return the rejected Promise.
                throw e11.yc = t2, e11.gc = false, x("INTERNAL UNHANDLED ERROR: ", /**
 * Chrome includes Error.message in Error.stack. Other browsers do not.
 * This returns expected output of message + stack when available.
 * @param error - Error or FirestoreError
 */ function(t3) {
                    var e12 = t3.message || "";
                    return t3.stack && (e12 = t3.stack.includes(t3.message) ? t3.stack : t3.message + "\n" + t3.stack), e12;
                }(t2)), t2;
            }).then(function(t2) {
                return e11.gc = false, t2;
            });
        });
        return this.dc = n20, n20;
    }, t.prototype.enqueueAfterDelay = function(t1, e11, n20) {
        var r15 = this;
        this.Ac(), // Fast-forward delays for timerIds that have been overriden.
        this.Tc.indexOf(t1) > -1 && (e11 = 0);
        var i9 = cs.createAndSchedule(this, t1, e11, n20, function(t2) {
            return r15.vc(t2);
        });
        return this.mc.push(i9), i9;
    }, t.prototype.Ac = function() {
        this.yc && O();
    }, t.prototype.verifyOperationInProgress = function() {
    }, /**
     * Waits until all currently queued tasks are finished executing. Delayed
     * operations are not run.
     */ t.prototype.Pc = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var t1;
            return _tslib.__generator(this, function(e11) {
                switch(e11.label){
                    case 0:
                        return [
                            4,
                            t1 = this.dc
                        ];
                    case 1:
                        e11.sent(), e11.label = 2;
                    case 2:
                        if (t1 !== this.dc) return [
                            3,
                            0
                        ];
                        e11.label = 3;
                    case 3:
                        return [
                            2
                        ];
                }
            });
        });
    }, /**
     * For Tests: Determine if a delayed operation with a particular TimerId
     * exists.
     */ t.prototype.Vc = function(t1) {
        for(var e11 = 0, n20 = this.mc; e11 < n20.length; e11++){
            if (n20[e11].timerId === t1) return true;
        }
        return false;
    }, /**
     * For Tests: Runs some or all delayed operations early.
     *
     * @param lastTimerId - Delayed operations up to and including this TimerId
     * will be drained. Pass TimerId.All to run all delayed operations.
     * @returns a Promise that resolves once all operations have been run.
     */ t.prototype.Sc = function(t1) {
        var e11 = this;
        // Note that draining may generate more delayed ops, so we do that first.
        return this.Pc().then(function() {
            // Run ops in the same order they'd run if they ran naturally.
            e11.mc.sort(function(t2, e12) {
                return t2.targetTimeMs - e12.targetTimeMs;
            });
            for(var n20 = 0, r15 = e11.mc; n20 < r15.length; n20++){
                var i9 = r15[n20];
                if (i9.skipDelay(), "all" !== t1 && i9.timerId === t1) break;
            }
            return e11.Pc();
        });
    }, /**
     * For Tests: Skip all subsequent delays for a timer id.
     */ t.prototype.Dc = function(t1) {
        this.Tc.push(t1);
    }, /** Called once a DelayedOperation is run or canceled. */ t.prototype.vc = function(t1) {
        // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.
        var e11 = this.mc.indexOf(t1);
        this.mc.splice(e11, 1);
    }, t;
}();
function ia(t) {
    /**
 * Returns true if obj is an object and contains at least one of the specified
 * methods.
 */ return (function(t1, e11) {
        if ("object" != typeof t1 || null === t1) return false;
        for(var n20 = t1, r15 = 0, i10 = [
            "next",
            "error",
            "complete"
        ]; r15 < i10.length; r15++){
            var o8 = i10[r15];
            if (o8 in n20 && "function" == typeof n20[o8]) return true;
        }
        return false;
    })(t);
}
var oa = /** @class */ function() {
    function t() {
        this._progressObserver = {
        }, this._taskCompletionResolver = new br, this._lastProgress = {
            taskState: "Running",
            totalBytes: 0,
            totalDocuments: 0,
            bytesLoaded: 0,
            documentsLoaded: 0
        };
    }
    return t.prototype.onProgress = function(t1, e11, n20) {
        this._progressObserver = {
            next: t1,
            error: e11,
            complete: n20
        };
    }, /**
     * Implements the `Promise<LoadBundleTaskProgress>.catch` interface.
     *
     * @param onRejected - Called when an error occurs during bundle loading.
     */ t.prototype.catch = function(t1) {
        return this._taskCompletionResolver.promise.catch(t1);
    }, /**
     * Implements the `Promise<LoadBundleTaskProgress>.then` interface.
     *
     * @param onFulfilled - Called on the completion of the loading task with a final `LoadBundleTaskProgress` update.
     *   The update will always have its `taskState` set to `"Success"`.
     * @param onRejected - Called when an error occurs during bundle loading.
     */ t.prototype.then = function(t1, e11) {
        return this._taskCompletionResolver.promise.then(t1, e11);
    }, /**
     * Notifies all observers that bundle loading has completed, with a provided
     * `LoadBundleTaskProgress` object.
     *
     * @private
     */ t.prototype._completeWith = function(t1) {
        this._updateProgress(t1), this._progressObserver.complete && this._progressObserver.complete(), this._taskCompletionResolver.resolve(t1);
    }, /**
     * Notifies all observers that bundle loading has failed, with a provided
     * `Error` as the reason.
     *
     * @private
     */ t.prototype._failWith = function(t1) {
        this._lastProgress.taskState = "Error", this._progressObserver.next && this._progressObserver.next(this._lastProgress), this._progressObserver.error && this._progressObserver.error(t1), this._taskCompletionResolver.reject(t1);
    }, /**
     * Notifies a progress update of loading a bundle.
     * @param progress - The new progress.
     *
     * @private
     */ t.prototype._updateProgress = function(t1) {
        this._lastProgress = t1, this._progressObserver.next && this._progressObserver.next(t1);
    }, t;
}(), sa = -1, ua = /** @class */ function(e11) {
    /** @hideconstructor */ function n20(t, n21) {
        var r15 = this;
        /**
             * Whether it's a Firestore or Firestore Lite instance.
             */ return (r15 = e11.call(this, t, n21) || this).type = "firestore", r15._queue = new ra, r15._persistenceKey = "name" in t ? t.name : "[DEFAULT]", r15;
    }
    return _tslib.__extends(n20, e11), n20.prototype._terminate = function() {
        return this._firestoreClient || // The client must be initialized to ensure that all subsequent API
        // usage throws an exception.
        ca(this), this._firestoreClient.terminate();
    }, n20;
}(Yu);
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** DOMException error code constants. */ /**
 * @internal
 */ function aa(t) {
    return t._firestoreClient || ca(t), t._firestoreClient.verifyNotTerminated(), t._firestoreClient;
}
function ca(t) {
    var e11, n20 = t._freezeSettings(), r15 = function(t1, e12, n21, r16) {
        return new xu(t1, e12, n21, r16.host, r16.ssl, r16.experimentalForceLongPolling, r16.experimentalAutoDetectLongPolling, r16.useFetchStreams);
    }(t._databaseId, (null === (e11 = t._app) || (void 0) === e11 ? void 0 : e11.options.appId) || "", t._persistenceKey, n20);
    t._firestoreClient = new wu(t._credentials, t._queue, r15);
}
/**
 * Attempts to enable persistent storage, if possible.
 *
 * Must be called before any other functions (other than
 * {@link initializeFirestore}, {@link getFirestore} or
 * {@link clearIndexedDbPersistence}.
 *
 * If this fails, `enableIndexedDbPersistence()` will reject the promise it
 * returns. Note that even after this failure, the `Firestore` instance will
 * remain usable, however offline persistence will be disabled.
 *
 * There are several reasons why this can fail, which can be identified by
 * the `code` on the error.
 *
 *   * failed-precondition: The app is already open in another browser tab.
 *   * unimplemented: The browser is incompatible with the offline
 *     persistence implementation.
 *
 * @param firestore - The `Firestore` instance to enable persistence for.
 * @param persistenceSettings - Optional settings object to configure
 * persistence.
 * @returns A promise that represents successfully enabling persistent storage.
 */ /**
 * Registers both the `OfflineComponentProvider` and `OnlineComponentProvider`.
 * If the operation fails with a recoverable error (see
 * `canRecoverFromIndexedDbError()` below), the returned Promise is rejected
 * but the client remains usable.
 */ function ha(t, e11, i10) {
    var o9 = this, s = new br;
    return t.asyncQueue.enqueue(function() {
        return _tslib.__awaiter(o9, void 0, void 0, function() {
            var n20;
            return _tslib.__generator(this, function(r15) {
                switch(r15.label){
                    case 0:
                        return r15.trys.push([
                            0,
                            3,
                            ,
                            4
                        ]), [
                            4,
                            bu(t, i10)
                        ];
                    case 1:
                        return r15.sent(), [
                            4,
                            Iu(t, e11)
                        ];
                    case 2:
                        return r15.sent(), s.resolve(), [
                            3,
                            4
                        ];
                    case 3:
                        if (!/**
         * Decides whether the provided error allows us to gracefully disable
         * persistence (as opposed to crashing the client).
         */ function(t1) {
                            return "FirebaseError" === t1.name ? t1.code === N.FAILED_PRECONDITION || t1.code === N.UNIMPLEMENTED : !("undefined" != typeof DOMException && t1 instanceof DOMException) || 22 === t1.code || 20 === t1.code || // Firefox Private Browsing mode disables IndexedDb and returns
                            // INVALID_STATE for any usage.
                            11 === t1.code;
                        }(n20 = r15.sent())) throw n20;
                        return console.warn("Error enabling offline persistence. Falling back to persistence disabled: " + n20), s.reject(n20), [
                            3,
                            4
                        ];
                    case 4:
                        return [
                            2
                        ];
                }
            });
        });
    }).then(function() {
        return s.promise;
    });
}
/**
 * Re-enables use of the network for this Firestore instance after a prior
 * call to {@link disableNetwork}.
 *
 * @returns A promise that is resolved once the network has been enabled.
 */ function fa(t) {
    if (t._initialized || t._terminated) throw new D(N.FAILED_PRECONDITION, "Firestore has already been started and persistence can no longer be enabled. You can only enable persistence before calling any other methods on a Firestore object.");
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A `FieldPath` refers to a field in a document. The path may consist of a
 * single field name (referring to a top-level field in the document), or a
 * list of field names (referring to a nested field in the document).
 *
 * Create a `FieldPath` by providing field names. If more than one field
 * name is provided, the path will point to a nested field in a document.
 */ var la = /** @class */ function() {
    /**
     * Creates a FieldPath from the provided field names. If more than one field
     * name is provided, the path will point to a nested field in a document.
     *
     * @param fieldNames - A list of field names.
     */ function t() {
        for(var t1 = [], e11 = 0; e11 < arguments.length; e11++)t1[e11] = arguments[e11];
        for(var n20 = 0; n20 < t1.length; ++n20)if (0 === t1[n20].length) throw new D(N.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
        this._internalPath = new $(t1);
    }
    /**
     * Returns true if this `FieldPath` is equal to the provided one.
     *
     * @param other - The `FieldPath` to compare against.
     * @returns true if this `FieldPath` is equal to the provided one.
     */ return t.prototype.isEqual = function(t1) {
        return this._internalPath.isEqual(t1._internalPath);
    }, t;
}(), da = /** @class */ function() {
    /** @hideconstructor */ function t(t1) {
        this._byteString = t1;
    }
    /**
     * Creates a new `Bytes` object from the given Base64 string, converting it to
     * bytes.
     *
     * @param base64 - The Base64 string used to create the `Bytes` object.
     */ return t.fromBase64String = function(e11) {
        try {
            return new t(J.fromBase64String(e11));
        } catch (e12) {
            throw new D(N.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + e12);
        }
    }, /**
     * Creates a new `Bytes` object from the given Uint8Array.
     *
     * @param array - The Uint8Array used to create the `Bytes` object.
     */ t.fromUint8Array = function(e11) {
        return new t(J.fromUint8Array(e11));
    }, /**
     * Returns the underlying bytes as a Base64-encoded string.
     *
     * @returns The Base64-encoded string created from the `Bytes` object.
     */ t.prototype.toBase64 = function() {
        return this._byteString.toBase64();
    }, /**
     * Returns the underlying bytes in a new `Uint8Array`.
     *
     * @returns The Uint8Array created from the `Bytes` object.
     */ t.prototype.toUint8Array = function() {
        return this._byteString.toUint8Array();
    }, /**
     * Returns a string representation of the `Bytes` object.
     *
     * @returns A string representation of the `Bytes` object.
     */ t.prototype.toString = function() {
        return "Bytes(base64: " + this.toBase64() + ")";
    }, /**
     * Returns true if this `Bytes` object is equal to the provided one.
     *
     * @param other - The `Bytes` object to compare against.
     * @returns true if this `Bytes` object is equal to the provided one.
     */ t.prototype.isEqual = function(t1) {
        return this._byteString.isEqual(t1._byteString);
    }, t;
}(), pa = /**
     * @param _methodName - The public API endpoint that returns this class.
     * @hideconstructor
     */ function(t) {
    this._methodName = t;
}, ya = /** @class */ function() {
    /**
     * Creates a new immutable `GeoPoint` object with the provided latitude and
     * longitude values.
     * @param latitude - The latitude as number between -90 and 90.
     * @param longitude - The longitude as number between -180 and 180.
     */ function t(t1, e11) {
        if (!isFinite(t1) || t1 < -90 || t1 > 90) throw new D(N.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + t1);
        if (!isFinite(e11) || e11 < -180 || e11 > 180) throw new D(N.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + e11);
        this._lat = t1, this._long = e11;
    }
    return Object.defineProperty(t.prototype, "latitude", {
        /**
         * The latitude of this `GeoPoint` instance.
         */ get: function() {
            return this._lat;
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t.prototype, "longitude", {
        /**
         * The longitude of this `GeoPoint` instance.
         */ get: function() {
            return this._long;
        },
        enumerable: false,
        configurable: true
    }), /**
     * Returns true if this `GeoPoint` is equal to the provided one.
     *
     * @param other - The `GeoPoint` to compare against.
     * @returns true if this `GeoPoint` is equal to the provided one.
     */ t.prototype.isEqual = function(t1) {
        return this._lat === t1._lat && this._long === t1._long;
    }, /** Returns a JSON-serializable representation of this GeoPoint. */ t.prototype.toJSON = function() {
        return {
            latitude: this._lat,
            longitude: this._long
        };
    }, /**
     * Actually private to JS consumers of our API, so this function is prefixed
     * with an underscore.
     */ t.prototype._compareTo = function(t1) {
        return q(this._lat, t1._lat) || q(this._long, t1._long);
    }, t;
}(), va = /^__.*__$/, ma = /** @class */ function() {
    function t(t1, e11, n20) {
        this.data = t1, this.fieldMask = e11, this.fieldTransforms = n20;
    }
    return t.prototype.toMutation = function(t1, e11) {
        return null !== this.fieldMask ? new Fe(t1, this.data, this.fieldMask, e11, this.fieldTransforms) : new Pe(t1, this.data, e11, this.fieldTransforms);
    }, t;
}(), ga = /** @class */ function() {
    function t(t1, // The fieldMask does not include document transforms.
    e11, n20) {
        this.data = t1, this.fieldMask = e11, this.fieldTransforms = n20;
    }
    return t.prototype.toMutation = function(t1, e11) {
        return new Fe(t1, this.data, this.fieldMask, e11, this.fieldTransforms);
    }, t;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An immutable object representing an array of bytes.
 */ function wa(t) {
    switch(t){
        case 0:
        // fall through
        case 2:
        // fall through
        case 1:
            return true;
        case 3:
        case 4:
            return false;
        default:
            throw O();
    }
}
/** A "context" object passed around while parsing user data. */ var ba = /** @class */ function() {
    /**
     * Initializes a ParseContext with the given source and path.
     *
     * @param settings - The settings for the parser.
     * @param databaseId - The database ID of the Firestore instance.
     * @param serializer - The serializer to use to generate the Value proto.
     * @param ignoreUndefinedProperties - Whether to ignore undefined properties
     * rather than throw.
     * @param fieldTransforms - A mutable list of field transforms encountered
     * while parsing the data.
     * @param fieldMask - A mutable list of field paths encountered while parsing
     * the data.
     *
     * TODO(b/34871131): We don't support array paths right now, so path can be
     * null to indicate the context represents any location within an array (in
     * which case certain features will not work and errors will be somewhat
     * compromised).
     */ function t(t1, e11, n20, r15, i10, o9) {
        this.settings = t1, this.databaseId = e11, this.R = n20, this.ignoreUndefinedProperties = r15, // Minor hack: If fieldTransforms is undefined, we assume this is an
        // external call and we need to validate the entire path.
        (void 0) === i10 && this.Cc(), this.fieldTransforms = i10 || [], this.fieldMask = o9 || [];
    }
    return Object.defineProperty(t.prototype, "path", {
        get: function() {
            return this.settings.path;
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t.prototype, "Nc", {
        get: function() {
            return this.settings.Nc;
        },
        enumerable: false,
        configurable: true
    }), /** Returns a new context with the specified settings overwritten. */ t.prototype.xc = function(e11) {
        return new t(Object.assign(Object.assign({
        }, this.settings), e11), this.databaseId, this.R, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);
    }, t.prototype.kc = function(t1) {
        var e11, n20 = null === (e11 = this.path) || (void 0) === e11 ? void 0 : e11.child(t1), r15 = this.xc({
            path: n20,
            Fc: false
        });
        return r15.$c(t1), r15;
    }, t.prototype.Oc = function(t1) {
        var e11, n20 = null === (e11 = this.path) || (void 0) === e11 ? void 0 : e11.child(t1), r15 = this.xc({
            path: n20,
            Fc: false
        });
        return r15.Cc(), r15;
    }, t.prototype.Mc = function(t1) {
        // TODO(b/34871131): We don't support array paths right now; so make path
        // undefined.
        return this.xc({
            path: void 0,
            Fc: true
        });
    }, t.prototype.Lc = function(t1) {
        return Ua(t1, this.settings.methodName, this.settings.Bc || false, this.path, this.settings.qc);
    }, /** Returns 'true' if 'fieldPath' was traversed when creating this context. */ t.prototype.contains = function(t1) {
        return (void 0) !== this.fieldMask.find(function(e11) {
            return t1.isPrefixOf(e11);
        }) || (void 0) !== this.fieldTransforms.find(function(e11) {
            return t1.isPrefixOf(e11.field);
        });
    }, t.prototype.Cc = function() {
        // TODO(b/34871131): Remove null check once we have proper paths for fields
        // within arrays.
        if (this.path) for(var t1 = 0; t1 < this.path.length; t1++)this.$c(this.path.get(t1));
    }, t.prototype.$c = function(t1) {
        if (0 === t1.length) throw this.Lc("Document fields must not be empty");
        if (wa(this.Nc) && va.test(t1)) throw this.Lc('Document fields cannot begin and end with "__"');
    }, t;
}(), Ia = /** @class */ function() {
    function t(t1, e11, n20) {
        this.databaseId = t1, this.ignoreUndefinedProperties = e11, this.R = n20 || Co(t1);
    }
    return t.prototype.Uc = function(t1, e11, n20, r15) {
        return (void 0) === r15 && (r15 = false), new ba({
            Nc: t1,
            methodName: e11,
            qc: n20,
            path: $.emptyPath(),
            Fc: false,
            Bc: r15
        }, this.databaseId, this.R, this.ignoreUndefinedProperties);
    }, t;
}();
/**
 * Helper for parsing raw user input (provided via the API) into internal model
 * classes.
 */ function Ta(t) {
    var e11 = t._freezeSettings(), n20 = Co(t._databaseId);
    return new Ia(t._databaseId, !!e11.ignoreUndefinedProperties, n20);
}
/** Parse document data from a set() call. */ function Ea(t, e11, n20, r15, i10, o9) {
    (void 0) === o9 && (o9 = {
    });
    var s = t.Uc(o9.merge || o9.mergeFields ? 2 : 0/* Set */ , e11, n20, i10);
    Fa("Data must be an object, but it was:", s, r15);
    var u, a, c = Oa(r15, s);
    if (o9.merge) u = new X(s.fieldMask), a = s.fieldTransforms;
    else if (o9.mergeFields) {
        for(var h = [], f = 0, l = o9.mergeFields; f < l.length; f++){
            var d = Ma(e11, l[f], n20);
            if (!s.contains(d)) throw new D(N.INVALID_ARGUMENT, "Field '" + d + "' is specified in your field mask but missing from your input data.");
            Ba(h, d) || h.push(d);
        }
        u = new X(h), a = s.fieldTransforms.filter(function(t1) {
            return u.covers(t1.field);
        });
    } else u = null, a = s.fieldTransforms;
    return new ma(new _t(c), u, a);
}
var _a = /** @class */ function(e11) {
    function n20() {
        return null !== e11 && e11.apply(this, arguments) || this;
    }
    return _tslib.__extends(n20, e11), n20.prototype._toFieldTransform = function(t) {
        if (2 !== t.Nc) throw 1 === t.Nc ? t.Lc(this._methodName + "() can only appear at the top level of your update data") : t.Lc(this._methodName + "() cannot be used with set() unless you pass {merge:true}");
        // No transform to add for a delete, but we need to add it to our
        // fieldMask so it gets deleted.
        return t.fieldMask.push(t.path), null;
    }, n20.prototype.isEqual = function(t) {
        return t instanceof n20;
    }, n20;
}(pa);
/**
 * Creates a child context for parsing SerializableFieldValues.
 *
 * This is different than calling `ParseContext.contextWith` because it keeps
 * the fieldTransforms and fieldMask separate.
 *
 * The created context has its `dataSource` set to `UserDataSource.Argument`.
 * Although these values are used with writes, any elements in these FieldValues
 * are not considered writes since they cannot contain any FieldValue sentinels,
 * etc.
 *
 * @param fieldValue - The sentinel FieldValue for which to create a child
 *     context.
 * @param context - The parent context.
 * @param arrayElement - Whether or not the FieldValue has an array.
 */ function Sa(t, e11, n20) {
    return new ba({
        Nc: 3,
        qc: e11.settings.qc,
        methodName: t._methodName,
        Fc: n20
    }, e11.databaseId, e11.R, e11.ignoreUndefinedProperties);
}
var Na = /** @class */ function(e11) {
    function n20() {
        return null !== e11 && e11.apply(this, arguments) || this;
    }
    return _tslib.__extends(n20, e11), n20.prototype._toFieldTransform = function(t) {
        return new Se(t.path, new me);
    }, n20.prototype.isEqual = function(t) {
        return t instanceof n20;
    }, n20;
}(pa), Da = /** @class */ function(e11) {
    function n20(t, n21) {
        var r15 = this;
        return (r15 = e11.call(this, t) || this).Kc = n21, r15;
    }
    return _tslib.__extends(n20, e11), n20.prototype._toFieldTransform = function(t) {
        var e12 = Sa(this, t, /*array=*/ true), n21 = this.Kc.map(function(t1) {
            return La(t1, e12);
        }), r15 = new ge(n21);
        return new Se(t.path, r15);
    }, n20.prototype.isEqual = function(t) {
        // TODO(mrschmidt): Implement isEquals
        return this === t;
    }, n20;
}(pa), Aa = /** @class */ function(e11) {
    function n20(t, n21) {
        var r15 = this;
        return (r15 = e11.call(this, t) || this).Kc = n21, r15;
    }
    return _tslib.__extends(n20, e11), n20.prototype._toFieldTransform = function(t) {
        var e12 = Sa(this, t, /*array=*/ true), n21 = this.Kc.map(function(t1) {
            return La(t1, e12);
        }), r15 = new be(n21);
        return new Se(t.path, r15);
    }, n20.prototype.isEqual = function(t) {
        // TODO(mrschmidt): Implement isEquals
        return this === t;
    }, n20;
}(pa), ka = /** @class */ function(e11) {
    function n20(t, n21) {
        var r15 = this;
        return (r15 = e11.call(this, t) || this).Qc = n21, r15;
    }
    return _tslib.__extends(n20, e11), n20.prototype._toFieldTransform = function(t) {
        var e12 = new Te(t.R, le(t.R, this.Qc));
        return new Se(t.path, e12);
    }, n20.prototype.isEqual = function(t) {
        // TODO(mrschmidt): Implement isEquals
        return this === t;
    }, n20;
}(pa);
/** Parse update data from an update() call. */ function Ca(t, e11, n20, r15) {
    var i10 = t.Uc(1/* Update */ , e11, n20);
    Fa("Data must be an object, but it was:", i10, r15);
    var o9 = [], s = _t.empty();
    G(r15, function(t1, r16) {
        var u = qa(e11, t1, n20);
        // For Compat types, we have to "extract" the underlying types before
        // performing validation.
        r16 = _util.getModularInstance(r16);
        var a = i10.Oc(u);
        if (r16 instanceof _a) // Add it to the field mask, but don't add anything to updateData.
        o9.push(u);
        else {
            var c = La(r16, a);
            null != c && (o9.push(u), s.set(u, c));
        }
    });
    var u = new X(o9);
    return new ga(s, u, i10.fieldTransforms);
}
/** Parse update data from a list of field/value arguments. */ function xa(t, e11, n20, r15, i10, o9) {
    var s = t.Uc(1/* Update */ , e11, n20), u = [
        Ma(e11, r15, n20)
    ], a = [
        i10
    ];
    if (o9.length % 2 != 0) throw new D(N.INVALID_ARGUMENT, "Function " + e11 + "() needs to be called with an even number of arguments that alternate between field names and values.");
    for(var c = 0; c < o9.length; c += 2)u.push(Ma(e11, o9[c])), a.push(o9[c + 1]);
    // We iterate in reverse order to pick the last value for a field if the
    // user specified the field multiple times.
    for(var h = [], f = _t.empty(), d = u.length - 1; d >= 0; --d)if (!Ba(h, u[d])) {
        var p = u[d], y = a[d];
        // For Compat types, we have to "extract" the underlying types before
        // performing validation.
        y = _util.getModularInstance(y);
        var v = s.Oc(p);
        if (y instanceof _a) // Add it to the field mask, but don't add anything to updateData.
        h.push(p);
        else {
            var m = La(y, v);
            null != m && (h.push(p), f.set(p, m));
        }
    }
    var g = new X(h);
    return new ga(f, g, s.fieldTransforms);
}
/**
 * Parse a "query value" (e.g. value in a where filter or a value in a cursor
 * bound).
 *
 * @param allowArrays - Whether the query value is an array that may directly
 * contain additional arrays (e.g. the operand of an `in` query).
 */ function Ra(t, e11, n20, r15) {
    return (void 0) === r15 && (r15 = false), La(n20, t.Uc(r15 ? 4 : 3/* Argument */ , e11));
}
/**
 * Parses user data to Protobuf Values.
 *
 * @param input - Data to be parsed.
 * @param context - A context object representing the current path being parsed,
 * the source of the data being parsed, etc.
 * @returns The parsed value, or null if the value was a FieldValue sentinel
 * that should not be included in the resulting parsed data.
 */ function La(t, e11) {
    if (Pa(// Unwrap the API type from the Compat SDK. This will return the API type
    // from firestore-exp.
    t = _util.getModularInstance(t))) return Fa("Unsupported field value:", e11, t), Oa(t, e11);
    if (t instanceof pa) // FieldValues usually parse into transforms (except FieldValue.delete())
    // in which case we do not want to include this field in our parsed data
    // (as doing so will overwrite the field directly prior to the transform
    // trying to transform it). So we don't add this location to
    // context.fieldMask and we return null as our parsing result.
    /**
     * "Parses" the provided FieldValueImpl, adding any necessary transforms to
     * context.fieldTransforms.
     */ return (function(t1, e12) {
        // Sentinels are only supported with writes, and not within arrays.
        if (!wa(e12.Nc)) throw e12.Lc(t1._methodName + "() can only be used with update() and set()");
        if (!e12.path) throw e12.Lc(t1._methodName + "() is not currently supported inside arrays");
        var n20 = t1._toFieldTransform(e12);
        n20 && e12.fieldTransforms.push(n20);
    })(t, e11), null;
    if ((void 0) === t && e11.ignoreUndefinedProperties) // If the input is undefined it can never participate in the fieldMask, so
    // don't handle this below. If `ignoreUndefinedProperties` is false,
    // `parseScalarValue` will reject an undefined value.
    return null;
    if (// If context.path is null we are inside an array and we don't support
    // field mask paths more granular than the top-level array.
    e11.path && e11.fieldMask.push(e11.path), t instanceof Array) {
        // TODO(b/34871131): Include the path containing the array in the error
        // message.
        // In the case of IN queries, the parsed data is an array (representing
        // the set of values to be included for the IN query) that may directly
        // contain additional arrays (each representing an individual field
        // value), so we disable this validation.
        if (e11.settings.Fc && 4 !== e11.Nc) throw e11.Lc("Nested arrays are not supported");
        return (function(t1, e12) {
            for(var n20 = [], r15 = 0, i10 = 0, o9 = t1; i10 < o9.length; i10++){
                var s = La(o9[i10], e12.Mc(r15));
                null == s && // Just include nulls in the array for fields being replaced with a
                // sentinel.
                (s = {
                    nullValue: "NULL_VALUE"
                }), n20.push(s), r15++;
            }
            return {
                arrayValue: {
                    values: n20
                }
            };
        })(t, e11);
    }
    return (function(t1, e12) {
        if (null === (t1 = _util.getModularInstance(t1))) return {
            nullValue: "NULL_VALUE"
        };
        if ("number" == typeof t1) return le(e12.R, t1);
        if ("boolean" == typeof t1) return {
            booleanValue: t1
        };
        if ("string" == typeof t1) return {
            stringValue: t1
        };
        if (t1 instanceof Date) {
            var n20 = j.fromDate(t1);
            return {
                timestampValue: In(e12.R, n20)
            };
        }
        if (t1 instanceof j) {
            // Firestore backend truncates precision down to microseconds. To ensure
            // offline mode works the same with regards to truncation, perform the
            // truncation immediately without waiting for the backend to do that.
            n20 = new j(t1.seconds, 1000 * Math.floor(t1.nanoseconds / 1000));
            return {
                timestampValue: In(e12.R, n20)
            };
        }
        if (t1 instanceof ya) return {
            geoPointValue: {
                latitude: t1.latitude,
                longitude: t1.longitude
            }
        };
        if (t1 instanceof da) return {
            bytesValue: Tn(e12.R, t1._byteString)
        };
        if (t1 instanceof $u) {
            n20 = e12.databaseId;
            var r15 = t1.firestore._databaseId;
            if (!r15.isEqual(n20)) throw e12.Lc("Document reference is for database " + r15.projectId + "/" + r15.database + " but should be for database " + n20.projectId + "/" + n20.database);
            return {
                referenceValue: Sn(t1.firestore._databaseId || e12.databaseId, t1._key.path)
            };
        }
        throw e12.Lc("Unsupported field value: " + Gu(t1));
    })(t, e11);
}
function Oa(t, e11) {
    var n21 = {
    };
    return z(t) ? // If we encounter an empty object, we explicitly add it to the update
    // mask to ensure that the server creates a map entry.
    e11.path && e11.path.length > 0 && e11.fieldMask.push(e11.path) : G(t, function(t1, r16) {
        var i10 = La(r16, e11.kc(t1));
        null != i10 && (n21[t1] = i10);
    }), {
        mapValue: {
            fields: n21
        }
    };
}
function Pa(t) {
    return !("object" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof j || t instanceof ya || t instanceof da || t instanceof $u || t instanceof pa);
}
function Fa(t, e11, n21) {
    if (!Pa(n21) || !function(t1) {
        return "object" == typeof t1 && null !== t1 && (Object.getPrototypeOf(t1) === Object.prototype || null === Object.getPrototypeOf(t1));
    }(n21)) {
        var r16 = Gu(n21);
        throw "an object" === r16 ? e11.Lc(t + " a custom object") : e11.Lc(t + " " + r16);
    }
}
/**
 * Helper that calls fromDotSeparatedString() but wraps any error thrown.
 */ function Ma(t, e11, n21) {
    if (// If required, replace the FieldPath Compat class with with the firestore-exp
    // FieldPath.
    (e11 = _util.getModularInstance(e11)) instanceof la) return e11._internalPath;
    if ("string" == typeof e11) return qa(t, e11);
    throw Ua("Field path arguments must be of type string or FieldPath.", t, /* hasConverter= */ false, /* path= */ void 0, n21);
}
/**
 * Matches any characters in a field path string that are reserved.
 */ var Va = new RegExp("[~\\*/\\[\\]]");
/**
 * Wraps fromDotSeparatedString with an error message about the method that
 * was thrown.
 * @param methodName - The publicly visible method name
 * @param path - The dot-separated string form of a field path which will be
 * split on dots.
 * @param targetDoc - The document against which the field path will be
 * evaluated.
 */ function qa(t, n21, r17) {
    if (n21.search(Va) >= 0) throw Ua("Invalid field path (" + n21 + "). Paths must not contain '~', '*', '/', '[', or ']'", t, /* hasConverter= */ false, /* path= */ void 0, r17);
    try {
        return (new (la.bind.apply(la, _tslib.__spreadArray([
            void 0
        ], n21.split(".")))))._internalPath;
    } catch (e11) {
        throw Ua("Invalid field path (" + n21 + "). Paths must not be empty, begin with '.', end with '.', or contain '..'", t, /* hasConverter= */ false, /* path= */ void 0, r17);
    }
}
function Ua(t, e11, n21, r17, i10) {
    var o9 = r17 && !r17.isEmpty(), s = (void 0) !== i10, u = "Function " + e11 + "() called with invalid data";
    n21 && (u += " (via `toFirestore()`)");
    var a = "";
    return (o9 || s) && (a += " (found", o9 && (a += " in field " + r17), s && (a += " in document " + i10), a += ")"), new D(N.INVALID_ARGUMENT, (u += ". ") + t + a);
}
function Ba(t, e11) {
    return t.some(function(t1) {
        return t1.isEqual(e11);
    });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A `DocumentSnapshot` contains data read from a document in your Firestore
 * database. The data can be extracted with `.data()` or `.get(<field>)` to
 * get a specific field.
 *
 * For a `DocumentSnapshot` that points to a non-existing document, any data
 * access will return 'undefined'. You can use the `exists()` method to
 * explicitly verify a document's existence.
 */ var ja = /** @class */ function() {
    // Note: This class is stripped down version of the DocumentSnapshot in
    // the legacy SDK. The changes are:
    // - No support for SnapshotMetadata.
    // - No support for SnapshotOptions.
    /** @hideconstructor protected */ function t(t1, e11, n21, r17, i10) {
        this._firestore = t1, this._userDataWriter = e11, this._key = n21, this._document = r17, this._converter = i10;
    }
    return Object.defineProperty(t.prototype, "id", {
        /** Property of the `DocumentSnapshot` that provides the document's ID. */ get: function() {
            return this._key.path.lastSegment();
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t.prototype, "ref", {
        /**
         * The `DocumentReference` for the document included in the `DocumentSnapshot`.
         */ get: function() {
            return new $u(this._firestore, this._converter, this._key);
        },
        enumerable: false,
        configurable: true
    }), /**
     * Signals whether or not the document at the snapshot's location exists.
     *
     * @returns true if the document exists.
     */ t.prototype.exists = function() {
        return null !== this._document;
    }, /**
     * Retrieves all fields in the document as an `Object`. Returns `undefined` if
     * the document doesn't exist.
     *
     * @returns An `Object` containing all fields in the document or `undefined`
     * if the document doesn't exist.
     */ t.prototype.data = function() {
        if (this._document) {
            if (this._converter) {
                // We only want to use the converter and create a new DocumentSnapshot
                // if a converter has been provided.
                var t1 = new Ka(this._firestore, this._userDataWriter, this._key, this._document, /* converter= */ null);
                return this._converter.fromFirestore(t1);
            }
            return this._userDataWriter.convertValue(this._document.data.value);
        }
    }, /**
     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
     * document or field doesn't exist.
     *
     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
     * field.
     * @returns The data at the specified field location or undefined if no such
     * field exists in the document.
     */ // We are using `any` here to avoid an explicit cast by our users.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    t.prototype.get = function(t2) {
        if (this._document) {
            var e11 = this._document.data.field(Qa("DocumentSnapshot.get", t2));
            if (null !== e11) return this._userDataWriter.convertValue(e11);
        }
    }, t;
}(), Ka = /** @class */ function(e12) {
    function n21() {
        return null !== e12 && e12.apply(this, arguments) || this;
    }
    /**
     * Retrieves all fields in the document as an `Object`.
     *
     * @override
     * @returns An `Object` containing all fields in the document.
     */ return _tslib.__extends(n21, e12), n21.prototype.data = function() {
        return e12.prototype.data.call(this);
    }, n21;
}(ja);
/**
 * A `QueryDocumentSnapshot` contains data read from a document in your
 * Firestore database as part of a query. The document is guaranteed to exist
 * and its data can be extracted with `.data()` or `.get(<field>)` to get a
 * specific field.
 *
 * A `QueryDocumentSnapshot` offers the same API surface as a
 * `DocumentSnapshot`. Since query results contain only existing documents, the
 * `exists` property will always be true and `data()` will never return
 * 'undefined'.
 */ /**
 * Helper that calls fromDotSeparatedString() but wraps any error thrown.
 */ function Qa(t2, e12) {
    return "string" == typeof e12 ? qa(t2, e12) : e12 instanceof la ? e12._internalPath : e12._delegate._internalPath;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Metadata about a snapshot, describing the state of the snapshot.
 */ var Ga = /** @class */ function() {
    /** @hideconstructor */ function t2(t3, e12) {
        this.hasPendingWrites = t3, this.fromCache = e12;
    }
    return t2.prototype.isEqual = function(t3) {
        return this.hasPendingWrites === t3.hasPendingWrites && this.fromCache === t3.fromCache;
    }, t2;
}(), za = /** @class */ function(e12) {
    /** @hideconstructor protected */ function n21(t2, n22, r17, i10, o9, s) {
        var u = this;
        return (u = e12.call(this, t2, n22, r17, i10, s) || this)._firestore = t2, u._firestoreImpl = t2, u.metadata = o9, u;
    }
    /**
     * Property of the `DocumentSnapshot` that signals whether or not the data
     * exists. True if the document exists.
     */ return _tslib.__extends(n21, e12), n21.prototype.exists = function() {
        return e12.prototype.exists.call(this);
    }, /**
     * Retrieves all fields in the document as an `Object`. Returns `undefined` if
     * the document doesn't exist.
     *
     * By default, `FieldValue.serverTimestamp()` values that have not yet been
     * set to their final value will be returned as `null`. You can override
     * this by passing an options object.
     *
     * @param options - An options object to configure how data is retrieved from
     * the snapshot (for example the desired behavior for server timestamps that
     * have not yet been set to their final value).
     * @returns An `Object` containing all fields in the document or `undefined` if
     * the document doesn't exist.
     */ n21.prototype.data = function(t2) {
        if ((void 0) === t2 && (t2 = {
        }), this._document) {
            if (this._converter) {
                // We only want to use the converter and create a new DocumentSnapshot
                // if a converter has been provided.
                var e13 = new Wa(this._firestore, this._userDataWriter, this._key, this._document, this.metadata, /* converter= */ null);
                return this._converter.fromFirestore(e13, t2);
            }
            return this._userDataWriter.convertValue(this._document.data.value, t2.serverTimestamps);
        }
    }, /**
     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
     * document or field doesn't exist.
     *
     * By default, a `FieldValue.serverTimestamp()` that has not yet been set to
     * its final value will be returned as `null`. You can override this by
     * passing an options object.
     *
     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
     * field.
     * @param options - An options object to configure how the field is retrieved
     * from the snapshot (for example the desired behavior for server timestamps
     * that have not yet been set to their final value).
     * @returns The data at the specified field location or undefined if no such
     * field exists in the document.
     */ // We are using `any` here to avoid an explicit cast by our users.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    n21.prototype.get = function(t2, e14) {
        if ((void 0) === e14 && (e14 = {
        }), this._document) {
            var n22 = this._document.data.field(Qa("DocumentSnapshot.get", t2));
            if (null !== n22) return this._userDataWriter.convertValue(n22, e14.serverTimestamps);
        }
    }, n21;
}(ja), Wa = /** @class */ function(e12) {
    function n21() {
        return null !== e12 && e12.apply(this, arguments) || this;
    }
    /**
     * Retrieves all fields in the document as an `Object`.
     *
     * By default, `FieldValue.serverTimestamp()` values that have not yet been
     * set to their final value will be returned as `null`. You can override
     * this by passing an options object.
     *
     * @override
     * @param options - An options object to configure how data is retrieved from
     * the snapshot (for example the desired behavior for server timestamps that
     * have not yet been set to their final value).
     * @returns An `Object` containing all fields in the document.
     */ return _tslib.__extends(n21, e12), n21.prototype.data = function(t2) {
        return (void 0) === t2 && (t2 = {
        }), e12.prototype.data.call(this, t2);
    }, n21;
}(za), Ha = /** @class */ function() {
    /** @hideconstructor */ function t2(t3, e12, n21, r17) {
        this._firestore = t3, this._userDataWriter = e12, this._snapshot = r17, this.metadata = new Ga(r17.hasPendingWrites, r17.fromCache), this.query = n21;
    }
    return Object.defineProperty(t2.prototype, "docs", {
        /** An array of all the documents in the `QuerySnapshot`. */ get: function() {
            var t3 = [];
            return this.forEach(function(e12) {
                return t3.push(e12);
            }), t3;
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t2.prototype, "size", {
        /** The number of documents in the `QuerySnapshot`. */ get: function() {
            return this._snapshot.docs.size;
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t2.prototype, "empty", {
        /** True if there are no documents in the `QuerySnapshot`. */ get: function() {
            return 0 === this.size;
        },
        enumerable: false,
        configurable: true
    }), /**
     * Enumerates all of the documents in the `QuerySnapshot`.
     *
     * @param callback - A callback to be called with a `QueryDocumentSnapshot` for
     * each document in the snapshot.
     * @param thisArg - The `this` binding for the callback.
     */ t2.prototype.forEach = function(t3, e12) {
        var n21 = this;
        this._snapshot.docs.forEach(function(r17) {
            t3.call(e12, new Wa(n21._firestore, n21._userDataWriter, r17.key, r17, new Ga(n21._snapshot.mutatedKeys.has(r17.key), n21._snapshot.fromCache), n21.query.converter));
        });
    }, /**
     * Returns an array of the documents changes since the last snapshot. If this
     * is the first snapshot, all documents will be in the list as 'added'
     * changes.
     *
     * @param options - `SnapshotListenOptions` that control whether metadata-only
     * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger
     * snapshot events.
     */ t2.prototype.docChanges = function(t3) {
        (void 0) === t3 && (t3 = {
        });
        var e12 = !!t3.includeMetadataChanges;
        if (e12 && this._snapshot.excludesMetadataChanges) throw new D(N.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
        return this._cachedChanges && this._cachedChangesIncludeMetadataChanges === e12 || (this._cachedChanges = /** Calculates the array of DocumentChanges for a given ViewSnapshot. */ (function(t4, e14) {
            if (t4._snapshot.oldDocs.isEmpty()) {
                var n21 = 0;
                return t4._snapshot.docChanges.map(function(e15) {
                    return {
                        type: "added",
                        doc: new Wa(t4._firestore, t4._userDataWriter, e15.doc.key, e15.doc, new Ga(t4._snapshot.mutatedKeys.has(e15.doc.key), t4._snapshot.fromCache), t4.query.converter),
                        oldIndex: -1,
                        newIndex: n21++
                    };
                });
            }
            // A DocumentSet that is updated incrementally as changes are applied to use
            // to lookup the index of a document.
            var r17 = t4._snapshot.oldDocs;
            return t4._snapshot.docChanges.filter(function(t5) {
                return e14 || 3 !== t5.type;
            }).map(function(e15) {
                var n23 = new Wa(t4._firestore, t4._userDataWriter, e15.doc.key, e15.doc, new Ga(t4._snapshot.mutatedKeys.has(e15.doc.key), t4._snapshot.fromCache), t4.query.converter), i10 = -1, o9 = -1;
                return 0 !== e15.type && (i10 = r17.indexOf(e15.doc.key), r17 = r17.delete(e15.doc.key)), 1 !== e15.type && (o9 = (r17 = r17.add(e15.doc)).indexOf(e15.doc.key)), {
                    type: Ya(e15.type),
                    doc: n23,
                    oldIndex: i10,
                    newIndex: o9
                };
            });
        })(this, e12), this._cachedChangesIncludeMetadataChanges = e12), this._cachedChanges;
    }, t2;
}();
/**
 * A `DocumentSnapshot` contains data read from a document in your Firestore
 * database. The data can be extracted with `.data()` or `.get(<field>)` to
 * get a specific field.
 *
 * For a `DocumentSnapshot` that points to a non-existing document, any data
 * access will return 'undefined'. You can use the `exists()` method to
 * explicitly verify a document's existence.
 */ function Ya(t2) {
    switch(t2){
        case 0:
            return "added";
        case 2:
        case 3:
            return "modified";
        case 1:
            return "removed";
        default:
            return O();
    }
}
// TODO(firestoreexp): Add tests for snapshotEqual with different snapshot
// metadata
/**
 * Returns true if the provided snapshots are equal.
 *
 * @param left - A snapshot to compare.
 * @param right - A snapshot to compare.
 * @returns true if the snapshots are equal.
 */ function $a(t2, e12) {
    return t2 instanceof za && e12 instanceof za ? t2._firestore === e12._firestore && t2._key.isEqual(e12._key) && (null === t2._document ? null === e12._document : t2._document.isEqual(e12._document)) && t2._converter === e12._converter : t2 instanceof Ha && e12 instanceof Ha && t2._firestore === e12._firestore && na(t2.query, e12.query) && t2.metadata.isEqual(e12.metadata) && t2._snapshot.isEqual(e12._snapshot);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function Xa(t2) {
    if (Xt(t2) && 0 === t2.explicitOrderBy.length) throw new D(N.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
}
/**
 * A `QueryConstraint` is used to narrow the set of documents returned by a
 * Firestore query. `QueryConstraint`s are created by invoking {@link where},
 * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link
 * endBefore:1}, {@link (endAt:1)}, {@link limit} or {@link limitToLast} and
 * can then be passed to {@link query} to create a new query instance that
 * also contains this `QueryConstraint`.
 */ var Ja = function() {
};
/**
 * Creates a new immutable instance of `Query` that is extended to also include
 * additional query constraints.
 *
 * @param query - The Query instance to use as a base for the new constraints.
 * @param queryConstraints - The list of `QueryConstraint`s to apply.
 * @throws if any of the provided query constraints cannot be combined with the
 * existing or new constraints.
 */ function Za(t2) {
    for(var e12 = [], n23 = 1; n23 < arguments.length; n23++)e12[n23 - 1] = arguments[n23];
    for(var r17 = 0, i10 = e12; r17 < i10.length; r17++){
        var o9 = i10[r17];
        t2 = o9._apply(t2);
    }
    return t2;
}
var tc = /** @class */ function(e12) {
    function n23(t2, n24, r17) {
        var i10 = this;
        return (i10 = e12.call(this) || this).jc = t2, i10.Wc = n24, i10.Gc = r17, i10.type = "where", i10;
    }
    return _tslib.__extends(n23, e12), n23.prototype._apply = function(t2) {
        var e14 = Ta(t2.firestore), n24 = function(t3, e15, n25, r17, i10, o10, s) {
            var u;
            if (i10.isKeyField()) {
                if ("array-contains" === o10 || "array-contains-any" === o10) throw new D(N.INVALID_ARGUMENT, "Invalid Query. You can't perform '" + o10 + "' queries on FieldPath.documentId().");
                if ("in" === o10 || "not-in" === o10) {
                    uc(s, o10);
                    for(var a = [], c = 0, h = s; c < h.length; c++){
                        var f = h[c];
                        a.push(sc(r17, t3, f));
                    }
                    u = {
                        arrayValue: {
                            values: a
                        }
                    };
                } else u = sc(r17, t3, s);
            } else "in" !== o10 && "not-in" !== o10 && "array-contains-any" !== o10 || uc(s, o10), u = Ra(n25, "where", s, /* allowArrays= */ "in" === o10 || "not-in" === o10);
            var l = Rt.create(i10, o10, u);
            return (function(t4, e16) {
                if (e16.g()) {
                    var n26 = Zt(t4);
                    if (null !== n26 && !n26.isEqual(e16.field)) throw new D(N.INVALID_ARGUMENT, "Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '" + n26.toString() + "' and '" + e16.field.toString() + "'");
                    var r18 = Jt(t4);
                    null !== r18 && ac(t4, e16.field, r18);
                }
                var i11 = function(t5, e17) {
                    for(var n27 = 0, r19 = t5.filters; n27 < r19.length; n27++){
                        var i12 = r19[n27];
                        if (e17.indexOf(i12.op) >= 0) return i12.op;
                    }
                    return null;
                }(t4, /**
 * Given an operator, returns the set of operators that cannot be used with it.
 *
 * Operators in a query must adhere to the following set of rules:
 * 1. Only one array operator is allowed.
 * 2. Only one disjunctive operator is allowed.
 * 3. NOT_EQUAL cannot be used with another NOT_EQUAL operator.
 * 4. NOT_IN cannot be used with array, disjunctive, or NOT_EQUAL operators.
 *
 * Array operators: ARRAY_CONTAINS, ARRAY_CONTAINS_ANY
 * Disjunctive operators: IN, ARRAY_CONTAINS_ANY, NOT_IN
 */ function(t5) {
                    switch(t5){
                        case "!=":
                            return [
                                "!=",
                                "not-in"
                            ];
                        case "array-contains":
                            return [
                                "array-contains",
                                "array-contains-any",
                                "not-in"
                            ];
                        case "in":
                            return [
                                "array-contains-any",
                                "in",
                                "not-in"
                            ];
                        case "array-contains-any":
                            return [
                                "array-contains",
                                "array-contains-any",
                                "in",
                                "not-in"
                            ];
                        case "not-in":
                            return [
                                "array-contains",
                                "array-contains-any",
                                "in",
                                "not-in",
                                "!="
                            ];
                        default:
                            return [];
                    }
                }(e16.op));
                if (null !== i11) // Special case when it's a duplicate op to give a slightly clearer error message.
                throw i11 === e16.op ? new D(N.INVALID_ARGUMENT, "Invalid query. You cannot use more than one '" + e16.op.toString() + "' filter.") : new D(N.INVALID_ARGUMENT, "Invalid query. You cannot use '" + e16.op.toString() + "' filters with '" + i11.toString() + "' filters.");
            })(t3, l), l;
        }(t2._query, 0, e14, t2.firestore._databaseId, this.jc, this.Wc, this.Gc);
        return new Xu(t2.firestore, t2.converter, function(t3, e15) {
            var n25 = t3.filters.concat([
                e15
            ]);
            return new Wt(t3.path, t3.collectionGroup, t3.explicitOrderBy.slice(), n25, t3.limit, t3.limitType, t3.startAt, t3.endAt);
        }(t2._query, n24));
    }, n23;
}(Ja), ec = /** @class */ function(e12) {
    function n23(t2, n24) {
        var r17 = this;
        return (r17 = e12.call(this) || this).jc = t2, r17.zc = n24, r17.type = "orderBy", r17;
    }
    return _tslib.__extends(n23, e12), n23.prototype._apply = function(t2) {
        var e14 = function(t3, e15, n24) {
            if (null !== t3.startAt) throw new D(N.INVALID_ARGUMENT, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
            if (null !== t3.endAt) throw new D(N.INVALID_ARGUMENT, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
            var r17 = new Kt(e15, n24);
            return (function(t4, e16) {
                if (null === Jt(t4)) {
                    // This is the first order by. It must match any inequality.
                    var n25 = Zt(t4);
                    null !== n25 && ac(t4, n25, e16.field);
                }
            })(t3, r17), r17;
        }(t2._query, this.jc, this.zc);
        return new Xu(t2.firestore, t2.converter, function(t3, e15) {
            // TODO(dimond): validate that orderBy does not list the same key twice.
            var n24 = t3.explicitOrderBy.concat([
                e15
            ]);
            return new Wt(t3.path, t3.collectionGroup, n24, t3.filters.slice(), t3.limit, t3.limitType, t3.startAt, t3.endAt);
        }(t2._query, e14));
    }, n23;
}(Ja), nc = /** @class */ function(e12) {
    function n23(t2, n24, r17) {
        var i10 = this;
        return (i10 = e12.call(this) || this).type = t2, i10.Hc = n24, i10.Jc = r17, i10;
    }
    return _tslib.__extends(n23, e12), n23.prototype._apply = function(t2) {
        return new Xu(t2.firestore, t2.converter, re(t2._query, this.Hc, this.Jc));
    }, n23;
}(Ja), rc = /** @class */ function(e12) {
    function n23(t2, n24, r17) {
        var i10 = this;
        return (i10 = e12.call(this) || this).type = t2, i10.Yc = n24, i10.Xc = r17, i10;
    }
    return _tslib.__extends(n23, e12), n23.prototype._apply = function(t2) {
        var e14 = oc(t2, this.type, this.Yc, this.Xc);
        return new Xu(t2.firestore, t2.converter, function(t3, e15) {
            return new Wt(t3.path, t3.collectionGroup, t3.explicitOrderBy.slice(), t3.filters.slice(), t3.limit, t3.limitType, e15, t3.endAt);
        }(t2._query, e14));
    }, n23;
}(Ja), ic = /** @class */ function(e12) {
    function n23(t2, n24, r17) {
        var i10 = this;
        return (i10 = e12.call(this) || this).type = t2, i10.Yc = n24, i10.Xc = r17, i10;
    }
    return _tslib.__extends(n23, e12), n23.prototype._apply = function(t2) {
        var e14 = oc(t2, this.type, this.Yc, this.Xc);
        return new Xu(t2.firestore, t2.converter, function(t3, e15) {
            return new Wt(t3.path, t3.collectionGroup, t3.explicitOrderBy.slice(), t3.filters.slice(), t3.limit, t3.limitType, t3.startAt, e15);
        }(t2._query, e14));
    }, n23;
}(Ja);
/**
 * Creates a `QueryConstraint` that enforces that documents must contain the
 * specified field and that the value should satisfy the relation constraint
 * provided.
 *
 * @param fieldPath - The path to compare
 * @param opStr - The operation string (e.g "&lt;", "&lt;=", "==", "&lt;",
 *   "&lt;=", "!=").
 * @param value - The value for comparison
 * @returns The created `Query`.
 */ /** Helper function to create a bound from a document or fields */ function oc(t2, e12, n23, r17) {
    if (n23[0] = _util.getModularInstance(n23[0]), n23[0] instanceof ja) return (function(t3, e14, n24, r19, i10) {
        if (!r19) throw new D(N.NOT_FOUND, "Can't use a DocumentSnapshot that doesn't exist for " + n24 + "().");
        // Because people expect to continue/end a query at the exact document
        // provided, we need to use the implicit sort order rather than the explicit
        // sort order, because it's guaranteed to contain the document key. That way
        // the position becomes unambiguous and the query continues/ends exactly at
        // the provided document. Without the key (by using the explicit sort
        // orders), multiple documents could match the position, yielding duplicate
        // results.
        for(var o10 = [], s = 0, u = ee(t3); s < u.length; s++){
            var a = u[s];
            if (a.field.isKeyField()) o10.push(mt(e14, r19.key));
            else {
                var c = r19.data.field(a.field);
                if (rt(c)) throw new D(N.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a document for which the field "' + a.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');
                if (null === c) {
                    var h = a.field.canonicalString();
                    throw new D(N.INVALID_ARGUMENT, "Invalid query. You are trying to start or end a query using a document for which the field '" + h + "' (used as the orderBy) does not exist.");
                }
                o10.push(c);
            }
        }
        return new Bt(o10, i10);
    })(t2._query, t2.firestore._databaseId, e12, n23[0]._document, r17);
    var i10 = Ta(t2.firestore);
    return (function(t3, e14, n24, r19, i11, o10) {
        // Use explicit order by's because it has to match the query the user made
        var s = t3.explicitOrderBy;
        if (i11.length > s.length) throw new D(N.INVALID_ARGUMENT, "Too many arguments provided to " + r19 + "(). The number of arguments must be less than or equal to the number of orderBy() clauses");
        for(var u = [], a = 0; a < i11.length; a++){
            var c = i11[a];
            if (s[a].field.isKeyField()) {
                if ("string" != typeof c) throw new D(N.INVALID_ARGUMENT, "Invalid query. Expected a string for document ID in " + r19 + "(), but got a " + typeof c);
                if (!te(t3) && -1 !== c.indexOf("/")) throw new D(N.INVALID_ARGUMENT, "Invalid query. When querying a collection and ordering by FieldPath.documentId(), the value passed to " + r19 + "() must be a plain document ID, but '" + c + "' contains a slash.");
                var h = t3.path.child(H.fromString(c));
                if (!ct.isDocumentKey(h)) throw new D(N.INVALID_ARGUMENT, "Invalid query. When querying a collection group and ordering by FieldPath.documentId(), the value passed to " + r19 + "() must result in a valid document path, but '" + h + "' is not because it contains an odd number of segments.");
                var f = new ct(h);
                u.push(mt(e14, f));
            } else {
                var l = Ra(n24, r19, c);
                u.push(l);
            }
        }
        return new Bt(u, o10);
    })(t2._query, t2.firestore._databaseId, i10, e12, n23, r17);
}
function sc(t2, e12, n23) {
    if ("string" == typeof (n23 = _util.getModularInstance(n23))) {
        if ("" === n23) throw new D(N.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");
        if (!te(e12) && -1 !== n23.indexOf("/")) throw new D(N.INVALID_ARGUMENT, "Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but '" + n23 + "' contains a '/' character.");
        var r17 = e12.path.child(H.fromString(n23));
        if (!ct.isDocumentKey(r17)) throw new D(N.INVALID_ARGUMENT, "Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, but '" + r17 + "' is not because it has an odd number of segments (" + r17.length + ").");
        return mt(t2, new ct(r17));
    }
    if (n23 instanceof $u) return mt(t2, n23._key);
    throw new D(N.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: " + Gu(n23) + ".");
}
/**
 * Validates that the value passed into a disjunctive filter satisfies all
 * array requirements.
 */ function uc(t2, e12) {
    if (!Array.isArray(t2) || 0 === t2.length) throw new D(N.INVALID_ARGUMENT, "Invalid Query. A non-empty array is required for '" + e12.toString() + "' filters.");
    if (t2.length > 10) throw new D(N.INVALID_ARGUMENT, "Invalid Query. '" + e12.toString() + "' filters support a maximum of 10 elements in the value array.");
}
function ac(t2, e12, n23) {
    if (!n23.isEqual(e12)) throw new D(N.INVALID_ARGUMENT, "Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '" + e12.toString() + "' and so you must also use '" + e12.toString() + "' as your first argument to orderBy(), but your first orderBy() is on field '" + n23.toString() + "' instead.");
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Converts Firestore's internal types to the JavaScript types that we expose
 * to the user.
 *
 * @internal
 */ var cc = /** @class */ function() {
    function t2() {
    }
    return t2.prototype.convertValue = function(t3, e12) {
        switch((void 0) === e12 && (e12 = "none"), ht(t3)){
            case 0:
                return null;
            case 1:
                return t3.booleanValue;
            case 2:
                return et(t3.integerValue || t3.doubleValue);
            case 3:
                return this.convertTimestamp(t3.timestampValue);
            case 4:
                return this.convertServerTimestamp(t3, e12);
            case 5:
                return t3.stringValue;
            case 6:
                return this.convertBytes(nt(t3.bytesValue));
            case 7:
                return this.convertReference(t3.referenceValue);
            case 8:
                return this.convertGeoPoint(t3.geoPointValue);
            case 9:
                return this.convertArray(t3.arrayValue, e12);
            case 10:
                return this.convertObject(t3.mapValue, e12);
            default:
                throw O();
        }
    }, t2.prototype.convertObject = function(t3, e12) {
        var n23 = this, r19 = {
        };
        return G(t3.fields, function(t4, i10) {
            r19[t4] = n23.convertValue(i10, e12);
        }), r19;
    }, t2.prototype.convertGeoPoint = function(t3) {
        return new ya(et(t3.latitude), et(t3.longitude));
    }, t2.prototype.convertArray = function(t3, e12) {
        var n23 = this;
        return (t3.values || []).map(function(t4) {
            return n23.convertValue(t4, e12);
        });
    }, t2.prototype.convertServerTimestamp = function(t3, e12) {
        switch(e12){
            case "previous":
                var n23 = it(t3);
                return null == n23 ? null : this.convertValue(n23, e12);
            case "estimate":
                return this.convertTimestamp(ot(t3));
            default:
                return null;
        }
    }, t2.prototype.convertTimestamp = function(t3) {
        var e12 = tt(t3);
        return new j(e12.seconds, e12.nanos);
    }, t2.prototype.convertDocumentKey = function(t3, e12) {
        var n23 = H.fromString(t3);
        P($n(n23));
        var r19 = new Ru(n23.get(1), n23.get(3)), i10 = new ct(n23.popFirst(5));
        return r19.isEqual(e12) || // TODO(b/64130202): Somehow support foreign references.
        x("Document " + i10 + " contains a document reference within a different database (" + r19.projectId + "/" + r19.database + ") which is not supported. It will be treated as a reference in the current database (" + e12.projectId + "/" + e12.database + ") instead."), i10;
    }, t2;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Converts custom model object of type T into DocumentData by applying the
 * converter if it exists.
 *
 * This function is used when converting user objects to DocumentData
 * because we want to provide the user with a more specific error message if
 * their set() or fails due to invalid data originating from a toFirestore()
 * call.
 */ function hc(t2, e12, n23) {
    // Cast to `any` in order to satisfy the union type constraint on
    // toFirestore().
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return t2 ? n23 && (n23.merge || n23.mergeFields) ? t2.toFirestore(e12, n23) : t2.toFirestore(e12) : e12;
}
var fc = /** @class */ function(e12) {
    function n23(t2) {
        var n24 = this;
        return (n24 = e12.call(this) || this).firestore = t2, n24;
    }
    return _tslib.__extends(n23, e12), n23.prototype.convertBytes = function(t2) {
        return new da(t2);
    }, n23.prototype.convertReference = function(t2) {
        var e14 = this.convertDocumentKey(t2, this.firestore._databaseId);
        return new $u(this.firestore, /* converter= */ null, e14);
    }, n23;
}(cc), lc = /** @class */ function() {
    /** @hideconstructor */ function t2(t3, e12) {
        this._firestore = t3, this._commitHandler = e12, this._mutations = [], this._committed = false, this._dataReader = Ta(t3);
    }
    return t2.prototype.set = function(t3, e12, n23) {
        this._verifyNotCommitted();
        var r19 = dc(t3, this._firestore), i10 = hc(r19.converter, e12, n23), o10 = Ea(this._dataReader, "WriteBatch.set", r19._key, i10, null !== r19.converter, n23);
        return this._mutations.push(o10.toMutation(r19._key, De.none())), this;
    }, t2.prototype.update = function(t3, e12, n23) {
        for(var r19 = [], i10 = 3; i10 < arguments.length; i10++)r19[i10 - 3] = arguments[i10];
        this._verifyNotCommitted();
        var o10, s = dc(t3, this._firestore);
        // For Compat types, we have to "extract" the underlying types before
        // performing validation.
        return o10 = "string" == typeof (e12 = _util.getModularInstance(e12)) || e12 instanceof la ? xa(this._dataReader, "WriteBatch.update", s._key, e12, n23, r19) : Ca(this._dataReader, "WriteBatch.update", s._key, e12), this._mutations.push(o10.toMutation(s._key, De.exists(true))), this;
    }, /**
     * Deletes the document referred to by the provided {@link DocumentReference}.
     *
     * @param documentRef - A reference to the document to be deleted.
     * @returns This `WriteBatch` instance. Used for chaining method calls.
     */ t2.prototype.delete = function(t3) {
        this._verifyNotCommitted();
        var e12 = dc(t3, this._firestore);
        return this._mutations = this._mutations.concat(new je(e12._key, De.none())), this;
    }, /**
     * Commits all of the writes in this write batch as a single atomic unit.
     *
     * The result of these writes will only be reflected in document reads that
     * occur after the returned Promise resolves. If the client is offline, the
     * write fails. If you would like to see local modifications or buffer writes
     * until the client is online, use the full Firestore SDK.
     *
     * @returns A Promise resolved once all of the writes in the batch have been
     * successfully written to the backend as an atomic unit (note that it won't
     * resolve while you're offline).
     */ t2.prototype.commit = function() {
        return this._verifyNotCommitted(), this._committed = true, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();
    }, t2.prototype._verifyNotCommitted = function() {
        if (this._committed) throw new D(N.FAILED_PRECONDITION, "A write batch can no longer be used after commit() has been called.");
    }, t2;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A write batch, used to perform multiple writes as a single atomic unit.
 *
 * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It
 * provides methods for adding writes to the write batch. None of the writes
 * will be committed (or visible locally) until {@link WriteBatch.commit} is
 * called.
 */ function dc(t2, e12) {
    if ((t2 = _util.getModularInstance(t2)).firestore !== e12) throw new D(N.INVALID_ARGUMENT, "Provided document reference is from a different Firestore instance.");
    return t2;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the
// legacy SDK.
/**
 * A reference to a transaction.
 *
 * The `Transaction` object passed to a transaction's `updateFunction` provides
 * the methods to read and write data within the transaction context. See
 * {@link runTransaction}.
 */ var pc = /** @class */ function(e12) {
    function n23(t2) {
        var n24 = this;
        return (n24 = e12.call(this) || this).firestore = t2, n24;
    }
    return _tslib.__extends(n23, e12), n23.prototype.convertBytes = function(t2) {
        return new da(t2);
    }, n23.prototype.convertReference = function(t2) {
        var e14 = this.convertDocumentKey(t2, this.firestore._databaseId);
        return new $u(this.firestore, /* converter= */ null, e14);
    }, n23;
}(cc);
/**
 * Reads the document referred to by this `DocumentReference` from cache.
 * Returns an error if the document is not currently cached.
 *
 * @returns A Promise resolved with a `DocumentSnapshot` containing the
 * current document contents.
 */ function yc(t2, e12, n23) {
    for(var r19 = [], i10 = 3; i10 < arguments.length; i10++)r19[i10 - 3] = arguments[i10];
    t2 = zu(t2, $u);
    var o10 = zu(t2.firestore, ua), s = Ta(o10);
    return mc(o10, [
        ("string" == typeof // For Compat types, we have to "extract" the underlying types before
        // performing validation.
        (e12 = _util.getModularInstance(e12)) || e12 instanceof la ? xa(s, "updateDoc", t2._key, e12, n23, r19) : Ca(s, "updateDoc", t2._key, e12)).toMutation(t2._key, De.exists(true))
    ]);
}
/**
 * Deletes the document referred to by the specified `DocumentReference`.
 *
 * @param reference - A reference to the document to delete.
 * @returns A Promise resolved once the document has been successfully
 * deleted from the backend (note that it won't resolve while you're offline).
 */ function vc(t2) {
    for(var e12, i10, o10, s = [], u = 1; u < arguments.length; u++)s[u - 1] = arguments[u];
    t2 = _util.getModularInstance(t2);
    var a = {
        includeMetadataChanges: false
    }, c = 0;
    "object" != typeof s[c] || ia(s[c]) || (a = s[c], c++);
    var h, f, d, p = {
        includeMetadataChanges: a.includeMetadataChanges
    };
    if (ia(s[c])) {
        var y = s[c];
        s[c] = null === (e12 = y.next) || (void 0) === e12 ? void 0 : e12.bind(y), s[c + 1] = null === (i10 = y.error) || (void 0) === i10 ? void 0 : i10.bind(y), s[c + 2] = null === (o10 = y.complete) || (void 0) === o10 ? void 0 : o10.bind(y);
    }
    if (t2 instanceof $u) f = zu(t2.firestore, ua), d = Yt(t2._key.path), h = {
        next: function(e14) {
            s[c] && s[c](gc(f, t2, e14));
        },
        error: s[c + 1],
        complete: s[c + 2]
    };
    else {
        var v = zu(t2, Xu);
        f = zu(v.firestore, ua), d = v._query;
        var m = new pc(f);
        h = {
            next: function(t3) {
                s[c] && s[c](new Ha(f, m, v, t3));
            },
            error: s[c + 1],
            complete: s[c + 2]
        }, Xa(t2._query);
    }
    return (function(t3, e14, i11, o11) {
        var s1 = this, u1 = new yu(o11), a1 = new Is(e14, u1, i11);
        return t3.asyncQueue.enqueueAndForget(function() {
            return _tslib.__awaiter(s1, void 0, void 0, function() {
                var e15;
                return _tslib.__generator(this, function(n23) {
                    switch(n23.label){
                        case 0:
                            return e15 = vs, [
                                4,
                                Au(t3)
                            ];
                        case 1:
                            return [
                                2,
                                e15.apply(void 0, [
                                    n23.sent(),
                                    a1
                                ])
                            ];
                    }
                });
            });
        }), function() {
            u1.Wo(), t3.asyncQueue.enqueueAndForget(function() {
                return _tslib.__awaiter(s1, void 0, void 0, function() {
                    var e15;
                    return _tslib.__generator(this, function(n23) {
                        switch(n23.label){
                            case 0:
                                return e15 = ms, [
                                    4,
                                    Au(t3)
                                ];
                            case 1:
                                return [
                                    2,
                                    e15.apply(void 0, [
                                        n23.sent(),
                                        a1
                                    ])
                                ];
                        }
                    });
                });
            });
        };
    })(aa(f), d, p, h);
}
/**
 * Locally writes `mutations` on the async queue.
 * @internal
 */ function mc(t2, e12) {
    return (function(t3, e14) {
        var i10 = this, o10 = new br;
        return t3.asyncQueue.enqueueAndForget(function() {
            return _tslib.__awaiter(i10, void 0, void 0, function() {
                var n23;
                return _tslib.__generator(this, function(r19) {
                    switch(r19.label){
                        case 0:
                            return n23 = Ps, [
                                4,
                                Du(t3)
                            ];
                        case 1:
                            return [
                                2,
                                n23.apply(void 0, [
                                    r19.sent(),
                                    e14,
                                    o10
                                ])
                            ];
                    }
                });
            });
        }), o10.promise;
    })(aa(t2), e12);
}
/**
 * Converts a ViewSnapshot that contains the single document specified by `ref`
 * to a DocumentSnapshot.
 */ function gc(t2, e12, n23) {
    var r19 = n23.docs.get(e12._key), i10 = new pc(t2);
    return new za(t2, i10, e12._key, r19, new Ga(n23.hasPendingWrites, n23.fromCache), e12.converter);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A reference to a transaction.
 *
 * The `Transaction` object passed to a transaction's `updateFunction` provides
 * the methods to read and write data within the transaction context. See
 * {@link runTransaction}.
 */ var wc = /** @class */ function(e12) {
    // This class implements the same logic as the Transaction API in the Lite SDK
    // but is subclassed in order to return its own DocumentSnapshot types.
    /** @hideconstructor */ function n23(t2, n24) {
        var r19 = this;
        return (r19 = e12.call(this, t2, n24) || this)._firestore = t2, r19;
    }
    /**
     * Reads the document referenced by the provided {@link DocumentReference}.
     *
     * @param documentRef - A reference to the document to be read.
     * @returns A `DocumentSnapshot` with the read data.
     */ return _tslib.__extends(n23, e12), n23.prototype.get = function(t2) {
        var n24 = this, r19 = dc(t2, this._firestore), i10 = new pc(this._firestore);
        return e12.prototype.get.call(this, t2).then(function(t3) {
            return new za(n24._firestore, i10, r19._key, t3._document, new Ga(/* hasPendingWrites= */ false, /* fromCache= */ false), r19.converter);
        });
    }, n23;
}(/** @class */ function() {
    /** @hideconstructor */ function t2(t3, e12) {
        this._firestore = t3, this._transaction = e12, this._dataReader = Ta(t3);
    }
    return t2.prototype.get = function(t3) {
        var e12 = this, n23 = dc(t3, this._firestore), r19 = new fc(this._firestore);
        return this._transaction.lookup([
            n23._key
        ]).then(function(t4) {
            if (!t4 || 1 !== t4.length) return O();
            var i10 = t4[0];
            if (i10.isFoundDocument()) return new ja(e12._firestore, r19, i10.key, i10, n23.converter);
            if (i10.isNoDocument()) return new ja(e12._firestore, r19, n23._key, null, n23.converter);
            throw O();
        });
    }, t2.prototype.set = function(t3, e12, n23) {
        var r19 = dc(t3, this._firestore), i10 = hc(r19.converter, e12, n23), o10 = Ea(this._dataReader, "Transaction.set", r19._key, i10, null !== r19.converter, n23);
        return this._transaction.set(r19._key, o10), this;
    }, t2.prototype.update = function(t3, e12, n23) {
        for(var r19 = [], i10 = 3; i10 < arguments.length; i10++)r19[i10 - 3] = arguments[i10];
        var o10, s = dc(t3, this._firestore);
        // For Compat types, we have to "extract" the underlying types before
        // performing validation.
        return o10 = "string" == typeof (e12 = _util.getModularInstance(e12)) || e12 instanceof la ? xa(this._dataReader, "Transaction.update", s._key, e12, n23, r19) : Ca(this._dataReader, "Transaction.update", s._key, e12), this._transaction.update(s._key, o10), this;
    }, /**
     * Deletes the document referred to by the provided {@link DocumentReference}.
     *
     * @param documentRef - A reference to the document to be deleted.
     * @returns This `Transaction` instance. Used for chaining method calls.
     */ t2.prototype.delete = function(t3) {
        var e12 = dc(t3, this._firestore);
        return this._transaction.delete(e12._key), this;
    }, t2;
}());
/**
 * Executes the given `updateFunction` and then attempts to commit the changes
 * applied within the transaction. If any document read within the transaction
 * has changed, Cloud Firestore retries the `updateFunction`. If it fails to
 * commit after 5 attempts, the transaction fails.
 *
 * The maximum number of writes allowed in a single transaction is 500.
 *
 * @param firestore - A reference to the Firestore database to run this
 * transaction against.
 * @param updateFunction - The function to execute within the transaction
 * context.
 * @returns If the transaction completed successfully or was explicitly aborted
 * (the `updateFunction` returned a failed promise), the promise returned by the
 * `updateFunction `is returned here. Otherwise, if the transaction failed, a
 * rejected promise with the corresponding failure error is returned.
 */ /**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Helper function to assert Uint8Array is available at runtime. */ function bc() {
    if ("undefined" == typeof Uint8Array) throw new D(N.UNIMPLEMENTED, "Uint8Arrays are not available in this environment.");
}
/** Helper function to assert Base64 functions are available at runtime. */ function Ic() {
    if ("undefined" == typeof atob) throw new D(N.UNIMPLEMENTED, "Blobs are unavailable in Firestore in this environment.");
}
/** Immutable class holding a blob (binary data) */ var Tc = /** @class */ function() {
    function t2(t3) {
        this._delegate = t3;
    }
    return t2.fromBase64String = function(e12) {
        return Ic(), new t2(da.fromBase64String(e12));
    }, t2.fromUint8Array = function(e12) {
        return bc(), new t2(da.fromUint8Array(e12));
    }, t2.prototype.toBase64 = function() {
        return Ic(), this._delegate.toBase64();
    }, t2.prototype.toUint8Array = function() {
        return bc(), this._delegate.toUint8Array();
    }, t2.prototype.isEqual = function(t3) {
        return this._delegate.isEqual(t3._delegate);
    }, t2.prototype.toString = function() {
        return "Blob(base64: " + this.toBase64() + ")";
    }, t2;
}(), Ec = /** @class */ function() {
    function t2() {
    }
    return t2.prototype.enableIndexedDbPersistence = function(t3, e12) {
        return (function(t4, e14) {
            fa(t4 = zu(t4, ua));
            var n23 = aa(t4), r19 = t4._freezeSettings(), i10 = new du;
            return ha(n23, i10, new fu(i10, r19.cacheSizeBytes, null == e14 ? void 0 : e14.forceOwnership));
        })(t3._delegate, {
            forceOwnership: e12
        });
    }, t2.prototype.enableMultiTabIndexedDbPersistence = function(t3) {
        return (function(t4) {
            fa(t4 = zu(t4, ua));
            var e12 = aa(t4), n23 = t4._freezeSettings(), r19 = new du;
            return ha(e12, r19, new lu(r19, n23.cacheSizeBytes));
        })(t3._delegate);
    }, t2.prototype.clearIndexedDbPersistence = function(t3) {
        return (function(t4) {
            var e12 = this;
            if (t4._initialized && !t4._terminated) throw new D(N.FAILED_PRECONDITION, "Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");
            var i10 = new br;
            return t4._queue.enqueueAndForgetEvenWhileRestricted(function() {
                return _tslib.__awaiter(e12, void 0, void 0, function() {
                    var e14;
                    return _tslib.__generator(this, function(o10) {
                        switch(o10.label){
                            case 0:
                                return o10.trys.push([
                                    0,
                                    2,
                                    ,
                                    3
                                ]), [
                                    4,
                                    function(t5) {
                                        return _tslib.__awaiter(this, void 0, void 0, function() {
                                            var e15;
                                            return _tslib.__generator(this, function(n23) {
                                                switch(n23.label){
                                                    case 0:
                                                        return Er.yt() ? (e15 = t5 + "main", [
                                                            4,
                                                            Er.delete(e15)
                                                        ]) : [
                                                            2,
                                                            Promise.resolve()
                                                        ];
                                                    case 1:
                                                        return n23.sent(), [
                                                            2
                                                        ];
                                                }
                                            });
                                        });
                                    }(Oi(t4._databaseId, t4._persistenceKey))
                                ];
                            case 1:
                                return o10.sent(), i10.resolve(), [
                                    3,
                                    3
                                ];
                            case 2:
                                return e14 = o10.sent(), i10.reject(e14), [
                                    3,
                                    3
                                ];
                            case 3:
                                return [
                                    2
                                ];
                        }
                    });
                });
            }), i10.promise;
        })(t3._delegate);
    }, t2;
}(), _c = /** @class */ function() {
    function t2(t3, e12, n23) {
        var r19 = this;
        this._delegate = e12, this.Zc = n23, this.INTERNAL = {
            delete: function() {
                return r19.terminate();
            }
        }, t3 instanceof Ru || (this.tu = t3);
    }
    return Object.defineProperty(t2.prototype, "_databaseId", {
        get: function() {
            return this._delegate._databaseId;
        },
        enumerable: false,
        configurable: true
    }), t2.prototype.settings = function(t3) {
        var e12 = this._delegate._getSettings();
        t3.merge || e12.host === t3.host || R("You are overriding the original host. If you did not intend to override your settings, use {merge: true}."), t3.merge && // Remove the property from the settings once the merge is completed
        delete (t3 = Object.assign(Object.assign({
        }, e12), t3)).merge, this._delegate._setSettings(t3);
    }, t2.prototype.useEmulator = function(t3, e12, n23) {
        (void 0) === n23 && (n23 = {
        }), (function(t4, e14, n24, r19) {
            var i10;
            (void 0) === r19 && (r19 = {
            });
            var o10 = (t4 = zu(t4, Yu))._getSettings();
            if ("firestore.googleapis.com" !== o10.host && o10.host !== e14 && R("Host has been set in both settings() and useEmulator(), emulator host will be used"), t4._setSettings(Object.assign(Object.assign({
            }, o10), {
                host: e14 + ":" + n24,
                ssl: false
            })), r19.mockUserToken) {
                var s, u;
                if ("string" == typeof r19.mockUserToken) s = r19.mockUserToken, u = fo.MOCK_USER;
                else {
                    // Let createMockUserToken validate first (catches common mistakes like
                    // invalid field "uid" and missing field "sub" / "user_id".)
                    s = _util.createMockUserToken(r19.mockUserToken, null === (i10 = t4._app) || (void 0) === i10 ? void 0 : i10.options.projectId);
                    var a = r19.mockUserToken.sub || r19.mockUserToken.user_id;
                    if (!a) throw new D(N.INVALID_ARGUMENT, "mockUserToken must contain 'sub' or 'user_id' field!");
                    u = new fo(a);
                }
                t4._credentials = new Fu(new Ou(s, u));
            }
        })(this._delegate, t3, e12, n23);
    }, t2.prototype.enableNetwork = function() {
        return (function(t3) {
            var e12 = this;
            return t3.asyncQueue.enqueue(function() {
                return _tslib.__awaiter(e12, void 0, void 0, function() {
                    var e14, n23;
                    return _tslib.__generator(this, function(r19) {
                        switch(r19.label){
                            case 0:
                                return [
                                    4,
                                    _u(t3)
                                ];
                            case 1:
                                return e14 = r19.sent(), [
                                    4,
                                    Nu(t3)
                                ];
                            case 2:
                                return n23 = r19.sent(), [
                                    2,
                                    (e14.setNetworkEnabled(true), function(t4) {
                                        var e15 = F(t4);
                                        return e15.Or.delete(0/* UserDisabled */ ), Vo(e15);
                                    }(n23))
                                ];
                        }
                    });
                });
            });
        })(aa(zu(this._delegate, ua)));
    }, t2.prototype.disableNetwork = function() {
        return (function(t3) {
            var e12 = this;
            return t3.asyncQueue.enqueue(function() {
                return _tslib.__awaiter(e12, void 0, void 0, function() {
                    var e14, i10;
                    return _tslib.__generator(this, function(o10) {
                        switch(o10.label){
                            case 0:
                                return [
                                    4,
                                    _u(t3)
                                ];
                            case 1:
                                return e14 = o10.sent(), [
                                    4,
                                    Nu(t3)
                                ];
                            case 2:
                                return i10 = o10.sent(), [
                                    2,
                                    (e14.setNetworkEnabled(false), function(t4) {
                                        return _tslib.__awaiter(this, void 0, void 0, function() {
                                            var e15;
                                            return _tslib.__generator(this, function(n23) {
                                                switch(n23.label){
                                                    case 0:
                                                        return (e15 = F(t4)).Or.add(0/* UserDisabled */ ), [
                                                            4,
                                                            qo(e15)
                                                        ];
                                                    case 1:
                                                        return n23.sent(), // Set the OnlineState to Offline so get()s return from cache, etc.
                                                        e15.Br.set("Offline"/* Offline */ ), [
                                                            2
                                                        ];
                                                }
                                            });
                                        });
                                    }(i10))
                                ];
                        }
                    });
                });
            });
        })(aa(zu(this._delegate, ua)));
    }, t2.prototype.enablePersistence = function(t3) {
        var e12 = false, n23 = false;
        return t3 && ju("synchronizeTabs", e12 = !!t3.synchronizeTabs, "experimentalForceOwningTab", n23 = !!t3.experimentalForceOwningTab), e12 ? this.Zc.enableMultiTabIndexedDbPersistence(this) : this.Zc.enableIndexedDbPersistence(this, n23);
    }, t2.prototype.clearPersistence = function() {
        return this.Zc.clearIndexedDbPersistence(this);
    }, t2.prototype.terminate = function() {
        return this.tu && (this.tu._removeServiceInstance("firestore"), this.tu._removeServiceInstance("firestore-exp")), this._delegate._delete();
    }, t2.prototype.waitForPendingWrites = function() {
        return (function(t3) {
            var e12 = this, i10 = new br;
            return t3.asyncQueue.enqueueAndForget(function() {
                return _tslib.__awaiter(e12, void 0, void 0, function() {
                    var e14;
                    return _tslib.__generator(this, function(n23) {
                        switch(n23.label){
                            case 0:
                                return e14 = Bs, [
                                    4,
                                    Du(t3)
                                ];
                            case 1:
                                return [
                                    2,
                                    e14.apply(void 0, [
                                        n23.sent(),
                                        i10
                                    ])
                                ];
                        }
                    });
                });
            }), i10.promise;
        })(aa(zu(this._delegate, ua)));
    }, t2.prototype.onSnapshotsInSync = function(t3) {
        return (function(t4, e12) {
            return (function(t5, e14) {
                var i10 = this, o10 = new yu(e14);
                return t5.asyncQueue.enqueueAndForget(function() {
                    return _tslib.__awaiter(i10, void 0, void 0, function() {
                        var e15;
                        return _tslib.__generator(this, function(n23) {
                            switch(n23.label){
                                case 0:
                                    return e15 = function(t6, e16) {
                                        F(t6).Gr.add(e16), // Immediately fire an initial event, indicating all existing listeners
                                        // are in-sync.
                                        e16.next();
                                    }, [
                                        4,
                                        Au(t5)
                                    ];
                                case 1:
                                    return [
                                        2,
                                        e15.apply(void 0, [
                                            n23.sent(),
                                            o10
                                        ])
                                    ];
                            }
                        });
                    });
                }), function() {
                    o10.Wo(), t5.asyncQueue.enqueueAndForget(function() {
                        return _tslib.__awaiter(i10, void 0, void 0, function() {
                            var e15;
                            return _tslib.__generator(this, function(n23) {
                                switch(n23.label){
                                    case 0:
                                        return e15 = function(t6, e16) {
                                            F(t6).Gr.delete(e16);
                                        }, [
                                            4,
                                            Au(t5)
                                        ];
                                    case 1:
                                        return [
                                            2,
                                            e15.apply(void 0, [
                                                n23.sent(),
                                                o10
                                            ])
                                        ];
                                }
                            });
                        });
                    });
                };
            })(aa(t4 = zu(t4, ua)), ia(e12) ? e12 : {
                next: e12
            });
        })(this._delegate, t3);
    }, Object.defineProperty(t2.prototype, "app", {
        get: function() {
            if (!this.tu) throw new D(N.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
            return this.tu;
        },
        enumerable: false,
        configurable: true
    }), t2.prototype.collection = function(t3) {
        try {
            return new qc(this, Zu(this._delegate, t3));
        } catch (t4) {
            throw xc(t4, "collection()", "Firestore.collection()");
        }
    }, t2.prototype.doc = function(t3) {
        try {
            return new Cc(this, ta(this._delegate, t3));
        } catch (t4) {
            throw xc(t4, "doc()", "Firestore.doc()");
        }
    }, t2.prototype.collectionGroup = function(t3) {
        try {
            return new Fc(this, function(t4, e12) {
                if (t4 = zu(t4, Yu), Uu("collectionGroup", "collection id", e12), e12.indexOf("/") >= 0) throw new D(N.INVALID_ARGUMENT, "Invalid collection ID '" + e12 + "' passed to function collectionGroup(). Collection IDs must not contain '/'.");
                return new Xu(t4, /* converter= */ null, /**
 * Creates a new Query for a collection group query that matches all documents
 * within the provided collection group.
 */ function(t5) {
                    return new Wt(H.emptyPath(), t5);
                }(e12));
            }(this._delegate, t3));
        } catch (t4) {
            throw xc(t4, "collectionGroup()", "Firestore.collectionGroup()");
        }
    }, t2.prototype.runTransaction = function(t3) {
        var e12 = this;
        return (function(t4, e14) {
            return (function(t5, e15) {
                var i10 = this, o10 = new br;
                return t5.asyncQueue.enqueueAndForget(function() {
                    return _tslib.__awaiter(i10, void 0, void 0, function() {
                        var n23;
                        return _tslib.__generator(this, function(r19) {
                            switch(r19.label){
                                case 0:
                                    return [
                                        4,
                                        function(t6) {
                                            return Eu(t6).then(function(t7) {
                                                return t7.datastore;
                                            });
                                        }(t5)
                                    ];
                                case 1:
                                    return n23 = r19.sent(), new gu(t5.asyncQueue, n23, e15, o10).run(), [
                                        2
                                    ];
                            }
                        });
                    });
                }), o10.promise;
            })(aa(t4), function(n23) {
                return e14(new wc(t4, n23));
            });
        })(this._delegate, function(n23) {
            return t3(new Dc(e12, n23));
        });
    }, t2.prototype.batch = function() {
        var t3 = this;
        return aa(this._delegate), new Ac(new lc(this._delegate, function(e12) {
            return mc(t3._delegate, e12);
        }));
    }, t2.prototype.loadBundle = function(t3) {
        throw new D(N.FAILED_PRECONDITION, '"loadBundle()" does not exist, have you imported "firebase/firestore/bundle"?');
    }, t2.prototype.namedQuery = function(t3) {
        throw new D(N.FAILED_PRECONDITION, '"namedQuery()" does not exist, have you imported "firebase/firestore/bundle"?');
    }, t2;
}(), Sc = /** @class */ function(e12) {
    function n23(t2) {
        var n24 = this;
        return (n24 = e12.call(this) || this).firestore = t2, n24;
    }
    return _tslib.__extends(n23, e12), n23.prototype.convertBytes = function(t2) {
        return new Tc(new da(t2));
    }, n23.prototype.convertReference = function(t2) {
        var e14 = this.convertDocumentKey(t2, this.firestore._databaseId);
        return Cc.eu(e14, this.firestore, /* converter= */ null);
    }, n23;
}(cc);
/**
 * The persistence provider included with the full Firestore SDK.
 */ function Nc(t2) {
    var e12;
    e12 = t2, A.setLogLevel(e12);
}
/**
 * A reference to a transaction.
 */ var Dc = /** @class */ function() {
    function t2(t3, e12) {
        this._firestore = t3, this._delegate = e12, this._userDataWriter = new Sc(t3);
    }
    return t2.prototype.get = function(t3) {
        var e12 = this, n23 = Uc(t3);
        return this._delegate.get(n23).then(function(t4) {
            return new Oc(e12._firestore, new za(e12._firestore._delegate, e12._userDataWriter, t4._key, t4._document, t4.metadata, n23.converter));
        });
    }, t2.prototype.set = function(t3, e12, n23) {
        var r19 = Uc(t3);
        return n23 ? (Bu("Transaction.set", n23), this._delegate.set(r19, e12, n23)) : this._delegate.set(r19, e12), this;
    }, t2.prototype.update = function(t3, n23, r19) {
        for(var i10, o10 = [], s = 3; s < arguments.length; s++)o10[s - 3] = arguments[s];
        var u = Uc(t3);
        return 2 === arguments.length ? this._delegate.update(u, n23) : (i10 = this._delegate).update.apply(i10, _tslib.__spreadArray([
            u,
            n23,
            r19
        ], o10)), this;
    }, t2.prototype.delete = function(t3) {
        var e12 = Uc(t3);
        return this._delegate.delete(e12), this;
    }, t2;
}(), Ac = /** @class */ function() {
    function t2(t3) {
        this._delegate = t3;
    }
    return t2.prototype.set = function(t3, e12, n23) {
        var r19 = Uc(t3);
        return n23 ? (Bu("WriteBatch.set", n23), this._delegate.set(r19, e12, n23)) : this._delegate.set(r19, e12), this;
    }, t2.prototype.update = function(t3, n23, r19) {
        for(var i10, o10 = [], s = 3; s < arguments.length; s++)o10[s - 3] = arguments[s];
        var u = Uc(t3);
        return 2 === arguments.length ? this._delegate.update(u, n23) : (i10 = this._delegate).update.apply(i10, _tslib.__spreadArray([
            u,
            n23,
            r19
        ], o10)), this;
    }, t2.prototype.delete = function(t3) {
        var e12 = Uc(t3);
        return this._delegate.delete(e12), this;
    }, t2.prototype.commit = function() {
        return this._delegate.commit();
    }, t2;
}(), kc = /** @class */ function() {
    function t2(t3, e12, n23) {
        this._firestore = t3, this._userDataWriter = e12, this._delegate = n23;
    }
    return t2.prototype.fromFirestore = function(t3, e12) {
        var n23 = new Wa(this._firestore._delegate, this._userDataWriter, t3._key, t3._document, t3.metadata, /* converter= */ null);
        return this._delegate.fromFirestore(new Pc(this._firestore, n23), null != e12 ? e12 : {
        });
    }, t2.prototype.toFirestore = function(t3, e12) {
        return e12 ? this._delegate.toFirestore(t3, e12) : this._delegate.toFirestore(t3);
    }, // Use the same instance of `FirestoreDataConverter` for the given instances
    // of `Firestore` and `PublicFirestoreDataConverter` so that isEqual() will
    // compare equal for two objects created with the same converter instance.
    t2.nu = function(e12, n23) {
        var r19 = t2.su, i10 = r19.get(e12);
        i10 || (i10 = new WeakMap, r19.set(e12, i10));
        var o10 = i10.get(n23);
        return o10 || (o10 = new t2(e12, new Sc(e12), n23), i10.set(n23, o10)), o10;
    }, t2;
}();
kc.su = new WeakMap;
/**
 * A reference to a particular document in a collection in the database.
 */ var Cc = /** @class */ function() {
    function t2(t3, e12) {
        this.firestore = t3, this._delegate = e12, this._userDataWriter = new Sc(t3);
    }
    return t2.iu = function(e12, n23, r19) {
        if (e12.length % 2 != 0) throw new D(N.INVALID_ARGUMENT, "Invalid document reference. Document references must have an even number of segments, but " + e12.canonicalString() + " has " + e12.length);
        return new t2(n23, new $u(n23._delegate, r19, new ct(e12)));
    }, t2.eu = function(e12, n23, r19) {
        return new t2(n23, new $u(n23._delegate, r19, e12));
    }, Object.defineProperty(t2.prototype, "id", {
        get: function() {
            return this._delegate.id;
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t2.prototype, "parent", {
        get: function() {
            return new qc(this.firestore, this._delegate.parent);
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t2.prototype, "path", {
        get: function() {
            return this._delegate.path;
        },
        enumerable: false,
        configurable: true
    }), t2.prototype.collection = function(t3) {
        try {
            return new qc(this.firestore, Zu(this._delegate, t3));
        } catch (t4) {
            throw xc(t4, "collection()", "DocumentReference.collection()");
        }
    }, t2.prototype.isEqual = function(t3) {
        return (t3 = _util.getModularInstance(t3)) instanceof $u && ea(this._delegate, t3);
    }, t2.prototype.set = function(t3, e12) {
        e12 = Bu("DocumentReference.set", e12);
        try {
            return (function(t4, e14, n23) {
                t4 = zu(t4, $u);
                var r19 = zu(t4.firestore, ua), i10 = hc(t4.converter, e14, n23);
                return mc(r19, [
                    Ea(Ta(r19), "setDoc", t4._key, i10, null !== t4.converter, n23).toMutation(t4._key, De.none())
                ]);
            })(this._delegate, t3, e12);
        } catch (t4) {
            throw xc(t4, "setDoc()", "DocumentReference.set()");
        }
    }, t2.prototype.update = function(t3, n23) {
        for(var r19 = [], i10 = 2; i10 < arguments.length; i10++)r19[i10 - 2] = arguments[i10];
        try {
            return 1 === arguments.length ? yc(this._delegate, t3) : yc.apply(void 0, _tslib.__spreadArray([
                this._delegate,
                t3,
                n23
            ], r19));
        } catch (t4) {
            throw xc(t4, "updateDoc()", "DocumentReference.update()");
        }
    }, t2.prototype.delete = function() {
        var t3;
        return mc(zu((t3 = this._delegate).firestore, ua), [
            new je(t3._key, De.none())
        ]);
    /**
 * Add a new document to specified `CollectionReference` with the given data,
 * assigning it a document ID automatically.
 *
 * @param reference - A reference to the collection to add this document to.
 * @param data - An Object containing the data for the new document.
 * @returns A Promise resolved with a `DocumentReference` pointing to the
 * newly created document after it has been written to the backend (Note that it
 * won't resolve while you're offline).
 */ }, t2.prototype.onSnapshot = function() {
        for(var t3 = this, e12 = [], n23 = 0; n23 < arguments.length; n23++)e12[n23] = arguments[n23];
        var r19 = Rc(e12), i10 = Lc(e12, function(e14) {
            return new Oc(t3.firestore, new za(t3.firestore._delegate, t3._userDataWriter, e14._key, e14._document, e14.metadata, t3._delegate.converter));
        });
        return vc(this._delegate, r19, i10);
    }, t2.prototype.get = function(t3) {
        var e12 = this;
        return ("cache" === (null == t3 ? void 0 : t3.source) ? (function(t4) {
            t4 = zu(t4, $u);
            var e14 = zu(t4.firestore, ua), i10 = aa(e14), o10 = new pc(e14);
            return (function(t5, e15) {
                var i11 = this, o11 = new br;
                return t5.asyncQueue.enqueueAndForget(function() {
                    return _tslib.__awaiter(i11, void 0, void 0, function() {
                        var i13;
                        return _tslib.__generator(this, function(s) {
                            switch(s.label){
                                case 0:
                                    return i13 = function(t6, e16, i14) {
                                        return _tslib.__awaiter(this, void 0, void 0, function() {
                                            var n23, o12;
                                            return _tslib.__generator(this, function(r19) {
                                                switch(r19.label){
                                                    case 0:
                                                        return r19.trys.push([
                                                            0,
                                                            2,
                                                            ,
                                                            3
                                                        ]), [
                                                            4,
                                                            function(t7, e17) {
                                                                var n24 = F(t7);
                                                                return n24.persistence.runTransaction("read document", "readonly", function(t8) {
                                                                    return n24.Mn.mn(t8, e17);
                                                                });
                                                            }(t6, e16)
                                                        ];
                                                    case 1:
                                                        return (o12 = r19.sent()).isFoundDocument() ? i14.resolve(o12) : o12.isNoDocument() ? i14.resolve(null) : i14.reject(new D(N.UNAVAILABLE, "Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)")), [
                                                            3,
                                                            3
                                                        ];
                                                    case 2:
                                                        return n23 = r19.sent(), o12 = hs(n23, "Failed to get document '" + e16 + " from cache"), i14.reject(o12), [
                                                            3,
                                                            3
                                                        ];
                                                    case 3:
                                                        return [
                                                            2
                                                        ];
                                                }
                                            });
                                        });
                                    }, [
                                        4,
                                        Su(t5)
                                    ];
                                case 1:
                                    return [
                                        2,
                                        i13.apply(void 0, [
                                            s.sent(),
                                            e15,
                                            o11
                                        ])
                                    ];
                            }
                        });
                    });
                }), o11.promise;
            })(i10, t4._key).then(function(n23) {
                return new za(e14, o10, t4._key, n23, new Ga(null !== n23 && n23.hasLocalMutations, /* fromCache= */ true), t4.converter);
            });
        })(this._delegate) : "server" === (null == t3 ? void 0 : t3.source) ? (function(t4) {
            t4 = zu(t4, $u);
            var e14 = zu(t4.firestore, ua);
            return ku(aa(e14), t4._key, {
                source: "server"
            }).then(function(n23) {
                return gc(e14, t4, n23);
            });
        })(this._delegate) : (function(t4) {
            t4 = zu(t4, $u);
            var e14 = zu(t4.firestore, ua);
            return ku(aa(e14), t4._key).then(function(n23) {
                return gc(e14, t4, n23);
            });
        })(this._delegate)).then(function(t4) {
            return new Oc(e12.firestore, new za(e12.firestore._delegate, e12._userDataWriter, t4._key, t4._document, t4.metadata, e12._delegate.converter));
        });
    }, t2.prototype.withConverter = function(e12) {
        return new t2(this.firestore, e12 ? this._delegate.withConverter(kc.nu(this.firestore, e12)) : this._delegate.withConverter(null));
    }, t2;
}();
/**
 * Replaces the function name in an error thrown by the firestore-exp API
 * with the function names used in the classic API.
 */ function xc(t2, e12, n23) {
    return t2.message = t2.message.replace(e12, n23), t2;
}
function Rc(t2) {
    for(var e12 = 0, n23 = t2; e12 < n23.length; e12++){
        var r19 = n23[e12];
        if ("object" == typeof r19 && !ia(r19)) return r19;
    }
    return {
    };
}
/**
 * Creates an observer that can be passed to the firestore-exp SDK. The
 * observer converts all observed values into the format expected by the classic
 * SDK.
 *
 * @param args - The list of arguments from an `onSnapshot` call.
 * @param wrapper - The function that converts the firestore-exp type into the
 * type used by this shim.
 */ function Lc(t2, e12) {
    var n23, r20, i10;
    return {
        next: function(t3) {
            i10.next && i10.next(e12(t3));
        },
        error: null === (n23 = (i10 = ia(t2[0]) ? t2[0] : ia(t2[1]) ? t2[1] : "function" == typeof t2[0] ? {
            next: t2[0],
            error: t2[1],
            complete: t2[2]
        } : {
            next: t2[1],
            error: t2[2],
            complete: t2[3]
        }).error) || (void 0) === n23 ? void 0 : n23.bind(i10),
        complete: null === (r20 = i10.complete) || (void 0) === r20 ? void 0 : r20.bind(i10)
    };
}
var Oc = /** @class */ function() {
    function t2(t3, e12) {
        this._firestore = t3, this._delegate = e12;
    }
    return Object.defineProperty(t2.prototype, "ref", {
        get: function() {
            return new Cc(this._firestore, this._delegate.ref);
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t2.prototype, "id", {
        get: function() {
            return this._delegate.id;
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t2.prototype, "metadata", {
        get: function() {
            return this._delegate.metadata;
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t2.prototype, "exists", {
        get: function() {
            return this._delegate.exists();
        },
        enumerable: false,
        configurable: true
    }), t2.prototype.data = function(t3) {
        return this._delegate.data(t3);
    }, t2.prototype.get = function(t3, e12) {
        return this._delegate.get(t3, e12);
    }, t2.prototype.isEqual = function(t3) {
        return $a(this._delegate, t3._delegate);
    }, t2;
}(), Pc = /** @class */ function(e12) {
    function n23() {
        return null !== e12 && e12.apply(this, arguments) || this;
    }
    return _tslib.__extends(n23, e12), n23.prototype.data = function(t2) {
        return this._delegate.data(t2);
    }, n23;
}(Oc), Fc = /** @class */ function() {
    function t2(t3, e12) {
        this.firestore = t3, this._delegate = e12, this._userDataWriter = new Sc(t3);
    }
    return t2.prototype.where = function(e12, n23, r20) {
        try {
            // The "as string" cast is a little bit of a hack. `where` accepts the
            // FieldPath Compat type as input, but is not typed as such in order to
            // not expose this via our public typings file.
            return new t2(this.firestore, Za(this._delegate, function(t3, e14, n24) {
                var r21 = e14, i10 = Qa("where", t3);
                return new tc(i10, r21, n24);
            }(e12, n23, r20)));
        } catch (e14) {
            throw xc(e14, /(orderBy|where)\(\)/, "Query.$1()");
        }
    }, t2.prototype.orderBy = function(e12, n23) {
        try {
            // The "as string" cast is a little bit of a hack. `orderBy` accepts the
            // FieldPath Compat type as input, but is not typed as such in order to
            // not expose this via our public typings file.
            return new t2(this.firestore, Za(this._delegate, function(t3, e14) {
                (void 0) === e14 && (e14 = "asc");
                var n24 = e14, r20 = Qa("orderBy", t3);
                return new ec(r20, n24);
            }(e12, n23)));
        } catch (e14) {
            throw xc(e14, /(orderBy|where)\(\)/, "Query.$1()");
        }
    }, t2.prototype.limit = function(e12) {
        try {
            return new t2(this.firestore, Za(this._delegate, function(t3) {
                return Wu("limit", t3), new nc("limit", t3, "F"/* First */ );
            }(e12)));
        } catch (e14) {
            throw xc(e14, "limit()", "Query.limit()");
        }
    }, t2.prototype.limitToLast = function(e12) {
        try {
            return new t2(this.firestore, Za(this._delegate, function(t3) {
                return Wu("limitToLast", t3), new nc("limitToLast", t3, "L"/* Last */ );
            }(e12)));
        } catch (e14) {
            throw xc(e14, "limitToLast()", "Query.limitToLast()");
        }
    }, t2.prototype.startAt = function() {
        for(var e12 = [], n23 = 0; n23 < arguments.length; n23++)e12[n23] = arguments[n23];
        try {
            return new t2(this.firestore, Za(this._delegate, (function() {
                for(var t3 = [], e14 = 0; e14 < arguments.length; e14++)t3[e14] = arguments[e14];
                return new rc("startAt", t3, /*before=*/ true);
            }).apply(void 0, e12)));
        } catch (e14) {
            throw xc(e14, "startAt()", "Query.startAt()");
        }
    }, t2.prototype.startAfter = function() {
        for(var e12 = [], n23 = 0; n23 < arguments.length; n23++)e12[n23] = arguments[n23];
        try {
            return new t2(this.firestore, Za(this._delegate, (function() {
                for(var t3 = [], e14 = 0; e14 < arguments.length; e14++)t3[e14] = arguments[e14];
                return new rc("startAfter", t3, /*before=*/ false);
            }).apply(void 0, e12)));
        } catch (e14) {
            throw xc(e14, "startAfter()", "Query.startAfter()");
        }
    }, t2.prototype.endBefore = function() {
        for(var e12 = [], n23 = 0; n23 < arguments.length; n23++)e12[n23] = arguments[n23];
        try {
            return new t2(this.firestore, Za(this._delegate, (function() {
                for(var t3 = [], e14 = 0; e14 < arguments.length; e14++)t3[e14] = arguments[e14];
                return new ic("endBefore", t3, /*before=*/ true);
            }).apply(void 0, e12)));
        } catch (e14) {
            throw xc(e14, "endBefore()", "Query.endBefore()");
        }
    }, t2.prototype.endAt = function() {
        for(var e12 = [], n23 = 0; n23 < arguments.length; n23++)e12[n23] = arguments[n23];
        try {
            return new t2(this.firestore, Za(this._delegate, (function() {
                for(var t3 = [], e14 = 0; e14 < arguments.length; e14++)t3[e14] = arguments[e14];
                return new ic("endAt", t3, /*before=*/ false);
            }).apply(void 0, e12)));
        } catch (e14) {
            throw xc(e14, "endAt()", "Query.endAt()");
        }
    }, t2.prototype.isEqual = function(t3) {
        return na(this._delegate, t3._delegate);
    }, t2.prototype.get = function(t3) {
        var e12 = this;
        return ("cache" === (null == t3 ? void 0 : t3.source) ? /**
     * Executes the query and returns the results as a `QuerySnapshot` from cache.
     * Returns an error if the document is not currently cached.
     *
     * @returns A Promise that will be resolved with the results of the query.
     */ (function(t4) {
            t4 = zu(t4, Xu);
            var e14 = zu(t4.firestore, ua), i10 = aa(e14), o10 = new pc(e14);
            return (function(t5, e15) {
                var i11 = this, o11 = new br;
                return t5.asyncQueue.enqueueAndForget(function() {
                    return _tslib.__awaiter(i11, void 0, void 0, function() {
                        var i13;
                        return _tslib.__generator(this, function(s) {
                            switch(s.label){
                                case 0:
                                    return i13 = function(t6, e16, i14) {
                                        return _tslib.__awaiter(this, void 0, void 0, function() {
                                            var n23, o12, s1, u, a;
                                            return _tslib.__generator(this, function(r20) {
                                                switch(r20.label){
                                                    case 0:
                                                        return r20.trys.push([
                                                            0,
                                                            2,
                                                            ,
                                                            3
                                                        ]), [
                                                            4,
                                                            Yi(t6, e16, /* usePreviousResults= */ true)
                                                        ];
                                                    case 1:
                                                        return a = r20.sent(), n23 = new As(e16, a.Bn), o12 = n23._o(a.documents), s1 = n23.applyChanges(o12, /* updateLimboDocuments= */ false), i14.resolve(s1.snapshot), [
                                                            3,
                                                            3
                                                        ];
                                                    case 2:
                                                        return u = r20.sent(), a = hs(u, "Failed to execute query '" + e16 + " against cache"), i14.reject(a), [
                                                            3,
                                                            3
                                                        ];
                                                    case 3:
                                                        return [
                                                            2
                                                        ];
                                                }
                                            });
                                        });
                                    }, [
                                        4,
                                        Su(t5)
                                    ];
                                case 1:
                                    return [
                                        2,
                                        i13.apply(void 0, [
                                            s.sent(),
                                            e15,
                                            o11
                                        ])
                                    ];
                            }
                        });
                    });
                }), o11.promise;
            })(i10, t4._query).then(function(n23) {
                return new Ha(e14, o10, t4, n23);
            });
        })(this._delegate) : "server" === (null == t3 ? void 0 : t3.source) ? (function(t4) {
            t4 = zu(t4, Xu);
            var e14 = zu(t4.firestore, ua), n23 = aa(e14), r20 = new pc(e14);
            return Cu(n23, t4._query, {
                source: "server"
            }).then(function(n24) {
                return new Ha(e14, r20, t4, n24);
            });
        })(this._delegate) : (function(t4) {
            t4 = zu(t4, Xu);
            var e14 = zu(t4.firestore, ua), n23 = aa(e14), r20 = new pc(e14);
            return Xa(t4._query), Cu(n23, t4._query).then(function(n24) {
                return new Ha(e14, r20, t4, n24);
            });
        })(this._delegate)).then(function(t4) {
            return new Vc(e12.firestore, new Ha(e12.firestore._delegate, e12._userDataWriter, e12._delegate, t4._snapshot));
        });
    }, t2.prototype.onSnapshot = function() {
        for(var t3 = this, e12 = [], n23 = 0; n23 < arguments.length; n23++)e12[n23] = arguments[n23];
        var r20 = Rc(e12), i10 = Lc(e12, function(e14) {
            return new Vc(t3.firestore, new Ha(t3.firestore._delegate, t3._userDataWriter, t3._delegate, e14._snapshot));
        });
        return vc(this._delegate, r20, i10);
    }, t2.prototype.withConverter = function(e12) {
        return new t2(this.firestore, e12 ? this._delegate.withConverter(kc.nu(this.firestore, e12)) : this._delegate.withConverter(null));
    }, t2;
}(), Mc = /** @class */ function() {
    function t2(t3, e12) {
        this._firestore = t3, this._delegate = e12;
    }
    return Object.defineProperty(t2.prototype, "type", {
        get: function() {
            return this._delegate.type;
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t2.prototype, "doc", {
        get: function() {
            return new Pc(this._firestore, this._delegate.doc);
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t2.prototype, "oldIndex", {
        get: function() {
            return this._delegate.oldIndex;
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t2.prototype, "newIndex", {
        get: function() {
            return this._delegate.newIndex;
        },
        enumerable: false,
        configurable: true
    }), t2;
}(), Vc = /** @class */ function() {
    function t2(t3, e12) {
        this._firestore = t3, this._delegate = e12;
    }
    return Object.defineProperty(t2.prototype, "query", {
        get: function() {
            return new Fc(this._firestore, this._delegate.query);
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t2.prototype, "metadata", {
        get: function() {
            return this._delegate.metadata;
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t2.prototype, "size", {
        get: function() {
            return this._delegate.size;
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t2.prototype, "empty", {
        get: function() {
            return this._delegate.empty;
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(t2.prototype, "docs", {
        get: function() {
            var t3 = this;
            return this._delegate.docs.map(function(e12) {
                return new Pc(t3._firestore, e12);
            });
        },
        enumerable: false,
        configurable: true
    }), t2.prototype.docChanges = function(t3) {
        var e12 = this;
        return this._delegate.docChanges(t3).map(function(t4) {
            return new Mc(e12._firestore, t4);
        });
    }, t2.prototype.forEach = function(t3, e12) {
        var n23 = this;
        this._delegate.forEach(function(r20) {
            t3.call(e12, new Pc(n23._firestore, r20));
        });
    }, t2.prototype.isEqual = function(t3) {
        return $a(this._delegate, t3._delegate);
    }, t2;
}(), qc = /** @class */ function(e12) {
    function n23(t2, n24) {
        var r20 = this;
        return (r20 = e12.call(this, t2, n24) || this).firestore = t2, r20._delegate = n24, r20;
    }
    return _tslib.__extends(n23, e12), Object.defineProperty(n23.prototype, "id", {
        get: function() {
            return this._delegate.id;
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(n23.prototype, "path", {
        get: function() {
            return this._delegate.path;
        },
        enumerable: false,
        configurable: true
    }), Object.defineProperty(n23.prototype, "parent", {
        get: function() {
            var t2 = this._delegate.parent;
            return t2 ? new Cc(this.firestore, t2) : null;
        },
        enumerable: false,
        configurable: true
    }), n23.prototype.doc = function(t2) {
        try {
            return new Cc(this.firestore, (void 0) === t2 ? ta(this._delegate) : ta(this._delegate, t2));
        } catch (t3) {
            throw xc(t3, "doc()", "CollectionReference.doc()");
        }
    }, n23.prototype.add = function(t2) {
        var e14 = this;
        return (function(t3, e15) {
            var n24 = zu(t3.firestore, ua), r20 = ta(t3), i10 = hc(t3.converter, e15);
            return mc(n24, [
                Ea(Ta(t3.firestore), "addDoc", r20._key, i10, null !== t3.converter, {
                }).toMutation(r20._key, De.exists(false))
            ]).then(function() {
                return r20;
            });
        })(this._delegate, t2).then(function(t3) {
            return new Cc(e14.firestore, t3);
        });
    }, n23.prototype.isEqual = function(t2) {
        return ea(this._delegate, t2._delegate);
    }, n23.prototype.withConverter = function(t2) {
        return new n23(this.firestore, t2 ? this._delegate.withConverter(kc.nu(this.firestore, t2)) : this._delegate.withConverter(null));
    }, n23;
}(Fc);
function Uc(t2) {
    return zu(t2, $u);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // The objects that are a part of this API are exposed to third-parties as
// compiled javascript so we want to flag our private members with a leading
// underscore to discourage their use.
/**
 * A `FieldPath` refers to a field in a document. The path may consist of a
 * single field name (referring to a top-level field in the document), or a list
 * of field names (referring to a nested field in the document).
 */ var Bc = /** @class */ function() {
    /**
     * Creates a FieldPath from the provided field names. If more than one field
     * name is provided, the path will point to a nested field in a document.
     *
     * @param fieldNames - A list of field names.
     */ function t2() {
        for(var t3 = [], n23 = 0; n23 < arguments.length; n23++)t3[n23] = arguments[n23];
        this._delegate = new (la.bind.apply(la, _tslib.__spreadArray([
            void 0
        ], t3)));
    }
    return t2.documentId = function() {
        /**
         * Internal Note: The backend doesn't technically support querying by
         * document ID. Instead it queries by the entire document name (full path
         * included), but in the cases we currently support documentId(), the net
         * effect is the same.
         */ return new t2($.keyField().canonicalString());
    }, t2.prototype.isEqual = function(t3) {
        return (t3 = _util.getModularInstance(t3)) instanceof la && this._delegate._internalPath.isEqual(t3._internalPath);
    }, t2;
}(), jc = /** @class */ function() {
    function t2(t3) {
        this._delegate = t3;
    }
    return t2.serverTimestamp = function() {
        var e12 = new Na("serverTimestamp");
        return e12._methodName = "FieldValue.serverTimestamp", new t2(e12);
    }, t2.delete = function() {
        var e12 = new _a("deleteField");
        return e12._methodName = "FieldValue.delete", new t2(e12);
    }, t2.arrayUnion = function() {
        for(var e12 = [], n23 = 0; n23 < arguments.length; n23++)e12[n23] = arguments[n23];
        var r20 = /**
 * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link
 * @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array
 * value that already exists on the server. Each specified element that doesn't
 * already exist in the array will be added to the end. If the field being
 * modified is not already an array it will be overwritten with an array
 * containing exactly the specified elements.
 *
 * @param elements - The elements to union into the array.
 * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
 * `updateDoc()`.
 */ (function() {
            for(var t3 = [], e14 = 0; e14 < arguments.length; e14++)t3[e14] = arguments[e14];
            // NOTE: We don't actually parse the data until it's used in set() or
            // update() since we'd need the Firestore instance to do this.
            return new Da("arrayUnion", t3);
        }).apply(void 0, e12);
        return r20._methodName = "FieldValue.arrayUnion", new t2(r20);
    }, t2.arrayRemove = function() {
        for(var e12 = [], n23 = 0; n23 < arguments.length; n23++)e12[n23] = arguments[n23];
        var r20 = (function() {
            for(var t3 = [], e14 = 0; e14 < arguments.length; e14++)t3[e14] = arguments[e14];
            // NOTE: We don't actually parse the data until it's used in set() or
            // update() since we'd need the Firestore instance to do this.
            return new Aa("arrayRemove", t3);
        }).apply(void 0, e12);
        return r20._methodName = "FieldValue.arrayRemove", new t2(r20);
    }, t2.increment = function(e12) {
        var n23 = function(t3) {
            return new ka("increment", t3);
        }(e12);
        return n23._methodName = "FieldValue.increment", new t2(n23);
    }, t2.prototype.isEqual = function(t3) {
        return this._delegate.isEqual(t3._delegate);
    }, t2;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function Kc(t2) {
    /**
 * Loads a Firestore bundle into the local cache.
 *
 * @param firestore - The `Firestore` instance to load bundles for for.
 * @param bundleData - An object representing the bundle to be loaded. Valid objects are
 *   `ArrayBuffer`, `ReadableStream<Uint8Array>` or `string`.
 *
 * @returns
 *   A `LoadBundleTask` object, which notifies callers with progress updates, and completion
 *   or error events. It can be used as a `Promise<LoadBundleTaskProgress>`.
 */ return (function(t3, e12) {
        var i10 = aa(t3 = zu(t3, ua)), o10 = new oa;
        return (function(t4, e14, i11, o11) {
            var s = this, u = function(t5, e15) {
                return (function(t6, e16) {
                    return new vu(t6, e16);
                })(function(t6, e16) {
                    if (t6 instanceof Uint8Array) return pu(t6, e16);
                    if (t6 instanceof ArrayBuffer) return pu(new Uint8Array(t6), e16);
                    if (t6 instanceof ReadableStream) return t6.getReader();
                    throw new Error("Source of `toByteStreamReader` has to be a ArrayBuffer or ReadableStream");
                }("string" == typeof t5 ? (new TextEncoder).encode(t5) : t5), e15);
            }(i11, Co(e14));
            t4.asyncQueue.enqueueAndForget(function() {
                return _tslib.__awaiter(s, void 0, void 0, function() {
                    var e15;
                    return _tslib.__generator(this, function(n23) {
                        switch(n23.label){
                            case 0:
                                return e15 = cu, [
                                    4,
                                    Du(t4)
                                ];
                            case 1:
                                return e15.apply(void 0, [
                                    n23.sent(),
                                    u,
                                    o11
                                ]), [
                                    2
                                ];
                        }
                    });
                });
            });
        })(i10, t3._databaseId, e12, o10), o10;
    })(this._delegate, t2);
}
function Qc(t2) {
    var e12, i10, o10 = this;
    return (e12 = this._delegate, i10 = t2, (function(t3, e14) {
        var i11 = this;
        return t3.asyncQueue.enqueue(function() {
            return _tslib.__awaiter(i11, void 0, void 0, function() {
                var n23;
                return _tslib.__generator(this, function(r20) {
                    switch(r20.label){
                        case 0:
                            return n23 = function(t4, e15) {
                                var n24 = F(t4);
                                return n24.persistence.runTransaction("Get named query", "readonly", function(t5) {
                                    return n24.Ke.getNamedQuery(t5, e15);
                                });
                            }, [
                                4,
                                Su(t3)
                            ];
                        case 1:
                            return [
                                2,
                                n23.apply(void 0, [
                                    r20.sent(),
                                    e14
                                ])
                            ];
                    }
                });
            });
        });
    })(aa(e12 = zu(e12, ua)), i10).then(function(t3) {
        return t3 ? new Xu(e12, null, t3.query) : null;
    })).then(function(t3) {
        return t3 ? new Fc(o10, t3) : null;
    });
}

},{"process":"7AgFc","tslib":"4rd38","@firebase/util":"3bR6t","@firebase/logger":"5PuYX","@firebase/webchannel-wrapper":"71Sz5","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"71Sz5":[function(require,module,exports) {
var global = arguments[3];
(function() {
    var n;
    function aa(a) {
        var b = 0;
        return function() {
            return b < a.length ? {
                done: false,
                value: a[b++]
            } : {
                done: true
            };
        };
    }
    function q(a) {
        var b = "undefined" != typeof Symbol && Symbol.iterator && a[Symbol.iterator];
        return b ? b.call(a) : {
            next: aa(a)
        };
    }
    var ba = "function" == typeof Object.create ? Object.create : function(a) {
        function b() {
        }
        b.prototype = a;
        return new b;
    }, ca = "function" == typeof Object.defineProperties ? Object.defineProperty : function(a, b, c) {
        if (a == Array.prototype || a == Object.prototype) return a;
        a[b] = c.value;
        return a;
    };
    function da(a) {
        a = [
            "object" == typeof globalThis && globalThis,
            a,
            "object" == typeof window && window,
            "object" == typeof self && self,
            "object" == typeof global && global
        ];
        for(var b = 0; b < a.length; ++b){
            var c = a[b];
            if (c && c.Math == Math) return c;
        }
        throw Error("Cannot find global object");
    }
    var ea = da(this);
    function r(a, b) {
        if (b) a: {
            var c = ea;
            a = a.split(".");
            for(var d = 0; d < a.length - 1; d++){
                var e = a[d];
                if (!(e in c)) break a;
                c = c[e];
            }
            a = a[a.length - 1];
            d = c[a];
            b = b(d);
            b != d && null != b && ca(c, a, {
                configurable: true,
                writable: true,
                value: b
            });
        }
    }
    var fa;
    if ("function" == typeof Object.setPrototypeOf) fa = Object.setPrototypeOf;
    else {
        var ha;
        a: {
            var ia = {
                a: true
            }, ja = {
            };
            try {
                ja.__proto__ = ia;
                ha = ja.a;
                break a;
            } catch (a) {
            }
            ha = false;
        }
        fa = ha ? function(a, b) {
            a.__proto__ = b;
            if (a.__proto__ !== b) throw new TypeError(a + " is not extensible");
            return a;
        } : null;
    }
    var ka = fa;
    r("Symbol", function(a) {
        function b(f) {
            if (this instanceof b) throw new TypeError("Symbol is not a constructor");
            return new c(d + (f || "") + "_" + e++, f);
        }
        function c(f, k) {
            this.g = f;
            ca(this, "description", {
                configurable: true,
                writable: true,
                value: k
            });
        }
        if (a) return a;
        c.prototype.toString = function() {
            return this.g;
        };
        var d = "jscomp_symbol_" + (1000000000 * Math.random() >>> 0) + "_", e = 0;
        return b;
    });
    r("Symbol.iterator", function(a) {
        if (a) return a;
        a = Symbol("Symbol.iterator");
        for(var b = "Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "), c = 0; c < b.length; c++){
            var d = ea[b[c]];
            "function" === typeof d && "function" != typeof d.prototype[a] && ca(d.prototype, a, {
                configurable: true,
                writable: true,
                value: function() {
                    return la(aa(this));
                }
            });
        }
        return a;
    });
    function la(a) {
        a = {
            next: a
        };
        a[Symbol.iterator] = function() {
            return this;
        };
        return a;
    }
    function ma(a, b) {
        a instanceof String && (a += "");
        var c = 0, d = false, e = {
            next: function() {
                if (!d && c < a.length) {
                    var f = c++;
                    return {
                        value: b(f, a[f]),
                        done: false
                    };
                }
                d = true;
                return {
                    done: true,
                    value: void 0
                };
            }
        };
        e[Symbol.iterator] = function() {
            return e;
        };
        return e;
    }
    r("Array.prototype.entries", function(a) {
        return a ? a : function() {
            return ma(this, function(b, c) {
                return [
                    b,
                    c
                ];
            });
        };
    });
    function u(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }
    r("WeakMap", function(a) {
        function b(h) {
            this.g = (l += Math.random() + 1).toString();
            if (h) {
                h = q(h);
                for(var m; !(m = h.next()).done;)m = m.value, this.set(m[0], m[1]);
            }
        }
        function c() {
        }
        function d(h) {
            var m = typeof h;
            return "object" === m && null !== h || "function" === m;
        }
        function e(h) {
            if (!u(h, k)) {
                var m = new c;
                ca(h, k, {
                    value: m
                });
            }
        }
        function f(h) {
            var m = Object[h];
            m && (Object[h] = function(p) {
                if (p instanceof c) return p;
                Object.isExtensible(p) && e(p);
                return m(p);
            });
        }
        if ((function() {
            if (!a || !Object.seal) return false;
            try {
                var h = Object.seal({
                }), m = Object.seal({
                }), p = new a([
                    [
                        h,
                        2
                    ],
                    [
                        m,
                        3
                    ]
                ]);
                if (2 != p.get(h) || 3 != p.get(m)) return false;
                p.delete(h);
                p.set(m, 4);
                return !p.has(h) && 4 == p.get(m);
            } catch (t) {
                return false;
            }
        })()) return a;
        var k = "$jscomp_hidden_" + Math.random();
        f("freeze");
        f("preventExtensions");
        f("seal");
        var l = 0;
        b.prototype.set = function(h, m) {
            if (!d(h)) throw Error("Invalid WeakMap key");
            e(h);
            if (!u(h, k)) throw Error("WeakMap key fail: " + h);
            h[k][this.g] = m;
            return this;
        };
        b.prototype.get = function(h) {
            return d(h) && u(h, k) ? h[k][this.g] : void 0;
        };
        b.prototype.has = function(h) {
            return d(h) && u(h, k) && u(h[k], this.g);
        };
        b.prototype.delete = function(h) {
            return d(h) && u(h, k) && u(h[k], this.g) ? delete h[k][this.g] : false;
        };
        return b;
    });
    r("Map", function(a) {
        function b() {
            var l = {
            };
            return l.V = l.next = l.head = l;
        }
        function c(l, h) {
            var m = l.g;
            return la(function() {
                if (m) {
                    for(; m.head != l.g;)m = m.V;
                    for(; m.next != m.head;)return m = m.next, {
                        done: false,
                        value: h(m)
                    };
                    m = null;
                }
                return {
                    done: true,
                    value: void 0
                };
            });
        }
        function d(l, h) {
            var m = h && typeof h;
            "object" == m || "function" == m ? f.has(h) ? m = f.get(h) : (m = "" + ++k, f.set(h, m)) : m = "p_" + h;
            var p = l.h[m];
            if (p && u(l.h, m)) for(l = 0; l < p.length; l++){
                var t = p[l];
                if (h !== h && t.key !== t.key || h === t.key) return {
                    id: m,
                    list: p,
                    index: l,
                    I: t
                };
            }
            return {
                id: m,
                list: p,
                index: -1,
                I: void 0
            };
        }
        function e(l) {
            this.h = {
            };
            this.g = b();
            this.size = 0;
            if (l) {
                l = q(l);
                for(var h; !(h = l.next()).done;)h = h.value, this.set(h[0], h[1]);
            }
        }
        if ((function() {
            if (!a || "function" != typeof a || !a.prototype.entries || "function" != typeof Object.seal) return false;
            try {
                var l = Object.seal({
                    x: 4
                }), h = new a(q([
                    [
                        l,
                        "s"
                    ]
                ]));
                if ("s" != h.get(l) || 1 != h.size || h.get({
                    x: 4
                }) || h.set({
                    x: 4
                }, "t") != h || 2 != h.size) return false;
                var m = h.entries(), p = m.next();
                if (p.done || p.value[0] != l || "s" != p.value[1]) return false;
                p = m.next();
                return p.done || 4 != p.value[0].x || "t" != p.value[1] || !m.next().done ? false : true;
            } catch (t) {
                return false;
            }
        })()) return a;
        var f = new WeakMap;
        e.prototype.set = function(l, h) {
            l = 0 === l ? 0 : l;
            var m = d(this, l);
            m.list || (m.list = this.h[m.id] = []);
            m.I ? m.I.value = h : (m.I = {
                next: this.g,
                V: this.g.V,
                head: this.g,
                key: l,
                value: h
            }, m.list.push(m.I), this.g.V.next = m.I, this.g.V = m.I, this.size++);
            return this;
        };
        e.prototype.delete = function(l) {
            l = d(this, l);
            return l.I && l.list ? (l.list.splice(l.index, 1), l.list.length || delete this.h[l.id], l.I.V.next = l.I.next, l.I.next.V = l.I.V, l.I.head = null, this.size--, true) : false;
        };
        e.prototype.clear = function() {
            this.h = {
            };
            this.g = this.g.V = b();
            this.size = 0;
        };
        e.prototype.has = function(l) {
            return !!d(this, l).I;
        };
        e.prototype.get = function(l) {
            return (l = d(this, l).I) && l.value;
        };
        e.prototype.entries = function() {
            return c(this, function(l) {
                return [
                    l.key,
                    l.value
                ];
            });
        };
        e.prototype.keys = function() {
            return c(this, function(l) {
                return l.key;
            });
        };
        e.prototype.values = function() {
            return c(this, function(l) {
                return l.value;
            });
        };
        e.prototype.forEach = function(l, h) {
            for(var m = this.entries(), p; !(p = m.next()).done;)p = p.value, l.call(h, p[1], p[0], this);
        };
        e.prototype[Symbol.iterator] = e.prototype.entries;
        var k = 0;
        return e;
    });
    r("Set", function(a) {
        function b(c) {
            this.g = new Map;
            if (c) {
                c = q(c);
                for(var d; !(d = c.next()).done;)this.add(d.value);
            }
            this.size = this.g.size;
        }
        if ((function() {
            if (!a || "function" != typeof a || !a.prototype.entries || "function" != typeof Object.seal) return false;
            try {
                var c = Object.seal({
                    x: 4
                }), d = new a(q([
                    c
                ]));
                if (!d.has(c) || 1 != d.size || d.add(c) != d || 1 != d.size || d.add({
                    x: 4
                }) != d || 2 != d.size) return false;
                var e = d.entries(), f = e.next();
                if (f.done || f.value[0] != c || f.value[1] != c) return false;
                f = e.next();
                return f.done || f.value[0] == c || 4 != f.value[0].x || f.value[1] != f.value[0] ? false : e.next().done;
            } catch (k) {
                return false;
            }
        })()) return a;
        b.prototype.add = function(c) {
            c = 0 === c ? 0 : c;
            this.g.set(c, c);
            this.size = this.g.size;
            return this;
        };
        b.prototype.delete = function(c) {
            c = this.g.delete(c);
            this.size = this.g.size;
            return c;
        };
        b.prototype.clear = function() {
            this.g.clear();
            this.size = 0;
        };
        b.prototype.has = function(c) {
            return this.g.has(c);
        };
        b.prototype.entries = function() {
            return this.g.entries();
        };
        b.prototype.values = function() {
            return this.g.values();
        };
        b.prototype.keys = b.prototype.values;
        b.prototype[Symbol.iterator] = b.prototype.values;
        b.prototype.forEach = function(c, d) {
            var e = this;
            this.g.forEach(function(f) {
                return c.call(d, f, f, e);
            });
        };
        return b;
    });
    r("Array.prototype.values", function(a) {
        return a ? a : function() {
            return ma(this, function(b, c) {
                return c;
            });
        };
    });
    var goog = goog || {
    }, v = this || self;
    function na() {
    }
    function oa(a) {
        var b = typeof a;
        b = "object" != b ? b : a ? Array.isArray(a) ? "array" : b : "null";
        return "array" == b || "object" == b && "number" == typeof a.length;
    }
    function w(a) {
        var b = typeof a;
        return "object" == b && null != a || "function" == b;
    }
    function pa(a) {
        return Object.prototype.hasOwnProperty.call(a, qa) && a[qa] || (a[qa] = ++ra);
    }
    var qa = "closure_uid_" + (1000000000 * Math.random() >>> 0), ra = 0;
    function sa(a, b, c) {
        return a.call.apply(a.bind, arguments);
    }
    function ta(a, b, c) {
        if (!a) throw Error();
        if (2 < arguments.length) {
            var d = Array.prototype.slice.call(arguments, 2);
            return function() {
                var e = Array.prototype.slice.call(arguments);
                Array.prototype.unshift.apply(e, d);
                return a.apply(b, e);
            };
        }
        return function() {
            return a.apply(b, arguments);
        };
    }
    function x(a, b, c) {
        Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? x = sa : x = ta;
        return x.apply(null, arguments);
    }
    function ua(a, b) {
        var c = Array.prototype.slice.call(arguments, 1);
        return function() {
            var d = c.slice();
            d.push.apply(d, arguments);
            return a.apply(this, d);
        };
    }
    function y(a, b) {
        function c() {
        }
        c.prototype = b.prototype;
        a.Y = b.prototype;
        a.prototype = new c;
        a.prototype.constructor = a;
        a.Xb = function(d, e, f) {
            for(var k = Array(arguments.length - 2), l = 2; l < arguments.length; l++)k[l - 2] = arguments[l];
            return b.prototype[e].apply(d, k);
        };
    }
    function z() {
        0 != va && (wa[pa(this)] = this);
        this.s = this.s;
        this.o = this.o;
    }
    var va = 0, wa = {
    };
    z.prototype.s = false;
    z.prototype.pa = function() {
        if (!this.s && (this.s = true, this.N(), 0 != va)) {
            var a = pa(this);
            if (0 != va && this.o && 0 < this.o.length) throw Error(this + " did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");
            delete wa[a];
        }
    };
    z.prototype.N = function() {
        if (this.o) for(; this.o.length;)this.o.shift()();
    };
    var xa = Array.prototype.indexOf ? function(a, b) {
        return Array.prototype.indexOf.call(a, b, void 0);
    } : function(a, b) {
        if ("string" === typeof a) return "string" !== typeof b || 1 != b.length ? -1 : a.indexOf(b, 0);
        for(var c = 0; c < a.length; c++)if (c in a && a[c] === b) return c;
        return -1;
    }, ya = Array.prototype.forEach ? function(a, b, c) {
        Array.prototype.forEach.call(a, b, c);
    } : function(a, b, c) {
        for(var d = a.length, e = "string" === typeof a ? a.split("") : a, f = 0; f < d; f++)f in e && b.call(c, e[f], f, a);
    };
    function za(a) {
        a: {
            var b = Aa;
            for(var c = a.length, d = "string" === typeof a ? a.split("") : a, e = 0; e < c; e++)if (e in d && b.call(void 0, d[e], e, a)) {
                b = e;
                break a;
            }
            b = -1;
        }
        return 0 > b ? null : "string" === typeof a ? a.charAt(b) : a[b];
    }
    function Ba(a) {
        return Array.prototype.concat.apply([], arguments);
    }
    function Ca(a) {
        var b = a.length;
        if (0 < b) {
            for(var c = Array(b), d = 0; d < b; d++)c[d] = a[d];
            return c;
        }
        return [];
    }
    function Da(a) {
        return /^[\s\xa0]*$/.test(a);
    }
    var Ea = String.prototype.trim ? function(a) {
        return a.trim();
    } : function(a) {
        return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1];
    };
    function A(a, b) {
        return -1 != a.indexOf(b);
    }
    function Fa(a, b) {
        return a < b ? -1 : a > b ? 1 : 0;
    }
    var B;
    a: {
        var Ha = v.navigator;
        if (Ha) {
            var Ia = Ha.userAgent;
            if (Ia) {
                B = Ia;
                break a;
            }
        }
        B = "";
    }
    function La(a, b, c) {
        for(var d in a)b.call(c, a[d], d, a);
    }
    function Ma(a) {
        var b = {
        }, c;
        for(c in a)b[c] = a[c];
        return b;
    }
    var Na = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
    function Oa(a, b) {
        for(var c, d, e = 1; e < arguments.length; e++){
            d = arguments[e];
            for(c in d)a[c] = d[c];
            for(var f = 0; f < Na.length; f++)c = Na[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
        }
    }
    function Pa(a) {
        Pa[" "](a);
        return a;
    }
    Pa[" "] = na;
    function Qa(a) {
        var b = Ra;
        return Object.prototype.hasOwnProperty.call(b, 9) ? b[9] : b[9] = a(9);
    }
    var Sa = A(B, "Opera"), C = A(B, "Trident") || A(B, "MSIE"), Ta = A(B, "Edge"), Ua = Ta || C, Va = A(B, "Gecko") && !(A(B.toLowerCase(), "webkit") && !A(B, "Edge")) && !(A(B, "Trident") || A(B, "MSIE")) && !A(B, "Edge"), Wa = A(B.toLowerCase(), "webkit") && !A(B, "Edge");
    function Xa() {
        var a = v.document;
        return a ? a.documentMode : void 0;
    }
    var Ya;
    a: {
        var Za = "", $a = function() {
            var a = B;
            if (Va) return /rv:([^\);]+)(\)|;)/.exec(a);
            if (Ta) return /Edge\/([\d\.]+)/.exec(a);
            if (C) return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);
            if (Wa) return /WebKit\/(\S+)/.exec(a);
            if (Sa) return /(?:Version)[ \/]?(\S+)/.exec(a);
        }();
        $a && (Za = $a ? $a[1] : "");
        if (C) {
            var ab = Xa();
            if (null != ab && ab > parseFloat(Za)) {
                Ya = String(ab);
                break a;
            }
        }
        Ya = Za;
    }
    var Ra = {
    };
    function bb() {
        return Qa(function() {
            for(var a = 0, b = Ea(String(Ya)).split("."), c = Ea("9").split("."), d = Math.max(b.length, c.length), e = 0; 0 == a && e < d; e++){
                var f = b[e] || "", k = c[e] || "";
                do {
                    f = /(\d*)(\D*)(.*)/.exec(f) || [
                        "",
                        "",
                        "",
                        ""
                    ];
                    k = /(\d*)(\D*)(.*)/.exec(k) || [
                        "",
                        "",
                        "",
                        ""
                    ];
                    if (0 == f[0].length && 0 == k[0].length) break;
                    a = Fa(0 == f[1].length ? 0 : parseInt(f[1], 10), 0 == k[1].length ? 0 : parseInt(k[1], 10)) || Fa(0 == f[2].length, 0 == k[2].length) || Fa(f[2], k[2]);
                    f = f[3];
                    k = k[3];
                }while (0 == a)
            }
            return 0 <= a;
        });
    }
    var cb;
    if (v.document && C) {
        var db = Xa();
        cb = db ? db : parseInt(Ya, 10) || void 0;
    } else cb = void 0;
    var eb = cb;
    var fb = function() {
        if (!v.addEventListener || !Object.defineProperty) return false;
        var a = false, b = Object.defineProperty({
        }, "passive", {
            get: function() {
                a = true;
            }
        });
        try {
            v.addEventListener("test", na, b), v.removeEventListener("test", na, b);
        } catch (c) {
        }
        return a;
    }();
    function D(a, b) {
        this.type = a;
        this.g = this.target = b;
        this.defaultPrevented = false;
    }
    D.prototype.h = function() {
        this.defaultPrevented = true;
    };
    function E(a, b) {
        D.call(this, a ? a.type : "");
        this.relatedTarget = this.g = this.target = null;
        this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
        this.key = "";
        this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = false;
        this.state = null;
        this.pointerId = 0;
        this.pointerType = "";
        this.i = null;
        if (a) {
            var c = this.type = a.type, d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
            this.target = a.target || a.srcElement;
            this.g = b;
            if (b = a.relatedTarget) {
                if (Va) {
                    a: {
                        try {
                            Pa(b.nodeName);
                            var e = true;
                            break a;
                        } catch (f) {
                        }
                        e = false;
                    }
                    e || (b = null);
                }
            } else "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);
            this.relatedTarget = b;
            d ? (this.clientX = (void 0) !== d.clientX ? d.clientX : d.pageX, this.clientY = (void 0) !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = (void 0) !== a.clientX ? a.clientX : a.pageX, this.clientY = (void 0) !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
            this.button = a.button;
            this.key = a.key || "";
            this.ctrlKey = a.ctrlKey;
            this.altKey = a.altKey;
            this.shiftKey = a.shiftKey;
            this.metaKey = a.metaKey;
            this.pointerId = a.pointerId || 0;
            this.pointerType = "string" === typeof a.pointerType ? a.pointerType : gb[a.pointerType] || "";
            this.state = a.state;
            this.i = a;
            a.defaultPrevented && E.Y.h.call(this);
        }
    }
    y(E, D);
    var gb = {
        2: "touch",
        3: "pen",
        4: "mouse"
    };
    E.prototype.h = function() {
        E.Y.h.call(this);
        var a = this.i;
        a.preventDefault ? a.preventDefault() : a.returnValue = false;
    };
    var F = "closure_listenable_" + (1000000 * Math.random() | 0);
    var hb = 0;
    function ib(a, b, c, d, e) {
        this.listener = a;
        this.proxy = null;
        this.src = b;
        this.type = c;
        this.capture = !!d;
        this.ka = e;
        this.key = ++hb;
        this.ea = this.ha = false;
    }
    function jb(a) {
        a.ea = true;
        a.listener = null;
        a.proxy = null;
        a.src = null;
        a.ka = null;
    }
    function kb(a) {
        this.src = a;
        this.g = {
        };
        this.h = 0;
    }
    kb.prototype.add = function(a, b, c, d, e) {
        var f = a.toString();
        a = this.g[f];
        a || (a = this.g[f] = [], this.h++);
        var k = lb(a, b, d, e);
        -1 < k ? (b = a[k], c || (b.ha = false)) : (b = new ib(b, this.src, f, !!d, e), b.ha = c, a.push(b));
        return b;
    };
    function mb(a, b) {
        var c = b.type;
        if (c in a.g) {
            var d = a.g[c], e = xa(d, b), f;
            (f = 0 <= e) && Array.prototype.splice.call(d, e, 1);
            f && (jb(b), 0 == a.g[c].length && (delete a.g[c], a.h--));
        }
    }
    function lb(a, b, c, d) {
        for(var e = 0; e < a.length; ++e){
            var f = a[e];
            if (!f.ea && f.listener == b && f.capture == !!c && f.ka == d) return e;
        }
        return -1;
    }
    var nb = "closure_lm_" + (1000000 * Math.random() | 0), ob = {
    }, pb = 0;
    function qb(a, b, c, d, e) {
        if (d && d.once) return rb(a, b, c, d, e);
        if (Array.isArray(b)) {
            for(var f = 0; f < b.length; f++)qb(a, b[f], c, d, e);
            return null;
        }
        c = sb(c);
        return a && a[F] ? a.O(b, c, w(d) ? !!d.capture : !!d, e) : tb(a, b, c, false, d, e);
    }
    function tb(a, b, c, d, e, f) {
        if (!b) throw Error("Invalid event type");
        var k = w(e) ? !!e.capture : !!e, l = ub(a);
        l || (a[nb] = l = new kb(a));
        c = l.add(b, c, d, k, f);
        if (c.proxy) return c;
        d = vb();
        c.proxy = d;
        d.src = a;
        d.listener = c;
        if (a.addEventListener) fb || (e = k), (void 0) === e && (e = false), a.addEventListener(b.toString(), d, e);
        else if (a.attachEvent) a.attachEvent(wb(b.toString()), d);
        else if (a.addListener && a.removeListener) a.addListener(d);
        else throw Error("addEventListener and attachEvent are unavailable.");
        pb++;
        return c;
    }
    function vb() {
        function a(c) {
            return b.call(a.src, a.listener, c);
        }
        var b = xb;
        return a;
    }
    function rb(a, b, c, d, e) {
        if (Array.isArray(b)) {
            for(var f = 0; f < b.length; f++)rb(a, b[f], c, d, e);
            return null;
        }
        c = sb(c);
        return a && a[F] ? a.P(b, c, w(d) ? !!d.capture : !!d, e) : tb(a, b, c, true, d, e);
    }
    function yb(a, b, c, d, e) {
        if (Array.isArray(b)) for(var f = 0; f < b.length; f++)yb(a, b[f], c, d, e);
        else (d = w(d) ? !!d.capture : !!d, c = sb(c), a && a[F]) ? (a = a.i, b = String(b).toString(), b in a.g && (f = a.g[b], c = lb(f, c, d, e), -1 < c && (jb(f[c]), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.g[b], a.h--)))) : a && (a = ub(a)) && (b = a.g[b.toString()], a = -1, b && (a = lb(b, c, d, e)), (c = -1 < a ? b[a] : null) && zb(c));
    }
    function zb(a) {
        if ("number" !== typeof a && a && !a.ea) {
            var b = a.src;
            if (b && b[F]) mb(b.i, a);
            else {
                var c = a.type, d = a.proxy;
                b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(wb(c), d) : b.addListener && b.removeListener && b.removeListener(d);
                pb--;
                (c = ub(b)) ? (mb(c, a), 0 == c.h && (c.src = null, b[nb] = null)) : jb(a);
            }
        }
    }
    function wb(a) {
        return a in ob ? ob[a] : ob[a] = "on" + a;
    }
    function xb(a, b) {
        if (a.ea) a = true;
        else {
            b = new E(b, this);
            var c = a.listener, d = a.ka || a.src;
            a.ha && zb(a);
            a = c.call(d, b);
        }
        return a;
    }
    function ub(a) {
        a = a[nb];
        return a instanceof kb ? a : null;
    }
    var Ab = "__closure_events_fn_" + (1000000000 * Math.random() >>> 0);
    function sb(a) {
        if ("function" === typeof a) return a;
        a[Ab] || (a[Ab] = function(b) {
            return a.handleEvent(b);
        });
        return a[Ab];
    }
    function G() {
        z.call(this);
        this.i = new kb(this);
        this.R = this;
        this.J = null;
    }
    y(G, z);
    G.prototype[F] = true;
    G.prototype.removeEventListener = function(a, b, c, d) {
        yb(this, a, b, c, d);
    };
    function H(a, b) {
        var c, d = a.J;
        if (d) for(c = []; d; d = d.J)c.push(d);
        a = a.R;
        d = b.type || b;
        if ("string" === typeof b) b = new D(b, a);
        else if (b instanceof D) b.target = b.target || a;
        else {
            var e = b;
            b = new D(d, a);
            Oa(b, e);
        }
        e = true;
        if (c) for(var f = c.length - 1; 0 <= f; f--){
            var k = b.g = c[f];
            e = Bb(k, d, true, b) && e;
        }
        k = b.g = a;
        e = Bb(k, d, true, b) && e;
        e = Bb(k, d, false, b) && e;
        if (c) for(f = 0; f < c.length; f++)k = b.g = c[f], e = Bb(k, d, false, b) && e;
    }
    G.prototype.N = function() {
        G.Y.N.call(this);
        if (this.i) {
            var a = this.i, b = 0, c;
            for(c in a.g){
                for(var d = a.g[c], e = 0; e < d.length; e++)++b, jb(d[e]);
                delete a.g[c];
                a.h--;
            }
        }
        this.J = null;
    };
    G.prototype.O = function(a, b, c, d) {
        return this.i.add(String(a), b, false, c, d);
    };
    G.prototype.P = function(a, b, c, d) {
        return this.i.add(String(a), b, true, c, d);
    };
    function Bb(a, b, c, d) {
        b = a.i.g[String(b)];
        if (!b) return true;
        b = b.concat();
        for(var e = true, f = 0; f < b.length; ++f){
            var k = b[f];
            if (k && !k.ea && k.capture == c) {
                var l = k.listener, h = k.ka || k.src;
                k.ha && mb(a.i, k);
                e = false !== l.call(h, d) && e;
            }
        }
        return e && !d.defaultPrevented;
    }
    var Cb = v.JSON.stringify;
    function Db(a, b) {
        this.i = a;
        this.j = b;
        this.h = 0;
        this.g = null;
    }
    Db.prototype.get = function() {
        if (0 < this.h) {
            this.h--;
            var a = this.g;
            this.g = a.next;
            a.next = null;
        } else a = this.i();
        return a;
    };
    function Eb() {
        this.h = this.g = null;
    }
    Eb.prototype.add = function(a, b) {
        var c = Fb.get();
        c.set(a, b);
        this.h ? this.h.next = c : this.g = c;
        this.h = c;
    };
    function Gb() {
        var a = Hb, b = null;
        a.g && (b = a.g, a.g = a.g.next, a.g || (a.h = null), b.next = null);
        return b;
    }
    var Fb = new Db(function() {
        return new Ib;
    }, function(a) {
        return a.reset();
    });
    function Ib() {
        this.next = this.g = this.h = null;
    }
    Ib.prototype.set = function(a, b) {
        this.h = a;
        this.g = b;
        this.next = null;
    };
    Ib.prototype.reset = function() {
        this.next = this.g = this.h = null;
    };
    function Jb(a) {
        v.setTimeout(function() {
            throw a;
        }, 0);
    }
    function Kb(a, b) {
        Lb || Mb();
        Nb || (Lb(), Nb = true);
        Hb.add(a, b);
    }
    var Lb;
    function Mb() {
        var a = v.Promise.resolve(void 0);
        Lb = function() {
            a.then(Ob);
        };
    }
    var Nb = false, Hb = new Eb;
    function Ob() {
        for(var a; a = Gb();){
            try {
                a.h.call(a.g);
            } catch (c) {
                Jb(c);
            }
            var b = Fb;
            b.j(a);
            100 > b.h && (b.h++, a.next = b.g, b.g = a);
        }
        Nb = false;
    }
    function Pb(a, b) {
        G.call(this);
        this.h = a || 1;
        this.g = b || v;
        this.j = x(this.mb, this);
        this.l = Date.now();
    }
    y(Pb, G);
    n = Pb.prototype;
    n.fa = false;
    n.T = null;
    n.mb = function() {
        if (this.fa) {
            var a = Date.now() - this.l;
            0 < a && a < 0.8 * this.h ? this.T = this.g.setTimeout(this.j, this.h - a) : (this.T && (this.g.clearTimeout(this.T), this.T = null), H(this, "tick"), this.fa && (Qb(this), this.start()));
        }
    };
    n.start = function() {
        this.fa = true;
        this.T || (this.T = this.g.setTimeout(this.j, this.h), this.l = Date.now());
    };
    function Qb(a) {
        a.fa = false;
        a.T && (a.g.clearTimeout(a.T), a.T = null);
    }
    n.N = function() {
        Pb.Y.N.call(this);
        Qb(this);
        delete this.g;
    };
    function Rb(a, b, c) {
        if ("function" === typeof a) c && (a = x(a, c));
        else if (a && "function" == typeof a.handleEvent) a = x(a.handleEvent, a);
        else throw Error("Invalid listener argument");
        return 2147483647 < Number(b) ? -1 : v.setTimeout(a, b || 0);
    }
    function I(a, b, c) {
        z.call(this);
        this.m = null != c ? a.bind(c) : a;
        this.j = b;
        this.h = null;
        this.i = false;
        this.g = null;
    }
    I.prototype = ba(z.prototype);
    I.prototype.constructor = I;
    if (ka) ka(I, z);
    else for(var J in z)if ("prototype" != J) {
        if (Object.defineProperties) {
            var Sb = Object.getOwnPropertyDescriptor(z, J);
            Sb && Object.defineProperty(I, J, Sb);
        } else I[J] = z[J];
    }
    I.Y = z.prototype;
    I.prototype.l = function(a) {
        this.h = arguments;
        this.g ? this.i = true : Tb(this);
    };
    I.prototype.N = function() {
        z.prototype.N.call(this);
        this.g && (v.clearTimeout(this.g), this.g = null, this.i = false, this.h = null);
    };
    function Tb(a) {
        a.g = Rb(function() {
            a.g = null;
            a.i && (a.i = false, Tb(a));
        }, a.j);
        var b = a.h;
        a.h = null;
        a.m.apply(null, b);
    }
    function Ub(a) {
        z.call(this);
        this.h = a;
        this.g = {
        };
    }
    y(Ub, z);
    var Vb = [];
    function Wb(a, b, c, d) {
        Array.isArray(c) || (c && (Vb[0] = c.toString()), c = Vb);
        for(var e = 0; e < c.length; e++){
            var f = qb(b, c[e], d || a.handleEvent, false, a.h || a);
            if (!f) break;
            a.g[f.key] = f;
        }
    }
    function Xb(a) {
        La(a.g, function(b, c) {
            this.g.hasOwnProperty(c) && zb(b);
        }, a);
        a.g = {
        };
    }
    Ub.prototype.N = function() {
        Ub.Y.N.call(this);
        Xb(this);
    };
    Ub.prototype.handleEvent = function() {
        throw Error("EventHandler.handleEvent not implemented");
    };
    function Yb() {
        this.g = true;
    }
    Yb.prototype.Ca = function() {
        this.g = false;
    };
    function Zb(a, b, c, d, e, f) {
        a.info(function() {
            if (a.g) {
                if (f) {
                    var k = "";
                    for(var l = f.split("&"), h = 0; h < l.length; h++){
                        var m = l[h].split("=");
                        if (1 < m.length) {
                            var p = m[0];
                            m = m[1];
                            var t = p.split("_");
                            k = 2 <= t.length && "type" == t[1] ? k + (p + "=" + m + "&") : k + (p + "=redacted&");
                        }
                    }
                } else k = null;
            } else k = f;
            return "XMLHTTP REQ (" + d + ") [attempt " + e + "]: " + b + "\n" + c + "\n" + k;
        });
    }
    function $b(a, b, c, d, e, f, k) {
        a.info(function() {
            return "XMLHTTP RESP (" + d + ") [ attempt " + e + "]: " + b + "\n" + c + "\n" + f + " " + k;
        });
    }
    function K(a, b, c, d) {
        a.info(function() {
            return "XMLHTTP TEXT (" + b + "): " + ac(a, c) + (d ? " " + d : "");
        });
    }
    function bc(a, b) {
        a.info(function() {
            return "TIMEOUT: " + b;
        });
    }
    Yb.prototype.info = function() {
    };
    function ac(a, b) {
        if (!a.g) return b;
        if (!b) return null;
        try {
            var c = JSON.parse(b);
            if (c) for(a = 0; a < c.length; a++)if (Array.isArray(c[a])) {
                var d = c[a];
                if (!(2 > d.length)) {
                    var e = d[1];
                    if (Array.isArray(e) && !(1 > e.length)) {
                        var f = e[0];
                        if ("noop" != f && "stop" != f && "close" != f) for(var k = 1; k < e.length; k++)e[k] = "";
                    }
                }
            }
            return Cb(c);
        } catch (l) {
            return b;
        }
    }
    var L = {
    }, cc = null;
    function dc() {
        return cc = cc || new G;
    }
    L.Oa = "serverreachability";
    function ec(a) {
        D.call(this, L.Oa, a);
    }
    y(ec, D);
    function fc(a) {
        var b = dc();
        H(b, new ec(b, a));
    }
    L.STAT_EVENT = "statevent";
    function gc(a, b) {
        D.call(this, L.STAT_EVENT, a);
        this.stat = b;
    }
    y(gc, D);
    function M(a) {
        var b = dc();
        H(b, new gc(b, a));
    }
    L.Pa = "timingevent";
    function hc(a, b) {
        D.call(this, L.Pa, a);
        this.size = b;
    }
    y(hc, D);
    function ic(a, b) {
        if ("function" !== typeof a) throw Error("Fn must not be null and must be a function");
        return v.setTimeout(function() {
            a();
        }, b);
    }
    var jc = {
        NO_ERROR: 0,
        nb: 1,
        Ab: 2,
        zb: 3,
        ub: 4,
        yb: 5,
        Bb: 6,
        La: 7,
        TIMEOUT: 8,
        Eb: 9
    };
    var kc = {
        sb: "complete",
        Ob: "success",
        Ma: "error",
        La: "abort",
        Gb: "ready",
        Hb: "readystatechange",
        TIMEOUT: "timeout",
        Cb: "incrementaldata",
        Fb: "progress",
        vb: "downloadprogress",
        Wb: "uploadprogress"
    };
    function lc() {
    }
    lc.prototype.h = null;
    function mc(a) {
        return a.h || (a.h = a.i());
    }
    function nc() {
    }
    var oc = {
        OPEN: "a",
        rb: "b",
        Ma: "c",
        Db: "d"
    };
    function pc() {
        D.call(this, "d");
    }
    y(pc, D);
    function qc() {
        D.call(this, "c");
    }
    y(qc, D);
    var rc;
    function sc() {
    }
    y(sc, lc);
    sc.prototype.g = function() {
        return new XMLHttpRequest;
    };
    sc.prototype.i = function() {
        return {
        };
    };
    rc = new sc;
    function tc(a, b, c, d) {
        this.l = a;
        this.j = b;
        this.m = c;
        this.$ = d || 1;
        this.X = new Ub(this);
        this.R = uc;
        a = Ua ? 125 : void 0;
        this.Z = new Pb(a);
        this.H = null;
        this.i = false;
        this.s = this.A = this.v = this.L = this.F = this.aa = this.B = null;
        this.D = [];
        this.g = null;
        this.C = 0;
        this.o = this.u = null;
        this.O = -1;
        this.J = false;
        this.P = 0;
        this.M = null;
        this.ca = this.K = this.ba = this.W = false;
        this.h = new vc;
    }
    function vc() {
        this.i = null;
        this.g = "";
        this.h = false;
    }
    var uc = 45000, wc = {
    }, xc = {
    };
    n = tc.prototype;
    n.setTimeout = function(a) {
        this.R = a;
    };
    function yc(a, b, c) {
        a.L = 1;
        a.v = zc(N(b));
        a.s = c;
        a.W = true;
        Ac(a, null);
    }
    function Ac(a, b) {
        a.F = Date.now();
        Bc(a);
        a.A = N(a.v);
        var c = a.A, d = a.$;
        Array.isArray(d) || (d = [
            String(d)
        ]);
        Cc(c.h, "t", d);
        a.C = 0;
        c = a.l.H;
        a.h = new vc;
        a.g = Dc(a.l, c ? b : null, !a.s);
        0 < a.P && (a.M = new I(x(a.Ka, a, a.g), a.P));
        Wb(a.X, a.g, "readystatechange", a.ib);
        b = a.H ? Ma(a.H) : {
        };
        a.s ? (a.u || (a.u = "POST"), b["Content-Type"] = "application/x-www-form-urlencoded", a.g.ga(a.A, a.u, a.s, b)) : (a.u = "GET", a.g.ga(a.A, a.u, null, b));
        fc(1);
        Zb(a.j, a.u, a.A, a.m, a.$, a.s);
    }
    n.ib = function(a) {
        a = a.target;
        var b = this.M;
        b && 3 == O(a) ? b.l() : this.Ka(a);
    };
    n.Ka = function(a) {
        try {
            if (a == this.g) a: {
                var b = O(this.g), c = this.g.Fa(), d = this.g.da();
                if (!(3 > b) && (3 != b || Ua || this.g && (this.h.h || this.g.ia() || Ec(this.g)))) {
                    this.J || 4 != b || 7 == c || (8 == c || 0 >= d ? fc(3) : fc(2));
                    Fc(this);
                    var e = this.g.da();
                    this.O = e;
                    b: if (Gc(this)) {
                        var f = Ec(this.g);
                        a = "";
                        var k = f.length, l = 4 == O(this.g);
                        if (!this.h.i) {
                            if ("undefined" === typeof TextDecoder) {
                                P(this);
                                Hc(this);
                                var h = "";
                                break b;
                            }
                            this.h.i = new v.TextDecoder;
                        }
                        for(c = 0; c < k; c++)this.h.h = true, a += this.h.i.decode(f[c], {
                            stream: l && c == k - 1
                        });
                        f.splice(0, k);
                        this.h.g += a;
                        this.C = 0;
                        h = this.h.g;
                    } else h = this.g.ia();
                    this.i = 200 == e;
                    $b(this.j, this.u, this.A, this.m, this.$, b, e);
                    if (this.i) {
                        if (this.ba && !this.K) {
                            b: {
                                if (this.g) {
                                    var m, p = this.g;
                                    if ((m = p.g ? p.g.getResponseHeader("X-HTTP-Initial-Response") : null) && !Da(m)) {
                                        var t = m;
                                        break b;
                                    }
                                }
                                t = null;
                            }
                            if (e = t) K(this.j, this.m, e, "Initial handshake response via X-HTTP-Initial-Response"), this.K = true, Ic(this, e);
                            else {
                                this.i = false;
                                this.o = 3;
                                M(12);
                                P(this);
                                Hc(this);
                                break a;
                            }
                        }
                        this.W ? (Jc(this, b, h), Ua && this.i && 3 == b && (Wb(this.X, this.Z, "tick", this.hb), this.Z.start())) : (K(this.j, this.m, h, null), Ic(this, h));
                        4 == b && P(this);
                        this.i && !this.J && (4 == b ? Kc(this.l, this) : (this.i = false, Bc(this)));
                    } else 400 == e && 0 < h.indexOf("Unknown SID") ? (this.o = 3, M(12)) : (this.o = 0, M(13)), P(this), Hc(this);
                }
            }
        } catch (Ga) {
        } finally{
        }
    };
    function Gc(a) {
        return a.g ? "GET" == a.u && 2 != a.L && a.l.Da : false;
    }
    function Jc(a, b, c) {
        for(var d = true, e; !a.J && a.C < c.length;)if (e = Lc(a, c), e == xc) {
            4 == b && (a.o = 4, M(14), d = false);
            K(a.j, a.m, null, "[Incomplete Response]");
            break;
        } else if (e == wc) {
            a.o = 4;
            M(15);
            K(a.j, a.m, c, "[Invalid Chunk]");
            d = false;
            break;
        } else K(a.j, a.m, e, null), Ic(a, e);
        Gc(a) && e != xc && e != wc && (a.h.g = "", a.C = 0);
        4 != b || 0 != c.length || a.h.h || (a.o = 1, M(16), d = false);
        a.i = a.i && d;
        d ? 0 < c.length && !a.ca && (a.ca = true, b = a.l, b.g == a && b.ba && !b.M && (b.h.info("Great, no buffering proxy detected. Bytes received: " + c.length), Nc(b), b.M = true, M(11))) : (K(a.j, a.m, c, "[Invalid Chunked Response]"), P(a), Hc(a));
    }
    n.hb = function() {
        if (this.g) {
            var a = O(this.g), b = this.g.ia();
            this.C < b.length && (Fc(this), Jc(this, a, b), this.i && 4 != a && Bc(this));
        }
    };
    function Lc(a, b) {
        var c = a.C, d = b.indexOf("\n", c);
        if (-1 == d) return xc;
        c = Number(b.substring(c, d));
        if (isNaN(c)) return wc;
        d += 1;
        if (d + c > b.length) return xc;
        b = b.substr(d, c);
        a.C = d + c;
        return b;
    }
    n.cancel = function() {
        this.J = true;
        P(this);
    };
    function Bc(a) {
        a.aa = Date.now() + a.R;
        Oc(a, a.R);
    }
    function Oc(a, b) {
        if (null != a.B) throw Error("WatchDog timer not null");
        a.B = ic(x(a.gb, a), b);
    }
    function Fc(a) {
        a.B && (v.clearTimeout(a.B), a.B = null);
    }
    n.gb = function() {
        this.B = null;
        var a = Date.now();
        0 <= a - this.aa ? (bc(this.j, this.A), 2 != this.L && (fc(3), M(17)), P(this), this.o = 2, Hc(this)) : Oc(this, this.aa - a);
    };
    function Hc(a) {
        0 == a.l.G || a.J || Kc(a.l, a);
    }
    function P(a) {
        Fc(a);
        var b = a.M;
        b && "function" == typeof b.pa && b.pa();
        a.M = null;
        Qb(a.Z);
        Xb(a.X);
        a.g && (b = a.g, a.g = null, b.abort(), b.pa());
    }
    function Ic(a, b) {
        try {
            var c = a.l;
            if (0 != c.G && (c.g == a || Pc(c.i, a))) {
                if (c.J = a.O, !a.K && Pc(c.i, a) && 3 == c.G) {
                    try {
                        var d = c.Ea.g.parse(b);
                    } catch (Mc) {
                        d = null;
                    }
                    if (Array.isArray(d) && 3 == d.length) {
                        var e = d;
                        if (0 == e[0]) a: if (!c.u) {
                            if (c.g) {
                                if (c.g.F + 3000 < a.F) Rc(c), Sc(c);
                                else break a;
                            }
                            Tc(c);
                            M(18);
                        }
                        else c.va = e[1], 0 < c.va - c.W && 37500 > e[2] && c.O && 0 == c.A && !c.v && (c.v = ic(x(c.cb, c), 6000));
                        if (1 >= Uc(c.i) && c.ma) {
                            try {
                                c.ma();
                            } catch (Mc) {
                            }
                            c.ma = void 0;
                        }
                    } else Q(c, 11);
                } else if ((a.K || c.g == a) && Rc(c), !Da(b)) for(e = c.Ea.g.parse(b), b = 0; b < e.length; b++){
                    var f = e[b];
                    c.W = f[0];
                    f = f[1];
                    if (2 == c.G) {
                        if ("c" == f[0]) {
                            c.K = f[1];
                            c.na = f[2];
                            var k = f[3];
                            null != k && (c.oa = k, c.h.info("VER=" + c.oa));
                            var l = f[4];
                            null != l && (c.Ba = l, c.h.info("SVER=" + c.Ba));
                            var h = f[5];
                            null != h && "number" === typeof h && 0 < h && (d = 1.5 * h, c.L = d, c.h.info("backChannelRequestTimeoutMs_=" + d));
                            d = c;
                            var m = a.g;
                            if (m) {
                                var p = m.g ? m.g.getResponseHeader("X-Client-Wire-Protocol") : null;
                                if (p) {
                                    var t = d.i;
                                    !t.g && (A(p, "spdy") || A(p, "quic") || A(p, "h2")) && (t.j = t.l, t.g = new Set, t.h && (Vc(t, t.h), t.h = null));
                                }
                                if (d.D) {
                                    var Ga = m.g ? m.g.getResponseHeader("X-HTTP-Session-Id") : null;
                                    Ga && (d.ua = Ga, R(d.F, d.D, Ga));
                                }
                            }
                            c.G = 3;
                            c.j && c.j.za();
                            c.ba && (c.P = Date.now() - a.F, c.h.info("Handshake RTT: " + c.P + "ms"));
                            d = c;
                            var Ja = a;
                            d.qa = Wc(d, d.H ? d.na : null, d.Z);
                            if (Ja.K) {
                                Xc(d.i, Ja);
                                var Ka = Ja, Qc = d.L;
                                Qc && Ka.setTimeout(Qc);
                                Ka.B && (Fc(Ka), Bc(Ka));
                                d.g = Ja;
                            } else Yc(d);
                            0 < c.l.length && Zc(c);
                        } else "stop" != f[0] && "close" != f[0] || Q(c, 7);
                    } else 3 == c.G && ("stop" == f[0] || "close" == f[0] ? "stop" == f[0] ? Q(c, 7) : $c(c) : "noop" != f[0] && c.j && c.j.ya(f), c.A = 0);
                }
            }
            fc(4);
        } catch (Mc) {
        }
    }
    function ad(a) {
        if (a.S && "function" == typeof a.S) return a.S();
        if ("string" === typeof a) return a.split("");
        if (oa(a)) {
            for(var b = [], c = a.length, d = 0; d < c; d++)b.push(a[d]);
            return b;
        }
        b = [];
        c = 0;
        for(d in a)b[c++] = a[d];
        return b;
    }
    function bd(a, b) {
        if (a.forEach && "function" == typeof a.forEach) a.forEach(b, void 0);
        else if (oa(a) || "string" === typeof a) ya(a, b, void 0);
        else {
            if (a.U && "function" == typeof a.U) var c = a.U();
            else if (a.S && "function" == typeof a.S) c = void 0;
            else if (oa(a) || "string" === typeof a) {
                c = [];
                for(var d = a.length, e = 0; e < d; e++)c.push(e);
            } else for(e in c = [], d = 0, a)c[d++] = e;
            d = ad(a);
            e = d.length;
            for(var f = 0; f < e; f++)b.call(void 0, d[f], c && c[f], a);
        }
    }
    function S(a, b) {
        this.h = {
        };
        this.g = [];
        this.i = 0;
        var c = arguments.length;
        if (1 < c) {
            if (c % 2) throw Error("Uneven number of arguments");
            for(var d = 0; d < c; d += 2)this.set(arguments[d], arguments[d + 1]);
        } else if (a) {
            if (a instanceof S) for(c = a.U(), d = 0; d < c.length; d++)this.set(c[d], a.get(c[d]));
            else for(d in a)this.set(d, a[d]);
        }
    }
    n = S.prototype;
    n.S = function() {
        cd(this);
        for(var a = [], b = 0; b < this.g.length; b++)a.push(this.h[this.g[b]]);
        return a;
    };
    n.U = function() {
        cd(this);
        return this.g.concat();
    };
    function cd(a) {
        if (a.i != a.g.length) {
            for(var b = 0, c = 0; b < a.g.length;){
                var d = a.g[b];
                T(a.h, d) && (a.g[c++] = d);
                b++;
            }
            a.g.length = c;
        }
        if (a.i != a.g.length) {
            var e = {
            };
            for(c = b = 0; b < a.g.length;)d = a.g[b], T(e, d) || (a.g[c++] = d, e[d] = 1), b++;
            a.g.length = c;
        }
    }
    n.get = function(a, b) {
        return T(this.h, a) ? this.h[a] : b;
    };
    n.set = function(a, b) {
        T(this.h, a) || (this.i++, this.g.push(a));
        this.h[a] = b;
    };
    n.forEach = function(a, b) {
        for(var c = this.U(), d = 0; d < c.length; d++){
            var e = c[d], f = this.get(e);
            a.call(b, f, e, this);
        }
    };
    function T(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }
    var dd = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;
    function ed(a, b) {
        if (a) {
            a = a.split("&");
            for(var c = 0; c < a.length; c++){
                var d = a[c].indexOf("="), e = null;
                if (0 <= d) {
                    var f = a[c].substring(0, d);
                    e = a[c].substring(d + 1);
                } else f = a[c];
                b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
            }
        }
    }
    function U(a, b) {
        this.i = this.s = this.j = "";
        this.m = null;
        this.o = this.l = "";
        this.g = false;
        if (a instanceof U) {
            this.g = (void 0) !== b ? b : a.g;
            fd(this, a.j);
            this.s = a.s;
            gd(this, a.i);
            hd(this, a.m);
            this.l = a.l;
            b = a.h;
            var c = new id;
            c.i = b.i;
            b.g && (c.g = new S(b.g), c.h = b.h);
            jd(this, c);
            this.o = a.o;
        } else a && (c = String(a).match(dd)) ? (this.g = !!b, fd(this, c[1] || "", true), this.s = kd(c[2] || ""), gd(this, c[3] || "", true), hd(this, c[4]), this.l = kd(c[5] || "", true), jd(this, c[6] || "", true), this.o = kd(c[7] || "")) : (this.g = !!b, this.h = new id(null, this.g));
    }
    U.prototype.toString = function() {
        var a = [], b = this.j;
        b && a.push(ld(b, md, true), ":");
        var c = this.i;
        if (c || "file" == b) a.push("//"), (b = this.s) && a.push(ld(b, md, true), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.m, null != c && a.push(":", String(c));
        if (c = this.l) this.i && "/" != c.charAt(0) && a.push("/"), a.push(ld(c, "/" == c.charAt(0) ? nd : od, true));
        (c = this.h.toString()) && a.push("?", c);
        (c = this.o) && a.push("#", ld(c, pd));
        return a.join("");
    };
    function N(a) {
        return new U(a);
    }
    function fd(a, b, c) {
        a.j = c ? kd(b, true) : b;
        a.j && (a.j = a.j.replace(/:$/, ""));
    }
    function gd(a, b, c) {
        a.i = c ? kd(b, true) : b;
    }
    function hd(a, b) {
        if (b) {
            b = Number(b);
            if (isNaN(b) || 0 > b) throw Error("Bad port number " + b);
            a.m = b;
        } else a.m = null;
    }
    function jd(a, b, c) {
        b instanceof id ? (a.h = b, qd(a.h, a.g)) : (c || (b = ld(b, rd)), a.h = new id(b, a.g));
    }
    function R(a, b, c) {
        a.h.set(b, c);
    }
    function zc(a) {
        R(a, "zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ Date.now()).toString(36));
        return a;
    }
    function sd(a) {
        return a instanceof U ? N(a) : new U(a, void 0);
    }
    function td(a, b, c, d) {
        var e = new U(null, void 0);
        a && fd(e, a);
        b && gd(e, b);
        c && hd(e, c);
        d && (e.l = d);
        return e;
    }
    function kd(a, b) {
        return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
    }
    function ld(a, b, c) {
        return "string" === typeof a ? (a = encodeURI(a).replace(b, ud), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
    }
    function ud(a) {
        a = a.charCodeAt(0);
        return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
    }
    var md = /[#\/\?@]/g, od = /[#\?:]/g, nd = /[#\?]/g, rd = /[#\?@]/g, pd = /#/g;
    function id(a, b) {
        this.h = this.g = null;
        this.i = a || null;
        this.j = !!b;
    }
    function V(a) {
        a.g || (a.g = new S, a.h = 0, a.i && ed(a.i, function(b, c) {
            a.add(decodeURIComponent(b.replace(/\+/g, " ")), c);
        }));
    }
    n = id.prototype;
    n.add = function(a, b) {
        V(this);
        this.i = null;
        a = W(this, a);
        var c = this.g.get(a);
        c || this.g.set(a, c = []);
        c.push(b);
        this.h += 1;
        return this;
    };
    function vd(a, b) {
        V(a);
        b = W(a, b);
        T(a.g.h, b) && (a.i = null, a.h -= a.g.get(b).length, a = a.g, T(a.h, b) && (delete a.h[b], a.i--, a.g.length > 2 * a.i && cd(a)));
    }
    function wd(a, b) {
        V(a);
        b = W(a, b);
        return T(a.g.h, b);
    }
    n.forEach = function(a, b) {
        V(this);
        this.g.forEach(function(c, d) {
            ya(c, function(e) {
                a.call(b, e, d, this);
            }, this);
        }, this);
    };
    n.U = function() {
        V(this);
        for(var a = this.g.S(), b = this.g.U(), c = [], d = 0; d < b.length; d++)for(var e = a[d], f = 0; f < e.length; f++)c.push(b[d]);
        return c;
    };
    n.S = function(a) {
        V(this);
        var b = [];
        if ("string" === typeof a) wd(this, a) && (b = Ba(b, this.g.get(W(this, a))));
        else {
            a = this.g.S();
            for(var c = 0; c < a.length; c++)b = Ba(b, a[c]);
        }
        return b;
    };
    n.set = function(a, b) {
        V(this);
        this.i = null;
        a = W(this, a);
        wd(this, a) && (this.h -= this.g.get(a).length);
        this.g.set(a, [
            b
        ]);
        this.h += 1;
        return this;
    };
    n.get = function(a, b) {
        if (!a) return b;
        a = this.S(a);
        return 0 < a.length ? String(a[0]) : b;
    };
    function Cc(a, b, c) {
        vd(a, b);
        0 < c.length && (a.i = null, a.g.set(W(a, b), Ca(c)), a.h += c.length);
    }
    n.toString = function() {
        if (this.i) return this.i;
        if (!this.g) return "";
        for(var a = [], b = this.g.U(), c = 0; c < b.length; c++){
            var d = b[c], e = encodeURIComponent(String(d));
            d = this.S(d);
            for(var f = 0; f < d.length; f++){
                var k = e;
                "" !== d[f] && (k += "=" + encodeURIComponent(String(d[f])));
                a.push(k);
            }
        }
        return this.i = a.join("&");
    };
    function W(a, b) {
        b = String(b);
        a.j && (b = b.toLowerCase());
        return b;
    }
    function qd(a, b) {
        b && !a.j && (V(a), a.i = null, a.g.forEach(function(c, d) {
            var e = d.toLowerCase();
            d != e && (vd(this, d), Cc(this, e, c));
        }, a));
        a.j = b;
    }
    function xd(a, b) {
        this.h = a;
        this.g = b;
    }
    function yd(a) {
        this.l = a || zd;
        v.PerformanceNavigationTiming ? (a = v.performance.getEntriesByType("navigation"), a = 0 < a.length && ("hq" == a[0].nextHopProtocol || "h2" == a[0].nextHopProtocol)) : a = !!(v.g && v.g.Ga && v.g.Ga() && v.g.Ga().ac);
        this.j = a ? this.l : 1;
        this.g = null;
        1 < this.j && (this.g = new Set);
        this.h = null;
        this.i = [];
    }
    var zd = 10;
    function Ad(a) {
        return a.h ? true : a.g ? a.g.size >= a.j : false;
    }
    function Uc(a) {
        return a.h ? 1 : a.g ? a.g.size : 0;
    }
    function Pc(a, b) {
        return a.h ? a.h == b : a.g ? a.g.has(b) : false;
    }
    function Vc(a, b) {
        a.g ? a.g.add(b) : a.h = b;
    }
    function Xc(a, b) {
        a.h && a.h == b ? a.h = null : a.g && a.g.has(b) && a.g.delete(b);
    }
    yd.prototype.cancel = function() {
        this.i = Bd(this);
        if (this.h) this.h.cancel(), this.h = null;
        else if (this.g && 0 !== this.g.size) {
            for(var a = q(this.g.values()), b = a.next(); !b.done; b = a.next())b.value.cancel();
            this.g.clear();
        }
    };
    function Bd(a) {
        if (null != a.h) return a.i.concat(a.h.D);
        if (null != a.g && 0 !== a.g.size) {
            var b = a.i;
            a = q(a.g.values());
            for(var c = a.next(); !c.done; c = a.next())b = b.concat(c.value.D);
            return b;
        }
        return Ca(a.i);
    }
    function Cd() {
    }
    Cd.prototype.stringify = function(a) {
        return v.JSON.stringify(a, void 0);
    };
    Cd.prototype.parse = function(a) {
        return v.JSON.parse(a, void 0);
    };
    function Dd() {
        this.g = new Cd;
    }
    function Ed(a, b, c) {
        var d = c || "";
        try {
            bd(a, function(e, f) {
                var k = e;
                w(e) && (k = Cb(e));
                b.push(d + f + "=" + encodeURIComponent(k));
            });
        } catch (e) {
            throw b.push(d + "type=" + encodeURIComponent("_badmap")), e;
        }
    }
    function Fd(a, b) {
        var c = new Yb;
        if (v.Image) {
            var d = new Image;
            d.onload = ua(Gd, c, d, "TestLoadImage: loaded", true, b);
            d.onerror = ua(Gd, c, d, "TestLoadImage: error", false, b);
            d.onabort = ua(Gd, c, d, "TestLoadImage: abort", false, b);
            d.ontimeout = ua(Gd, c, d, "TestLoadImage: timeout", false, b);
            v.setTimeout(function() {
                if (d.ontimeout) d.ontimeout();
            }, 10000);
            d.src = a;
        } else b(false);
    }
    function Gd(a, b, c, d, e) {
        try {
            b.onload = null, b.onerror = null, b.onabort = null, b.ontimeout = null, e(d);
        } catch (f) {
        }
    }
    function Hd(a) {
        this.l = a.bc || null;
        this.j = a.kb || false;
    }
    y(Hd, lc);
    Hd.prototype.g = function() {
        return new Id(this.l, this.j);
    };
    Hd.prototype.i = (function(a) {
        return function() {
            return a;
        };
    })({
    });
    function Id(a, b) {
        G.call(this);
        this.D = a;
        this.u = b;
        this.m = void 0;
        this.readyState = Jd;
        this.status = 0;
        this.responseType = this.responseText = this.response = this.statusText = "";
        this.onreadystatechange = null;
        this.v = new Headers;
        this.h = null;
        this.C = "GET";
        this.B = "";
        this.g = false;
        this.A = this.j = this.l = null;
    }
    y(Id, G);
    var Jd = 0;
    n = Id.prototype;
    n.open = function(a, b) {
        if (this.readyState != Jd) throw this.abort(), Error("Error reopening a connection");
        this.C = a;
        this.B = b;
        this.readyState = 1;
        Kd(this);
    };
    n.send = function(a) {
        if (1 != this.readyState) throw this.abort(), Error("need to call open() first. ");
        this.g = true;
        var b = {
            headers: this.v,
            method: this.C,
            credentials: this.m,
            cache: void 0
        };
        a && (b.body = a);
        (this.D || v).fetch(new Request(this.B, b)).then(this.Xa.bind(this), this.ja.bind(this));
    };
    n.abort = function() {
        this.response = this.responseText = "";
        this.v = new Headers;
        this.status = 0;
        this.j && this.j.cancel("Request was aborted.");
        1 <= this.readyState && this.g && 4 != this.readyState && (this.g = false, Ld(this));
        this.readyState = Jd;
    };
    n.Xa = function(a) {
        if (this.g && (this.l = a, this.h || (this.status = this.l.status, this.statusText = this.l.statusText, this.h = a.headers, this.readyState = 2, Kd(this)), this.g && (this.readyState = 3, Kd(this), this.g))) {
            if ("arraybuffer" === this.responseType) a.arrayBuffer().then(this.Va.bind(this), this.ja.bind(this));
            else if ("undefined" !== typeof v.ReadableStream && "body" in a) {
                this.j = a.body.getReader();
                if (this.u) {
                    if (this.responseType) throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');
                    this.response = [];
                } else this.response = this.responseText = "", this.A = new TextDecoder;
                Md(this);
            } else a.text().then(this.Wa.bind(this), this.ja.bind(this));
        }
    };
    function Md(a) {
        a.j.read().then(a.Ua.bind(a)).catch(a.ja.bind(a));
    }
    n.Ua = function(a) {
        if (this.g) {
            if (this.u && a.value) this.response.push(a.value);
            else if (!this.u) {
                var b = a.value ? a.value : new Uint8Array(0);
                if (b = this.A.decode(b, {
                    stream: !a.done
                })) this.response = this.responseText += b;
            }
            a.done ? Ld(this) : Kd(this);
            3 == this.readyState && Md(this);
        }
    };
    n.Wa = function(a) {
        this.g && (this.response = this.responseText = a, Ld(this));
    };
    n.Va = function(a) {
        this.g && (this.response = a, Ld(this));
    };
    n.ja = function() {
        this.g && Ld(this);
    };
    function Ld(a) {
        a.readyState = 4;
        a.l = null;
        a.j = null;
        a.A = null;
        Kd(a);
    }
    n.setRequestHeader = function(a, b) {
        this.v.append(a, b);
    };
    n.getResponseHeader = function(a) {
        return this.h ? this.h.get(a.toLowerCase()) || "" : "";
    };
    n.getAllResponseHeaders = function() {
        if (!this.h) return "";
        for(var a = [], b = this.h.entries(), c = b.next(); !c.done;)c = c.value, a.push(c[0] + ": " + c[1]), c = b.next();
        return a.join("\r\n");
    };
    function Kd(a) {
        a.onreadystatechange && a.onreadystatechange.call(a);
    }
    Object.defineProperty(Id.prototype, "withCredentials", {
        get: function() {
            return "include" === this.m;
        },
        set: function(a) {
            this.m = a ? "include" : "same-origin";
        }
    });
    var Nd = v.JSON.parse;
    function X(a) {
        G.call(this);
        this.headers = new S;
        this.u = a || null;
        this.h = false;
        this.C = this.g = null;
        this.H = "";
        this.m = 0;
        this.j = "";
        this.l = this.F = this.v = this.D = false;
        this.B = 0;
        this.A = null;
        this.K = Od;
        this.L = this.M = false;
    }
    y(X, G);
    var Od = "", Pd = /^https?$/i, Qd = [
        "POST",
        "PUT"
    ];
    n = X.prototype;
    n.ga = function(a, b, c, d) {
        if (this.g) throw Error("[goog.net.XhrIo] Object is active with another request=" + this.H + "; newUri=" + a);
        b = b ? b.toUpperCase() : "GET";
        this.H = a;
        this.j = "";
        this.m = 0;
        this.D = false;
        this.h = true;
        this.g = this.u ? this.u.g() : rc.g();
        this.C = this.u ? mc(this.u) : mc(rc);
        this.g.onreadystatechange = x(this.Ha, this);
        try {
            this.F = true, this.g.open(b, String(a), true), this.F = false;
        } catch (f) {
            Rd(this, f);
            return;
        }
        a = c || "";
        var e = new S(this.headers);
        d && bd(d, function(f, k) {
            e.set(k, f);
        });
        d = za(e.U());
        c = v.FormData && a instanceof v.FormData;
        !(0 <= xa(Qd, b)) || d || c || e.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
        e.forEach(function(f, k) {
            this.g.setRequestHeader(k, f);
        }, this);
        this.K && (this.g.responseType = this.K);
        "withCredentials" in this.g && this.g.withCredentials !== this.M && (this.g.withCredentials = this.M);
        try {
            Sd(this), 0 < this.B && ((this.L = Td(this.g)) ? (this.g.timeout = this.B, this.g.ontimeout = x(this.ra, this)) : this.A = Rb(this.ra, this.B, this)), this.v = true, this.g.send(a), this.v = false;
        } catch (f) {
            Rd(this, f);
        }
    };
    function Td(a) {
        return C && bb() && "number" === typeof a.timeout && (void 0) !== a.ontimeout;
    }
    function Aa(a) {
        return "content-type" == a.toLowerCase();
    }
    n.ra = function() {
        "undefined" != typeof goog && this.g && (this.j = "Timed out after " + this.B + "ms, aborting", this.m = 8, H(this, "timeout"), this.abort(8));
    };
    function Rd(a, b) {
        a.h = false;
        a.g && (a.l = true, a.g.abort(), a.l = false);
        a.j = b;
        a.m = 5;
        Ud(a);
        Vd(a);
    }
    function Ud(a) {
        a.D || (a.D = true, H(a, "complete"), H(a, "error"));
    }
    n.abort = function(a) {
        this.g && this.h && (this.h = false, this.l = true, this.g.abort(), this.l = false, this.m = a || 7, H(this, "complete"), H(this, "abort"), Vd(this));
    };
    n.N = function() {
        this.g && (this.h && (this.h = false, this.l = true, this.g.abort(), this.l = false), Vd(this, true));
        X.Y.N.call(this);
    };
    n.Ha = function() {
        this.s || (this.F || this.v || this.l ? Wd(this) : this.fb());
    };
    n.fb = function() {
        Wd(this);
    };
    function Wd(a) {
        if (a.h && "undefined" != typeof goog && (!a.C[1] || 4 != O(a) || 2 != a.da())) {
            if (a.v && 4 == O(a)) Rb(a.Ha, 0, a);
            else if (H(a, "readystatechange"), 4 == O(a)) {
                a.h = false;
                try {
                    var b = a.da();
                    a: switch(b){
                        case 200:
                        case 201:
                        case 202:
                        case 204:
                        case 206:
                        case 304:
                        case 1223:
                            var c = true;
                            break a;
                        default:
                            c = false;
                    }
                    var d;
                    if (!(d = c)) {
                        var e;
                        if (e = 0 === b) {
                            var f = String(a.H).match(dd)[1] || null;
                            if (!f && v.self && v.self.location) {
                                var k = v.self.location.protocol;
                                f = k.substr(0, k.length - 1);
                            }
                            e = !Pd.test(f ? f.toLowerCase() : "");
                        }
                        d = e;
                    }
                    if (d) H(a, "complete"), H(a, "success");
                    else {
                        a.m = 6;
                        try {
                            var l = 2 < O(a) ? a.g.statusText : "";
                        } catch (h) {
                            l = "";
                        }
                        a.j = l + " [" + a.da() + "]";
                        Ud(a);
                    }
                } finally{
                    Vd(a);
                }
            }
        }
    }
    function Vd(a, b) {
        if (a.g) {
            Sd(a);
            var c = a.g, d = a.C[0] ? na : null;
            a.g = null;
            a.C = null;
            b || H(a, "ready");
            try {
                c.onreadystatechange = d;
            } catch (e) {
            }
        }
    }
    function Sd(a) {
        a.g && a.L && (a.g.ontimeout = null);
        a.A && (v.clearTimeout(a.A), a.A = null);
    }
    function O(a) {
        return a.g ? a.g.readyState : 0;
    }
    n.da = function() {
        try {
            return 2 < O(this) ? this.g.status : -1;
        } catch (a) {
            return -1;
        }
    };
    n.ia = function() {
        try {
            return this.g ? this.g.responseText : "";
        } catch (a) {
            return "";
        }
    };
    n.Sa = function(a) {
        if (this.g) {
            var b = this.g.responseText;
            a && 0 == b.indexOf(a) && (b = b.substring(a.length));
            return Nd(b);
        }
    };
    function Ec(a) {
        try {
            if (!a.g) return null;
            if ("response" in a.g) return a.g.response;
            switch(a.K){
                case Od:
                case "text":
                    return a.g.responseText;
                case "arraybuffer":
                    if ("mozResponseArrayBuffer" in a.g) return a.g.mozResponseArrayBuffer;
            }
            return null;
        } catch (b) {
            return null;
        }
    }
    n.Fa = function() {
        return this.m;
    };
    n.Na = function() {
        return "string" === typeof this.j ? this.j : String(this.j);
    };
    function Xd(a) {
        var b = "";
        La(a, function(c, d) {
            b += d;
            b += ":";
            b += c;
            b += "\r\n";
        });
        return b;
    }
    function Yd(a, b, c) {
        a: {
            for(d in c){
                var d = false;
                break a;
            }
            d = true;
        }
        d || (c = Xd(c), "string" === typeof a ? (encodeURIComponent(String(b)), null != c && encodeURIComponent(String(c))) : R(a, b, c));
    }
    function Zd(a, b, c) {
        return c && c.internalChannelParams ? c.internalChannelParams[a] || b : b;
    }
    function $d(a) {
        this.Ba = 0;
        this.l = [];
        this.h = new Yb;
        this.na = this.qa = this.F = this.Z = this.g = this.ua = this.D = this.ca = this.o = this.R = this.s = null;
        this.ab = this.X = 0;
        this.Za = Zd("failFast", false, a);
        this.O = this.v = this.u = this.m = this.j = null;
        this.$ = true;
        this.J = this.va = this.W = -1;
        this.aa = this.A = this.C = 0;
        this.Ra = Zd("baseRetryDelayMs", 5000, a);
        this.bb = Zd("retryDelaySeedMs", 10000, a);
        this.$a = Zd("forwardChannelMaxRetries", 2, a);
        this.ta = Zd("forwardChannelRequestTimeoutMs", 20000, a);
        this.sa = a && a.xmlHttpFactory || void 0;
        this.Da = a && a.$b || false;
        this.L = void 0;
        this.H = a && a.supportsCrossDomainXhr || false;
        this.K = "";
        this.i = new yd(a && a.concurrentRequestLimit);
        this.Ea = new Dd;
        this.la = a && a.fastHandshake || false;
        this.Ta = a && a.Yb || false;
        a && a.Ca && this.h.Ca();
        a && a.forceLongPolling && (this.$ = false);
        this.ba = !this.la && this.$ && a && a.detectBufferingProxy || false;
        this.ma = void 0;
        this.P = 0;
        this.M = false;
        this.B = null;
        this.Ya = !a || false !== a.Zb;
    }
    n = $d.prototype;
    n.oa = 8;
    n.G = 1;
    function $c(a) {
        ae(a);
        if (3 == a.G) {
            var b = a.X++, c = N(a.F);
            R(c, "SID", a.K);
            R(c, "RID", b);
            R(c, "TYPE", "terminate");
            be(a, c);
            b = new tc(a, a.h, b, void 0);
            b.L = 2;
            b.v = zc(N(c));
            c = false;
            v.navigator && v.navigator.sendBeacon && (c = v.navigator.sendBeacon(b.v.toString(), ""));
            !c && v.Image && ((new Image).src = b.v, c = true);
            c || (b.g = Dc(b.l, null), b.g.ga(b.v));
            b.F = Date.now();
            Bc(b);
        }
        ce(a);
    }
    n.jb = function(a) {
        try {
            this.h.info("Origin Trials invoked: " + a);
        } catch (b) {
        }
    };
    function Sc(a) {
        a.g && (Nc(a), a.g.cancel(), a.g = null);
    }
    function ae(a) {
        Sc(a);
        a.u && (v.clearTimeout(a.u), a.u = null);
        Rc(a);
        a.i.cancel();
        a.m && ("number" === typeof a.m && v.clearTimeout(a.m), a.m = null);
    }
    function de(a, b) {
        a.l.push(new xd(a.ab++, b));
        3 == a.G && Zc(a);
    }
    function Zc(a) {
        Ad(a.i) || a.m || (a.m = true, Kb(a.Ja, a), a.C = 0);
    }
    function ee(a, b) {
        if (Uc(a.i) >= a.i.j - (a.m ? 1 : 0)) return false;
        if (a.m) return a.l = b.D.concat(a.l), true;
        if (1 == a.G || 2 == a.G || a.C >= (a.Za ? 0 : a.$a)) return false;
        a.m = ic(x(a.Ja, a, b), fe(a, a.C));
        a.C++;
        return true;
    }
    n.Ja = function(a) {
        if (this.m) {
            if (this.m = null, 1 == this.G) {
                if (!a) {
                    this.X = Math.floor(100000 * Math.random());
                    a = this.X++;
                    var b = new tc(this, this.h, a, void 0), c = this.s;
                    this.R && (c ? (c = Ma(c), Oa(c, this.R)) : c = this.R);
                    null === this.o && (b.H = c);
                    var d;
                    if (this.la) a: {
                        for(var e = d = 0; e < this.l.length; e++){
                            b: {
                                var f = this.l[e];
                                if ("__data__" in f.g && (f = f.g.__data__, "string" === typeof f)) {
                                    f = f.length;
                                    break b;
                                }
                                f = void 0;
                            }
                            if ((void 0) === f) break;
                            d += f;
                            if (4096 < d) {
                                d = e;
                                break a;
                            }
                            if (4096 === d || e === this.l.length - 1) {
                                d = e + 1;
                                break a;
                            }
                        }
                        d = 1000;
                    }
                    else d = 1000;
                    d = ge(this, b, d);
                    e = N(this.F);
                    R(e, "RID", a);
                    R(e, "CVER", 22);
                    this.D && R(e, "X-HTTP-Session-Id", this.D);
                    be(this, e);
                    this.o && c && Yd(e, this.o, c);
                    Vc(this.i, b);
                    this.Ta && R(e, "TYPE", "init");
                    this.la ? (R(e, "$req", d), R(e, "SID", "null"), b.ba = true, yc(b, e, null)) : yc(b, e, d);
                    this.G = 2;
                }
            } else 3 == this.G && (a ? he(this, a) : 0 == this.l.length || Ad(this.i) || he(this));
        }
    };
    function he(a, b) {
        var c;
        b ? c = b.m : c = a.X++;
        var d = N(a.F);
        R(d, "SID", a.K);
        R(d, "RID", c);
        R(d, "AID", a.W);
        be(a, d);
        a.o && a.s && Yd(d, a.o, a.s);
        c = new tc(a, a.h, c, a.C + 1);
        null === a.o && (c.H = a.s);
        b && (a.l = b.D.concat(a.l));
        b = ge(a, c, 1000);
        c.setTimeout(Math.round(0.5 * a.ta) + Math.round(0.5 * a.ta * Math.random()));
        Vc(a.i, c);
        yc(c, d, b);
    }
    function be(a, b) {
        a.j && bd({
        }, function(c, d) {
            R(b, d, c);
        });
    }
    function ge(a, b, c) {
        c = Math.min(a.l.length, c);
        var d = a.j ? x(a.j.Qa, a.j, a) : null;
        a: for(var e = a.l, f = -1;;){
            var k = [
                "count=" + c
            ];
            -1 == f ? 0 < c ? (f = e[0].h, k.push("ofs=" + f)) : f = 0 : k.push("ofs=" + f);
            for(var l = true, h = 0; h < c; h++){
                var m = e[h].h, p = e[h].g;
                m -= f;
                if (0 > m) f = Math.max(0, e[h].h - 100), l = false;
                else try {
                    Ed(p, k, "req" + m + "_");
                } catch (t) {
                    d && d(p);
                }
            }
            if (l) {
                d = k.join("&");
                break a;
            }
        }
        a = a.l.splice(0, c);
        b.D = a;
        return d;
    }
    function Yc(a) {
        a.g || a.u || (a.aa = 1, Kb(a.Ia, a), a.A = 0);
    }
    function Tc(a) {
        if (a.g || a.u || 3 <= a.A) return false;
        a.aa++;
        a.u = ic(x(a.Ia, a), fe(a, a.A));
        a.A++;
        return true;
    }
    n.Ia = function() {
        this.u = null;
        ie(this);
        if (this.ba && !(this.M || null == this.g || 0 >= this.P)) {
            var a = 2 * this.P;
            this.h.info("BP detection timer enabled: " + a);
            this.B = ic(x(this.eb, this), a);
        }
    };
    n.eb = function() {
        this.B && (this.B = null, this.h.info("BP detection timeout reached."), this.h.info("Buffering proxy detected and switch to long-polling!"), this.O = false, this.M = true, M(10), Sc(this), ie(this));
    };
    function Nc(a) {
        null != a.B && (v.clearTimeout(a.B), a.B = null);
    }
    function ie(a) {
        a.g = new tc(a, a.h, "rpc", a.aa);
        null === a.o && (a.g.H = a.s);
        a.g.P = 0;
        var b = N(a.qa);
        R(b, "RID", "rpc");
        R(b, "SID", a.K);
        R(b, "CI", a.O ? "0" : "1");
        R(b, "AID", a.W);
        be(a, b);
        R(b, "TYPE", "xmlhttp");
        a.o && a.s && Yd(b, a.o, a.s);
        a.L && a.g.setTimeout(a.L);
        var c = a.g;
        a = a.na;
        c.L = 1;
        c.v = zc(N(b));
        c.s = null;
        c.W = true;
        Ac(c, a);
    }
    n.cb = function() {
        null != this.v && (this.v = null, Sc(this), Tc(this), M(19));
    };
    function Rc(a) {
        null != a.v && (v.clearTimeout(a.v), a.v = null);
    }
    function Kc(a, b) {
        var c = null;
        if (a.g == b) {
            Rc(a);
            Nc(a);
            a.g = null;
            var d = 2;
        } else if (Pc(a.i, b)) c = b.D, Xc(a.i, b), d = 1;
        else return;
        a.J = b.O;
        if (0 != a.G) {
            if (b.i) {
                if (1 == d) {
                    c = b.s ? b.s.length : 0;
                    b = Date.now() - b.F;
                    var e = a.C;
                    d = dc();
                    H(d, new hc(d, c, b, e));
                    Zc(a);
                } else Yc(a);
            } else if (e = b.o, 3 == e || 0 == e && 0 < a.J || !(1 == d && ee(a, b) || 2 == d && Tc(a))) switch(c && 0 < c.length && (b = a.i, b.i = b.i.concat(c)), e){
                case 1:
                    Q(a, 5);
                    break;
                case 4:
                    Q(a, 10);
                    break;
                case 3:
                    Q(a, 6);
                    break;
                default:
                    Q(a, 2);
            }
        }
    }
    function fe(a, b) {
        var c = a.Ra + Math.floor(Math.random() * a.bb);
        a.j || (c *= 2);
        return c * b;
    }
    function Q(a, b) {
        a.h.info("Error code " + b);
        if (2 == b) {
            var c = null;
            a.j && (c = null);
            var d = x(a.lb, a);
            c || (c = new U("//www.google.com/images/cleardot.gif"), v.location && "http" == v.location.protocol || fd(c, "https"), zc(c));
            Fd(c.toString(), d);
        } else M(2);
        a.G = 0;
        a.j && a.j.xa(b);
        ce(a);
        ae(a);
    }
    n.lb = function(a) {
        a ? (this.h.info("Successfully pinged google.com"), M(2)) : (this.h.info("Failed to ping google.com"), M(1));
    };
    function ce(a) {
        a.G = 0;
        a.J = -1;
        if (a.j) {
            if (0 != Bd(a.i).length || 0 != a.l.length) a.i.i.length = 0, Ca(a.l), a.l.length = 0;
            a.j.wa();
        }
    }
    function Wc(a, b, c) {
        var d = sd(c);
        if ("" != d.i) b && gd(d, b + "." + d.i), hd(d, d.m);
        else {
            var e = v.location;
            d = td(e.protocol, b ? b + "." + e.hostname : e.hostname, +e.port, c);
        }
        a.ca && La(a.ca, function(f, k) {
            R(d, k, f);
        });
        b = a.D;
        c = a.ua;
        b && c && R(d, b, c);
        R(d, "VER", a.oa);
        be(a, d);
        return d;
    }
    function Dc(a, b, c) {
        if (b && !a.H) throw Error("Can't create secondary domain capable XhrIo object.");
        b = c && a.Da && !a.sa ? new X(new Hd({
            kb: true
        })) : new X(a.sa);
        b.M = a.H;
        return b;
    }
    function je() {
    }
    n = je.prototype;
    n.za = function() {
    };
    n.ya = function() {
    };
    n.xa = function() {
    };
    n.wa = function() {
    };
    n.Qa = function() {
    };
    function ke() {
        if (C && !(10 <= Number(eb))) throw Error("Environmental error: no available transport.");
    }
    ke.prototype.g = function(a, b) {
        return new Y(a, b);
    };
    function Y(a, b) {
        G.call(this);
        this.g = new $d(b);
        this.l = a;
        this.h = b && b.messageUrlParams || null;
        a = b && b.messageHeaders || null;
        b && b.clientProtocolHeaderRequired && (a ? a["X-Client-Protocol"] = "webchannel" : a = {
            "X-Client-Protocol": "webchannel"
        });
        this.g.s = a;
        a = b && b.initMessageHeaders || null;
        b && b.messageContentType && (a ? a["X-WebChannel-Content-Type"] = b.messageContentType : a = {
            "X-WebChannel-Content-Type": b.messageContentType
        });
        b && b.Aa && (a ? a["X-WebChannel-Client-Profile"] = b.Aa : a = {
            "X-WebChannel-Client-Profile": b.Aa
        });
        this.g.R = a;
        (a = b && b.httpHeadersOverwriteParam) && !Da(a) && (this.g.o = a);
        this.A = b && b.supportsCrossDomainXhr || false;
        this.v = b && b.sendRawJson || false;
        (b = b && b.httpSessionIdParam) && !Da(b) && (this.g.D = b, a = this.h, null !== a && b in a && (a = this.h, b in a && delete a[b]));
        this.j = new Z(this);
    }
    y(Y, G);
    Y.prototype.m = function() {
        this.g.j = this.j;
        this.A && (this.g.H = true);
        var a = this.g, b = this.l, c = this.h || void 0;
        a.Ya && (a.h.info("Origin Trials enabled."), Kb(x(a.jb, a, b)));
        M(0);
        a.Z = b;
        a.ca = c || {
        };
        a.O = a.$;
        a.F = Wc(a, null, a.Z);
        Zc(a);
    };
    Y.prototype.close = function() {
        $c(this.g);
    };
    Y.prototype.u = function(a) {
        if ("string" === typeof a) {
            var b = {
            };
            b.__data__ = a;
            de(this.g, b);
        } else this.v ? (b = {
        }, b.__data__ = Cb(a), de(this.g, b)) : de(this.g, a);
    };
    Y.prototype.N = function() {
        this.g.j = null;
        delete this.j;
        $c(this.g);
        delete this.g;
        Y.Y.N.call(this);
    };
    function le(a) {
        pc.call(this);
        var b = a.__sm__;
        if (b) {
            a: {
                for(var c in b){
                    a = c;
                    break a;
                }
                a = void 0;
            }
            if (this.i = a) a = this.i, b = null !== b && a in b ? b[a] : void 0;
            this.data = b;
        } else this.data = a;
    }
    y(le, pc);
    function me() {
        qc.call(this);
        this.status = 1;
    }
    y(me, qc);
    function Z(a) {
        this.g = a;
    }
    y(Z, je);
    Z.prototype.za = function() {
        H(this.g, "a");
    };
    Z.prototype.ya = function(a) {
        H(this.g, new le(a));
    };
    Z.prototype.xa = function(a) {
        H(this.g, new me(a));
    };
    Z.prototype.wa = function() {
        H(this.g, "b");
    }; /*

 Copyright 2017 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/ 
    ke.prototype.createWebChannel = ke.prototype.g;
    Y.prototype.send = Y.prototype.u;
    Y.prototype.open = Y.prototype.m;
    Y.prototype.close = Y.prototype.close;
    jc.NO_ERROR = 0;
    jc.TIMEOUT = 8;
    jc.HTTP_ERROR = 6;
    kc.COMPLETE = "complete";
    nc.EventType = oc;
    oc.OPEN = "a";
    oc.CLOSE = "b";
    oc.ERROR = "c";
    oc.MESSAGE = "d";
    G.prototype.listen = G.prototype.O;
    X.prototype.listenOnce = X.prototype.P;
    X.prototype.getLastError = X.prototype.Na;
    X.prototype.getLastErrorCode = X.prototype.Fa;
    X.prototype.getStatus = X.prototype.da;
    X.prototype.getResponseJson = X.prototype.Sa;
    X.prototype.getResponseText = X.prototype.ia;
    X.prototype.send = X.prototype.ga;
    module.exports.createWebChannelTransport = function() {
        return new ke;
    };
    module.exports.getStatEventTarget = function() {
        return dc();
    };
    module.exports.ErrorCode = jc;
    module.exports.EventType = kc;
    module.exports.Event = L;
    module.exports.Stat = {
        tb: 0,
        wb: 1,
        xb: 2,
        Qb: 3,
        Vb: 4,
        Sb: 5,
        Tb: 6,
        Rb: 7,
        Pb: 8,
        Ub: 9,
        PROXY: 10,
        NOPROXY: 11,
        Nb: 12,
        Jb: 13,
        Kb: 14,
        Ib: 15,
        Lb: 16,
        Mb: 17,
        pb: 18,
        ob: 19,
        qb: 20
    };
    module.exports.FetchXmlHttpFactory = Hd;
    module.exports.WebChannel = nc;
    module.exports.XhrIo = X;
}).apply(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {
});

},{}],"5lpAL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "registerBundle", ()=>t
);
var _prebuilt306F43D845D6F0B9Js = require("./prebuilt-306f43d8-45d6f0b9.js");
var _tslib = require("tslib");
var _util = require("@firebase/util");
var _logger = require("@firebase/logger");
var _webchannelWrapper = require("@firebase/webchannel-wrapper");
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Prototype patches bundle loading to Firestore.
 */ function t(o) {
    o.prototype.loadBundle = _prebuilt306F43D845D6F0B9Js.c, o.prototype.namedQuery = _prebuilt306F43D845D6F0B9Js.u;
}
t(_prebuilt306F43D845D6F0B9Js.U);

},{"./prebuilt-306f43d8-45d6f0b9.js":"0sm4R","tslib":"4rd38","@firebase/util":"3bR6t","@firebase/logger":"5PuYX","@firebase/webchannel-wrapper":"71Sz5","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"6ki78":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _app = require("@firebase/app");
var _appDefault = parcelHelpers.interopDefault(_app);
var _tslib = require("tslib");
var _component = require("@firebase/component");
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Standard error codes for different ways a request can fail, as defined by:
 * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
 *
 * This map is used primarily to convert from a backend error code string to
 * a client SDK error code string, and make sure it's in the supported set.
 */ var errorCodeMap = {
    OK: 'ok',
    CANCELLED: 'cancelled',
    UNKNOWN: 'unknown',
    INVALID_ARGUMENT: 'invalid-argument',
    DEADLINE_EXCEEDED: 'deadline-exceeded',
    NOT_FOUND: 'not-found',
    ALREADY_EXISTS: 'already-exists',
    PERMISSION_DENIED: 'permission-denied',
    UNAUTHENTICATED: 'unauthenticated',
    RESOURCE_EXHAUSTED: 'resource-exhausted',
    FAILED_PRECONDITION: 'failed-precondition',
    ABORTED: 'aborted',
    OUT_OF_RANGE: 'out-of-range',
    UNIMPLEMENTED: 'unimplemented',
    INTERNAL: 'internal',
    UNAVAILABLE: 'unavailable',
    DATA_LOSS: 'data-loss'
};
/**
 * An explicit error that can be thrown from a handler to send an error to the
 * client that called the function.
 */ var HttpsErrorImpl1 = function(_super) {
    _tslib.__extends(HttpsErrorImpl2, _super);
    function HttpsErrorImpl2(code, message, details) {
        var _this = _super.call(this, message) || this;
        // This is a workaround for a bug in TypeScript when extending Error:
        // tslint:disable-next-line
        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        Object.setPrototypeOf(_this, HttpsErrorImpl2.prototype);
        _this.code = code;
        _this.details = details;
        return _this;
    }
    return HttpsErrorImpl2;
}(Error);
/**
 * Takes an HTTP status code and returns the corresponding ErrorCode.
 * This is the standard HTTP status code -> error mapping defined in:
 * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
 *
 * @param status An HTTP status code.
 * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.
 */ function codeForHTTPStatus(status) {
    // Make sure any successful status is OK.
    if (status >= 200 && status < 300) return 'ok';
    switch(status){
        case 0:
            // This can happen if the server returns 500.
            return 'internal';
        case 400:
            return 'invalid-argument';
        case 401:
            return 'unauthenticated';
        case 403:
            return 'permission-denied';
        case 404:
            return 'not-found';
        case 409:
            return 'aborted';
        case 429:
            return 'resource-exhausted';
        case 499:
            return 'cancelled';
        case 500:
            return 'internal';
        case 501:
            return 'unimplemented';
        case 503:
            return 'unavailable';
        case 504:
            return 'deadline-exceeded';
    }
    return 'unknown';
}
/**
 * Takes an HTTP response and returns the corresponding Error, if any.
 */ function _errorForResponse(status, bodyJSON, serializer) {
    var code = codeForHTTPStatus(status);
    // Start with reasonable defaults from the status code.
    var description = code;
    var details = undefined;
    // Then look through the body for explicit details.
    try {
        var errorJSON = bodyJSON && bodyJSON.error;
        if (errorJSON) {
            var status_1 = errorJSON.status;
            if (typeof status_1 === 'string') {
                if (!errorCodeMap[status_1]) // They must've included an unknown error code in the body.
                return new HttpsErrorImpl1('internal', 'internal');
                code = errorCodeMap[status_1];
                // TODO(klimt): Add better default descriptions for error enums.
                // The default description needs to be updated for the new code.
                description = status_1;
            }
            var message = errorJSON.message;
            if (typeof message === 'string') description = message;
            details = errorJSON.details;
            if (details !== undefined) details = serializer.decode(details);
        }
    } catch (e) {
    // If we couldn't parse explicit error data, that's fine.
    }
    if (code === 'ok') // Technically, there's an edge case where a developer could explicitly
    // return an error code of OK, and we will treat it as success, but that
    // seems reasonable.
    return null;
    return new HttpsErrorImpl1(code, description, details);
}
/**
 * Helper class to get metadata that should be included with a function call.
 */ var ContextProvider = function() {
    function ContextProvider1(authProvider, messagingProvider) {
        var _this = this;
        this.auth = null;
        this.messaging = null;
        this.auth = authProvider.getImmediate({
            optional: true
        });
        this.messaging = messagingProvider.getImmediate({
            optional: true
        });
        if (!this.auth) authProvider.get().then(function(auth) {
            return _this.auth = auth;
        }, function() {
        /* get() never rejects */ });
        if (!this.messaging) messagingProvider.get().then(function(messaging) {
            return _this.messaging = messaging;
        }, function() {
        /* get() never rejects */ });
    }
    ContextProvider1.prototype.getAuthToken = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var token;
            return _tslib.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (!this.auth) return [
                            2,
                            undefined
                        ];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4,
                            this.auth.getToken()
                        ];
                    case 2:
                        token = _a.sent();
                        if (!token) return [
                            2,
                            undefined
                        ];
                        return [
                            2,
                            token.accessToken
                        ];
                    case 3:
                        _a.sent();
                        // If there's any error when trying to get the auth token, leave it off.
                        return [
                            2,
                            undefined
                        ];
                    case 4:
                        return [
                            2
                        ];
                }
            });
        });
    };
    ContextProvider1.prototype.getInstanceIdToken = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            return _tslib.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (!this.messaging || !('Notification' in self) || Notification.permission !== 'granted') return [
                            2,
                            undefined
                        ];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4,
                            this.messaging.getToken()
                        ];
                    case 2:
                        return [
                            2,
                            _a.sent()
                        ];
                    case 3:
                        _a.sent();
                        // We don't warn on this, because it usually means messaging isn't set up.
                        // console.warn('Failed to retrieve instance id token.', e);
                        // If there's any error when trying to get the token, leave it off.
                        return [
                            2,
                            undefined
                        ];
                    case 4:
                        return [
                            2
                        ];
                }
            });
        });
    };
    ContextProvider1.prototype.getContext = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var authToken, instanceIdToken;
            return _tslib.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4,
                            this.getAuthToken()
                        ];
                    case 1:
                        authToken = _a.sent();
                        return [
                            4,
                            this.getInstanceIdToken()
                        ];
                    case 2:
                        instanceIdToken = _a.sent();
                        return [
                            2,
                            {
                                authToken: authToken,
                                instanceIdToken: instanceIdToken
                            }
                        ];
                }
            });
        });
    };
    return ContextProvider1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';
var UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';
function mapValues(// { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5
// eslint-disable-next-line @typescript-eslint/no-explicit-any
o, f) {
    var result = {
    };
    for(var key in o)if (o.hasOwnProperty(key)) result[key] = f(o[key]);
    return result;
}
var Serializer = function() {
    function Serializer1() {
    }
    // Takes data and encodes it in a JSON-friendly way, such that types such as
    // Date are preserved.
    Serializer1.prototype.encode = function(data) {
        var _this = this;
        if (data == null) return null;
        if (data instanceof Number) data = data.valueOf();
        if (typeof data === 'number' && isFinite(data)) // Any number in JS is safe to put directly in JSON and parse as a double
        // without any loss of precision.
        return data;
        if (data === true || data === false) return data;
        if (Object.prototype.toString.call(data) === '[object String]') return data;
        if (data instanceof Date) return data.toISOString();
        if (Array.isArray(data)) return data.map(function(x) {
            return _this.encode(x);
        });
        if (typeof data === 'function' || typeof data === 'object') return mapValues(data, function(x) {
            return _this.encode(x);
        });
        // If we got this far, the data is not encodable.
        throw new Error('Data cannot be encoded in JSON: ' + data);
    };
    // Takes data that's been encoded in a JSON-friendly form and returns a form
    // with richer datatypes, such as Dates, etc.
    Serializer1.prototype.decode = function(json) {
        var _this = this;
        if (json == null) return json;
        if (json['@type']) switch(json['@type']){
            case LONG_TYPE:
            // Fall through and handle this the same as unsigned.
            case UNSIGNED_LONG_TYPE:
                // Technically, this could work return a valid number for malformed
                // data if there was a number followed by garbage. But it's just not
                // worth all the extra code to detect that case.
                var value = Number(json['value']);
                if (isNaN(value)) throw new Error('Data cannot be decoded from JSON: ' + json);
                return value;
            default:
                throw new Error('Data cannot be decoded from JSON: ' + json);
        }
        if (Array.isArray(json)) return json.map(function(x) {
            return _this.decode(x);
        });
        if (typeof json === 'function' || typeof json === 'object') return mapValues(json, function(x) {
            return _this.decode(x);
        });
        // Anything else is safe to return.
        return json;
    };
    return Serializer1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns a Promise that will be rejected after the given duration.
 * The error will be of type HttpsErrorImpl.
 *
 * @param millis Number of milliseconds to wait before rejecting.
 */ function failAfter(millis) {
    var timer;
    var promise = new Promise(function(_, reject) {
        timer = setTimeout(function() {
            reject(new HttpsErrorImpl1('deadline-exceeded', 'deadline-exceeded'));
        }, millis);
    });
    return {
        timer: timer,
        promise: promise
    };
}
/**
 * The main class for the Firebase Functions SDK.
 */ var Service = function() {
    /**
     * Creates a new Functions service for the given app and (optional) region or custom domain.
     * @param app_ The FirebaseApp to use.
     * @param regionOrCustomDomain_ one of:
     *   a) A region to call functions from, such as us-central1
     *   b) A custom domain to use as a functions prefix, such as https://mydomain.com
     */ function Service1(app_, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain_, fetchImpl) {
        var _this = this;
        if (regionOrCustomDomain_ === void 0) regionOrCustomDomain_ = 'us-central1';
        this.app_ = app_;
        this.appCheckProvider = appCheckProvider;
        this.fetchImpl = fetchImpl;
        this.serializer = new Serializer();
        this.emulatorOrigin = null;
        this.INTERNAL = {
            delete: function() {
                return Promise.resolve(_this.deleteService());
            }
        };
        this.contextProvider = new ContextProvider(authProvider, messagingProvider);
        // Cancels all ongoing requests when resolved.
        this.cancelAllRequests = new Promise(function(resolve) {
            _this.deleteService = function() {
                return resolve();
            };
        });
        // Resolve the region or custom domain overload by attempting to parse it.
        try {
            var url = new URL(regionOrCustomDomain_);
            this.customDomain = url.origin;
            this.region = 'us-central1';
        } catch (e) {
            this.customDomain = null;
            this.region = regionOrCustomDomain_;
        }
    }
    Object.defineProperty(Service1.prototype, "app", {
        get: function() {
            return this.app_;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns the URL for a callable with the given name.
     * @param name The name of the callable.
     */ Service1.prototype._url = function(name) {
        var projectId = this.app_.options.projectId;
        if (this.emulatorOrigin !== null) {
            var origin_1 = this.emulatorOrigin;
            return origin_1 + "/" + projectId + "/" + this.region + "/" + name;
        }
        if (this.customDomain !== null) return this.customDomain + "/" + name;
        return "https://" + this.region + "-" + projectId + ".cloudfunctions.net/" + name;
    };
    /**
     * Modify this instance to communicate with the Cloud Functions emulator.
     *
     * Note: this must be called before this instance has been used to do any operations.
     *
     * @param host The emulator host (ex: localhost)
     * @param port The emulator port (ex: 5001)
     */ Service1.prototype.useEmulator = function(host, port) {
        this.emulatorOrigin = "http://" + host + ":" + port;
    };
    /**
     * Changes this instance to point to a Cloud Functions emulator running
     * locally. See https://firebase.google.com/docs/functions/local-emulator
     *
     * @deprecated Prefer the useEmulator(host, port) method.
     * @param origin The origin of the local emulator, such as
     * "http://localhost:5005".
     */ Service1.prototype.useFunctionsEmulator = function(origin) {
        this.emulatorOrigin = origin;
    };
    /**
     * Returns a reference to the callable https trigger with the given name.
     * @param name The name of the trigger.
     */ Service1.prototype.httpsCallable = function(name, options) {
        var _this = this;
        return function(data) {
            return _this.call(name, data, options || {
            });
        };
    };
    /**
     * Does an HTTP POST and returns the completed response.
     * @param url The url to post to.
     * @param body The JSON body of the post.
     * @param headers The HTTP headers to include in the request.
     * @return A Promise that will succeed when the request finishes.
     */ Service1.prototype.postJSON = function(url, body, headers) {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var appCheckToken, response, json;
            return _tslib.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        headers['Content-Type'] = 'application/json';
                        return [
                            4,
                            this.getAppCheckToken()
                        ];
                    case 1:
                        appCheckToken = _a.sent();
                        if (appCheckToken !== null) headers['X-Firebase-AppCheck'] = appCheckToken;
                        _a.label = 2;
                    case 2:
                        _a.trys.push([
                            2,
                            4,
                            ,
                            5
                        ]);
                        return [
                            4,
                            this.fetchImpl(url, {
                                method: 'POST',
                                body: JSON.stringify(body),
                                headers: headers
                            })
                        ];
                    case 3:
                        response = _a.sent();
                        return [
                            3,
                            5
                        ];
                    case 4:
                        _a.sent();
                        // This could be an unhandled error on the backend, or it could be a
                        // network error. There's no way to know, since an unhandled error on the
                        // backend will fail to set the proper CORS header, and thus will be
                        // treated as a network error by fetch.
                        return [
                            2,
                            {
                                status: 0,
                                json: null
                            }
                        ];
                    case 5:
                        json = null;
                        _a.label = 6;
                    case 6:
                        _a.trys.push([
                            6,
                            8,
                            ,
                            9
                        ]);
                        return [
                            4,
                            response.json()
                        ];
                    case 7:
                        json = _a.sent();
                        return [
                            3,
                            9
                        ];
                    case 8:
                        _a.sent();
                        return [
                            3,
                            9
                        ];
                    case 9:
                        return [
                            2,
                            {
                                status: response.status,
                                json: json
                            }
                        ];
                }
            });
        });
    };
    Service1.prototype.getAppCheckToken = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var appCheck, result;
            return _tslib.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        appCheck = this.appCheckProvider.getImmediate({
                            optional: true
                        });
                        if (!appCheck) return [
                            3,
                            2
                        ];
                        return [
                            4,
                            appCheck.getToken()
                        ];
                    case 1:
                        result = _a.sent();
                        // If getToken() fails, it will still return a dummy token that also has
                        // an error field containing the error message. We will send any token
                        // provided here and show an error if/when it is rejected by the functions
                        // endpoint.
                        return [
                            2,
                            result.token
                        ];
                    case 2:
                        return [
                            2,
                            null
                        ];
                }
            });
        });
    };
    /**
     * Calls a callable function asynchronously and returns the result.
     * @param name The name of the callable trigger.
     * @param data The data to pass as params to the function.s
     */ Service1.prototype.call = function(name, data, options) {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var url, body, headers, context, timeout, _a, timer, failAfterPromise, response, error, responseData, decodedData;
            return _tslib.__generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        url = this._url(name);
                        // Encode any special types, such as dates, in the input data.
                        data = this.serializer.encode(data);
                        body = {
                            data: data
                        };
                        headers = {
                        };
                        return [
                            4,
                            this.contextProvider.getContext()
                        ];
                    case 1:
                        context = _b.sent();
                        if (context.authToken) headers['Authorization'] = 'Bearer ' + context.authToken;
                        if (context.instanceIdToken) headers['Firebase-Instance-ID-Token'] = context.instanceIdToken;
                        timeout = options.timeout || 70000;
                        _a = failAfter(timeout), timer = _a.timer, failAfterPromise = _a.promise;
                        return [
                            4,
                            Promise.race([
                                clearTimeoutWrapper(timer, this.postJSON(url, body, headers)),
                                failAfterPromise,
                                clearTimeoutWrapper(timer, this.cancelAllRequests)
                            ])
                        ];
                    case 2:
                        response = _b.sent();
                        // If service was deleted, interrupted response throws an error.
                        if (!response) throw new HttpsErrorImpl1('cancelled', 'Firebase Functions instance was deleted.');
                        error = _errorForResponse(response.status, response.json, this.serializer);
                        if (error) throw error;
                        if (!response.json) throw new HttpsErrorImpl1('internal', 'Response is not valid JSON object.');
                        responseData = response.json.data;
                        // TODO(klimt): For right now, allow "result" instead of "data", for
                        // backwards compatibility.
                        if (typeof responseData === 'undefined') responseData = response.json.result;
                        if (typeof responseData === 'undefined') // Consider the response malformed.
                        throw new HttpsErrorImpl1('internal', 'Response is missing data field.');
                        decodedData = this.serializer.decode(responseData);
                        return [
                            2,
                            {
                                data: decodedData
                            }
                        ];
                }
            });
        });
    };
    return Service1;
}();
function clearTimeoutWrapper(timer, promise) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var result;
        return _tslib.__generator(this, function(_a) {
            switch(_a.label){
                case 0:
                    return [
                        4,
                        promise
                    ];
                case 1:
                    result = _a.sent();
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    clearTimeout(timer);
                    return [
                        2,
                        result
                    ];
            }
        });
    });
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Type constant for Firebase Functions.
 */ var FUNCTIONS_TYPE = 'functions';
function registerFunctions(instance, fetchImpl) {
    var namespaceExports = {
        // no-inline
        Functions: Service
    };
    function factory(container, _a) {
        var regionOrCustomDomain = _a.instanceIdentifier;
        // Dependencies
        var app = container.getProvider('app').getImmediate();
        var authProvider = container.getProvider('auth-internal');
        var appCheckProvider = container.getProvider('app-check-internal');
        var messagingProvider = container.getProvider('messaging');
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return new Service(app, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain, fetchImpl);
    }
    instance.INTERNAL.registerComponent(new _component.Component(FUNCTIONS_TYPE, factory, "PUBLIC"/* PUBLIC */ ).setServiceProps(namespaceExports).setMultipleInstances(true));
}
var name = "@firebase/functions";
var version = "0.6.15";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ registerFunctions(_appDefault.default, fetch.bind(self));
_appDefault.default.registerVersion(name, version);

},{"@firebase/app":"6IUA5","tslib":"4rd38","@firebase/component":"5qT0x","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"JdbMr":[function(require,module,exports) {
'use strict';
require('@firebase/installations');
var component = require('@firebase/component');
var util = require('@firebase/util');
var tslib = require('tslib');
var idb = require('idb');
var firebase = require('@firebase/app');
function _interopDefaultLegacy(e) {
    return e && typeof e === 'object' && 'default' in e ? e : {
        'default': e
    };
}
var firebase__default = /*#__PURE__*/ _interopDefaultLegacy(firebase);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _a;
var ERROR_MAP = (_a = {
}, _a["missing-app-config-values"] = 'Missing App configuration value: "{$valueName}"', _a["only-available-in-window"] = 'This method is available in a Window context.', _a["only-available-in-sw"] = 'This method is available in a service worker context.', _a["permission-default"] = 'The notification permission was not granted and dismissed instead.', _a["permission-blocked"] = 'The notification permission was not granted and blocked instead.', _a["unsupported-browser"] = "This browser doesn't support the API's required to use the firebase SDK.", _a["failed-service-worker-registration"] = 'We are unable to register the default service worker. {$browserErrorMessage}', _a["token-subscribe-failed"] = 'A problem occurred while subscribing the user to FCM: {$errorInfo}', _a["token-subscribe-no-token"] = 'FCM returned no token when subscribing the user to push.', _a["token-unsubscribe-failed"] = "A problem occurred while unsubscribing the user from FCM: {$errorInfo}", _a["token-update-failed"] = 'A problem occurred while updating the user from FCM: {$errorInfo}', _a["token-update-no-token"] = 'FCM returned no token when updating the user to push.', _a["use-sw-after-get-token"] = "The useServiceWorker() method may only be called once and must be called before calling getToken() to ensure your service worker is used.", _a["invalid-sw-registration"] = 'The input to useServiceWorker() must be a ServiceWorkerRegistration.', _a["invalid-bg-handler"] = 'The input to setBackgroundMessageHandler() must be a function.', _a["invalid-vapid-key"] = 'The public VAPID key must be a string.', _a["use-vapid-key-after-get-token"] = "The usePublicVapidKey() method may only be called once and must be called before calling getToken() to ensure your VAPID key is used.", _a);
var ERROR_FACTORY = new util.ErrorFactory('messaging', 'Messaging', ERROR_MAP);
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var DEFAULT_SW_PATH = '/firebase-messaging-sw.js';
var DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';
var DEFAULT_VAPID_KEY = 'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';
var ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';
// Key of FCM Payload in Notification's data field.
var FCM_MSG = 'FCM_MSG';
var TAG = 'FirebaseMessaging: ';
// Set to '1' if Analytics is enabled for the campaign
var CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';
var CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';
var CONSOLE_CAMPAIGN_TIME = 'google.c.a.ts';
var CONSOLE_CAMPAIGN_NAME = 'google.c.a.c_l';
// Due to the fact that onBackgroundMessage can't be awaited (to support rxjs), a silent push
// warning might be shown by the browser if the callback fails to completes by the end of onPush.
// Experiments were ran to determine the majority onBackground message clock time. This brief
// blocking time would allow majority of the onBackgroundMessage callback to finish.
var BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS = 1000;
// Preparation time for client to initialize and set up the message handler.
var FOREGROUND_HANDLE_PREPARATION_TIME_MS = 3000;
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */ var MessageType;
(function(MessageType1) {
    MessageType1["PUSH_RECEIVED"] = "push-received";
    MessageType1["NOTIFICATION_CLICKED"] = "notification-clicked";
})(MessageType || (MessageType = {
}));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function arrayToBase64(array) {
    var uint8Array = new Uint8Array(array);
    var base64String = btoa(String.fromCharCode.apply(String, tslib.__spreadArray([], tslib.__read(uint8Array))));
    return base64String.replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
}
function base64ToArray(base64String) {
    var padding = '='.repeat((4 - base64String.length % 4) % 4);
    var base64 = (base64String + padding).replace(/\-/g, '+').replace(/_/g, '/');
    var rawData = atob(base64);
    var outputArray = new Uint8Array(rawData.length);
    for(var i = 0; i < rawData.length; ++i)outputArray[i] = rawData.charCodeAt(i);
    return outputArray;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var OLD_DB_NAME = 'fcm_token_details_db';
/**
 * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade
 * callback is called for all versions of the old DB.
 */ var OLD_DB_VERSION = 5;
var OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';
function migrateOldDatabase(senderId) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var databases, dbNames, tokenDetails, db;
        var _this = this;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    if (!('databases' in indexedDB)) return [
                        3,
                        2
                    ];
                    return [
                        4,
                        indexedDB.databases()
                    ];
                case 1:
                    databases = _a1.sent();
                    dbNames = databases.map(function(db1) {
                        return db1.name;
                    });
                    if (!dbNames.includes(OLD_DB_NAME)) // old DB didn't exist, no need to open.
                    return [
                        2,
                        null
                    ];
                    _a1.label = 2;
                case 2:
                    tokenDetails = null;
                    return [
                        4,
                        idb.openDb(OLD_DB_NAME, OLD_DB_VERSION, function(db1) {
                            return tslib.__awaiter(_this, void 0, void 0, function() {
                                var objectStore, value, oldDetails, oldDetails, oldDetails;
                                var _a2;
                                return tslib.__generator(this, function(_b) {
                                    switch(_b.label){
                                        case 0:
                                            if (db1.oldVersion < 2) // Database too old, skip migration.
                                            return [
                                                2
                                            ];
                                            if (!db1.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) // Database did not exist. Nothing to do.
                                            return [
                                                2
                                            ];
                                            objectStore = db1.transaction.objectStore(OLD_OBJECT_STORE_NAME);
                                            return [
                                                4,
                                                objectStore.index('fcmSenderId').get(senderId)
                                            ];
                                        case 1:
                                            value = _b.sent();
                                            return [
                                                4,
                                                objectStore.clear()
                                            ];
                                        case 2:
                                            _b.sent();
                                            if (!value) // No entry in the database, nothing to migrate.
                                            return [
                                                2
                                            ];
                                            if (db1.oldVersion === 2) {
                                                oldDetails = value;
                                                if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) return [
                                                    2
                                                ];
                                                tokenDetails = {
                                                    token: oldDetails.fcmToken,
                                                    createTime: (_a2 = oldDetails.createTime) !== null && _a2 !== void 0 ? _a2 : Date.now(),
                                                    subscriptionOptions: {
                                                        auth: oldDetails.auth,
                                                        p256dh: oldDetails.p256dh,
                                                        endpoint: oldDetails.endpoint,
                                                        swScope: oldDetails.swScope,
                                                        vapidKey: typeof oldDetails.vapidKey === 'string' ? oldDetails.vapidKey : arrayToBase64(oldDetails.vapidKey)
                                                    }
                                                };
                                            } else if (db1.oldVersion === 3) {
                                                oldDetails = value;
                                                tokenDetails = {
                                                    token: oldDetails.fcmToken,
                                                    createTime: oldDetails.createTime,
                                                    subscriptionOptions: {
                                                        auth: arrayToBase64(oldDetails.auth),
                                                        p256dh: arrayToBase64(oldDetails.p256dh),
                                                        endpoint: oldDetails.endpoint,
                                                        swScope: oldDetails.swScope,
                                                        vapidKey: arrayToBase64(oldDetails.vapidKey)
                                                    }
                                                };
                                            } else if (db1.oldVersion === 4) {
                                                oldDetails = value;
                                                tokenDetails = {
                                                    token: oldDetails.fcmToken,
                                                    createTime: oldDetails.createTime,
                                                    subscriptionOptions: {
                                                        auth: arrayToBase64(oldDetails.auth),
                                                        p256dh: arrayToBase64(oldDetails.p256dh),
                                                        endpoint: oldDetails.endpoint,
                                                        swScope: oldDetails.swScope,
                                                        vapidKey: arrayToBase64(oldDetails.vapidKey)
                                                    }
                                                };
                                            }
                                            return [
                                                2
                                            ];
                                    }
                                });
                            });
                        })
                    ];
                case 3:
                    db = _a1.sent();
                    db.close();
                    // Delete all old databases.
                    return [
                        4,
                        idb.deleteDb(OLD_DB_NAME)
                    ];
                case 4:
                    // Delete all old databases.
                    _a1.sent();
                    return [
                        4,
                        idb.deleteDb('fcm_vapid_details_db')
                    ];
                case 5:
                    _a1.sent();
                    return [
                        4,
                        idb.deleteDb('undefined')
                    ];
                case 6:
                    _a1.sent();
                    return [
                        2,
                        checkTokenDetails(tokenDetails) ? tokenDetails : null
                    ];
            }
        });
    });
}
function checkTokenDetails(tokenDetails) {
    if (!tokenDetails || !tokenDetails.subscriptionOptions) return false;
    var subscriptionOptions = tokenDetails.subscriptionOptions;
    return typeof tokenDetails.createTime === 'number' && tokenDetails.createTime > 0 && typeof tokenDetails.token === 'string' && tokenDetails.token.length > 0 && typeof subscriptionOptions.auth === 'string' && subscriptionOptions.auth.length > 0 && typeof subscriptionOptions.p256dh === 'string' && subscriptionOptions.p256dh.length > 0 && typeof subscriptionOptions.endpoint === 'string' && subscriptionOptions.endpoint.length > 0 && typeof subscriptionOptions.swScope === 'string' && subscriptionOptions.swScope.length > 0 && typeof subscriptionOptions.vapidKey === 'string' && subscriptionOptions.vapidKey.length > 0;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Exported for tests.
var DATABASE_NAME = 'firebase-messaging-database';
var DATABASE_VERSION = 1;
var OBJECT_STORE_NAME = 'firebase-messaging-store';
var dbPromise = null;
function getDbPromise() {
    if (!dbPromise) dbPromise = idb.openDb(DATABASE_NAME, DATABASE_VERSION, function(upgradeDb) {
        // We don't use 'break' in this switch statement, the fall-through behavior is what we want,
        // because if there are multiple versions between the old version and the current version, we
        // want ALL the migrations that correspond to those versions to run, not only the last one.
        // eslint-disable-next-line default-case
        switch(upgradeDb.oldVersion){
            case 0:
                upgradeDb.createObjectStore(OBJECT_STORE_NAME);
        }
    });
    return dbPromise;
}
/** Gets record(s) from the objectStore that match the given key. */ function dbGet(firebaseDependencies) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var key, db, tokenDetails, oldTokenDetails;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    key = getKey(firebaseDependencies);
                    return [
                        4,
                        getDbPromise()
                    ];
                case 1:
                    db = _a1.sent();
                    return [
                        4,
                        db.transaction(OBJECT_STORE_NAME).objectStore(OBJECT_STORE_NAME).get(key)
                    ];
                case 2:
                    tokenDetails = _a1.sent();
                    if (!tokenDetails) return [
                        3,
                        3
                    ];
                    return [
                        2,
                        tokenDetails
                    ];
                case 3:
                    return [
                        4,
                        migrateOldDatabase(firebaseDependencies.appConfig.senderId)
                    ];
                case 4:
                    oldTokenDetails = _a1.sent();
                    if (!oldTokenDetails) return [
                        3,
                        6
                    ];
                    return [
                        4,
                        dbSet(firebaseDependencies, oldTokenDetails)
                    ];
                case 5:
                    _a1.sent();
                    return [
                        2,
                        oldTokenDetails
                    ];
                case 6:
                    return [
                        2
                    ];
            }
        });
    });
}
/** Assigns or overwrites the record for the given key with the given value. */ function dbSet(firebaseDependencies, tokenDetails) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var key, db, tx;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    key = getKey(firebaseDependencies);
                    return [
                        4,
                        getDbPromise()
                    ];
                case 1:
                    db = _a1.sent();
                    tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
                    return [
                        4,
                        tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key)
                    ];
                case 2:
                    _a1.sent();
                    return [
                        4,
                        tx.complete
                    ];
                case 3:
                    _a1.sent();
                    return [
                        2,
                        tokenDetails
                    ];
            }
        });
    });
}
/** Removes record(s) from the objectStore that match the given key. */ function dbRemove(firebaseDependencies) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var key, db, tx;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    key = getKey(firebaseDependencies);
                    return [
                        4,
                        getDbPromise()
                    ];
                case 1:
                    db = _a1.sent();
                    tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
                    return [
                        4,
                        tx.objectStore(OBJECT_STORE_NAME).delete(key)
                    ];
                case 2:
                    _a1.sent();
                    return [
                        4,
                        tx.complete
                    ];
                case 3:
                    _a1.sent();
                    return [
                        2
                    ];
            }
        });
    });
}
function getKey(_a1) {
    var appConfig = _a1.appConfig;
    return appConfig.appId;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function requestGetToken(firebaseDependencies, subscriptionOptions) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var headers, body, subscribeOptions, responseData, response, err_1, message;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    return [
                        4,
                        getHeaders(firebaseDependencies)
                    ];
                case 1:
                    headers = _a1.sent();
                    body = getBody(subscriptionOptions);
                    subscribeOptions = {
                        method: 'POST',
                        headers: headers,
                        body: JSON.stringify(body)
                    };
                    _a1.label = 2;
                case 2:
                    _a1.trys.push([
                        2,
                        5,
                        ,
                        6
                    ]);
                    return [
                        4,
                        fetch(getEndpoint(firebaseDependencies.appConfig), subscribeOptions)
                    ];
                case 3:
                    response = _a1.sent();
                    return [
                        4,
                        response.json()
                    ];
                case 4:
                    responseData = _a1.sent();
                    return [
                        3,
                        6
                    ];
                case 5:
                    err_1 = _a1.sent();
                    throw ERROR_FACTORY.create("token-subscribe-failed"/* TOKEN_SUBSCRIBE_FAILED */ , {
                        errorInfo: err_1
                    });
                case 6:
                    if (responseData.error) {
                        message = responseData.error.message;
                        throw ERROR_FACTORY.create("token-subscribe-failed"/* TOKEN_SUBSCRIBE_FAILED */ , {
                            errorInfo: message
                        });
                    }
                    if (!responseData.token) throw ERROR_FACTORY.create("token-subscribe-no-token"/* TOKEN_SUBSCRIBE_NO_TOKEN */ );
                    return [
                        2,
                        responseData.token
                    ];
            }
        });
    });
}
function requestUpdateToken(firebaseDependencies, tokenDetails) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var headers, body, updateOptions, responseData, response, err_2, message;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    return [
                        4,
                        getHeaders(firebaseDependencies)
                    ];
                case 1:
                    headers = _a1.sent();
                    body = getBody(tokenDetails.subscriptionOptions);
                    updateOptions = {
                        method: 'PATCH',
                        headers: headers,
                        body: JSON.stringify(body)
                    };
                    _a1.label = 2;
                case 2:
                    _a1.trys.push([
                        2,
                        5,
                        ,
                        6
                    ]);
                    return [
                        4,
                        fetch(getEndpoint(firebaseDependencies.appConfig) + "/" + tokenDetails.token, updateOptions)
                    ];
                case 3:
                    response = _a1.sent();
                    return [
                        4,
                        response.json()
                    ];
                case 4:
                    responseData = _a1.sent();
                    return [
                        3,
                        6
                    ];
                case 5:
                    err_2 = _a1.sent();
                    throw ERROR_FACTORY.create("token-update-failed"/* TOKEN_UPDATE_FAILED */ , {
                        errorInfo: err_2
                    });
                case 6:
                    if (responseData.error) {
                        message = responseData.error.message;
                        throw ERROR_FACTORY.create("token-update-failed"/* TOKEN_UPDATE_FAILED */ , {
                            errorInfo: message
                        });
                    }
                    if (!responseData.token) throw ERROR_FACTORY.create("token-update-no-token"/* TOKEN_UPDATE_NO_TOKEN */ );
                    return [
                        2,
                        responseData.token
                    ];
            }
        });
    });
}
function requestDeleteToken(firebaseDependencies, token) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var headers, unsubscribeOptions, response, responseData, message, err_3;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    return [
                        4,
                        getHeaders(firebaseDependencies)
                    ];
                case 1:
                    headers = _a1.sent();
                    unsubscribeOptions = {
                        method: 'DELETE',
                        headers: headers
                    };
                    _a1.label = 2;
                case 2:
                    _a1.trys.push([
                        2,
                        5,
                        ,
                        6
                    ]);
                    return [
                        4,
                        fetch(getEndpoint(firebaseDependencies.appConfig) + "/" + token, unsubscribeOptions)
                    ];
                case 3:
                    response = _a1.sent();
                    return [
                        4,
                        response.json()
                    ];
                case 4:
                    responseData = _a1.sent();
                    if (responseData.error) {
                        message = responseData.error.message;
                        throw ERROR_FACTORY.create("token-unsubscribe-failed"/* TOKEN_UNSUBSCRIBE_FAILED */ , {
                            errorInfo: message
                        });
                    }
                    return [
                        3,
                        6
                    ];
                case 5:
                    err_3 = _a1.sent();
                    throw ERROR_FACTORY.create("token-unsubscribe-failed"/* TOKEN_UNSUBSCRIBE_FAILED */ , {
                        errorInfo: err_3
                    });
                case 6:
                    return [
                        2
                    ];
            }
        });
    });
}
function getEndpoint(_a1) {
    var projectId = _a1.projectId;
    return ENDPOINT + "/projects/" + projectId + "/registrations";
}
function getHeaders(_a1) {
    var appConfig = _a1.appConfig, installations = _a1.installations;
    return tslib.__awaiter(this, void 0, void 0, function() {
        var authToken;
        return tslib.__generator(this, function(_b) {
            switch(_b.label){
                case 0:
                    return [
                        4,
                        installations.getToken()
                    ];
                case 1:
                    authToken = _b.sent();
                    return [
                        2,
                        new Headers({
                            'Content-Type': 'application/json',
                            Accept: 'application/json',
                            'x-goog-api-key': appConfig.apiKey,
                            'x-goog-firebase-installations-auth': "FIS " + authToken
                        })
                    ];
            }
        });
    });
}
function getBody(_a1) {
    var p256dh = _a1.p256dh, auth = _a1.auth, endpoint = _a1.endpoint, vapidKey = _a1.vapidKey;
    var body = {
        web: {
            endpoint: endpoint,
            auth: auth,
            p256dh: p256dh
        }
    };
    if (vapidKey !== DEFAULT_VAPID_KEY) body.web.applicationPubKey = vapidKey;
    return body;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** UpdateRegistration will be called once every week. */ var TOKEN_EXPIRATION_MS = 604800000; // 7 days
function getToken(firebaseDependencies, swRegistration, vapidKey) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var pushSubscription, tokenDetails, subscriptionOptions, e_1;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    if (Notification.permission !== 'granted') throw ERROR_FACTORY.create("permission-blocked"/* PERMISSION_BLOCKED */ );
                    return [
                        4,
                        getPushSubscription(swRegistration, vapidKey)
                    ];
                case 1:
                    pushSubscription = _a1.sent();
                    return [
                        4,
                        dbGet(firebaseDependencies)
                    ];
                case 2:
                    tokenDetails = _a1.sent();
                    subscriptionOptions = {
                        vapidKey: vapidKey,
                        swScope: swRegistration.scope,
                        endpoint: pushSubscription.endpoint,
                        auth: arrayToBase64(pushSubscription.getKey('auth')),
                        p256dh: arrayToBase64(pushSubscription.getKey('p256dh'))
                    };
                    if (!!tokenDetails) return [
                        3,
                        3
                    ];
                    // No token, get a new one.
                    return [
                        2,
                        getNewToken(firebaseDependencies, subscriptionOptions)
                    ];
                case 3:
                    if (!!isTokenValid(tokenDetails.subscriptionOptions, subscriptionOptions)) return [
                        3,
                        8
                    ];
                    _a1.label = 4;
                case 4:
                    _a1.trys.push([
                        4,
                        6,
                        ,
                        7
                    ]);
                    return [
                        4,
                        requestDeleteToken(firebaseDependencies, tokenDetails.token)
                    ];
                case 5:
                    _a1.sent();
                    return [
                        3,
                        7
                    ];
                case 6:
                    e_1 = _a1.sent();
                    // Suppress errors because of #2364
                    console.warn(e_1);
                    return [
                        3,
                        7
                    ];
                case 7:
                    return [
                        2,
                        getNewToken(firebaseDependencies, subscriptionOptions)
                    ];
                case 8:
                    if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) // Weekly token refresh
                    return [
                        2,
                        updateToken({
                            token: tokenDetails.token,
                            createTime: Date.now(),
                            subscriptionOptions: subscriptionOptions
                        }, firebaseDependencies, swRegistration)
                    ];
                    else // Valid token, nothing to do.
                    return [
                        2,
                        tokenDetails.token
                    ];
                case 9:
                    return [
                        2
                    ];
            }
        });
    });
}
/**
 * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters
 * the push subscription if it exists.
 */ function deleteToken(firebaseDependencies, swRegistration) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var tokenDetails, pushSubscription;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    return [
                        4,
                        dbGet(firebaseDependencies)
                    ];
                case 1:
                    tokenDetails = _a1.sent();
                    if (!tokenDetails) return [
                        3,
                        4
                    ];
                    return [
                        4,
                        requestDeleteToken(firebaseDependencies, tokenDetails.token)
                    ];
                case 2:
                    _a1.sent();
                    return [
                        4,
                        dbRemove(firebaseDependencies)
                    ];
                case 3:
                    _a1.sent();
                    _a1.label = 4;
                case 4:
                    return [
                        4,
                        swRegistration.pushManager.getSubscription()
                    ];
                case 5:
                    pushSubscription = _a1.sent();
                    if (pushSubscription) return [
                        2,
                        pushSubscription.unsubscribe()
                    ];
                    // If there's no SW, consider it a success.
                    return [
                        2,
                        true
                    ];
            }
        });
    });
}
function updateToken(tokenDetails, firebaseDependencies, swRegistration) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var updatedToken, updatedTokenDetails, e_2;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    _a1.trys.push([
                        0,
                        3,
                        ,
                        5
                    ]);
                    return [
                        4,
                        requestUpdateToken(firebaseDependencies, tokenDetails)
                    ];
                case 1:
                    updatedToken = _a1.sent();
                    updatedTokenDetails = tslib.__assign(tslib.__assign({
                    }, tokenDetails), {
                        token: updatedToken,
                        createTime: Date.now()
                    });
                    return [
                        4,
                        dbSet(firebaseDependencies, updatedTokenDetails)
                    ];
                case 2:
                    _a1.sent();
                    return [
                        2,
                        updatedToken
                    ];
                case 3:
                    e_2 = _a1.sent();
                    return [
                        4,
                        deleteToken(firebaseDependencies, swRegistration)
                    ];
                case 4:
                    _a1.sent();
                    throw e_2;
                case 5:
                    return [
                        2
                    ];
            }
        });
    });
}
function getNewToken(firebaseDependencies, subscriptionOptions) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var token, tokenDetails;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    return [
                        4,
                        requestGetToken(firebaseDependencies, subscriptionOptions)
                    ];
                case 1:
                    token = _a1.sent();
                    tokenDetails = {
                        token: token,
                        createTime: Date.now(),
                        subscriptionOptions: subscriptionOptions
                    };
                    return [
                        4,
                        dbSet(firebaseDependencies, tokenDetails)
                    ];
                case 2:
                    _a1.sent();
                    return [
                        2,
                        tokenDetails.token
                    ];
            }
        });
    });
}
/**
 * Gets a PushSubscription for the current user.
 */ function getPushSubscription(swRegistration, vapidKey) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var subscription;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    return [
                        4,
                        swRegistration.pushManager.getSubscription()
                    ];
                case 1:
                    subscription = _a1.sent();
                    if (subscription) return [
                        2,
                        subscription
                    ];
                    return [
                        2,
                        swRegistration.pushManager.subscribe({
                            userVisibleOnly: true,
                            // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key
                            // submitted to pushManager#subscribe must be of type Uint8Array.
                            applicationServerKey: base64ToArray(vapidKey)
                        })
                    ];
            }
        });
    });
}
/**
 * Checks if the saved tokenDetails object matches the configuration provided.
 */ function isTokenValid(dbOptions, currentOptions) {
    var isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;
    var isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;
    var isAuthEqual = currentOptions.auth === dbOptions.auth;
    var isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;
    return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function externalizePayload(internalPayload) {
    var payload = {
        from: internalPayload.from,
        // eslint-disable-next-line camelcase
        collapseKey: internalPayload.collapse_key,
        // eslint-disable-next-line camelcase
        messageId: internalPayload.fcm_message_id
    };
    propagateNotificationPayload(payload, internalPayload);
    propagateDataPayload(payload, internalPayload);
    propagateFcmOptions(payload, internalPayload);
    return payload;
}
function propagateNotificationPayload(payload, messagePayloadInternal) {
    if (!messagePayloadInternal.notification) return;
    payload.notification = {
    };
    var title = messagePayloadInternal.notification.title;
    if (!!title) payload.notification.title = title;
    var body = messagePayloadInternal.notification.body;
    if (!!body) payload.notification.body = body;
    var image = messagePayloadInternal.notification.image;
    if (!!image) payload.notification.image = image;
}
function propagateDataPayload(payload, messagePayloadInternal) {
    if (!messagePayloadInternal.data) return;
    payload.data = messagePayloadInternal.data;
}
function propagateFcmOptions(payload, messagePayloadInternal) {
    if (!messagePayloadInternal.fcmOptions) return;
    payload.fcmOptions = {
    };
    var link = messagePayloadInternal.fcmOptions.link;
    if (!!link) payload.fcmOptions.link = link;
    // eslint-disable-next-line camelcase
    var analyticsLabel = messagePayloadInternal.fcmOptions.analytics_label;
    if (!!analyticsLabel) payload.fcmOptions.analyticsLabel = analyticsLabel;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function isConsoleMessage(data) {
    // This message has a campaign ID, meaning it was sent using the Firebase Console.
    return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Returns a promise that resolves after given time passes. */ function sleep(ms) {
    return new Promise(function(resolve) {
        setTimeout(resolve, ms);
    });
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var SwController = function() {
    function SwController1(firebaseDependencies) {
        var _this = this;
        this.firebaseDependencies = firebaseDependencies;
        // A boolean flag to determine wether an app is using onBackgroundMessage or
        // setBackgroundMessageHandler. onBackgroundMessage will receive a MessagePayload regardless of if
        // a notification is displayed. Whereas, setBackgroundMessageHandler will swallow the
        // MessagePayload if a NotificationPayload is included.
        this.isOnBackgroundMessageUsed = null;
        this.vapidKey = null;
        this.bgMessageHandler = null;
        self.addEventListener('push', function(e) {
            e.waitUntil(_this.onPush(e));
        });
        self.addEventListener('pushsubscriptionchange', function(e) {
            e.waitUntil(_this.onSubChange(e));
        });
        self.addEventListener('notificationclick', function(e) {
            e.waitUntil(_this.onNotificationClick(e));
        });
    }
    Object.defineProperty(SwController1.prototype, "app", {
        get: function() {
            return this.firebaseDependencies.app;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @deprecated. Use onBackgroundMessage(nextOrObserver: NextFn<object> | Observer<object>):
     * Unsubscribe instead.
     *
     * Calling setBackgroundMessageHandler will opt in to some specific behaviors.
     *
     * 1.) If a notification doesn't need to be shown due to a window already being visible, then push
     * messages will be sent to the page. 2.) If a notification needs to be shown, and the message
     * contains no notification data this method will be called and the promise it returns will be
     * passed to event.waitUntil. If you do not set this callback then all push messages will let and
     * the developer can handle them in a their own 'push' event callback
     *
     * @param callback The callback to be called when a push message is received and a notification
     * must be shown. The callback will be given the data from the push message.
     */ SwController1.prototype.setBackgroundMessageHandler = function(callback) {
        this.isOnBackgroundMessageUsed = false;
        if (!callback || typeof callback !== 'function') throw ERROR_FACTORY.create("invalid-bg-handler"/* INVALID_BG_HANDLER */ );
        this.bgMessageHandler = callback;
    };
    SwController1.prototype.onBackgroundMessage = function(nextOrObserver) {
        var _this = this;
        this.isOnBackgroundMessageUsed = true;
        this.bgMessageHandler = nextOrObserver;
        return function() {
            _this.bgMessageHandler = null;
        };
    };
    // TODO: Remove getToken from SW Controller. Calling this from an old SW can cause all kinds of
    // trouble.
    SwController1.prototype.getToken = function() {
        var _a1, _b;
        return tslib.__awaiter(this, void 0, void 0, function() {
            var tokenDetails;
            return tslib.__generator(this, function(_c) {
                switch(_c.label){
                    case 0:
                        if (!!this.vapidKey) return [
                            3,
                            2
                        ];
                        return [
                            4,
                            dbGet(this.firebaseDependencies)
                        ];
                    case 1:
                        tokenDetails = _c.sent();
                        this.vapidKey = (_b = (_a1 = tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.subscriptionOptions) === null || _a1 === void 0 ? void 0 : _a1.vapidKey) !== null && _b !== void 0 ? _b : DEFAULT_VAPID_KEY;
                        _c.label = 2;
                    case 2:
                        return [
                            2,
                            getToken(this.firebaseDependencies, self.registration, this.vapidKey)
                        ];
                }
            });
        });
    };
    // TODO: Remove deleteToken from SW Controller. Calling this from an old SW can cause all kinds of
    // trouble.
    SwController1.prototype.deleteToken = function() {
        return deleteToken(this.firebaseDependencies, self.registration);
    };
    SwController1.prototype.requestPermission = function() {
        throw ERROR_FACTORY.create("only-available-in-window"/* AVAILABLE_IN_WINDOW */ );
    };
    // TODO: Remove this together with getToken from SW Controller.
    SwController1.prototype.usePublicVapidKey = function(vapidKey) {
        if (this.vapidKey !== null) throw ERROR_FACTORY.create("use-vapid-key-after-get-token"/* USE_VAPID_KEY_AFTER_GET_TOKEN */ );
        if (typeof vapidKey !== 'string' || vapidKey.length === 0) throw ERROR_FACTORY.create("invalid-vapid-key"/* INVALID_VAPID_KEY */ );
        this.vapidKey = vapidKey;
    };
    SwController1.prototype.useServiceWorker = function() {
        throw ERROR_FACTORY.create("only-available-in-window"/* AVAILABLE_IN_WINDOW */ );
    };
    SwController1.prototype.onMessage = function() {
        throw ERROR_FACTORY.create("only-available-in-window"/* AVAILABLE_IN_WINDOW */ );
    };
    SwController1.prototype.onTokenRefresh = function() {
        throw ERROR_FACTORY.create("only-available-in-window"/* AVAILABLE_IN_WINDOW */ );
    };
    /**
     * A handler for push events that shows notifications based on the content of the payload.
     *
     * The payload must be a JSON-encoded Object with a `notification` key. The value of the
     * `notification` property will be used as the NotificationOptions object passed to
     * showNotification. Additionally, the `title` property of the notification object will be used as
     * the title.
     *
     * If there is no notification data in the payload then no notification will be shown.
     */ SwController1.prototype.onPush = function(event) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var internalPayload, clientList, isNotificationShown, payload;
            return tslib.__generator(this, function(_a1) {
                switch(_a1.label){
                    case 0:
                        internalPayload = getMessagePayloadInternal(event);
                        if (!internalPayload) {
                            console.debug(TAG + 'failed to get parsed MessagePayload from the PushEvent. Skip handling the push.');
                            return [
                                2
                            ];
                        }
                        return [
                            4,
                            getClientList()
                        ];
                    case 1:
                        clientList = _a1.sent();
                        if (hasVisibleClients(clientList)) return [
                            2,
                            sendMessagePayloadInternalToWindows(clientList, internalPayload)
                        ];
                        isNotificationShown = false;
                        if (!!!internalPayload.notification) return [
                            3,
                            3
                        ];
                        return [
                            4,
                            showNotification(wrapInternalPayload(internalPayload))
                        ];
                    case 2:
                        _a1.sent();
                        isNotificationShown = true;
                        _a1.label = 3;
                    case 3:
                        // MessagePayload is only passed to `onBackgroundMessage`. Skip passing MessagePayload for
                        // the legacy `setBackgroundMessageHandler` to preserve the SDK behaviors.
                        if (isNotificationShown === true && this.isOnBackgroundMessageUsed === false) return [
                            2
                        ];
                        if (!!this.bgMessageHandler) {
                            payload = externalizePayload(internalPayload);
                            if (typeof this.bgMessageHandler === 'function') this.bgMessageHandler(payload);
                            else this.bgMessageHandler.next(payload);
                        }
                        // wait briefly to allow onBackgroundMessage to complete
                        return [
                            4,
                            sleep(BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS)
                        ];
                    case 4:
                        // wait briefly to allow onBackgroundMessage to complete
                        _a1.sent();
                        return [
                            2
                        ];
                }
            });
        });
    };
    SwController1.prototype.onSubChange = function(event) {
        var _a1, _b;
        return tslib.__awaiter(this, void 0, void 0, function() {
            var newSubscription, tokenDetails;
            return tslib.__generator(this, function(_c) {
                switch(_c.label){
                    case 0:
                        newSubscription = event.newSubscription;
                        if (!!newSubscription) return [
                            3,
                            2
                        ];
                        // Subscription revoked, delete token
                        return [
                            4,
                            deleteToken(this.firebaseDependencies, self.registration)
                        ];
                    case 1:
                        // Subscription revoked, delete token
                        _c.sent();
                        return [
                            2
                        ];
                    case 2:
                        return [
                            4,
                            dbGet(this.firebaseDependencies)
                        ];
                    case 3:
                        tokenDetails = _c.sent();
                        return [
                            4,
                            deleteToken(this.firebaseDependencies, self.registration)
                        ];
                    case 4:
                        _c.sent();
                        return [
                            4,
                            getToken(this.firebaseDependencies, self.registration, (_b = (_a1 = tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.subscriptionOptions) === null || _a1 === void 0 ? void 0 : _a1.vapidKey) !== null && _b !== void 0 ? _b : DEFAULT_VAPID_KEY)
                        ];
                    case 5:
                        _c.sent();
                        return [
                            2
                        ];
                }
            });
        });
    };
    SwController1.prototype.onNotificationClick = function(event) {
        var _a1, _b;
        return tslib.__awaiter(this, void 0, void 0, function() {
            var internalPayload, link, url, originUrl, client;
            return tslib.__generator(this, function(_c) {
                switch(_c.label){
                    case 0:
                        internalPayload = (_b = (_a1 = event.notification) === null || _a1 === void 0 ? void 0 : _a1.data) === null || _b === void 0 ? void 0 : _b[FCM_MSG];
                        if (!internalPayload) return [
                            2
                        ];
                        else if (event.action) // User clicked on an action button. This will allow developers to act on action button clicks
                        // by using a custom onNotificationClick listener that they define.
                        return [
                            2
                        ];
                        // Prevent other listeners from receiving the event
                        event.stopImmediatePropagation();
                        event.notification.close();
                        link = getLink(internalPayload);
                        if (!link) return [
                            2
                        ];
                        url = new URL(link, self.location.href);
                        originUrl = new URL(self.location.origin);
                        if (url.host !== originUrl.host) return [
                            2
                        ];
                        return [
                            4,
                            getWindowClient(url)
                        ];
                    case 1:
                        client = _c.sent();
                        if (!!client) return [
                            3,
                            4
                        ];
                        return [
                            4,
                            self.clients.openWindow(link)
                        ];
                    case 2:
                        client = _c.sent();
                        // Wait three seconds for the client to initialize and set up the message handler so that it
                        // can receive the message.
                        return [
                            4,
                            sleep(FOREGROUND_HANDLE_PREPARATION_TIME_MS)
                        ];
                    case 3:
                        // Wait three seconds for the client to initialize and set up the message handler so that it
                        // can receive the message.
                        _c.sent();
                        return [
                            3,
                            6
                        ];
                    case 4:
                        return [
                            4,
                            client.focus()
                        ];
                    case 5:
                        client = _c.sent();
                        _c.label = 6;
                    case 6:
                        if (!client) // Window Client will not be returned if it's for a third party origin.
                        return [
                            2
                        ];
                        internalPayload.messageType = MessageType.NOTIFICATION_CLICKED;
                        internalPayload.isFirebaseMessaging = true;
                        return [
                            2,
                            client.postMessage(internalPayload)
                        ];
                }
            });
        });
    };
    return SwController1;
}();
function wrapInternalPayload(internalPayload) {
    var _a1;
    var wrappedInternalPayload = tslib.__assign({
    }, internalPayload.notification);
    // Put the message payload under FCM_MSG name so we can identify the notification as being an FCM
    // notification vs a notification from somewhere else (i.e. normal web push or developer generated
    // notification).
    wrappedInternalPayload.data = (_a1 = {
    }, _a1[FCM_MSG] = internalPayload, _a1);
    return wrappedInternalPayload;
}
function getMessagePayloadInternal(_a1) {
    var data = _a1.data;
    if (!data) return null;
    try {
        return data.json();
    } catch (err) {
        // Not JSON so not an FCM message.
        return null;
    }
}
/**
 * @param url The URL to look for when focusing a client.
 * @return Returns an existing window client or a newly opened WindowClient.
 */ function getWindowClient(url) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var clientList, clientList_1, clientList_1_1, client, clientUrl;
        var e_1, _a1;
        return tslib.__generator(this, function(_b) {
            switch(_b.label){
                case 0:
                    return [
                        4,
                        getClientList()
                    ];
                case 1:
                    clientList = _b.sent();
                    try {
                        for(clientList_1 = tslib.__values(clientList), clientList_1_1 = clientList_1.next(); !clientList_1_1.done; clientList_1_1 = clientList_1.next()){
                            client = clientList_1_1.value;
                            clientUrl = new URL(client.url, self.location.href);
                            if (url.host === clientUrl.host) return [
                                2,
                                client
                            ];
                        }
                    } catch (e_1_1) {
                        e_1 = {
                            error: e_1_1
                        };
                    } finally{
                        try {
                            if (clientList_1_1 && !clientList_1_1.done && (_a1 = clientList_1.return)) _a1.call(clientList_1);
                        } finally{
                            if (e_1) throw e_1.error;
                        }
                    }
                    return [
                        2,
                        null
                    ];
            }
        });
    });
}
/**
 * @returns If there is currently a visible WindowClient, this method will resolve to true,
 * otherwise false.
 */ function hasVisibleClients(clientList) {
    return clientList.some(function(client) {
        return client.visibilityState === 'visible' && // Ignore chrome-extension clients as that matches the background pages of extensions, which
        // are always considered visible for some reason.
        !client.url.startsWith('chrome-extension://');
    });
}
function sendMessagePayloadInternalToWindows(clientList, internalPayload) {
    var e_2, _a1;
    internalPayload.isFirebaseMessaging = true;
    internalPayload.messageType = MessageType.PUSH_RECEIVED;
    try {
        for(var clientList_2 = tslib.__values(clientList), clientList_2_1 = clientList_2.next(); !clientList_2_1.done; clientList_2_1 = clientList_2.next()){
            var client = clientList_2_1.value;
            client.postMessage(internalPayload);
        }
    } catch (e_2_1) {
        e_2 = {
            error: e_2_1
        };
    } finally{
        try {
            if (clientList_2_1 && !clientList_2_1.done && (_a1 = clientList_2.return)) _a1.call(clientList_2);
        } finally{
            if (e_2) throw e_2.error;
        }
    }
}
function getClientList() {
    return self.clients.matchAll({
        type: 'window',
        includeUncontrolled: true
    });
}
function showNotification(notificationPayloadInternal) {
    var _a1;
    // Note: Firefox does not support the maxActions property.
    // https://developer.mozilla.org/en-US/docs/Web/API/notification/maxActions
    var actions = notificationPayloadInternal.actions;
    var maxActions = Notification.maxActions;
    if (actions && maxActions && actions.length > maxActions) console.warn("This browser only supports " + maxActions + " actions. The remaining actions will not be displayed.");
    return self.registration.showNotification(/* title= */ (_a1 = notificationPayloadInternal.title) !== null && _a1 !== void 0 ? _a1 : '', notificationPayloadInternal);
}
function getLink(payload) {
    var _a1, _b, _c;
    // eslint-disable-next-line camelcase
    var link = (_b = (_a1 = payload.fcmOptions) === null || _a1 === void 0 ? void 0 : _a1.link) !== null && _b !== void 0 ? _b : (_c = payload.notification) === null || _c === void 0 ? void 0 : _c.click_action;
    if (link) return link;
    if (isConsoleMessage(payload.data)) // Notification created in the Firebase Console. Redirect to origin.
    return self.location.origin;
    else return null;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var WindowController = function() {
    function WindowController1(firebaseDependencies) {
        var _this = this;
        this.firebaseDependencies = firebaseDependencies;
        this.vapidKey = null;
        this.onMessageCallback = null;
        navigator.serviceWorker.addEventListener('message', function(e) {
            return _this.messageEventListener(e);
        });
    }
    Object.defineProperty(WindowController1.prototype, "app", {
        get: function() {
            return this.firebaseDependencies.app;
        },
        enumerable: false,
        configurable: true
    });
    WindowController1.prototype.messageEventListener = function(event) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var internalPayload, dataPayload;
            return tslib.__generator(this, function(_a1) {
                switch(_a1.label){
                    case 0:
                        internalPayload = event.data;
                        if (!internalPayload.isFirebaseMessaging) return [
                            2
                        ];
                        // onMessageCallback is either a function or observer/subscriber.
                        // TODO: in the modularization release, have onMessage handle type MessagePayload as supposed to
                        // the legacy payload where some fields are in snake cases.
                        if (this.onMessageCallback && internalPayload.messageType === MessageType.PUSH_RECEIVED) {
                            if (typeof this.onMessageCallback === 'function') this.onMessageCallback(stripInternalFields(Object.assign({
                            }, internalPayload)));
                            else this.onMessageCallback.next(Object.assign({
                            }, internalPayload));
                        }
                        dataPayload = internalPayload.data;
                        if (!(isConsoleMessage(dataPayload) && dataPayload[CONSOLE_CAMPAIGN_ANALYTICS_ENABLED] === '1')) return [
                            3,
                            2
                        ];
                        return [
                            4,
                            this.logEvent(internalPayload.messageType, dataPayload)
                        ];
                    case 1:
                        _a1.sent();
                        _a1.label = 2;
                    case 2:
                        return [
                            2
                        ];
                }
            });
        });
    };
    WindowController1.prototype.getVapidKey = function() {
        return this.vapidKey;
    };
    WindowController1.prototype.getSwReg = function() {
        return this.swRegistration;
    };
    WindowController1.prototype.getToken = function(options) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(_a1) {
                switch(_a1.label){
                    case 0:
                        if (!(Notification.permission === 'default')) return [
                            3,
                            2
                        ];
                        return [
                            4,
                            Notification.requestPermission()
                        ];
                    case 1:
                        _a1.sent();
                        _a1.label = 2;
                    case 2:
                        if (Notification.permission !== 'granted') throw ERROR_FACTORY.create("permission-blocked"/* PERMISSION_BLOCKED */ );
                        return [
                            4,
                            this.updateVapidKey(options === null || options === void 0 ? void 0 : options.vapidKey)
                        ];
                    case 3:
                        _a1.sent();
                        return [
                            4,
                            this.updateSwReg(options === null || options === void 0 ? void 0 : options.serviceWorkerRegistration)
                        ];
                    case 4:
                        _a1.sent();
                        return [
                            2,
                            getToken(this.firebaseDependencies, this.swRegistration, this.vapidKey)
                        ];
                }
            });
        });
    };
    WindowController1.prototype.updateVapidKey = function(vapidKey) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(_a1) {
                if (!!vapidKey) this.vapidKey = vapidKey;
                else if (!this.vapidKey) this.vapidKey = DEFAULT_VAPID_KEY;
                return [
                    2
                ];
            });
        });
    };
    WindowController1.prototype.updateSwReg = function(swRegistration) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(_a1) {
                switch(_a1.label){
                    case 0:
                        if (!(!swRegistration && !this.swRegistration)) return [
                            3,
                            2
                        ];
                        return [
                            4,
                            this.registerDefaultSw()
                        ];
                    case 1:
                        _a1.sent();
                        _a1.label = 2;
                    case 2:
                        if (!swRegistration && !!this.swRegistration) return [
                            2
                        ];
                        if (!(swRegistration instanceof ServiceWorkerRegistration)) throw ERROR_FACTORY.create("invalid-sw-registration"/* INVALID_SW_REGISTRATION */ );
                        this.swRegistration = swRegistration;
                        return [
                            2
                        ];
                }
            });
        });
    };
    WindowController1.prototype.registerDefaultSw = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var _a1, e_1;
            return tslib.__generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        _b.trys.push([
                            0,
                            2,
                            ,
                            3
                        ]);
                        _a1 = this;
                        return [
                            4,
                            navigator.serviceWorker.register(DEFAULT_SW_PATH, {
                                scope: DEFAULT_SW_SCOPE
                            })
                        ];
                    case 1:
                        _a1.swRegistration = _b.sent();
                        // The timing when browser updates sw when sw has an update is unreliable by my experiment. It
                        // leads to version conflict when the SDK upgrades to a newer version in the main page, but sw
                        // is stuck with the old version. For example,
                        // https://github.com/firebase/firebase-js-sdk/issues/2590 The following line reliably updates
                        // sw if there was an update.
                        this.swRegistration.update().catch(function() {
                        /* it is non blocking and we don't care if it failed */ });
                        return [
                            3,
                            3
                        ];
                    case 2:
                        e_1 = _b.sent();
                        throw ERROR_FACTORY.create("failed-service-worker-registration"/* FAILED_DEFAULT_REGISTRATION */ , {
                            browserErrorMessage: e_1.message
                        });
                    case 3:
                        return [
                            2
                        ];
                }
            });
        });
    };
    WindowController1.prototype.deleteToken = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(_a1) {
                switch(_a1.label){
                    case 0:
                        if (!!this.swRegistration) return [
                            3,
                            2
                        ];
                        return [
                            4,
                            this.registerDefaultSw()
                        ];
                    case 1:
                        _a1.sent();
                        _a1.label = 2;
                    case 2:
                        return [
                            2,
                            deleteToken(this.firebaseDependencies, this.swRegistration)
                        ];
                }
            });
        });
    };
    /**
     * Request permission if it is not currently granted.
     *
     * @return Resolves if the permission was granted, rejects otherwise.
     *
     * @deprecated Use Notification.requestPermission() instead.
     * https://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission
     */ WindowController1.prototype.requestPermission = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var permissionResult;
            return tslib.__generator(this, function(_a1) {
                switch(_a1.label){
                    case 0:
                        if (Notification.permission === 'granted') return [
                            2
                        ];
                        return [
                            4,
                            Notification.requestPermission()
                        ];
                    case 1:
                        permissionResult = _a1.sent();
                        if (permissionResult === 'granted') return [
                            2
                        ];
                        else if (permissionResult === 'denied') throw ERROR_FACTORY.create("permission-blocked"/* PERMISSION_BLOCKED */ );
                        else throw ERROR_FACTORY.create("permission-default"/* PERMISSION_DEFAULT */ );
                }
            });
        });
    };
    /**
     * @deprecated. Use getToken(options?: {vapidKey?: string; serviceWorkerRegistration?:
     * ServiceWorkerRegistration;}): Promise<string> instead.
     */ WindowController1.prototype.usePublicVapidKey = function(vapidKey) {
        if (this.vapidKey !== null) throw ERROR_FACTORY.create("use-vapid-key-after-get-token"/* USE_VAPID_KEY_AFTER_GET_TOKEN */ );
        if (typeof vapidKey !== 'string' || vapidKey.length === 0) throw ERROR_FACTORY.create("invalid-vapid-key"/* INVALID_VAPID_KEY */ );
        this.vapidKey = vapidKey;
    };
    /**
     * @deprecated. Use getToken(options?: {vapidKey?: string; serviceWorkerRegistration?:
     * ServiceWorkerRegistration;}): Promise<string> instead.
     */ WindowController1.prototype.useServiceWorker = function(swRegistration) {
        if (!(swRegistration instanceof ServiceWorkerRegistration)) throw ERROR_FACTORY.create("invalid-sw-registration"/* INVALID_SW_REGISTRATION */ );
        if (this.swRegistration) throw ERROR_FACTORY.create("use-sw-after-get-token"/* USE_SW_AFTER_GET_TOKEN */ );
        this.swRegistration = swRegistration;
    };
    /**
     * @param nextOrObserver An observer object or a function triggered on message.
     *
     * @return The unsubscribe function for the observer.
     */ WindowController1.prototype.onMessage = function(nextOrObserver) {
        var _this = this;
        this.onMessageCallback = nextOrObserver;
        return function() {
            _this.onMessageCallback = null;
        };
    };
    WindowController1.prototype.setBackgroundMessageHandler = function() {
        throw ERROR_FACTORY.create("only-available-in-sw"/* AVAILABLE_IN_SW */ );
    };
    WindowController1.prototype.onBackgroundMessage = function() {
        throw ERROR_FACTORY.create("only-available-in-sw"/* AVAILABLE_IN_SW */ );
    };
    /**
     * @deprecated No-op. It was initially designed with token rotation requests from server in mind.
     * However, the plan to implement such feature was abandoned.
     */ WindowController1.prototype.onTokenRefresh = function() {
        return function() {
        };
    };
    WindowController1.prototype.logEvent = function(messageType, data) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var eventType, analytics;
            return tslib.__generator(this, function(_a1) {
                switch(_a1.label){
                    case 0:
                        eventType = getEventType(messageType);
                        return [
                            4,
                            this.firebaseDependencies.analyticsProvider.get()
                        ];
                    case 1:
                        analytics = _a1.sent();
                        analytics.logEvent(eventType, {
                            /* eslint-disable camelcase */ message_id: data[CONSOLE_CAMPAIGN_ID],
                            message_name: data[CONSOLE_CAMPAIGN_NAME],
                            message_time: data[CONSOLE_CAMPAIGN_TIME],
                            message_device_time: Math.floor(Date.now() / 1000)
                        });
                        return [
                            2
                        ];
                }
            });
        });
    };
    return WindowController1;
}();
function getEventType(messageType) {
    switch(messageType){
        case MessageType.NOTIFICATION_CLICKED:
            return 'notification_open';
        case MessageType.PUSH_RECEIVED:
            return 'notification_foreground';
        default:
            throw new Error();
    }
}
function stripInternalFields(internalPayload) {
    delete internalPayload.messageType;
    delete internalPayload.isFirebaseMessaging;
    return internalPayload;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function extractAppConfig(app) {
    var e_1, _a1;
    if (!app || !app.options) throw getMissingValueError('App Configuration Object');
    if (!app.name) throw getMissingValueError('App Name');
    // Required app config keys
    var configKeys = [
        'projectId',
        'apiKey',
        'appId',
        'messagingSenderId'
    ];
    var options = app.options;
    try {
        for(var configKeys_1 = tslib.__values(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()){
            var keyName = configKeys_1_1.value;
            if (!options[keyName]) throw getMissingValueError(keyName);
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (configKeys_1_1 && !configKeys_1_1.done && (_a1 = configKeys_1.return)) _a1.call(configKeys_1);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    return {
        appName: app.name,
        projectId: options.projectId,
        apiKey: options.apiKey,
        appId: options.appId,
        senderId: options.messagingSenderId
    };
}
function getMissingValueError(valueName) {
    return ERROR_FACTORY.create("missing-app-config-values"/* MISSING_APP_CONFIG_VALUES */ , {
        valueName: valueName
    });
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var MESSAGING_NAME = 'messaging';
function factoryMethod(container) {
    // Dependencies.
    var app = container.getProvider('app').getImmediate();
    var appConfig = extractAppConfig(app);
    var installations = container.getProvider('installations').getImmediate();
    var analyticsProvider = container.getProvider('analytics-internal');
    var firebaseDependencies = {
        app: app,
        appConfig: appConfig,
        installations: installations,
        analyticsProvider: analyticsProvider
    };
    if (!isSupported()) throw ERROR_FACTORY.create("unsupported-browser"/* UNSUPPORTED_BROWSER */ );
    if (self && 'ServiceWorkerGlobalScope' in self) // Running in ServiceWorker context
    return new SwController(firebaseDependencies);
    else // Assume we are in the window context.
    return new WindowController(firebaseDependencies);
}
var NAMESPACE_EXPORTS = {
    isSupported: isSupported
};
firebase__default['default'].INTERNAL.registerComponent(new component.Component(MESSAGING_NAME, factoryMethod, "PUBLIC"/* PUBLIC */ ).setServiceProps(NAMESPACE_EXPORTS));
function isSupported() {
    if (self && 'ServiceWorkerGlobalScope' in self) // Running in ServiceWorker context
    return isSWControllerSupported();
    else // Assume we are in the window context.
    return isWindowControllerSupported();
}
/**
 * Checks to see if the required APIs exist.
 */ function isWindowControllerSupported() {
    return 'indexedDB' in window && indexedDB !== null && navigator.cookieEnabled && 'serviceWorker' in navigator && 'PushManager' in window && 'Notification' in window && 'fetch' in window && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');
}
/**
 * Checks to see if the required APIs exist within SW Context.
 */ function isSWControllerSupported() {
    return 'indexedDB' in self && indexedDB !== null && 'PushManager' in self && 'Notification' in self && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');
}

},{"@firebase/installations":"7rMif","@firebase/component":"5qT0x","@firebase/util":"3bR6t","tslib":"4rd38","idb":"4rm5K","@firebase/app":"6IUA5"}],"7rMif":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var firebase = require('@firebase/app');
var component = require('@firebase/component');
var tslib = require('tslib');
var util = require('@firebase/util');
var idb = require('idb');
function _interopDefaultLegacy(e) {
    return e && typeof e === 'object' && 'default' in e ? e : {
        'default': e
    };
}
var firebase__default = /*#__PURE__*/ _interopDefaultLegacy(firebase);
var name = "@firebase/installations";
var version = "0.4.32";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var PENDING_TIMEOUT_MS = 10000;
var PACKAGE_VERSION = "w:" + version;
var INTERNAL_AUTH_VERSION = 'FIS_v2';
var INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';
var TOKEN_EXPIRATION_BUFFER = 3600000; // One hour
var SERVICE = 'installations';
var SERVICE_NAME = 'Installations';
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _a;
var ERROR_DESCRIPTION_MAP = (_a = {
}, _a["missing-app-config-values"] = 'Missing App configuration value: "{$valueName}"', _a["not-registered"] = 'Firebase Installation is not registered.', _a["installation-not-found"] = 'Firebase Installation not found.', _a["request-failed"] = '{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"', _a["app-offline"] = 'Could not process request. Application offline.', _a["delete-pending-registration"] = "Can't delete installation while there is a pending registration request.", _a);
var ERROR_FACTORY = new util.ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);
/** Returns true if error is a FirebaseError that is based on an error from the server. */ function isServerError(error) {
    return error instanceof util.FirebaseError && error.code.includes("request-failed"/* REQUEST_FAILED */ );
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function getInstallationsEndpoint(_a1) {
    var projectId = _a1.projectId;
    return INSTALLATIONS_API_URL + "/projects/" + projectId + "/installations";
}
function extractAuthTokenInfoFromResponse(response) {
    return {
        token: response.token,
        requestStatus: 2,
        expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),
        creationTime: Date.now()
    };
}
function getErrorFromResponse(requestName, response) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var responseJson, errorData;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    return [
                        4,
                        response.json()
                    ];
                case 1:
                    responseJson = _a1.sent();
                    errorData = responseJson.error;
                    return [
                        2,
                        ERROR_FACTORY.create("request-failed"/* REQUEST_FAILED */ , {
                            requestName: requestName,
                            serverCode: errorData.code,
                            serverMessage: errorData.message,
                            serverStatus: errorData.status
                        })
                    ];
            }
        });
    });
}
function getHeaders(_a1) {
    var apiKey = _a1.apiKey;
    return new Headers({
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'x-goog-api-key': apiKey
    });
}
function getHeadersWithAuth(appConfig, _a1) {
    var refreshToken = _a1.refreshToken;
    var headers = getHeaders(appConfig);
    headers.append('Authorization', getAuthorizationHeader(refreshToken));
    return headers;
}
/**
 * Calls the passed in fetch wrapper and returns the response.
 * If the returned response has a status of 5xx, re-runs the function once and
 * returns the response.
 */ function retryIfServerError(fn) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var result;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    return [
                        4,
                        fn()
                    ];
                case 1:
                    result = _a1.sent();
                    if (result.status >= 500 && result.status < 600) // Internal Server Error. Retry request.
                    return [
                        2,
                        fn()
                    ];
                    return [
                        2,
                        result
                    ];
            }
        });
    });
}
function getExpiresInFromResponseExpiresIn(responseExpiresIn) {
    // This works because the server will never respond with fractions of a second.
    return Number(responseExpiresIn.replace('s', '000'));
}
function getAuthorizationHeader(refreshToken) {
    return INTERNAL_AUTH_VERSION + " " + refreshToken;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function createInstallationRequest(appConfig, _a1) {
    var fid = _a1.fid;
    return tslib.__awaiter(this, void 0, void 0, function() {
        var endpoint, headers, body, request, response, responseValue, registeredInstallationEntry;
        return tslib.__generator(this, function(_b) {
            switch(_b.label){
                case 0:
                    endpoint = getInstallationsEndpoint(appConfig);
                    headers = getHeaders(appConfig);
                    body = {
                        fid: fid,
                        authVersion: INTERNAL_AUTH_VERSION,
                        appId: appConfig.appId,
                        sdkVersion: PACKAGE_VERSION
                    };
                    request = {
                        method: 'POST',
                        headers: headers,
                        body: JSON.stringify(body)
                    };
                    return [
                        4,
                        retryIfServerError(function() {
                            return fetch(endpoint, request);
                        })
                    ];
                case 1:
                    response = _b.sent();
                    if (!response.ok) return [
                        3,
                        3
                    ];
                    return [
                        4,
                        response.json()
                    ];
                case 2:
                    responseValue = _b.sent();
                    registeredInstallationEntry = {
                        fid: responseValue.fid || fid,
                        registrationStatus: 2,
                        refreshToken: responseValue.refreshToken,
                        authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)
                    };
                    return [
                        2,
                        registeredInstallationEntry
                    ];
                case 3:
                    return [
                        4,
                        getErrorFromResponse('Create Installation', response)
                    ];
                case 4:
                    throw _b.sent();
            }
        });
    });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Returns a promise that resolves after given time passes. */ function sleep(ms) {
    return new Promise(function(resolve) {
        setTimeout(resolve, ms);
    });
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function bufferToBase64UrlSafe(array) {
    var b64 = btoa(String.fromCharCode.apply(String, tslib.__spreadArray([], tslib.__read(array))));
    return b64.replace(/\+/g, '-').replace(/\//g, '_');
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var VALID_FID_PATTERN = /^[cdef][\w-]{21}$/;
var INVALID_FID = '';
/**
 * Generates a new FID using random values from Web Crypto API.
 * Returns an empty string if FID generation fails for any reason.
 */ function generateFid() {
    try {
        // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5
        // bytes. our implementation generates a 17 byte array instead.
        var fidByteArray = new Uint8Array(17);
        var crypto_1 = self.crypto || self.msCrypto;
        crypto_1.getRandomValues(fidByteArray);
        // Replace the first 4 random bits with the constant FID header of 0b0111.
        fidByteArray[0] = 112 + fidByteArray[0] % 16;
        var fid = encode(fidByteArray);
        return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;
    } catch (_a1) {
        // FID generation errored
        return INVALID_FID;
    }
}
/** Converts a FID Uint8Array to a base64 string representation. */ function encode(fidByteArray) {
    var b64String = bufferToBase64UrlSafe(fidByteArray);
    // Remove the 23rd character that was added because of the extra 4 bits at the
    // end of our 17 byte array, and the '=' padding.
    return b64String.substr(0, 22);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Returns a string key that can be used to identify the app. */ function getKey(appConfig) {
    return appConfig.appName + "!" + appConfig.appId;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var fidChangeCallbacks = new Map();
/**
 * Calls the onIdChange callbacks with the new FID value, and broadcasts the
 * change to other tabs.
 */ function fidChanged(appConfig, fid) {
    var key = getKey(appConfig);
    callFidChangeCallbacks(key, fid);
    broadcastFidChange(key, fid);
}
function addCallback(appConfig, callback) {
    // Open the broadcast channel if it's not already open,
    // to be able to listen to change events from other tabs.
    getBroadcastChannel();
    var key = getKey(appConfig);
    var callbackSet = fidChangeCallbacks.get(key);
    if (!callbackSet) {
        callbackSet = new Set();
        fidChangeCallbacks.set(key, callbackSet);
    }
    callbackSet.add(callback);
}
function removeCallback(appConfig, callback) {
    var key = getKey(appConfig);
    var callbackSet = fidChangeCallbacks.get(key);
    if (!callbackSet) return;
    callbackSet.delete(callback);
    if (callbackSet.size === 0) fidChangeCallbacks.delete(key);
    // Close broadcast channel if there are no more callbacks.
    closeBroadcastChannel();
}
function callFidChangeCallbacks(key, fid) {
    var e_1, _a1;
    var callbacks = fidChangeCallbacks.get(key);
    if (!callbacks) return;
    try {
        for(var callbacks_1 = tslib.__values(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()){
            var callback = callbacks_1_1.value;
            callback(fid);
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (callbacks_1_1 && !callbacks_1_1.done && (_a1 = callbacks_1.return)) _a1.call(callbacks_1);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
}
function broadcastFidChange(key, fid) {
    var channel = getBroadcastChannel();
    if (channel) channel.postMessage({
        key: key,
        fid: fid
    });
    closeBroadcastChannel();
}
var broadcastChannel = null;
/** Opens and returns a BroadcastChannel if it is supported by the browser. */ function getBroadcastChannel() {
    if (!broadcastChannel && 'BroadcastChannel' in self) {
        broadcastChannel = new BroadcastChannel('[Firebase] FID Change');
        broadcastChannel.onmessage = function(e) {
            callFidChangeCallbacks(e.data.key, e.data.fid);
        };
    }
    return broadcastChannel;
}
function closeBroadcastChannel() {
    if (fidChangeCallbacks.size === 0 && broadcastChannel) {
        broadcastChannel.close();
        broadcastChannel = null;
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var DATABASE_NAME = 'firebase-installations-database';
var DATABASE_VERSION = 1;
var OBJECT_STORE_NAME = 'firebase-installations-store';
var dbPromise = null;
function getDbPromise() {
    if (!dbPromise) dbPromise = idb.openDb(DATABASE_NAME, DATABASE_VERSION, function(upgradeDB) {
        // We don't use 'break' in this switch statement, the fall-through
        // behavior is what we want, because if there are multiple versions between
        // the old version and the current version, we want ALL the migrations
        // that correspond to those versions to run, not only the last one.
        // eslint-disable-next-line default-case
        switch(upgradeDB.oldVersion){
            case 0:
                upgradeDB.createObjectStore(OBJECT_STORE_NAME);
        }
    });
    return dbPromise;
}
/** Assigns or overwrites the record for the given key with the given value. */ function set(appConfig, value) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var key, db, tx, objectStore, oldValue;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    key = getKey(appConfig);
                    return [
                        4,
                        getDbPromise()
                    ];
                case 1:
                    db = _a1.sent();
                    tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
                    objectStore = tx.objectStore(OBJECT_STORE_NAME);
                    return [
                        4,
                        objectStore.get(key)
                    ];
                case 2:
                    oldValue = _a1.sent();
                    return [
                        4,
                        objectStore.put(value, key)
                    ];
                case 3:
                    _a1.sent();
                    return [
                        4,
                        tx.complete
                    ];
                case 4:
                    _a1.sent();
                    if (!oldValue || oldValue.fid !== value.fid) fidChanged(appConfig, value.fid);
                    return [
                        2,
                        value
                    ];
            }
        });
    });
}
/** Removes record(s) from the objectStore that match the given key. */ function remove(appConfig) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var key, db, tx;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    key = getKey(appConfig);
                    return [
                        4,
                        getDbPromise()
                    ];
                case 1:
                    db = _a1.sent();
                    tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
                    return [
                        4,
                        tx.objectStore(OBJECT_STORE_NAME).delete(key)
                    ];
                case 2:
                    _a1.sent();
                    return [
                        4,
                        tx.complete
                    ];
                case 3:
                    _a1.sent();
                    return [
                        2
                    ];
            }
        });
    });
}
/**
 * Atomically updates a record with the result of updateFn, which gets
 * called with the current value. If newValue is undefined, the record is
 * deleted instead.
 * @return Updated value
 */ function update(appConfig, updateFn) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var key, db, tx, store, oldValue, newValue;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    key = getKey(appConfig);
                    return [
                        4,
                        getDbPromise()
                    ];
                case 1:
                    db = _a1.sent();
                    tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
                    store = tx.objectStore(OBJECT_STORE_NAME);
                    return [
                        4,
                        store.get(key)
                    ];
                case 2:
                    oldValue = _a1.sent();
                    newValue = updateFn(oldValue);
                    if (!(newValue === undefined)) return [
                        3,
                        4
                    ];
                    return [
                        4,
                        store.delete(key)
                    ];
                case 3:
                    _a1.sent();
                    return [
                        3,
                        6
                    ];
                case 4:
                    return [
                        4,
                        store.put(newValue, key)
                    ];
                case 5:
                    _a1.sent();
                    _a1.label = 6;
                case 6:
                    return [
                        4,
                        tx.complete
                    ];
                case 7:
                    _a1.sent();
                    if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) fidChanged(appConfig, newValue.fid);
                    return [
                        2,
                        newValue
                    ];
            }
        });
    });
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Updates and returns the InstallationEntry from the database.
 * Also triggers a registration request if it is necessary and possible.
 */ function getInstallationEntry(appConfig) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var registrationPromise, installationEntry;
        var _a1;
        return tslib.__generator(this, function(_b) {
            switch(_b.label){
                case 0:
                    return [
                        4,
                        update(appConfig, function(oldEntry) {
                            var installationEntry1 = updateOrCreateInstallationEntry(oldEntry);
                            var entryWithPromise = triggerRegistrationIfNecessary(appConfig, installationEntry1);
                            registrationPromise = entryWithPromise.registrationPromise;
                            return entryWithPromise.installationEntry;
                        })
                    ];
                case 1:
                    installationEntry = _b.sent();
                    if (!(installationEntry.fid === INVALID_FID)) return [
                        3,
                        3
                    ];
                    _a1 = {
                    };
                    return [
                        4,
                        registrationPromise
                    ];
                case 2:
                    // FID generation failed. Waiting for the FID from the server.
                    return [
                        2,
                        (_a1.installationEntry = _b.sent(), _a1)
                    ];
                case 3:
                    return [
                        2,
                        {
                            installationEntry: installationEntry,
                            registrationPromise: registrationPromise
                        }
                    ];
            }
        });
    });
}
/**
 * Creates a new Installation Entry if one does not exist.
 * Also clears timed out pending requests.
 */ function updateOrCreateInstallationEntry(oldEntry) {
    var entry = oldEntry || {
        fid: generateFid(),
        registrationStatus: 0
    };
    return clearTimedOutRequest(entry);
}
/**
 * If the Firebase Installation is not registered yet, this will trigger the
 * registration and return an InProgressInstallationEntry.
 *
 * If registrationPromise does not exist, the installationEntry is guaranteed
 * to be registered.
 */ function triggerRegistrationIfNecessary(appConfig, installationEntry) {
    if (installationEntry.registrationStatus === 0) {
        if (!navigator.onLine) {
            // Registration required but app is offline.
            var registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create("app-offline"/* APP_OFFLINE */ ));
            return {
                installationEntry: installationEntry,
                registrationPromise: registrationPromiseWithError
            };
        }
        // Try registering. Change status to IN_PROGRESS.
        var inProgressEntry = {
            fid: installationEntry.fid,
            registrationStatus: 1,
            registrationTime: Date.now()
        };
        var registrationPromise = registerInstallation(appConfig, inProgressEntry);
        return {
            installationEntry: inProgressEntry,
            registrationPromise: registrationPromise
        };
    } else if (installationEntry.registrationStatus === 1) return {
        installationEntry: installationEntry,
        registrationPromise: waitUntilFidRegistration(appConfig)
    };
    else return {
        installationEntry: installationEntry
    };
}
/** This will be executed only once for each new Firebase Installation. */ function registerInstallation(appConfig, installationEntry) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var registeredInstallationEntry, e_1;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    _a1.trys.push([
                        0,
                        2,
                        ,
                        7
                    ]);
                    return [
                        4,
                        createInstallationRequest(appConfig, installationEntry)
                    ];
                case 1:
                    registeredInstallationEntry = _a1.sent();
                    return [
                        2,
                        set(appConfig, registeredInstallationEntry)
                    ];
                case 2:
                    e_1 = _a1.sent();
                    if (!(isServerError(e_1) && e_1.customData.serverCode === 409)) return [
                        3,
                        4
                    ];
                    // Server returned a "FID can not be used" error.
                    // Generate a new ID next time.
                    return [
                        4,
                        remove(appConfig)
                    ];
                case 3:
                    // Server returned a "FID can not be used" error.
                    // Generate a new ID next time.
                    _a1.sent();
                    return [
                        3,
                        6
                    ];
                case 4:
                    // Registration failed. Set FID as not registered.
                    return [
                        4,
                        set(appConfig, {
                            fid: installationEntry.fid,
                            registrationStatus: 0
                        })
                    ];
                case 5:
                    // Registration failed. Set FID as not registered.
                    _a1.sent();
                    _a1.label = 6;
                case 6:
                    throw e_1;
                case 7:
                    return [
                        2
                    ];
            }
        });
    });
}
/** Call if FID registration is pending in another request. */ function waitUntilFidRegistration(appConfig) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var entry, _a1, installationEntry, registrationPromise;
        return tslib.__generator(this, function(_b) {
            switch(_b.label){
                case 0:
                    return [
                        4,
                        updateInstallationRequest(appConfig)
                    ];
                case 1:
                    entry = _b.sent();
                    _b.label = 2;
                case 2:
                    if (!(entry.registrationStatus === 1)) return [
                        3,
                        5
                    ];
                    // createInstallation request still in progress.
                    return [
                        4,
                        sleep(100)
                    ];
                case 3:
                    // createInstallation request still in progress.
                    _b.sent();
                    return [
                        4,
                        updateInstallationRequest(appConfig)
                    ];
                case 4:
                    entry = _b.sent();
                    return [
                        3,
                        2
                    ];
                case 5:
                    if (!(entry.registrationStatus === 0)) return [
                        3,
                        7
                    ];
                    return [
                        4,
                        getInstallationEntry(appConfig)
                    ];
                case 6:
                    _a1 = _b.sent(), installationEntry = _a1.installationEntry, registrationPromise = _a1.registrationPromise;
                    if (registrationPromise) return [
                        2,
                        registrationPromise
                    ];
                    else // if there is no registrationPromise, entry is registered.
                    return [
                        2,
                        installationEntry
                    ];
                case 7:
                    return [
                        2,
                        entry
                    ];
            }
        });
    });
}
/**
 * Called only if there is a CreateInstallation request in progress.
 *
 * Updates the InstallationEntry in the DB based on the status of the
 * CreateInstallation request.
 *
 * Returns the updated InstallationEntry.
 */ function updateInstallationRequest(appConfig) {
    return update(appConfig, function(oldEntry) {
        if (!oldEntry) throw ERROR_FACTORY.create("installation-not-found"/* INSTALLATION_NOT_FOUND */ );
        return clearTimedOutRequest(oldEntry);
    });
}
function clearTimedOutRequest(entry) {
    if (hasInstallationRequestTimedOut(entry)) return {
        fid: entry.fid,
        registrationStatus: 0
    };
    return entry;
}
function hasInstallationRequestTimedOut(installationEntry) {
    return installationEntry.registrationStatus === 1 && installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now();
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function generateAuthTokenRequest(_a1, installationEntry) {
    var appConfig = _a1.appConfig, platformLoggerProvider = _a1.platformLoggerProvider;
    return tslib.__awaiter(this, void 0, void 0, function() {
        var endpoint, headers, platformLogger, body, request, response, responseValue, completedAuthToken;
        return tslib.__generator(this, function(_b) {
            switch(_b.label){
                case 0:
                    endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);
                    headers = getHeadersWithAuth(appConfig, installationEntry);
                    platformLogger = platformLoggerProvider.getImmediate({
                        optional: true
                    });
                    if (platformLogger) headers.append('x-firebase-client', platformLogger.getPlatformInfoString());
                    body = {
                        installation: {
                            sdkVersion: PACKAGE_VERSION
                        }
                    };
                    request = {
                        method: 'POST',
                        headers: headers,
                        body: JSON.stringify(body)
                    };
                    return [
                        4,
                        retryIfServerError(function() {
                            return fetch(endpoint, request);
                        })
                    ];
                case 1:
                    response = _b.sent();
                    if (!response.ok) return [
                        3,
                        3
                    ];
                    return [
                        4,
                        response.json()
                    ];
                case 2:
                    responseValue = _b.sent();
                    completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);
                    return [
                        2,
                        completedAuthToken
                    ];
                case 3:
                    return [
                        4,
                        getErrorFromResponse('Generate Auth Token', response)
                    ];
                case 4:
                    throw _b.sent();
            }
        });
    });
}
function getGenerateAuthTokenEndpoint(appConfig, _a1) {
    var fid = _a1.fid;
    return getInstallationsEndpoint(appConfig) + "/" + fid + "/authTokens:generate";
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns a valid authentication token for the installation. Generates a new
 * token if one doesn't exist, is expired or about to expire.
 *
 * Should only be called if the Firebase Installation is registered.
 */ function refreshAuthToken(dependencies, forceRefresh) {
    if (forceRefresh === void 0) forceRefresh = false;
    return tslib.__awaiter(this, void 0, void 0, function() {
        var tokenPromise, entry, authToken, _a1;
        return tslib.__generator(this, function(_b) {
            switch(_b.label){
                case 0:
                    return [
                        4,
                        update(dependencies.appConfig, function(oldEntry) {
                            if (!isEntryRegistered(oldEntry)) throw ERROR_FACTORY.create("not-registered"/* NOT_REGISTERED */ );
                            var oldAuthToken = oldEntry.authToken;
                            if (!forceRefresh && isAuthTokenValid(oldAuthToken)) // There is a valid token in the DB.
                            return oldEntry;
                            else if (oldAuthToken.requestStatus === 1) {
                                // There already is a token request in progress.
                                tokenPromise = waitUntilAuthTokenRequest(dependencies, forceRefresh);
                                return oldEntry;
                            } else {
                                // No token or token expired.
                                if (!navigator.onLine) throw ERROR_FACTORY.create("app-offline"/* APP_OFFLINE */ );
                                var inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);
                                tokenPromise = fetchAuthTokenFromServer(dependencies, inProgressEntry);
                                return inProgressEntry;
                            }
                        })
                    ];
                case 1:
                    entry = _b.sent();
                    if (!tokenPromise) return [
                        3,
                        3
                    ];
                    return [
                        4,
                        tokenPromise
                    ];
                case 2:
                    _a1 = _b.sent();
                    return [
                        3,
                        4
                    ];
                case 3:
                    _a1 = entry.authToken;
                    _b.label = 4;
                case 4:
                    authToken = _a1;
                    return [
                        2,
                        authToken
                    ];
            }
        });
    });
}
/**
 * Call only if FID is registered and Auth Token request is in progress.
 *
 * Waits until the current pending request finishes. If the request times out,
 * tries once in this thread as well.
 */ function waitUntilAuthTokenRequest(dependencies, forceRefresh) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var entry, authToken;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    return [
                        4,
                        updateAuthTokenRequest(dependencies.appConfig)
                    ];
                case 1:
                    entry = _a1.sent();
                    _a1.label = 2;
                case 2:
                    if (!(entry.authToken.requestStatus === 1)) return [
                        3,
                        5
                    ];
                    // generateAuthToken still in progress.
                    return [
                        4,
                        sleep(100)
                    ];
                case 3:
                    // generateAuthToken still in progress.
                    _a1.sent();
                    return [
                        4,
                        updateAuthTokenRequest(dependencies.appConfig)
                    ];
                case 4:
                    entry = _a1.sent();
                    return [
                        3,
                        2
                    ];
                case 5:
                    authToken = entry.authToken;
                    if (authToken.requestStatus === 0) // The request timed out or failed in a different call. Try again.
                    return [
                        2,
                        refreshAuthToken(dependencies, forceRefresh)
                    ];
                    else return [
                        2,
                        authToken
                    ];
            }
        });
    });
}
/**
 * Called only if there is a GenerateAuthToken request in progress.
 *
 * Updates the InstallationEntry in the DB based on the status of the
 * GenerateAuthToken request.
 *
 * Returns the updated InstallationEntry.
 */ function updateAuthTokenRequest(appConfig) {
    return update(appConfig, function(oldEntry) {
        if (!isEntryRegistered(oldEntry)) throw ERROR_FACTORY.create("not-registered"/* NOT_REGISTERED */ );
        var oldAuthToken = oldEntry.authToken;
        if (hasAuthTokenRequestTimedOut(oldAuthToken)) return tslib.__assign(tslib.__assign({
        }, oldEntry), {
            authToken: {
                requestStatus: 0
            }
        });
        return oldEntry;
    });
}
function fetchAuthTokenFromServer(dependencies, installationEntry) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var authToken, updatedInstallationEntry, e_1, updatedInstallationEntry;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    _a1.trys.push([
                        0,
                        3,
                        ,
                        8
                    ]);
                    return [
                        4,
                        generateAuthTokenRequest(dependencies, installationEntry)
                    ];
                case 1:
                    authToken = _a1.sent();
                    updatedInstallationEntry = tslib.__assign(tslib.__assign({
                    }, installationEntry), {
                        authToken: authToken
                    });
                    return [
                        4,
                        set(dependencies.appConfig, updatedInstallationEntry)
                    ];
                case 2:
                    _a1.sent();
                    return [
                        2,
                        authToken
                    ];
                case 3:
                    e_1 = _a1.sent();
                    if (!(isServerError(e_1) && (e_1.customData.serverCode === 401 || e_1.customData.serverCode === 404))) return [
                        3,
                        5
                    ];
                    // Server returned a "FID not found" or a "Invalid authentication" error.
                    // Generate a new ID next time.
                    return [
                        4,
                        remove(dependencies.appConfig)
                    ];
                case 4:
                    // Server returned a "FID not found" or a "Invalid authentication" error.
                    // Generate a new ID next time.
                    _a1.sent();
                    return [
                        3,
                        7
                    ];
                case 5:
                    updatedInstallationEntry = tslib.__assign(tslib.__assign({
                    }, installationEntry), {
                        authToken: {
                            requestStatus: 0
                        }
                    });
                    return [
                        4,
                        set(dependencies.appConfig, updatedInstallationEntry)
                    ];
                case 6:
                    _a1.sent();
                    _a1.label = 7;
                case 7:
                    throw e_1;
                case 8:
                    return [
                        2
                    ];
            }
        });
    });
}
function isEntryRegistered(installationEntry) {
    return installationEntry !== undefined && installationEntry.registrationStatus === 2;
}
function isAuthTokenValid(authToken) {
    return authToken.requestStatus === 2 && !isAuthTokenExpired(authToken);
}
function isAuthTokenExpired(authToken) {
    var now = Date.now();
    return now < authToken.creationTime || authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER;
}
/** Returns an updated InstallationEntry with an InProgressAuthToken. */ function makeAuthTokenRequestInProgressEntry(oldEntry) {
    var inProgressAuthToken = {
        requestStatus: 1,
        requestTime: Date.now()
    };
    return tslib.__assign(tslib.__assign({
    }, oldEntry), {
        authToken: inProgressAuthToken
    });
}
function hasAuthTokenRequestTimedOut(authToken) {
    return authToken.requestStatus === 1 && authToken.requestTime + PENDING_TIMEOUT_MS < Date.now();
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function getId(dependencies) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var _a1, installationEntry, registrationPromise;
        return tslib.__generator(this, function(_b) {
            switch(_b.label){
                case 0:
                    return [
                        4,
                        getInstallationEntry(dependencies.appConfig)
                    ];
                case 1:
                    _a1 = _b.sent(), installationEntry = _a1.installationEntry, registrationPromise = _a1.registrationPromise;
                    if (registrationPromise) registrationPromise.catch(console.error);
                    else // If the installation is already registered, update the authentication
                    // token if needed.
                    refreshAuthToken(dependencies).catch(console.error);
                    return [
                        2,
                        installationEntry.fid
                    ];
            }
        });
    });
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function getToken(dependencies, forceRefresh) {
    if (forceRefresh === void 0) forceRefresh = false;
    return tslib.__awaiter(this, void 0, void 0, function() {
        var authToken;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    return [
                        4,
                        completeInstallationRegistration(dependencies.appConfig)
                    ];
                case 1:
                    _a1.sent();
                    return [
                        4,
                        refreshAuthToken(dependencies, forceRefresh)
                    ];
                case 2:
                    authToken = _a1.sent();
                    return [
                        2,
                        authToken.token
                    ];
            }
        });
    });
}
function completeInstallationRegistration(appConfig) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var registrationPromise;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    return [
                        4,
                        getInstallationEntry(appConfig)
                    ];
                case 1:
                    registrationPromise = _a1.sent().registrationPromise;
                    if (!registrationPromise) return [
                        3,
                        3
                    ];
                    // A createInstallation request is in progress. Wait until it finishes.
                    return [
                        4,
                        registrationPromise
                    ];
                case 2:
                    // A createInstallation request is in progress. Wait until it finishes.
                    _a1.sent();
                    _a1.label = 3;
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function deleteInstallationRequest(appConfig, installationEntry) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var endpoint, headers, request, response;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    endpoint = getDeleteEndpoint(appConfig, installationEntry);
                    headers = getHeadersWithAuth(appConfig, installationEntry);
                    request = {
                        method: 'DELETE',
                        headers: headers
                    };
                    return [
                        4,
                        retryIfServerError(function() {
                            return fetch(endpoint, request);
                        })
                    ];
                case 1:
                    response = _a1.sent();
                    if (!!response.ok) return [
                        3,
                        3
                    ];
                    return [
                        4,
                        getErrorFromResponse('Delete Installation', response)
                    ];
                case 2:
                    throw _a1.sent();
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
}
function getDeleteEndpoint(appConfig, _a1) {
    var fid = _a1.fid;
    return getInstallationsEndpoint(appConfig) + "/" + fid;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function deleteInstallation(dependencies) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var appConfig, entry;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    appConfig = dependencies.appConfig;
                    return [
                        4,
                        update(appConfig, function(oldEntry) {
                            if (oldEntry && oldEntry.registrationStatus === 0) // Delete the unregistered entry without sending a deleteInstallation request.
                            return undefined;
                            return oldEntry;
                        })
                    ];
                case 1:
                    entry = _a1.sent();
                    if (!entry) return [
                        3,
                        6
                    ];
                    if (!(entry.registrationStatus === 1)) return [
                        3,
                        2
                    ];
                    // Can't delete while trying to register.
                    throw ERROR_FACTORY.create("delete-pending-registration"/* DELETE_PENDING_REGISTRATION */ );
                case 2:
                    if (!(entry.registrationStatus === 2)) return [
                        3,
                        6
                    ];
                    if (!!navigator.onLine) return [
                        3,
                        3
                    ];
                    throw ERROR_FACTORY.create("app-offline"/* APP_OFFLINE */ );
                case 3:
                    return [
                        4,
                        deleteInstallationRequest(appConfig, entry)
                    ];
                case 4:
                    _a1.sent();
                    return [
                        4,
                        remove(appConfig)
                    ];
                case 5:
                    _a1.sent();
                    _a1.label = 6;
                case 6:
                    return [
                        2
                    ];
            }
        });
    });
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Sets a new callback that will get called when Installation ID changes.
 * Returns an unsubscribe function that will remove the callback when called.
 */ function onIdChange(_a1, callback) {
    var appConfig = _a1.appConfig;
    addCallback(appConfig, callback);
    return function() {
        removeCallback(appConfig, callback);
    };
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function extractAppConfig(app) {
    var e_1, _a1;
    if (!app || !app.options) throw getMissingValueError('App Configuration');
    if (!app.name) throw getMissingValueError('App Name');
    // Required app config keys
    var configKeys = [
        'projectId',
        'apiKey',
        'appId'
    ];
    try {
        for(var configKeys_1 = tslib.__values(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()){
            var keyName = configKeys_1_1.value;
            if (!app.options[keyName]) throw getMissingValueError(keyName);
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (configKeys_1_1 && !configKeys_1_1.done && (_a1 = configKeys_1.return)) _a1.call(configKeys_1);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    return {
        appName: app.name,
        projectId: app.options.projectId,
        apiKey: app.options.apiKey,
        appId: app.options.appId
    };
}
function getMissingValueError(valueName) {
    return ERROR_FACTORY.create("missing-app-config-values"/* MISSING_APP_CONFIG_VALUES */ , {
        valueName: valueName
    });
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function registerInstallations(instance) {
    var installationsName = 'installations';
    instance.INTERNAL.registerComponent(new component.Component(installationsName, function(container) {
        var app = container.getProvider('app').getImmediate();
        // Throws if app isn't configured properly.
        var appConfig = extractAppConfig(app);
        var platformLoggerProvider = container.getProvider('platform-logger');
        var dependencies = {
            appConfig: appConfig,
            platformLoggerProvider: platformLoggerProvider
        };
        var installations = {
            app: app,
            getId: function() {
                return getId(dependencies);
            },
            getToken: function(forceRefresh) {
                return getToken(dependencies, forceRefresh);
            },
            delete: function() {
                return deleteInstallation(dependencies);
            },
            onIdChange: function(callback) {
                return onIdChange(dependencies, callback);
            }
        };
        return installations;
    }, "PUBLIC"/* PUBLIC */ ));
    instance.registerVersion(name, version);
}
registerInstallations(firebase__default['default']);
exports.registerInstallations = registerInstallations;

},{"@firebase/app":"6IUA5","@firebase/component":"5qT0x","tslib":"4rd38","@firebase/util":"3bR6t","idb":"4rm5K"}],"4rm5K":[function(require,module,exports) {
(function(global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define([
        'exports'
    ], factory) : (global = global || self, factory(global.idb = {
    }));
})(this, function(exports) {
    'use strict';
    function toArray(arr) {
        return Array.prototype.slice.call(arr);
    }
    function promisifyRequest(request) {
        return new Promise(function(resolve, reject) {
            request.onsuccess = function() {
                resolve(request.result);
            };
            request.onerror = function() {
                reject(request.error);
            };
        });
    }
    function promisifyRequestCall(obj, method, args) {
        var request;
        var p = new Promise(function(resolve, reject) {
            request = obj[method].apply(obj, args);
            promisifyRequest(request).then(resolve, reject);
        });
        p.request = request;
        return p;
    }
    function promisifyCursorRequestCall(obj, method, args) {
        var p = promisifyRequestCall(obj, method, args);
        return p.then(function(value) {
            if (!value) return;
            return new Cursor(value, p.request);
        });
    }
    function proxyProperties(ProxyClass, targetProp, properties) {
        properties.forEach(function(prop) {
            Object.defineProperty(ProxyClass.prototype, prop, {
                get: function() {
                    return this[targetProp][prop];
                },
                set: function(val) {
                    this[targetProp][prop] = val;
                }
            });
        });
    }
    function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {
        properties.forEach(function(prop) {
            if (!(prop in Constructor.prototype)) return;
            ProxyClass.prototype[prop] = function() {
                return promisifyRequestCall(this[targetProp], prop, arguments);
            };
        });
    }
    function proxyMethods(ProxyClass, targetProp, Constructor, properties) {
        properties.forEach(function(prop) {
            if (!(prop in Constructor.prototype)) return;
            ProxyClass.prototype[prop] = function() {
                return this[targetProp][prop].apply(this[targetProp], arguments);
            };
        });
    }
    function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {
        properties.forEach(function(prop) {
            if (!(prop in Constructor.prototype)) return;
            ProxyClass.prototype[prop] = function() {
                return promisifyCursorRequestCall(this[targetProp], prop, arguments);
            };
        });
    }
    function Index(index) {
        this._index = index;
    }
    proxyProperties(Index, '_index', [
        'name',
        'keyPath',
        'multiEntry',
        'unique'
    ]);
    proxyRequestMethods(Index, '_index', IDBIndex, [
        'get',
        'getKey',
        'getAll',
        'getAllKeys',
        'count'
    ]);
    proxyCursorRequestMethods(Index, '_index', IDBIndex, [
        'openCursor',
        'openKeyCursor'
    ]);
    function Cursor(cursor, request) {
        this._cursor = cursor;
        this._request = request;
    }
    proxyProperties(Cursor, '_cursor', [
        'direction',
        'key',
        'primaryKey',
        'value'
    ]);
    proxyRequestMethods(Cursor, '_cursor', IDBCursor, [
        'update',
        'delete'
    ]);
    // proxy 'next' methods
    [
        'advance',
        'continue',
        'continuePrimaryKey'
    ].forEach(function(methodName) {
        if (!(methodName in IDBCursor.prototype)) return;
        Cursor.prototype[methodName] = function() {
            var cursor = this;
            var args = arguments;
            return Promise.resolve().then(function() {
                cursor._cursor[methodName].apply(cursor._cursor, args);
                return promisifyRequest(cursor._request).then(function(value) {
                    if (!value) return;
                    return new Cursor(value, cursor._request);
                });
            });
        };
    });
    function ObjectStore(store) {
        this._store = store;
    }
    ObjectStore.prototype.createIndex = function() {
        return new Index(this._store.createIndex.apply(this._store, arguments));
    };
    ObjectStore.prototype.index = function() {
        return new Index(this._store.index.apply(this._store, arguments));
    };
    proxyProperties(ObjectStore, '_store', [
        'name',
        'keyPath',
        'indexNames',
        'autoIncrement'
    ]);
    proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [
        'put',
        'add',
        'delete',
        'clear',
        'get',
        'getAll',
        'getKey',
        'getAllKeys',
        'count'
    ]);
    proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [
        'openCursor',
        'openKeyCursor'
    ]);
    proxyMethods(ObjectStore, '_store', IDBObjectStore, [
        'deleteIndex'
    ]);
    function Transaction(idbTransaction) {
        this._tx = idbTransaction;
        this.complete = new Promise(function(resolve, reject) {
            idbTransaction.oncomplete = function() {
                resolve();
            };
            idbTransaction.onerror = function() {
                reject(idbTransaction.error);
            };
            idbTransaction.onabort = function() {
                reject(idbTransaction.error);
            };
        });
    }
    Transaction.prototype.objectStore = function() {
        return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));
    };
    proxyProperties(Transaction, '_tx', [
        'objectStoreNames',
        'mode'
    ]);
    proxyMethods(Transaction, '_tx', IDBTransaction, [
        'abort'
    ]);
    function UpgradeDB(db, oldVersion, transaction) {
        this._db = db;
        this.oldVersion = oldVersion;
        this.transaction = new Transaction(transaction);
    }
    UpgradeDB.prototype.createObjectStore = function() {
        return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));
    };
    proxyProperties(UpgradeDB, '_db', [
        'name',
        'version',
        'objectStoreNames'
    ]);
    proxyMethods(UpgradeDB, '_db', IDBDatabase, [
        'deleteObjectStore',
        'close'
    ]);
    function DB(db) {
        this._db = db;
    }
    DB.prototype.transaction = function() {
        return new Transaction(this._db.transaction.apply(this._db, arguments));
    };
    proxyProperties(DB, '_db', [
        'name',
        'version',
        'objectStoreNames'
    ]);
    proxyMethods(DB, '_db', IDBDatabase, [
        'close'
    ]);
    // Add cursor iterators
    // TODO: remove this once browsers do the right thing with promises
    [
        'openCursor',
        'openKeyCursor'
    ].forEach(function(funcName) {
        [
            ObjectStore,
            Index
        ].forEach(function(Constructor) {
            // Don't create iterateKeyCursor if openKeyCursor doesn't exist.
            if (!(funcName in Constructor.prototype)) return;
            Constructor.prototype[funcName.replace('open', 'iterate')] = function() {
                var args = toArray(arguments);
                var callback = args[args.length - 1];
                var nativeObject = this._store || this._index;
                var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));
                request.onsuccess = function() {
                    callback(request.result);
                };
            };
        });
    });
    // polyfill getAll
    [
        Index,
        ObjectStore
    ].forEach(function(Constructor) {
        if (Constructor.prototype.getAll) return;
        Constructor.prototype.getAll = function(query, count) {
            var instance = this;
            var items = [];
            return new Promise(function(resolve) {
                instance.iterateCursor(query, function(cursor) {
                    if (!cursor) {
                        resolve(items);
                        return;
                    }
                    items.push(cursor.value);
                    if (count !== undefined && items.length == count) {
                        resolve(items);
                        return;
                    }
                    cursor.continue();
                });
            });
        };
    });
    function openDb(name, version, upgradeCallback) {
        var p = promisifyRequestCall(indexedDB, 'open', [
            name,
            version
        ]);
        var request = p.request;
        if (request) request.onupgradeneeded = function(event) {
            if (upgradeCallback) upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));
        };
        return p.then(function(db) {
            return new DB(db);
        });
    }
    function deleteDb(name) {
        return promisifyRequestCall(indexedDB, 'deleteDatabase', [
            name
        ]);
    }
    exports.openDb = openDb;
    exports.deleteDb = deleteDb;
    Object.defineProperty(exports, '__esModule', {
        value: true
    });
});

},{}],"3n4LN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "registerStorage", ()=>registerStorage
);
var _app = require("@firebase/app");
var _appDefault = parcelHelpers.interopDefault(_app);
var _tslib = require("tslib");
var _util = require("@firebase/util");
var _component = require("@firebase/component");
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @fileoverview Constants used in the Firebase Storage library.
 */ /**
 * Domain name for firebase storage.
 */ var DEFAULT_HOST = 'firebasestorage.googleapis.com';
/**
 * The key in Firebase config json for the storage bucket.
 */ var CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';
/**
 * 2 minutes
 *
 * The timeout for all operations except upload.
 */ var DEFAULT_MAX_OPERATION_RETRY_TIME = 120000;
/**
 * 10 minutes
 *
 * The timeout for upload.
 */ var DEFAULT_MAX_UPLOAD_RETRY_TIME = 600000;
/**
 * An error returned by the Firebase Storage SDK.
 * @public
 */ var FirebaseStorageError1 = function(_super) {
    _tslib.__extends(FirebaseStorageError2, _super);
    /**
     * @param code - A StorageErrorCode string to be prefixed with 'storage/' and
     *  added to the end of the message.
     * @param message  - Error message.
     */ function FirebaseStorageError2(code, message) {
        var _this = _super.call(this, prependCode(code), "Firebase Storage: " + message + " (" + prependCode(code) + ")") || this;
        /**
         * Stores custom error data unque to FirebaseStorageError.
         */ _this.customData = {
            serverResponse: null
        };
        _this._baseMessage = _this.message;
        // Without this, `instanceof FirebaseStorageError`, in tests for example,
        // returns false.
        Object.setPrototypeOf(_this, FirebaseStorageError2.prototype);
        return _this;
    }
    /**
     * Compares a StorageErrorCode against this error's code, filtering out the prefix.
     */ FirebaseStorageError2.prototype._codeEquals = function(code) {
        return prependCode(code) === this.code;
    };
    Object.defineProperty(FirebaseStorageError2.prototype, "serverResponse", {
        /**
         * Optional response message that was added by the server.
         */ get: function() {
            return this.customData.serverResponse;
        },
        set: function(serverResponse) {
            this.customData.serverResponse = serverResponse;
            if (this.customData.serverResponse) this.message = this._baseMessage + "\n" + this.customData.serverResponse;
            else this.message = this._baseMessage;
        },
        enumerable: false,
        configurable: true
    });
    return FirebaseStorageError2;
}(_util.FirebaseError);
function prependCode(code) {
    return 'storage/' + code;
}
function unknown() {
    var message = "An unknown error occurred, please check the error payload for server response.";
    return new FirebaseStorageError1("unknown"/* UNKNOWN */ , message);
}
function objectNotFound(path) {
    return new FirebaseStorageError1("object-not-found"/* OBJECT_NOT_FOUND */ , "Object '" + path + "' does not exist.");
}
function quotaExceeded(bucket) {
    return new FirebaseStorageError1("quota-exceeded"/* QUOTA_EXCEEDED */ , "Quota for bucket '" + bucket + "' exceeded, please view quota on " + 'https://firebase.google.com/pricing/.');
}
function unauthenticated() {
    var message = "User is not authenticated, please authenticate using Firebase Authentication and try again.";
    return new FirebaseStorageError1("unauthenticated"/* UNAUTHENTICATED */ , message);
}
function unauthorizedApp() {
    return new FirebaseStorageError1("unauthorized-app"/* UNAUTHORIZED_APP */ , 'This app does not have permission to access Firebase Storage on this project.');
}
function unauthorized(path) {
    return new FirebaseStorageError1("unauthorized"/* UNAUTHORIZED */ , "User does not have permission to access '" + path + "'.");
}
function retryLimitExceeded() {
    return new FirebaseStorageError1("retry-limit-exceeded"/* RETRY_LIMIT_EXCEEDED */ , 'Max retry time for operation exceeded, please try again.');
}
function canceled() {
    return new FirebaseStorageError1("canceled"/* CANCELED */ , 'User canceled the upload/download.');
}
function invalidUrl(url) {
    return new FirebaseStorageError1("invalid-url"/* INVALID_URL */ , "Invalid URL '" + url + "'.");
}
function invalidDefaultBucket(bucket) {
    return new FirebaseStorageError1("invalid-default-bucket"/* INVALID_DEFAULT_BUCKET */ , "Invalid default bucket '" + bucket + "'.");
}
function noDefaultBucket() {
    return new FirebaseStorageError1("no-default-bucket"/* NO_DEFAULT_BUCKET */ , "No default bucket found. Did you set the '" + CONFIG_STORAGE_BUCKET_KEY + "' property when initializing the app?");
}
function cannotSliceBlob() {
    return new FirebaseStorageError1("cannot-slice-blob"/* CANNOT_SLICE_BLOB */ , 'Cannot slice blob for upload. Please retry the upload.');
}
function serverFileWrongSize() {
    return new FirebaseStorageError1("server-file-wrong-size"/* SERVER_FILE_WRONG_SIZE */ , 'Server recorded incorrect upload file size, please retry the upload.');
}
function noDownloadURL() {
    return new FirebaseStorageError1("no-download-url"/* NO_DOWNLOAD_URL */ , 'The given file does not have any download URLs.');
}
function invalidArgument(message) {
    return new FirebaseStorageError1("invalid-argument"/* INVALID_ARGUMENT */ , message);
}
function appDeleted() {
    return new FirebaseStorageError1("app-deleted"/* APP_DELETED */ , 'The Firebase app was deleted.');
}
/**
 * @param name - The name of the operation that was invalid.
 */ function invalidRootOperation(name) {
    return new FirebaseStorageError1("invalid-root-operation"/* INVALID_ROOT_OPERATION */ , "The operation '" + name + "' cannot be performed on a root reference, create a non-root " + "reference using child, such as .child('file.png').");
}
/**
 * @param format - The format that was not valid.
 * @param message - A message describing the format violation.
 */ function invalidFormat(format, message) {
    return new FirebaseStorageError1("invalid-format"/* INVALID_FORMAT */ , "String does not match format '" + format + "': " + message);
}
/**
 * @param message - A message describing the internal error.
 */ function internalError(message) {
    throw new FirebaseStorageError1("internal-error"/* INTERNAL_ERROR */ , 'Internal error: ' + message);
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Converts a Base64 encoded string to a binary string. */ function decodeBase64(encoded) {
    return atob(encoded);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An enumeration of the possible string formats for upload.
 * @public
 */ var StringFormat = {
    /**
     * Indicates the string should be interpreted "raw", that is, as normal text.
     * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte
     * sequence.
     * Example: The string 'Hello! \\ud83d\\ude0a' becomes the byte sequence
     * 48 65 6c 6c 6f 21 20 f0 9f 98 8a
     */ RAW: 'raw',
    /**
     * Indicates the string should be interpreted as base64-encoded data.
     * Padding characters (trailing '='s) are optional.
     * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence
     * ad 69 8e fb e1 3a b7 bf eb 97
     */ BASE64: 'base64',
    /**
     * Indicates the string should be interpreted as base64url-encoded data.
     * Padding characters (trailing '='s) are optional.
     * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence
     * ad 69 8e fb e1 3a b7 bf eb 97
     */ BASE64URL: 'base64url',
    /**
     * Indicates the string is a data URL, such as one obtained from
     * canvas.toDataURL().
     * Example: the string 'data:application/octet-stream;base64,aaaa'
     * becomes the byte sequence
     * 69 a6 9a
     * (the content-type "application/octet-stream" is also applied, but can
     * be overridden in the metadata object).
     */ DATA_URL: 'data_url'
};
var StringData = function() {
    function StringData1(data, contentType) {
        this.data = data;
        this.contentType = contentType || null;
    }
    return StringData1;
}();
function dataFromString(format, stringData) {
    switch(format){
        case StringFormat.RAW:
            return new StringData(utf8Bytes_(stringData));
        case StringFormat.BASE64:
        case StringFormat.BASE64URL:
            return new StringData(base64Bytes_(format, stringData));
        case StringFormat.DATA_URL:
            return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));
    }
    // assert(false);
    throw unknown();
}
function utf8Bytes_(value) {
    var b = [];
    for(var i = 0; i < value.length; i++){
        var c = value.charCodeAt(i);
        if (c <= 127) b.push(c);
        else if (c <= 2047) b.push(192 | c >> 6, 128 | c & 63);
        else {
            if ((c & 64512) === 55296) {
                // The start of a surrogate pair.
                var valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;
                if (!valid) // The second surrogate wasn't there.
                b.push(239, 191, 189);
                else {
                    var hi = c;
                    var lo = value.charCodeAt(++i);
                    c = 65536 | (hi & 1023) << 10 | lo & 1023;
                    b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);
                }
            } else if ((c & 64512) === 56320) // Invalid low surrogate.
            b.push(239, 191, 189);
            else b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);
        }
    }
    return new Uint8Array(b);
}
function percentEncodedBytes_(value) {
    var decoded;
    try {
        decoded = decodeURIComponent(value);
    } catch (e) {
        throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');
    }
    return utf8Bytes_(decoded);
}
function base64Bytes_(format, value) {
    switch(format){
        case StringFormat.BASE64:
            var hasMinus = value.indexOf('-') !== -1;
            var hasUnder = value.indexOf('_') !== -1;
            if (hasMinus || hasUnder) {
                var invalidChar = hasMinus ? '-' : '_';
                throw invalidFormat(format, "Invalid character '" + invalidChar + "' found: is it base64url encoded?");
            }
            break;
        case StringFormat.BASE64URL:
            var hasPlus = value.indexOf('+') !== -1;
            var hasSlash = value.indexOf('/') !== -1;
            if (hasPlus || hasSlash) {
                var invalidChar = hasPlus ? '+' : '/';
                throw invalidFormat(format, "Invalid character '" + invalidChar + "' found: is it base64 encoded?");
            }
            value = value.replace(/-/g, '+').replace(/_/g, '/');
            break;
    }
    var bytes;
    try {
        bytes = decodeBase64(value);
    } catch (e) {
        throw invalidFormat(format, 'Invalid character found');
    }
    var array = new Uint8Array(bytes.length);
    for(var i = 0; i < bytes.length; i++)array[i] = bytes.charCodeAt(i);
    return array;
}
var DataURLParts = function() {
    function DataURLParts1(dataURL) {
        this.base64 = false;
        this.contentType = null;
        var matches = dataURL.match(/^data:([^,]+)?,/);
        if (matches === null) throw invalidFormat(StringFormat.DATA_URL, "Must be formatted 'data:[<mediatype>][;base64],<data>");
        var middle = matches[1] || null;
        if (middle != null) {
            this.base64 = endsWith(middle, ';base64');
            this.contentType = this.base64 ? middle.substring(0, middle.length - 7) : middle;
        }
        this.rest = dataURL.substring(dataURL.indexOf(',') + 1);
    }
    return DataURLParts1;
}();
function dataURLBytes_(dataUrl) {
    var parts = new DataURLParts(dataUrl);
    if (parts.base64) return base64Bytes_(StringFormat.BASE64, parts.rest);
    else return percentEncodedBytes_(parts.rest);
}
function dataURLContentType_(dataUrl) {
    var parts = new DataURLParts(dataUrl);
    return parts.contentType;
}
function endsWith(s, end) {
    var longEnough = s.length >= end.length;
    if (!longEnough) return false;
    return s.substring(s.length - end.length) === end;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An event that is triggered on a task.
 */ var TaskEvent = {
    /**
     * For this event,
     * <ul>
     *   <li>The `next` function is triggered on progress updates and when the
     *       task is paused/resumed with an `UploadTaskSnapshot` as the first
     *       argument.</li>
     *   <li>The `error` function is triggered if the upload is canceled or fails
     *       for another reason.</li>
     *   <li>The `complete` function is triggered if the upload completes
     *       successfully.</li>
     * </ul>
     */ STATE_CHANGED: 'state_changed'
};
/**
 * Represents the current state of a running upload.
 */ var TaskState = {
    /** The task is currently transferring data. */ RUNNING: 'running',
    /** The task was paused by the user. */ PAUSED: 'paused',
    /** The task completed successfully. */ SUCCESS: 'success',
    /** The task was canceled. */ CANCELED: 'canceled',
    /** The task failed with an error. */ ERROR: 'error'
};
function taskStateFromInternalTaskState(state) {
    switch(state){
        case "running":
        case "pausing":
        case "canceling":
            return TaskState.RUNNING;
        case "paused":
            return TaskState.PAUSED;
        case "success":
            return TaskState.SUCCESS;
        case "canceled":
            return TaskState.CANCELED;
        case "error":
            return TaskState.ERROR;
        default:
            // TODO(andysoto): assert(false);
            return TaskState.ERROR;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Error codes for requests made by the the XhrIo wrapper.
 */ var ErrorCode;
(function(ErrorCode1) {
    ErrorCode1[ErrorCode1["NO_ERROR"] = 0] = "NO_ERROR";
    ErrorCode1[ErrorCode1["NETWORK_ERROR"] = 1] = "NETWORK_ERROR";
    ErrorCode1[ErrorCode1["ABORT"] = 2] = "ABORT";
})(ErrorCode || (ErrorCode = {
}));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Network layer for browsers. We use this instead of goog.net.XhrIo because
 * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.
 */ var XhrConnection = function() {
    function XhrConnection1() {
        var _this = this;
        this.sent_ = false;
        this.xhr_ = new XMLHttpRequest();
        this.errorCode_ = ErrorCode.NO_ERROR;
        this.sendPromise_ = new Promise(function(resolve) {
            _this.xhr_.addEventListener('abort', function() {
                _this.errorCode_ = ErrorCode.ABORT;
                resolve();
            });
            _this.xhr_.addEventListener('error', function() {
                _this.errorCode_ = ErrorCode.NETWORK_ERROR;
                resolve();
            });
            _this.xhr_.addEventListener('load', function() {
                resolve();
            });
        });
    }
    /**
     * @override
     */ XhrConnection1.prototype.send = function(url, method, body, headers) {
        if (this.sent_) throw internalError('cannot .send() more than once');
        this.sent_ = true;
        this.xhr_.open(method, url, true);
        if (headers !== undefined) {
            for(var key in headers)if (headers.hasOwnProperty(key)) this.xhr_.setRequestHeader(key, headers[key].toString());
        }
        if (body !== undefined) this.xhr_.send(body);
        else this.xhr_.send();
        return this.sendPromise_;
    };
    /**
     * @override
     */ XhrConnection1.prototype.getErrorCode = function() {
        if (!this.sent_) throw internalError('cannot .getErrorCode() before sending');
        return this.errorCode_;
    };
    /**
     * @override
     */ XhrConnection1.prototype.getStatus = function() {
        if (!this.sent_) throw internalError('cannot .getStatus() before sending');
        try {
            return this.xhr_.status;
        } catch (e) {
            return -1;
        }
    };
    /**
     * @override
     */ XhrConnection1.prototype.getResponseText = function() {
        if (!this.sent_) throw internalError('cannot .getResponseText() before sending');
        return this.xhr_.responseText;
    };
    /**
     * Aborts the request.
     * @override
     */ XhrConnection1.prototype.abort = function() {
        this.xhr_.abort();
    };
    /**
     * @override
     */ XhrConnection1.prototype.getResponseHeader = function(header) {
        return this.xhr_.getResponseHeader(header);
    };
    /**
     * @override
     */ XhrConnection1.prototype.addUploadProgressListener = function(listener) {
        if (this.xhr_.upload != null) this.xhr_.upload.addEventListener('progress', listener);
    };
    /**
     * @override
     */ XhrConnection1.prototype.removeUploadProgressListener = function(listener) {
        if (this.xhr_.upload != null) this.xhr_.upload.removeEventListener('progress', listener);
    };
    return XhrConnection1;
}();
function newConnection() {
    return new XhrConnection();
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Factory-like class for creating XhrIo instances.
 */ var ConnectionPool = function() {
    function ConnectionPool1() {
    }
    ConnectionPool1.prototype.createConnection = function() {
        return newConnection();
    };
    return ConnectionPool1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Firebase Storage location data.
 *
 * @internal
 */ var Location1 = function() {
    function Location2(bucket, path) {
        this.bucket = bucket;
        this.path_ = path;
    }
    Object.defineProperty(Location2.prototype, "path", {
        get: function() {
            return this.path_;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Location2.prototype, "isRoot", {
        get: function() {
            return this.path.length === 0;
        },
        enumerable: false,
        configurable: true
    });
    Location2.prototype.fullServerUrl = function() {
        var encode = encodeURIComponent;
        return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);
    };
    Location2.prototype.bucketOnlyServerUrl = function() {
        var encode = encodeURIComponent;
        return '/b/' + encode(this.bucket) + '/o';
    };
    Location2.makeFromBucketSpec = function(bucketString, host) {
        var bucketLocation;
        try {
            bucketLocation = Location2.makeFromUrl(bucketString, host);
        } catch (e) {
            // Not valid URL, use as-is. This lets you put bare bucket names in
            // config.
            return new Location2(bucketString, '');
        }
        if (bucketLocation.path === '') return bucketLocation;
        else throw invalidDefaultBucket(bucketString);
    };
    Location2.makeFromUrl = function(url, host) {
        var location = null;
        var bucketDomain = '([A-Za-z0-9.\\-_]+)';
        function gsModify(loc) {
            if (loc.path.charAt(loc.path.length - 1) === '/') loc.path_ = loc.path_.slice(0, -1);
        }
        var gsPath = '(/(.*))?$';
        var gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');
        var gsIndices = {
            bucket: 1,
            path: 3
        };
        function httpModify(loc) {
            loc.path_ = decodeURIComponent(loc.path);
        }
        var version = 'v[A-Za-z0-9_]+';
        var firebaseStorageHost = host.replace(/[.]/g, '\\.');
        var firebaseStoragePath = '(/([^?#]*).*)?$';
        var firebaseStorageRegExp = new RegExp("^https?://" + firebaseStorageHost + "/" + version + "/b/" + bucketDomain + "/o" + firebaseStoragePath, 'i');
        var firebaseStorageIndices = {
            bucket: 1,
            path: 3
        };
        var cloudStorageHost = host === DEFAULT_HOST ? '(?:storage.googleapis.com|storage.cloud.google.com)' : host;
        var cloudStoragePath = '([^?#]*)';
        var cloudStorageRegExp = new RegExp("^https?://" + cloudStorageHost + "/" + bucketDomain + "/" + cloudStoragePath, 'i');
        var cloudStorageIndices = {
            bucket: 1,
            path: 2
        };
        var groups = [
            {
                regex: gsRegex,
                indices: gsIndices,
                postModify: gsModify
            },
            {
                regex: firebaseStorageRegExp,
                indices: firebaseStorageIndices,
                postModify: httpModify
            },
            {
                regex: cloudStorageRegExp,
                indices: cloudStorageIndices,
                postModify: httpModify
            }
        ];
        for(var i = 0; i < groups.length; i++){
            var group = groups[i];
            var captures = group.regex.exec(url);
            if (captures) {
                var bucketValue = captures[group.indices.bucket];
                var pathValue = captures[group.indices.path];
                if (!pathValue) pathValue = '';
                location = new Location2(bucketValue, pathValue);
                group.postModify(location);
                break;
            }
        }
        if (location == null) throw invalidUrl(url);
        return location;
    };
    return Location2;
}();
/**
 * A request whose promise always fails.
 */ var FailRequest = function() {
    function FailRequest1(error) {
        this.promise_ = Promise.reject(error);
    }
    /** @inheritDoc */ FailRequest1.prototype.getPromise = function() {
        return this.promise_;
    };
    /** @inheritDoc */ FailRequest1.prototype.cancel = function(_appDelete) {
    };
    return FailRequest1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @param f May be invoked
 *     before the function returns.
 * @param callback Get all the arguments passed to the function
 *     passed to f, including the initial boolean.
 */ function start(f, // eslint-disable-next-line @typescript-eslint/no-explicit-any
callback, timeout) {
    // TODO(andysoto): make this code cleaner (probably refactor into an actual
    // type instead of a bunch of functions with state shared in the closure)
    var waitSeconds = 1;
    // Would type this as "number" but that doesn't work for Node so ¯\_(ツ)_/¯
    // TODO: find a way to exclude Node type definition for storage because storage only works in browser
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var timeoutId = null;
    var hitTimeout = false;
    var cancelState = 0;
    function canceled1() {
        return cancelState === 2;
    }
    var triggeredCallback = false;
    function triggerCallback() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        if (!triggeredCallback) {
            triggeredCallback = true;
            callback.apply(null, args);
        }
    }
    function callWithDelay(millis) {
        timeoutId = setTimeout(function() {
            timeoutId = null;
            f(handler, canceled1());
        }, millis);
    }
    function handler(success) {
        var args = [];
        for(var _i = 1; _i < arguments.length; _i++)args[_i - 1] = arguments[_i];
        if (triggeredCallback) return;
        if (success) {
            triggerCallback.call.apply(triggerCallback, _tslib.__spreadArray([
                null,
                success
            ], args));
            return;
        }
        var mustStop = canceled1() || hitTimeout;
        if (mustStop) {
            triggerCallback.call.apply(triggerCallback, _tslib.__spreadArray([
                null,
                success
            ], args));
            return;
        }
        if (waitSeconds < 64) /* TODO(andysoto): don't back off so quickly if we know we're offline. */ waitSeconds *= 2;
        var waitMillis;
        if (cancelState === 1) {
            cancelState = 2;
            waitMillis = 0;
        } else waitMillis = (waitSeconds + Math.random()) * 1000;
        callWithDelay(waitMillis);
    }
    var stopped = false;
    function stop(wasTimeout) {
        if (stopped) return;
        stopped = true;
        if (triggeredCallback) return;
        if (timeoutId !== null) {
            if (!wasTimeout) cancelState = 2;
            clearTimeout(timeoutId);
            callWithDelay(0);
        } else if (!wasTimeout) cancelState = 1;
    }
    callWithDelay(0);
    setTimeout(function() {
        hitTimeout = true;
        stop(true);
    }, timeout);
    return stop;
}
/**
 * Stops the retry loop from repeating.
 * If the function is currently "in between" retries, it is invoked immediately
 * with the second parameter as "true". Otherwise, it will be invoked once more
 * after the current invocation finishes iff the current invocation would have
 * triggered another retry.
 */ function stop(id) {
    id(false);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function isJustDef(p) {
    return p !== void 0;
}
// eslint-disable-next-line @typescript-eslint/ban-types
function isFunction(p) {
    return typeof p === 'function';
}
function isNonArrayObject(p) {
    return typeof p === 'object' && !Array.isArray(p);
}
function isString(p) {
    return typeof p === 'string' || p instanceof String;
}
function isNativeBlob(p) {
    return isNativeBlobDefined() && p instanceof Blob;
}
function isNativeBlobDefined() {
    return typeof Blob !== 'undefined';
}
function validateNumber(argument, minValue, maxValue, value) {
    if (value < minValue) throw invalidArgument("Invalid value for '" + argument + "'. Expected " + minValue + " or greater.");
    if (value > maxValue) throw invalidArgument("Invalid value for '" + argument + "'. Expected " + maxValue + " or less.");
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function makeUrl(urlPart, host) {
    var protocolMatch = host.match(/^(\w+):\/\/.+/);
    var protocol = protocolMatch === null || protocolMatch === void 0 ? void 0 : protocolMatch[1];
    var origin = host;
    if (protocol == null) origin = "https://" + host;
    return origin + "/v0" + urlPart;
}
function makeQueryString(params) {
    var encode = encodeURIComponent;
    var queryPart = '?';
    for(var key in params)if (params.hasOwnProperty(key)) {
        var nextPart = encode(key) + '=' + encode(params[key]);
        queryPart = queryPart + nextPart + '&';
    }
    // Chop off the extra '&' or '?' on the end
    queryPart = queryPart.slice(0, -1);
    return queryPart;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var NetworkRequest = function() {
    function NetworkRequest1(url, method, headers, body, successCodes, additionalRetryCodes, callback, errorCallback, timeout, progressCallback, pool) {
        var _this = this;
        this.pendingConnection_ = null;
        this.backoffId_ = null;
        this.canceled_ = false;
        this.appDelete_ = false;
        this.url_ = url;
        this.method_ = method;
        this.headers_ = headers;
        this.body_ = body;
        this.successCodes_ = successCodes.slice();
        this.additionalRetryCodes_ = additionalRetryCodes.slice();
        this.callback_ = callback;
        this.errorCallback_ = errorCallback;
        this.progressCallback_ = progressCallback;
        this.timeout_ = timeout;
        this.pool_ = pool;
        this.promise_ = new Promise(function(resolve, reject) {
            _this.resolve_ = resolve;
            _this.reject_ = reject;
            _this.start_();
        });
    }
    /**
     * Actually starts the retry loop.
     */ NetworkRequest1.prototype.start_ = function() {
        var self = this;
        function doTheRequest(backoffCallback, canceled1) {
            if (canceled1) {
                backoffCallback(false, new RequestEndStatus(false, null, true));
                return;
            }
            var connection = self.pool_.createConnection();
            self.pendingConnection_ = connection;
            function progressListener(progressEvent) {
                var loaded = progressEvent.loaded;
                var total = progressEvent.lengthComputable ? progressEvent.total : -1;
                if (self.progressCallback_ !== null) self.progressCallback_(loaded, total);
            }
            if (self.progressCallback_ !== null) connection.addUploadProgressListener(progressListener);
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            connection.send(self.url_, self.method_, self.body_, self.headers_).then(function() {
                if (self.progressCallback_ !== null) connection.removeUploadProgressListener(progressListener);
                self.pendingConnection_ = null;
                var hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;
                var status = connection.getStatus();
                if (!hitServer || self.isRetryStatusCode_(status)) {
                    var wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;
                    backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));
                    return;
                }
                var successCode = self.successCodes_.indexOf(status) !== -1;
                backoffCallback(true, new RequestEndStatus(successCode, connection));
            });
        }
        /**
         * @param requestWentThrough - True if the request eventually went
         *     through, false if it hit the retry limit or was canceled.
         */ function backoffDone(requestWentThrough, status) {
            var resolve = self.resolve_;
            var reject = self.reject_;
            var connection = status.connection;
            if (status.wasSuccessCode) try {
                var result = self.callback_(connection, connection.getResponseText());
                if (isJustDef(result)) resolve(result);
                else resolve();
            } catch (e) {
                reject(e);
            }
            else {
                if (connection !== null) {
                    var err = unknown();
                    err.serverResponse = connection.getResponseText();
                    if (self.errorCallback_) reject(self.errorCallback_(connection, err));
                    else reject(err);
                } else if (status.canceled) {
                    var err = self.appDelete_ ? appDeleted() : canceled();
                    reject(err);
                } else {
                    var err = retryLimitExceeded();
                    reject(err);
                }
            }
        }
        if (this.canceled_) backoffDone(false, new RequestEndStatus(false, null, true));
        else this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);
    };
    /** @inheritDoc */ NetworkRequest1.prototype.getPromise = function() {
        return this.promise_;
    };
    /** @inheritDoc */ NetworkRequest1.prototype.cancel = function(appDelete) {
        this.canceled_ = true;
        this.appDelete_ = appDelete || false;
        if (this.backoffId_ !== null) stop(this.backoffId_);
        if (this.pendingConnection_ !== null) this.pendingConnection_.abort();
    };
    NetworkRequest1.prototype.isRetryStatusCode_ = function(status) {
        // The codes for which to retry came from this page:
        // https://cloud.google.com/storage/docs/exponential-backoff
        var isFiveHundredCode = status >= 500 && status < 600;
        var extraRetryCodes = [
            // Request Timeout: web server didn't receive full request in time.
            408,
            // Too Many Requests: you're getting rate-limited, basically.
            429
        ];
        var isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;
        var isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;
        return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;
    };
    return NetworkRequest1;
}();
/**
 * A collection of information about the result of a network request.
 * @param opt_canceled - Defaults to false.
 */ var RequestEndStatus = function() {
    function RequestEndStatus1(wasSuccessCode, connection, canceled1) {
        this.wasSuccessCode = wasSuccessCode;
        this.connection = connection;
        this.canceled = !!canceled1;
    }
    return RequestEndStatus1;
}();
function addAuthHeader_(headers, authToken) {
    if (authToken !== null && authToken.length > 0) headers['Authorization'] = 'Firebase ' + authToken;
}
function addVersionHeader_(headers, firebaseVersion) {
    headers['X-Firebase-Storage-Version'] = 'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');
}
function addGmpidHeader_(headers, appId) {
    if (appId) headers['X-Firebase-GMPID'] = appId;
}
function addAppCheckHeader_(headers, appCheckToken) {
    if (appCheckToken !== null) headers['X-Firebase-AppCheck'] = appCheckToken;
}
function makeRequest(requestInfo, appId, authToken, appCheckToken, pool, firebaseVersion) {
    var queryPart = makeQueryString(requestInfo.urlParams);
    var url = requestInfo.url + queryPart;
    var headers = Object.assign({
    }, requestInfo.headers);
    addGmpidHeader_(headers, appId);
    addAuthHeader_(headers, authToken);
    addVersionHeader_(headers, firebaseVersion);
    addAppCheckHeader_(headers, appCheckToken);
    return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, pool);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function getBlobBuilder() {
    if (typeof BlobBuilder !== 'undefined') return BlobBuilder;
    else if (typeof WebKitBlobBuilder !== 'undefined') return WebKitBlobBuilder;
    else return undefined;
}
/**
 * Concatenates one or more values together and converts them to a Blob.
 *
 * @param args The values that will make up the resulting blob.
 * @return The blob.
 */ function getBlob() {
    var args = [];
    for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
    var BlobBuilder = getBlobBuilder();
    if (BlobBuilder !== undefined) {
        var bb = new BlobBuilder();
        for(var i = 0; i < args.length; i++)bb.append(args[i]);
        return bb.getBlob();
    } else {
        if (isNativeBlobDefined()) return new Blob(args);
        else throw new FirebaseStorageError1("unsupported-environment"/* UNSUPPORTED_ENVIRONMENT */ , "This browser doesn't seem to support creating Blobs");
    }
}
/**
 * Slices the blob. The returned blob contains data from the start byte
 * (inclusive) till the end byte (exclusive). Negative indices cannot be used.
 *
 * @param blob The blob to be sliced.
 * @param start Index of the starting byte.
 * @param end Index of the ending byte.
 * @return The blob slice or null if not supported.
 */ function sliceBlob(blob, start1, end) {
    if (blob.webkitSlice) return blob.webkitSlice(start1, end);
    else if (blob.mozSlice) return blob.mozSlice(start1, end);
    else if (blob.slice) return blob.slice(start1, end);
    return null;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @param opt_elideCopy - If true, doesn't copy mutable input data
 *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be
 *     modified after this blob's construction.
 *
 * @internal
 */ var FbsBlob = function() {
    function FbsBlob1(data, elideCopy) {
        var size = 0;
        var blobType = '';
        if (isNativeBlob(data)) {
            this.data_ = data;
            size = data.size;
            blobType = data.type;
        } else if (data instanceof ArrayBuffer) {
            if (elideCopy) this.data_ = new Uint8Array(data);
            else {
                this.data_ = new Uint8Array(data.byteLength);
                this.data_.set(new Uint8Array(data));
            }
            size = this.data_.length;
        } else if (data instanceof Uint8Array) {
            if (elideCopy) this.data_ = data;
            else {
                this.data_ = new Uint8Array(data.length);
                this.data_.set(data);
            }
            size = data.length;
        }
        this.size_ = size;
        this.type_ = blobType;
    }
    FbsBlob1.prototype.size = function() {
        return this.size_;
    };
    FbsBlob1.prototype.type = function() {
        return this.type_;
    };
    FbsBlob1.prototype.slice = function(startByte, endByte) {
        if (isNativeBlob(this.data_)) {
            var realBlob = this.data_;
            var sliced = sliceBlob(realBlob, startByte, endByte);
            if (sliced === null) return null;
            return new FbsBlob1(sliced);
        } else {
            var slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);
            return new FbsBlob1(slice, true);
        }
    };
    FbsBlob1.getBlob = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        if (isNativeBlobDefined()) {
            var blobby = args.map(function(val) {
                if (val instanceof FbsBlob1) return val.data_;
                else return val;
            });
            return new FbsBlob1(getBlob.apply(null, blobby));
        } else {
            var uint8Arrays = args.map(function(val) {
                if (isString(val)) return dataFromString(StringFormat.RAW, val).data;
                else // Blobs don't exist, so this has to be a Uint8Array.
                return val.data_;
            });
            var finalLength_1 = 0;
            uint8Arrays.forEach(function(array) {
                finalLength_1 += array.byteLength;
            });
            var merged_1 = new Uint8Array(finalLength_1);
            var index_1 = 0;
            uint8Arrays.forEach(function(array) {
                for(var i = 0; i < array.length; i++)merged_1[index_1++] = array[i];
            });
            return new FbsBlob1(merged_1, true);
        }
    };
    FbsBlob1.prototype.uploadData = function() {
        return this.data_;
    };
    return FbsBlob1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns the Object resulting from parsing the given JSON, or null if the
 * given string does not represent a JSON object.
 */ function jsonObjectOrNull(s) {
    var obj;
    try {
        obj = JSON.parse(s);
    } catch (e) {
        return null;
    }
    if (isNonArrayObject(obj)) return obj;
    else return null;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @fileoverview Contains helper methods for manipulating paths.
 */ /**
 * @return Null if the path is already at the root.
 */ function parent(path) {
    if (path.length === 0) return null;
    var index = path.lastIndexOf('/');
    if (index === -1) return '';
    var newPath = path.slice(0, index);
    return newPath;
}
function child(path, childPath) {
    var canonicalChildPath = childPath.split('/').filter(function(component) {
        return component.length > 0;
    }).join('/');
    if (path.length === 0) return canonicalChildPath;
    else return path + '/' + canonicalChildPath;
}
/**
 * Returns the last component of a path.
 * '/foo/bar' -> 'bar'
 * '/foo/bar/baz/' -> 'baz/'
 * '/a' -> 'a'
 */ function lastComponent(path) {
    var index = path.lastIndexOf('/', path.length - 2);
    if (index === -1) return path;
    else return path.slice(index + 1);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function noXform_(metadata, value) {
    return value;
}
var Mapping = function() {
    function Mapping1(server, local, writable, xform) {
        this.server = server;
        this.local = local || server;
        this.writable = !!writable;
        this.xform = xform || noXform_;
    }
    return Mapping1;
}();
var mappings_ = null;
function xformPath(fullPath) {
    if (!isString(fullPath) || fullPath.length < 2) return fullPath;
    else return lastComponent(fullPath);
}
function getMappings() {
    if (mappings_) return mappings_;
    var mappings = [];
    mappings.push(new Mapping('bucket'));
    mappings.push(new Mapping('generation'));
    mappings.push(new Mapping('metageneration'));
    mappings.push(new Mapping('name', 'fullPath', true));
    function mappingsXformPath(_metadata, fullPath) {
        return xformPath(fullPath);
    }
    var nameMapping = new Mapping('name');
    nameMapping.xform = mappingsXformPath;
    mappings.push(nameMapping);
    /**
     * Coerces the second param to a number, if it is defined.
     */ function xformSize(_metadata, size) {
        if (size !== undefined) return Number(size);
        else return size;
    }
    var sizeMapping = new Mapping('size');
    sizeMapping.xform = xformSize;
    mappings.push(sizeMapping);
    mappings.push(new Mapping('timeCreated'));
    mappings.push(new Mapping('updated'));
    mappings.push(new Mapping('md5Hash', null, true));
    mappings.push(new Mapping('cacheControl', null, true));
    mappings.push(new Mapping('contentDisposition', null, true));
    mappings.push(new Mapping('contentEncoding', null, true));
    mappings.push(new Mapping('contentLanguage', null, true));
    mappings.push(new Mapping('contentType', null, true));
    mappings.push(new Mapping('metadata', 'customMetadata', true));
    mappings_ = mappings;
    return mappings_;
}
function addRef(metadata, service) {
    function generateRef() {
        var bucket = metadata['bucket'];
        var path = metadata['fullPath'];
        var loc = new Location1(bucket, path);
        return service._makeStorageReference(loc);
    }
    Object.defineProperty(metadata, 'ref', {
        get: generateRef
    });
}
function fromResource(service, resource, mappings) {
    var metadata = {
    };
    metadata['type'] = 'file';
    var len = mappings.length;
    for(var i = 0; i < len; i++){
        var mapping = mappings[i];
        metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);
    }
    addRef(metadata, service);
    return metadata;
}
function fromResourceString(service, resourceString, mappings) {
    var obj = jsonObjectOrNull(resourceString);
    if (obj === null) return null;
    var resource = obj;
    return fromResource(service, resource, mappings);
}
function downloadUrlFromResourceString(metadata, resourceString, host) {
    var obj = jsonObjectOrNull(resourceString);
    if (obj === null) return null;
    if (!isString(obj['downloadTokens'])) // This can happen if objects are uploaded through GCS and retrieved
    // through list, so we don't want to throw an Error.
    return null;
    var tokens = obj['downloadTokens'];
    if (tokens.length === 0) return null;
    var encode = encodeURIComponent;
    var tokensList = tokens.split(',');
    var urls = tokensList.map(function(token) {
        var bucket = metadata['bucket'];
        var path = metadata['fullPath'];
        var urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);
        var base = makeUrl(urlPart, host);
        var queryString = makeQueryString({
            alt: 'media',
            token: token
        });
        return base + queryString;
    });
    return urls[0];
}
function toResourceString(metadata, mappings) {
    var resource = {
    };
    var len = mappings.length;
    for(var i = 0; i < len; i++){
        var mapping = mappings[i];
        if (mapping.writable) resource[mapping.server] = metadata[mapping.local];
    }
    return JSON.stringify(resource);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var PREFIXES_KEY = 'prefixes';
var ITEMS_KEY = 'items';
function fromBackendResponse(service, bucket, resource) {
    var listResult = {
        prefixes: [],
        items: [],
        nextPageToken: resource['nextPageToken']
    };
    if (resource[PREFIXES_KEY]) for(var _i = 0, _a = resource[PREFIXES_KEY]; _i < _a.length; _i++){
        var path = _a[_i];
        var pathWithoutTrailingSlash = path.replace(/\/$/, '');
        var reference = service._makeStorageReference(new Location1(bucket, pathWithoutTrailingSlash));
        listResult.prefixes.push(reference);
    }
    if (resource[ITEMS_KEY]) for(var _b = 0, _c = resource[ITEMS_KEY]; _b < _c.length; _b++){
        var item = _c[_b];
        var reference = service._makeStorageReference(new Location1(bucket, item['name']));
        listResult.items.push(reference);
    }
    return listResult;
}
function fromResponseString(service, bucket, resourceString) {
    var obj = jsonObjectOrNull(resourceString);
    if (obj === null) return null;
    var resource = obj;
    return fromBackendResponse(service, bucket, resource);
}
var RequestInfo = function() {
    function RequestInfo1(url, method, /**
     * Returns the value with which to resolve the request's promise. Only called
     * if the request is successful. Throw from this function to reject the
     * returned Request's promise with the thrown error.
     * Note: The XhrIo passed to this function may be reused after this callback
     * returns. Do not keep a reference to it in any way.
     */ handler, timeout) {
        this.url = url;
        this.method = method;
        this.handler = handler;
        this.timeout = timeout;
        this.urlParams = {
        };
        this.headers = {
        };
        this.body = null;
        this.errorHandler = null;
        /**
         * Called with the current number of bytes uploaded and total size (-1 if not
         * computable) of the request body (i.e. used to report upload progress).
         */ this.progressCallback = null;
        this.successCodes = [
            200
        ];
        this.additionalRetryCodes = [];
    }
    return RequestInfo1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Throws the UNKNOWN FirebaseStorageError if cndn is false.
 */ function handlerCheck(cndn) {
    if (!cndn) throw unknown();
}
function metadataHandler(service, mappings) {
    function handler(xhr, text) {
        var metadata = fromResourceString(service, text, mappings);
        handlerCheck(metadata !== null);
        return metadata;
    }
    return handler;
}
function listHandler(service, bucket) {
    function handler(xhr, text) {
        var listResult = fromResponseString(service, bucket, text);
        handlerCheck(listResult !== null);
        return listResult;
    }
    return handler;
}
function downloadUrlHandler(service, mappings) {
    function handler(xhr, text) {
        var metadata = fromResourceString(service, text, mappings);
        handlerCheck(metadata !== null);
        return downloadUrlFromResourceString(metadata, text, service.host);
    }
    return handler;
}
function sharedErrorHandler(location) {
    function errorHandler(xhr, err) {
        var newErr;
        if (xhr.getStatus() === 401) {
            if (// This exact message string is the only consistent part of the
            // server's error response that identifies it as an App Check error.
            xhr.getResponseText().includes('Firebase App Check token is invalid')) newErr = unauthorizedApp();
            else newErr = unauthenticated();
        } else {
            if (xhr.getStatus() === 402) newErr = quotaExceeded(location.bucket);
            else if (xhr.getStatus() === 403) newErr = unauthorized(location.path);
            else newErr = err;
        }
        newErr.serverResponse = err.serverResponse;
        return newErr;
    }
    return errorHandler;
}
function objectErrorHandler(location) {
    var shared = sharedErrorHandler(location);
    function errorHandler(xhr, err) {
        var newErr = shared(xhr, err);
        if (xhr.getStatus() === 404) newErr = objectNotFound(location.path);
        newErr.serverResponse = err.serverResponse;
        return newErr;
    }
    return errorHandler;
}
function getMetadata$2(service, location, mappings) {
    var urlPart = location.fullServerUrl();
    var url = makeUrl(urlPart, service.host);
    var method = 'GET';
    var timeout = service.maxOperationRetryTime;
    var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
    requestInfo.errorHandler = objectErrorHandler(location);
    return requestInfo;
}
function list$2(service, location, delimiter, pageToken, maxResults) {
    var urlParams = {
    };
    if (location.isRoot) urlParams['prefix'] = '';
    else urlParams['prefix'] = location.path + '/';
    if (delimiter && delimiter.length > 0) urlParams['delimiter'] = delimiter;
    if (pageToken) urlParams['pageToken'] = pageToken;
    if (maxResults) urlParams['maxResults'] = maxResults;
    var urlPart = location.bucketOnlyServerUrl();
    var url = makeUrl(urlPart, service.host);
    var method = 'GET';
    var timeout = service.maxOperationRetryTime;
    var requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);
    requestInfo.urlParams = urlParams;
    requestInfo.errorHandler = sharedErrorHandler(location);
    return requestInfo;
}
function getDownloadUrl(service, location, mappings) {
    var urlPart = location.fullServerUrl();
    var url = makeUrl(urlPart, service.host);
    var method = 'GET';
    var timeout = service.maxOperationRetryTime;
    var requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);
    requestInfo.errorHandler = objectErrorHandler(location);
    return requestInfo;
}
function updateMetadata$2(service, location, metadata, mappings) {
    var urlPart = location.fullServerUrl();
    var url = makeUrl(urlPart, service.host);
    var method = 'PATCH';
    var body = toResourceString(metadata, mappings);
    var headers = {
        'Content-Type': 'application/json; charset=utf-8'
    };
    var timeout = service.maxOperationRetryTime;
    var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
    requestInfo.headers = headers;
    requestInfo.body = body;
    requestInfo.errorHandler = objectErrorHandler(location);
    return requestInfo;
}
function deleteObject$2(service, location) {
    var urlPart = location.fullServerUrl();
    var url = makeUrl(urlPart, service.host);
    var method = 'DELETE';
    var timeout = service.maxOperationRetryTime;
    function handler(_xhr, _text) {
    }
    var requestInfo = new RequestInfo(url, method, handler, timeout);
    requestInfo.successCodes = [
        200,
        204
    ];
    requestInfo.errorHandler = objectErrorHandler(location);
    return requestInfo;
}
function determineContentType_(metadata, blob) {
    return metadata && metadata['contentType'] || blob && blob.type() || 'application/octet-stream';
}
function metadataForUpload_(location, blob, metadata) {
    var metadataClone = Object.assign({
    }, metadata);
    metadataClone['fullPath'] = location.path;
    metadataClone['size'] = blob.size();
    if (!metadataClone['contentType']) metadataClone['contentType'] = determineContentType_(null, blob);
    return metadataClone;
}
/**
 * Prepare RequestInfo for uploads as Content-Type: multipart.
 */ function multipartUpload(service, location, mappings, blob, metadata) {
    var urlPart = location.bucketOnlyServerUrl();
    var headers = {
        'X-Goog-Upload-Protocol': 'multipart'
    };
    function genBoundary() {
        var str = '';
        for(var i = 0; i < 2; i++)str = str + Math.random().toString().slice(2);
        return str;
    }
    var boundary = genBoundary();
    headers['Content-Type'] = 'multipart/related; boundary=' + boundary;
    var metadata_ = metadataForUpload_(location, blob, metadata);
    var metadataString = toResourceString(metadata_, mappings);
    var preBlobPart = '--' + boundary + '\r\n' + 'Content-Type: application/json; charset=utf-8\r\n\r\n' + metadataString + '\r\n--' + boundary + '\r\n' + 'Content-Type: ' + metadata_['contentType'] + '\r\n\r\n';
    var postBlobPart = '\r\n--' + boundary + '--';
    var body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);
    if (body === null) throw cannotSliceBlob();
    var urlParams = {
        name: metadata_['fullPath']
    };
    var url = makeUrl(urlPart, service.host);
    var method = 'POST';
    var timeout = service.maxUploadRetryTime;
    var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
    requestInfo.urlParams = urlParams;
    requestInfo.headers = headers;
    requestInfo.body = body.uploadData();
    requestInfo.errorHandler = sharedErrorHandler(location);
    return requestInfo;
}
/**
 * @param current The number of bytes that have been uploaded so far.
 * @param total The total number of bytes in the upload.
 * @param opt_finalized True if the server has finished the upload.
 * @param opt_metadata The upload metadata, should
 *     only be passed if opt_finalized is true.
 */ var ResumableUploadStatus = function() {
    function ResumableUploadStatus1(current, total, finalized, metadata) {
        this.current = current;
        this.total = total;
        this.finalized = !!finalized;
        this.metadata = metadata || null;
    }
    return ResumableUploadStatus1;
}();
function checkResumeHeader_(xhr, allowed) {
    var status = null;
    try {
        status = xhr.getResponseHeader('X-Goog-Upload-Status');
    } catch (e) {
        handlerCheck(false);
    }
    var allowedStatus = allowed || [
        'active'
    ];
    handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);
    return status;
}
function createResumableUpload(service, location, mappings, blob, metadata) {
    var urlPart = location.bucketOnlyServerUrl();
    var metadataForUpload = metadataForUpload_(location, blob, metadata);
    var urlParams = {
        name: metadataForUpload['fullPath']
    };
    var url = makeUrl(urlPart, service.host);
    var method = 'POST';
    var headers = {
        'X-Goog-Upload-Protocol': 'resumable',
        'X-Goog-Upload-Command': 'start',
        'X-Goog-Upload-Header-Content-Length': "" + blob.size(),
        'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],
        'Content-Type': 'application/json; charset=utf-8'
    };
    var body = toResourceString(metadataForUpload, mappings);
    var timeout = service.maxUploadRetryTime;
    function handler(xhr) {
        checkResumeHeader_(xhr);
        var url1;
        try {
            url1 = xhr.getResponseHeader('X-Goog-Upload-URL');
        } catch (e) {
            handlerCheck(false);
        }
        handlerCheck(isString(url1));
        return url1;
    }
    var requestInfo = new RequestInfo(url, method, handler, timeout);
    requestInfo.urlParams = urlParams;
    requestInfo.headers = headers;
    requestInfo.body = body;
    requestInfo.errorHandler = sharedErrorHandler(location);
    return requestInfo;
}
/**
 * @param url From a call to fbs.requests.createResumableUpload.
 */ function getResumableUploadStatus(service, location, url, blob) {
    var headers = {
        'X-Goog-Upload-Command': 'query'
    };
    function handler(xhr) {
        var status = checkResumeHeader_(xhr, [
            'active',
            'final'
        ]);
        var sizeString = null;
        try {
            sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');
        } catch (e) {
            handlerCheck(false);
        }
        if (!sizeString) // null or empty string
        handlerCheck(false);
        var size = Number(sizeString);
        handlerCheck(!isNaN(size));
        return new ResumableUploadStatus(size, blob.size(), status === 'final');
    }
    var method = 'POST';
    var timeout = service.maxUploadRetryTime;
    var requestInfo = new RequestInfo(url, method, handler, timeout);
    requestInfo.headers = headers;
    requestInfo.errorHandler = sharedErrorHandler(location);
    return requestInfo;
}
/**
 * Any uploads via the resumable upload API must transfer a number of bytes
 * that is a multiple of this number.
 */ var RESUMABLE_UPLOAD_CHUNK_SIZE = 262144;
/**
 * @param url From a call to fbs.requests.createResumableUpload.
 * @param chunkSize Number of bytes to upload.
 * @param status The previous status.
 *     If not passed or null, we start from the beginning.
 * @throws fbs.Error If the upload is already complete, the passed in status
 *     has a final size inconsistent with the blob, or the blob cannot be sliced
 *     for upload.
 */ function continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {
    // TODO(andysoto): standardize on internal asserts
    // assert(!(opt_status && opt_status.finalized));
    var status_ = new ResumableUploadStatus(0, 0);
    if (status) {
        status_.current = status.current;
        status_.total = status.total;
    } else {
        status_.current = 0;
        status_.total = blob.size();
    }
    if (blob.size() !== status_.total) throw serverFileWrongSize();
    var bytesLeft = status_.total - status_.current;
    var bytesToUpload = bytesLeft;
    if (chunkSize > 0) bytesToUpload = Math.min(bytesToUpload, chunkSize);
    var startByte = status_.current;
    var endByte = startByte + bytesToUpload;
    var uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';
    var headers = {
        'X-Goog-Upload-Command': uploadCommand,
        'X-Goog-Upload-Offset': "" + status_.current
    };
    var body = blob.slice(startByte, endByte);
    if (body === null) throw cannotSliceBlob();
    function handler(xhr, text) {
        // TODO(andysoto): Verify the MD5 of each uploaded range:
        // the 'x-range-md5' header comes back with status code 308 responses.
        // We'll only be able to bail out though, because you can't re-upload a
        // range that you previously uploaded.
        var uploadStatus = checkResumeHeader_(xhr, [
            'active',
            'final'
        ]);
        var newCurrent = status_.current + bytesToUpload;
        var size = blob.size();
        var metadata;
        if (uploadStatus === 'final') metadata = metadataHandler(service, mappings)(xhr, text);
        else metadata = null;
        return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);
    }
    var method = 'POST';
    var timeout = service.maxUploadRetryTime;
    var requestInfo = new RequestInfo(url, method, handler, timeout);
    requestInfo.headers = headers;
    requestInfo.body = body.uploadData();
    requestInfo.progressCallback = progressCallback || null;
    requestInfo.errorHandler = sharedErrorHandler(location);
    return requestInfo;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var Observer = function() {
    function Observer1(nextOrObserver, error, complete) {
        var asFunctions = isFunction(nextOrObserver) || error != null || complete != null;
        if (asFunctions) {
            this.next = nextOrObserver;
            this.error = error;
            this.complete = complete;
        } else {
            var observer = nextOrObserver;
            this.next = observer.next;
            this.error = observer.error;
            this.complete = observer.complete;
        }
    }
    return Observer1;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns a function that invokes f with its arguments asynchronously as a
 * microtask, i.e. as soon as possible after the current script returns back
 * into browser code.
 */ // eslint-disable-next-line @typescript-eslint/ban-types
function async(f) {
    return function() {
        var argsToForward = [];
        for(var _i = 0; _i < arguments.length; _i++)argsToForward[_i] = arguments[_i];
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        Promise.resolve().then(function() {
            return f.apply(void 0, argsToForward);
        });
    };
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Represents a blob being uploaded. Can be used to pause/resume/cancel the
 * upload and manage callbacks for various events.
 * @internal
 */ var UploadTask = function() {
    /**
     * @param ref - The firebaseStorage.Reference object this task came
     *     from, untyped to avoid cyclic dependencies.
     * @param blob - The blob to upload.
     */ function UploadTask1(ref, blob, metadata) {
        var _this = this;
        if (metadata === void 0) metadata = null;
        /**
         * Number of bytes transferred so far.
         */ this._transferred = 0;
        this._needToFetchStatus = false;
        this._needToFetchMetadata = false;
        this._observers = [];
        this._error = undefined;
        this._uploadUrl = undefined;
        this._request = undefined;
        this._chunkMultiplier = 1;
        this._resolve = undefined;
        this._reject = undefined;
        this._ref = ref;
        this._blob = blob;
        this._metadata = metadata;
        this._mappings = getMappings();
        this._resumable = this._shouldDoResumable(this._blob);
        this._state = "running";
        this._errorHandler = function(error) {
            _this._request = undefined;
            _this._chunkMultiplier = 1;
            if (error._codeEquals("canceled"/* CANCELED */ )) {
                _this._needToFetchStatus = true;
                _this.completeTransitions_();
            } else {
                _this._error = error;
                _this._transition("error"/* ERROR */ );
            }
        };
        this._metadataErrorHandler = function(error) {
            _this._request = undefined;
            if (error._codeEquals("canceled"/* CANCELED */ )) _this.completeTransitions_();
            else {
                _this._error = error;
                _this._transition("error"/* ERROR */ );
            }
        };
        this._promise = new Promise(function(resolve, reject) {
            _this._resolve = resolve;
            _this._reject = reject;
            _this._start();
        });
        // Prevent uncaught rejections on the internal promise from bubbling out
        // to the top level with a dummy handler.
        this._promise.then(null, function() {
        });
    }
    UploadTask1.prototype._makeProgressCallback = function() {
        var _this = this;
        var sizeBefore = this._transferred;
        return function(loaded) {
            return _this._updateProgress(sizeBefore + loaded);
        };
    };
    UploadTask1.prototype._shouldDoResumable = function(blob) {
        return blob.size() > 262144;
    };
    UploadTask1.prototype._start = function() {
        if (this._state !== "running") // This can happen if someone pauses us in a resume callback, for example.
        return;
        if (this._request !== undefined) return;
        if (this._resumable) {
            if (this._uploadUrl === undefined) this._createResumable();
            else {
                if (this._needToFetchStatus) this._fetchStatus();
                else if (this._needToFetchMetadata) // Happens if we miss the metadata on upload completion.
                this._fetchMetadata();
                else this._continueUpload();
            }
        } else this._oneShotUpload();
    };
    UploadTask1.prototype._resolveToken = function(callback) {
        var _this = this;
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        Promise.all([
            this._ref.storage._getAuthToken(),
            this._ref.storage._getAppCheckToken()
        ]).then(function(_a) {
            var authToken = _a[0], appCheckToken = _a[1];
            switch(_this._state){
                case "running":
                    callback(authToken, appCheckToken);
                    break;
                case "canceling":
                    _this._transition("canceled"/* CANCELED */ );
                    break;
                case "pausing":
                    _this._transition("paused"/* PAUSED */ );
                    break;
            }
        });
    };
    // TODO(andysoto): assert false
    UploadTask1.prototype._createResumable = function() {
        var _this = this;
        this._resolveToken(function(authToken, appCheckToken) {
            var requestInfo = createResumableUpload(_this._ref.storage, _this._ref._location, _this._mappings, _this._blob, _this._metadata);
            var createRequest = _this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);
            _this._request = createRequest;
            createRequest.getPromise().then(function(url) {
                _this._request = undefined;
                _this._uploadUrl = url;
                _this._needToFetchStatus = false;
                _this.completeTransitions_();
            }, _this._errorHandler);
        });
    };
    UploadTask1.prototype._fetchStatus = function() {
        var _this = this;
        // TODO(andysoto): assert(this.uploadUrl_ !== null);
        var url = this._uploadUrl;
        this._resolveToken(function(authToken, appCheckToken) {
            var requestInfo = getResumableUploadStatus(_this._ref.storage, _this._ref._location, url, _this._blob);
            var statusRequest = _this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);
            _this._request = statusRequest;
            statusRequest.getPromise().then(function(status) {
                _this._request = undefined;
                _this._updateProgress(status.current);
                _this._needToFetchStatus = false;
                if (status.finalized) _this._needToFetchMetadata = true;
                _this.completeTransitions_();
            }, _this._errorHandler);
        });
    };
    UploadTask1.prototype._continueUpload = function() {
        var _this = this;
        var chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;
        var status = new ResumableUploadStatus(this._transferred, this._blob.size());
        // TODO(andysoto): assert(this.uploadUrl_ !== null);
        var url = this._uploadUrl;
        this._resolveToken(function(authToken, appCheckToken) {
            var requestInfo;
            try {
                requestInfo = continueResumableUpload(_this._ref._location, _this._ref.storage, url, _this._blob, chunkSize, _this._mappings, status, _this._makeProgressCallback());
            } catch (e) {
                _this._error = e;
                _this._transition("error"/* ERROR */ );
                return;
            }
            var uploadRequest = _this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);
            _this._request = uploadRequest;
            uploadRequest.getPromise().then(function(newStatus) {
                _this._increaseMultiplier();
                _this._request = undefined;
                _this._updateProgress(newStatus.current);
                if (newStatus.finalized) {
                    _this._metadata = newStatus.metadata;
                    _this._transition("success"/* SUCCESS */ );
                } else _this.completeTransitions_();
            }, _this._errorHandler);
        });
    };
    UploadTask1.prototype._increaseMultiplier = function() {
        var currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;
        // Max chunk size is 32M.
        if (currentSize < 33554432) this._chunkMultiplier *= 2;
    };
    UploadTask1.prototype._fetchMetadata = function() {
        var _this = this;
        this._resolveToken(function(authToken, appCheckToken) {
            var requestInfo = getMetadata$2(_this._ref.storage, _this._ref._location, _this._mappings);
            var metadataRequest = _this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);
            _this._request = metadataRequest;
            metadataRequest.getPromise().then(function(metadata) {
                _this._request = undefined;
                _this._metadata = metadata;
                _this._transition("success"/* SUCCESS */ );
            }, _this._metadataErrorHandler);
        });
    };
    UploadTask1.prototype._oneShotUpload = function() {
        var _this = this;
        this._resolveToken(function(authToken, appCheckToken) {
            var requestInfo = multipartUpload(_this._ref.storage, _this._ref._location, _this._mappings, _this._blob, _this._metadata);
            var multipartRequest = _this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);
            _this._request = multipartRequest;
            multipartRequest.getPromise().then(function(metadata) {
                _this._request = undefined;
                _this._metadata = metadata;
                _this._updateProgress(_this._blob.size());
                _this._transition("success"/* SUCCESS */ );
            }, _this._errorHandler);
        });
    };
    UploadTask1.prototype._updateProgress = function(transferred) {
        var old = this._transferred;
        this._transferred = transferred;
        // A progress update can make the "transferred" value smaller (e.g. a
        // partial upload not completed by server, after which the "transferred"
        // value may reset to the value at the beginning of the request).
        if (this._transferred !== old) this._notifyObservers();
    };
    UploadTask1.prototype._transition = function(state) {
        if (this._state === state) return;
        switch(state){
            case "canceling":
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.RUNNING ||
                //        this.state_ === InternalTaskState.PAUSING);
                this._state = state;
                if (this._request !== undefined) this._request.cancel();
                break;
            case "pausing":
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.RUNNING);
                this._state = state;
                if (this._request !== undefined) this._request.cancel();
                break;
            case "running":
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.PAUSED ||
                //        this.state_ === InternalTaskState.PAUSING);
                var wasPaused = this._state === "paused"/* PAUSED */ ;
                this._state = state;
                if (wasPaused) {
                    this._notifyObservers();
                    this._start();
                }
                break;
            case "paused":
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.PAUSING);
                this._state = state;
                this._notifyObservers();
                break;
            case "canceled":
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.PAUSED ||
                //        this.state_ === InternalTaskState.CANCELING);
                this._error = canceled();
                this._state = state;
                this._notifyObservers();
                break;
            case "error":
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.RUNNING ||
                //        this.state_ === InternalTaskState.PAUSING ||
                //        this.state_ === InternalTaskState.CANCELING);
                this._state = state;
                this._notifyObservers();
                break;
            case "success":
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.RUNNING ||
                //        this.state_ === InternalTaskState.PAUSING ||
                //        this.state_ === InternalTaskState.CANCELING);
                this._state = state;
                this._notifyObservers();
                break;
        }
    };
    UploadTask1.prototype.completeTransitions_ = function() {
        switch(this._state){
            case "pausing":
                this._transition("paused"/* PAUSED */ );
                break;
            case "canceling":
                this._transition("canceled"/* CANCELED */ );
                break;
            case "running":
                this._start();
                break;
        }
    };
    Object.defineProperty(UploadTask1.prototype, "snapshot", {
        /**
         * A snapshot of the current task state.
         */ get: function() {
            var externalState = taskStateFromInternalTaskState(this._state);
            return {
                bytesTransferred: this._transferred,
                totalBytes: this._blob.size(),
                state: externalState,
                metadata: this._metadata,
                task: this,
                ref: this._ref
            };
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Adds a callback for an event.
     * @param type - The type of event to listen for.
     * @param nextOrObserver -
     *     The `next` function, which gets called for each item in
     *     the event stream, or an observer object with some or all of these three
     *     properties (`next`, `error`, `complete`).
     * @param error - A function that gets called with a `FirebaseStorageError`
     *     if the event stream ends due to an error.
     * @param completed - A function that gets called if the
     *     event stream ends normally.
     * @returns
     *     If only the event argument is passed, returns a function you can use to
     *     add callbacks (see the examples above). If more than just the event
     *     argument is passed, returns a function you can call to unregister the
     *     callbacks.
     */ UploadTask1.prototype.on = function(type, nextOrObserver, error, completed) {
        var _this = this;
        var observer = new Observer(nextOrObserver, error, completed);
        this._addObserver(observer);
        return function() {
            _this._removeObserver(observer);
        };
    };
    /**
     * This object behaves like a Promise, and resolves with its snapshot data
     * when the upload completes.
     * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.
     * @param onRejected - The rejection callback.
     */ UploadTask1.prototype.then = function(onFulfilled, onRejected) {
        // These casts are needed so that TypeScript can infer the types of the
        // resulting Promise.
        return this._promise.then(onFulfilled, onRejected);
    };
    /**
     * Equivalent to calling `then(null, onRejected)`.
     */ UploadTask1.prototype.catch = function(onRejected) {
        return this.then(null, onRejected);
    };
    /**
     * Adds the given observer.
     */ UploadTask1.prototype._addObserver = function(observer) {
        this._observers.push(observer);
        this._notifyObserver(observer);
    };
    /**
     * Removes the given observer.
     */ UploadTask1.prototype._removeObserver = function(observer) {
        var i = this._observers.indexOf(observer);
        if (i !== -1) this._observers.splice(i, 1);
    };
    UploadTask1.prototype._notifyObservers = function() {
        var _this = this;
        this._finishPromise();
        var observers = this._observers.slice();
        observers.forEach(function(observer) {
            _this._notifyObserver(observer);
        });
    };
    UploadTask1.prototype._finishPromise = function() {
        if (this._resolve !== undefined) {
            var triggered = true;
            switch(taskStateFromInternalTaskState(this._state)){
                case TaskState.SUCCESS:
                    async(this._resolve.bind(null, this.snapshot))();
                    break;
                case TaskState.CANCELED:
                case TaskState.ERROR:
                    var toCall = this._reject;
                    async(toCall.bind(null, this._error))();
                    break;
                default:
                    triggered = false;
                    break;
            }
            if (triggered) {
                this._resolve = undefined;
                this._reject = undefined;
            }
        }
    };
    UploadTask1.prototype._notifyObserver = function(observer) {
        var externalState = taskStateFromInternalTaskState(this._state);
        switch(externalState){
            case TaskState.RUNNING:
            case TaskState.PAUSED:
                if (observer.next) async(observer.next.bind(observer, this.snapshot))();
                break;
            case TaskState.SUCCESS:
                if (observer.complete) async(observer.complete.bind(observer))();
                break;
            case TaskState.CANCELED:
            case TaskState.ERROR:
                if (observer.error) async(observer.error.bind(observer, this._error))();
                break;
            default:
                // TODO(andysoto): assert(false);
                if (observer.error) async(observer.error.bind(observer, this._error))();
        }
    };
    /**
     * Resumes a paused task. Has no effect on a currently running or failed task.
     * @returns True if the operation took effect, false if ignored.
     */ UploadTask1.prototype.resume = function() {
        var valid = this._state === "paused" || this._state === "pausing"/* PAUSING */ ;
        if (valid) this._transition("running"/* RUNNING */ );
        return valid;
    };
    /**
     * Pauses a currently running task. Has no effect on a paused or failed task.
     * @returns True if the operation took effect, false if ignored.
     */ UploadTask1.prototype.pause = function() {
        var valid = this._state === "running"/* RUNNING */ ;
        if (valid) this._transition("pausing"/* PAUSING */ );
        return valid;
    };
    /**
     * Cancels a currently running or paused task. Has no effect on a complete or
     * failed task.
     * @returns True if the operation took effect, false if ignored.
     */ UploadTask1.prototype.cancel = function() {
        var valid = this._state === "running" || this._state === "pausing"/* PAUSING */ ;
        if (valid) this._transition("canceling"/* CANCELING */ );
        return valid;
    };
    return UploadTask1;
}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provides methods to interact with a bucket in the Firebase Storage service.
 * @internal
 * @param _location - An fbs.location, or the URL at
 *     which to base this object, in one of the following forms:
 *         gs://<bucket>/<object-path>
 *         http[s]://firebasestorage.googleapis.com/
 *                     <api-version>/b/<bucket>/o/<object-path>
 *     Any query or fragment strings will be ignored in the http[s]
 *     format. If no value is passed, the storage object will use a URL based on
 *     the project ID of the base firebase.App instance.
 */ var Reference = function() {
    function Reference1(_service, location) {
        this._service = _service;
        if (location instanceof Location1) this._location = location;
        else this._location = Location1.makeFromUrl(location, _service.host);
    }
    /**
     * Returns the URL for the bucket and path this object references,
     *     in the form gs://<bucket>/<object-path>
     * @override
     */ Reference1.prototype.toString = function() {
        return 'gs://' + this._location.bucket + '/' + this._location.path;
    };
    Reference1.prototype._newRef = function(service, location) {
        return new Reference1(service, location);
    };
    Object.defineProperty(Reference1.prototype, "root", {
        /**
         * A reference to the root of this object's bucket.
         */ get: function() {
            var location = new Location1(this._location.bucket, '');
            return this._newRef(this._service, location);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Reference1.prototype, "bucket", {
        /**
         * The name of the bucket containing this reference's object.
         */ get: function() {
            return this._location.bucket;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Reference1.prototype, "fullPath", {
        /**
         * The full path of this object.
         */ get: function() {
            return this._location.path;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Reference1.prototype, "name", {
        /**
         * The short name of this object, which is the last component of the full path.
         * For example, if fullPath is 'full/path/image.png', name is 'image.png'.
         */ get: function() {
            return lastComponent(this._location.path);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Reference1.prototype, "storage", {
        /**
         * The `StorageService` instance this `StorageReference` is associated with.
         */ get: function() {
            return this._service;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Reference1.prototype, "parent", {
        /**
         * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if
         * this reference is the root.
         */ get: function() {
            var newPath = parent(this._location.path);
            if (newPath === null) return null;
            var location = new Location1(this._location.bucket, newPath);
            return new Reference1(this._service, location);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Utility function to throw an error in methods that do not accept a root reference.
     */ Reference1.prototype._throwIfRoot = function(name) {
        if (this._location.path === '') throw invalidRootOperation(name);
    };
    return Reference1;
}();
/**
 * Uploads data to this object's location.
 * The upload can be paused and resumed, and exposes progress updates.
 * @public
 * @param ref - StorageReference where data should be uploaded.
 * @param data - The data to upload.
 * @param metadata - Metadata for the newly uploaded data.
 * @returns An UploadTask
 */ function uploadBytesResumable$1(ref, data, metadata) {
    ref._throwIfRoot('uploadBytesResumable');
    return new UploadTask(ref, new FbsBlob(data), metadata);
}
/**
 * List all items (files) and prefixes (folders) under this storage reference.
 *
 * This is a helper method for calling list() repeatedly until there are
 * no more results. The default pagination size is 1000.
 *
 * Note: The results may not be consistent if objects are changed while this
 * operation is running.
 *
 * Warning: listAll may potentially consume too many resources if there are
 * too many results.
 * @public
 * @param ref - StorageReference to get list from.
 *
 * @returns A Promise that resolves with all the items and prefixes under
 *      the current storage reference. `prefixes` contains references to
 *      sub-directories and `items` contains references to objects in this
 *      folder. `nextPageToken` is never returned.
 */ function listAll$1(ref) {
    var accumulator = {
        prefixes: [],
        items: []
    };
    return listAllHelper(ref, accumulator).then(function() {
        return accumulator;
    });
}
/**
 * Separated from listAll because async functions can't use "arguments".
 * @param ref
 * @param accumulator
 * @param pageToken
 */ function listAllHelper(ref, accumulator, pageToken) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var opt, nextPage;
        var _a, _b;
        return _tslib.__generator(this, function(_c) {
            switch(_c.label){
                case 0:
                    opt = {
                        // maxResults is 1000 by default.
                        pageToken: pageToken
                    };
                    return [
                        4,
                        list$1(ref, opt)
                    ];
                case 1:
                    nextPage = _c.sent();
                    (_a = accumulator.prefixes).push.apply(_a, nextPage.prefixes);
                    (_b = accumulator.items).push.apply(_b, nextPage.items);
                    if (!(nextPage.nextPageToken != null)) return [
                        3,
                        3
                    ];
                    return [
                        4,
                        listAllHelper(ref, accumulator, nextPage.nextPageToken)
                    ];
                case 2:
                    _c.sent();
                    _c.label = 3;
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
}
/**
 * List items (files) and prefixes (folders) under this storage reference.
 *
 * List API is only available for Firebase Rules Version 2.
 *
 * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'
 * delimited folder structure.
 * Refer to GCS's List API if you want to learn more.
 *
 * To adhere to Firebase Rules's Semantics, Firebase Storage does not
 * support objects whose paths end with "/" or contain two consecutive
 * "/"s. Firebase Storage List API will filter these unsupported objects.
 * list() may fail if there are too many unsupported objects in the bucket.
 * @public
 *
 * @param ref - StorageReference to get list from.
 * @param options - See ListOptions for details.
 * @returns A Promise that resolves with the items and prefixes.
 *      `prefixes` contains references to sub-folders and `items`
 *      contains references to objects in this folder. `nextPageToken`
 *      can be used to get the rest of the results.
 */ function list$1(ref, options) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var op, requestInfo;
        return _tslib.__generator(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (options != null) {
                        if (typeof options.maxResults === 'number') validateNumber('options.maxResults', /* minValue= */ 1, /* maxValue= */ 1000, options.maxResults);
                    }
                    op = options || {
                    };
                    requestInfo = list$2(ref.storage, ref._location, /*delimiter= */ '/', op.pageToken, op.maxResults);
                    return [
                        4,
                        ref.storage.makeRequestWithTokens(requestInfo)
                    ];
                case 1:
                    return [
                        2,
                        _a.sent().getPromise()
                    ];
            }
        });
    });
}
/**
 * A promise that resolves with the metadata for this object. If this
 * object doesn't exist or metadata cannot be retreived, the promise is
 * rejected.
 * @public
 * @param ref - StorageReference to get metadata from.
 */ function getMetadata$1(ref) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var requestInfo;
        return _tslib.__generator(this, function(_a) {
            switch(_a.label){
                case 0:
                    ref._throwIfRoot('getMetadata');
                    requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());
                    return [
                        4,
                        ref.storage.makeRequestWithTokens(requestInfo)
                    ];
                case 1:
                    return [
                        2,
                        _a.sent().getPromise()
                    ];
            }
        });
    });
}
/**
 * Updates the metadata for this object.
 * @public
 * @param ref - StorageReference to update metadata for.
 * @param metadata - The new metadata for the object.
 *     Only values that have been explicitly set will be changed. Explicitly
 *     setting a value to null will remove the metadata.
 * @returns A promise that resolves
 *     with the new metadata for this object.
 *     See `firebaseStorage.Reference.prototype.getMetadata`
 */ function updateMetadata$1(ref, metadata) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var requestInfo;
        return _tslib.__generator(this, function(_a) {
            switch(_a.label){
                case 0:
                    ref._throwIfRoot('updateMetadata');
                    requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());
                    return [
                        4,
                        ref.storage.makeRequestWithTokens(requestInfo)
                    ];
                case 1:
                    return [
                        2,
                        _a.sent().getPromise()
                    ];
            }
        });
    });
}
/**
 * Returns the download URL for the given Reference.
 * @public
 * @returns A promise that resolves with the download
 *     URL for this object.
 */ function getDownloadURL$1(ref) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var requestInfo;
        return _tslib.__generator(this, function(_a) {
            switch(_a.label){
                case 0:
                    ref._throwIfRoot('getDownloadURL');
                    requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());
                    return [
                        4,
                        ref.storage.makeRequestWithTokens(requestInfo)
                    ];
                case 1:
                    return [
                        2,
                        _a.sent().getPromise().then(function(url) {
                            if (url === null) throw noDownloadURL();
                            return url;
                        })
                    ];
            }
        });
    });
}
/**
 * Deletes the object at this location.
 * @public
 * @param ref - StorageReference for object to delete.
 * @returns A promise that resolves if the deletion succeeds.
 */ function deleteObject$1(ref) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var requestInfo;
        return _tslib.__generator(this, function(_a) {
            switch(_a.label){
                case 0:
                    ref._throwIfRoot('deleteObject');
                    requestInfo = deleteObject$2(ref.storage, ref._location);
                    return [
                        4,
                        ref.storage.makeRequestWithTokens(requestInfo)
                    ];
                case 1:
                    return [
                        2,
                        _a.sent().getPromise()
                    ];
            }
        });
    });
}
/**
 * Returns reference for object obtained by appending `childPath` to `ref`.
 *
 * @param ref - StorageReference to get child of.
 * @param childPath - Child path from provided ref.
 * @returns A reference to the object obtained by
 * appending childPath, removing any duplicate, beginning, or trailing
 * slashes.
 *
 */ function _getChild$1(ref, childPath) {
    var newPath = child(ref._location.path, childPath);
    var location = new Location1(ref._location.bucket, newPath);
    return new Reference(ref.storage, location);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function isUrl(path) {
    return /^[A-Za-z]+:\/\//.test(path);
}
/**
 * Returns a firebaseStorage.Reference for the given url.
 */ function refFromURL(service, url) {
    return new Reference(service, url);
}
/**
 * Returns a firebaseStorage.Reference for the given path in the default
 * bucket.
 */ function refFromPath(ref, path) {
    if (ref instanceof FirebaseStorageImpl) {
        var service = ref;
        if (service._bucket == null) throw noDefaultBucket();
        var reference = new Reference(service, service._bucket);
        if (path != null) return refFromPath(reference, path);
        else return reference;
    } else {
        // ref is a Reference
        if (path !== undefined) return _getChild$1(ref, path);
        else return ref;
    }
}
function ref$1(serviceOrRef, pathOrUrl) {
    if (pathOrUrl && isUrl(pathOrUrl)) {
        if (serviceOrRef instanceof FirebaseStorageImpl) return refFromURL(serviceOrRef, pathOrUrl);
        else throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');
    } else return refFromPath(serviceOrRef, pathOrUrl);
}
function extractBucket(host, config) {
    var bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];
    if (bucketString == null) return null;
    return Location1.makeFromBucketSpec(bucketString, host);
}
function connectStorageEmulator$1(storage, host, port, options) {
    if (options === void 0) options = {
    };
    storage.host = "http://" + host + ":" + port;
    var mockUserToken = options.mockUserToken;
    if (mockUserToken) storage._overrideAuthToken = typeof mockUserToken === 'string' ? mockUserToken : _util.createMockUserToken(mockUserToken, storage.app.options.projectId);
}
/**
 * A service that provides Firebase Storage Reference instances.
 * @public
 * @param opt_url - gs:// url to a custom Storage Bucket
 */ var FirebaseStorageImpl = function() {
    function FirebaseStorageImpl1(/**
     * FirebaseApp associated with this StorageService instance.
     */ app, _authProvider, /**
     * @internal
     */ _appCheckProvider, /**
     * @internal
     */ _pool, _url, _firebaseVersion) {
        this.app = app;
        this._authProvider = _authProvider;
        this._appCheckProvider = _appCheckProvider;
        this._pool = _pool;
        this._url = _url;
        this._firebaseVersion = _firebaseVersion;
        this._bucket = null;
        /**
         * This string can be in the formats:
         * - host
         * - host:port
         * - protocol://host:port
         */ this._host = DEFAULT_HOST;
        this._appId = null;
        this._deleted = false;
        this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;
        this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;
        this._requests = new Set();
        if (_url != null) this._bucket = Location1.makeFromBucketSpec(_url, this._host);
        else this._bucket = extractBucket(this._host, this.app.options);
    }
    Object.defineProperty(FirebaseStorageImpl1.prototype, "host", {
        get: function() {
            return this._host;
        },
        /**
         * Set host string for this service.
         * @param host - host string in the form of host, host:port,
         * or protocol://host:port
         */ set: function(host) {
            this._host = host;
            if (this._url != null) this._bucket = Location1.makeFromBucketSpec(this._url, host);
            else this._bucket = extractBucket(host, this.app.options);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FirebaseStorageImpl1.prototype, "maxUploadRetryTime", {
        /**
         * The maximum time to retry uploads in milliseconds.
         */ get: function() {
            return this._maxUploadRetryTime;
        },
        set: function(time) {
            validateNumber('time', /* minValue=*/ 0, /* maxValue= */ Number.POSITIVE_INFINITY, time);
            this._maxUploadRetryTime = time;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FirebaseStorageImpl1.prototype, "maxOperationRetryTime", {
        /**
         * The maximum time to retry operations other than uploads or downloads in
         * milliseconds.
         */ get: function() {
            return this._maxOperationRetryTime;
        },
        set: function(time) {
            validateNumber('time', /* minValue=*/ 0, /* maxValue= */ Number.POSITIVE_INFINITY, time);
            this._maxOperationRetryTime = time;
        },
        enumerable: false,
        configurable: true
    });
    FirebaseStorageImpl1.prototype._getAuthToken = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var auth, tokenData;
            return _tslib.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (this._overrideAuthToken) return [
                            2,
                            this._overrideAuthToken
                        ];
                        auth = this._authProvider.getImmediate({
                            optional: true
                        });
                        if (!auth) return [
                            3,
                            2
                        ];
                        return [
                            4,
                            auth.getToken()
                        ];
                    case 1:
                        tokenData = _a.sent();
                        if (tokenData !== null) return [
                            2,
                            tokenData.accessToken
                        ];
                        _a.label = 2;
                    case 2:
                        return [
                            2,
                            null
                        ];
                }
            });
        });
    };
    FirebaseStorageImpl1.prototype._getAppCheckToken = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var appCheck, result;
            return _tslib.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        appCheck = this._appCheckProvider.getImmediate({
                            optional: true
                        });
                        if (!appCheck) return [
                            3,
                            2
                        ];
                        return [
                            4,
                            appCheck.getToken()
                        ];
                    case 1:
                        result = _a.sent();
                        // TODO: What do we want to do if there is an error getting the token?
                        // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be
                        // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use
                        // the token (actual or dummy) to send requests.
                        return [
                            2,
                            result.token
                        ];
                    case 2:
                        return [
                            2,
                            null
                        ];
                }
            });
        });
    };
    /**
     * Stop running requests and prevent more from being created.
     */ FirebaseStorageImpl1.prototype._delete = function() {
        if (!this._deleted) {
            this._deleted = true;
            this._requests.forEach(function(request) {
                return request.cancel();
            });
            this._requests.clear();
        }
        return Promise.resolve();
    };
    /**
     * Returns a new firebaseStorage.Reference object referencing this StorageService
     * at the given Location.
     */ FirebaseStorageImpl1.prototype._makeStorageReference = function(loc) {
        return new Reference(this, loc);
    };
    /**
     * @param requestInfo - HTTP RequestInfo object
     * @param authToken - Firebase auth token
     */ FirebaseStorageImpl1.prototype._makeRequest = function(requestInfo, authToken, appCheckToken) {
        var _this = this;
        if (!this._deleted) {
            var request_1 = makeRequest(requestInfo, this._appId, authToken, appCheckToken, this._pool, this._firebaseVersion);
            this._requests.add(request_1);
            // Request removes itself from set when complete.
            request_1.getPromise().then(function() {
                return _this._requests.delete(request_1);
            }, function() {
                return _this._requests.delete(request_1);
            });
            return request_1;
        } else return new FailRequest(appDeleted());
    };
    FirebaseStorageImpl1.prototype.makeRequestWithTokens = function(requestInfo) {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var _a, authToken, appCheckToken;
            return _tslib.__generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        return [
                            4,
                            Promise.all([
                                this._getAuthToken(),
                                this._getAppCheckToken()
                            ])
                        ];
                    case 1:
                        _a = _b.sent(), authToken = _a[0], appCheckToken = _a[1];
                        return [
                            2,
                            this._makeRequest(requestInfo, authToken, appCheckToken)
                        ];
                }
            });
        });
    };
    return FirebaseStorageImpl1;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Uploads data to this object's location.
 * The upload can be paused and resumed, and exposes progress updates.
 * @public
 * @param ref - StorageReference where data should be uploaded.
 * @param data - The data to upload.
 * @param metadata - Metadata for the data to upload.
 * @returns An UploadTask
 */ function uploadBytesResumable(ref, data, metadata) {
    ref = _util.getModularInstance(ref);
    return uploadBytesResumable$1(ref, data, metadata);
}
/**
 * A promise that resolves with the metadata for this object. If this
 * object doesn't exist or metadata cannot be retreived, the promise is
 * rejected.
 * @public
 * @param ref - StorageReference to get metadata from.
 */ function getMetadata(ref) {
    ref = _util.getModularInstance(ref);
    return getMetadata$1(ref);
}
/**
 * Updates the metadata for this object.
 * @public
 * @param ref - StorageReference to update metadata for.
 * @param metadata - The new metadata for the object.
 *     Only values that have been explicitly set will be changed. Explicitly
 *     setting a value to null will remove the metadata.
 * @returns A promise that resolves with the new metadata for this object.
 */ function updateMetadata(ref, metadata) {
    ref = _util.getModularInstance(ref);
    return updateMetadata$1(ref, metadata);
}
/**
 * List items (files) and prefixes (folders) under this storage reference.
 *
 * List API is only available for Firebase Rules Version 2.
 *
 * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'
 * delimited folder structure.
 * Refer to GCS's List API if you want to learn more.
 *
 * To adhere to Firebase Rules's Semantics, Firebase Storage does not
 * support objects whose paths end with "/" or contain two consecutive
 * "/"s. Firebase Storage List API will filter these unsupported objects.
 * list() may fail if there are too many unsupported objects in the bucket.
 * @public
 *
 * @param ref - StorageReference to get list from.
 * @param options - See ListOptions for details.
 * @returns A Promise that resolves with the items and prefixes.
 *      `prefixes` contains references to sub-folders and `items`
 *      contains references to objects in this folder. `nextPageToken`
 *      can be used to get the rest of the results.
 */ function list(ref, options) {
    ref = _util.getModularInstance(ref);
    return list$1(ref, options);
}
/**
 * List all items (files) and prefixes (folders) under this storage reference.
 *
 * This is a helper method for calling list() repeatedly until there are
 * no more results. The default pagination size is 1000.
 *
 * Note: The results may not be consistent if objects are changed while this
 * operation is running.
 *
 * Warning: listAll may potentially consume too many resources if there are
 * too many results.
 * @public
 * @param ref - StorageReference to get list from.
 *
 * @returns A Promise that resolves with all the items and prefixes under
 *      the current storage reference. `prefixes` contains references to
 *      sub-directories and `items` contains references to objects in this
 *      folder. `nextPageToken` is never returned.
 */ function listAll(ref) {
    ref = _util.getModularInstance(ref);
    return listAll$1(ref);
}
/**
 * Returns the download URL for the given Reference.
 * @public
 * @returns A promise that resolves with the download
 *     URL for this object.
 */ function getDownloadURL(ref) {
    ref = _util.getModularInstance(ref);
    return getDownloadURL$1(ref);
}
/**
 * Deletes the object at this location.
 * @public
 * @param ref - StorageReference for object to delete.
 * @returns A promise that resolves if the deletion succeeds.
 */ function deleteObject(ref) {
    ref = _util.getModularInstance(ref);
    return deleteObject$1(ref);
}
function ref(serviceOrRef, pathOrUrl) {
    serviceOrRef = _util.getModularInstance(serviceOrRef);
    return ref$1(serviceOrRef, pathOrUrl);
}
/**
 * @internal
 */ function _getChild(ref1, childPath) {
    return _getChild$1(ref1, childPath);
}
/**
 * Modify this `StorageService` instance to communicate with the Cloud Storage emulator.
 *
 * @param storage - The `StorageService` instance
 * @param host - The emulator host (ex: localhost)
 * @param port - The emulator port (ex: 5001)
 * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules.
 * @public
 */ function connectStorageEmulator(storage, host, port, options) {
    if (options === void 0) options = {
    };
    connectStorageEmulator$1(storage, host, port, options);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var UploadTaskSnapshotCompat = function() {
    function UploadTaskSnapshotCompat1(_delegate, task, ref1) {
        this._delegate = _delegate;
        this.task = task;
        this.ref = ref1;
    }
    Object.defineProperty(UploadTaskSnapshotCompat1.prototype, "bytesTransferred", {
        get: function() {
            return this._delegate.bytesTransferred;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UploadTaskSnapshotCompat1.prototype, "metadata", {
        get: function() {
            return this._delegate.metadata;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UploadTaskSnapshotCompat1.prototype, "state", {
        get: function() {
            return this._delegate.state;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UploadTaskSnapshotCompat1.prototype, "totalBytes", {
        get: function() {
            return this._delegate.totalBytes;
        },
        enumerable: false,
        configurable: true
    });
    return UploadTaskSnapshotCompat1;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var UploadTaskCompat = function() {
    function UploadTaskCompat1(_delegate, _ref) {
        this._delegate = _delegate;
        this._ref = _ref;
        this.cancel = this._delegate.cancel.bind(this._delegate);
        this.catch = this._delegate.catch.bind(this._delegate);
        this.pause = this._delegate.pause.bind(this._delegate);
        this.resume = this._delegate.resume.bind(this._delegate);
    }
    Object.defineProperty(UploadTaskCompat1.prototype, "snapshot", {
        get: function() {
            return new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);
        },
        enumerable: false,
        configurable: true
    });
    UploadTaskCompat1.prototype.then = function(onFulfilled, onRejected) {
        var _this = this;
        return this._delegate.then(function(snapshot) {
            if (onFulfilled) return onFulfilled(new UploadTaskSnapshotCompat(snapshot, _this, _this._ref));
        }, onRejected);
    };
    UploadTaskCompat1.prototype.on = function(type, nextOrObserver, error, completed) {
        var _this = this;
        var wrappedNextOrObserver = undefined;
        if (!!nextOrObserver) {
            if (typeof nextOrObserver === 'function') wrappedNextOrObserver = function(taskSnapshot) {
                return nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, _this, _this._ref));
            };
            else wrappedNextOrObserver = {
                next: !!nextOrObserver.next ? function(taskSnapshot) {
                    return nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, _this, _this._ref));
                } : undefined,
                complete: nextOrObserver.complete || undefined,
                error: nextOrObserver.error || undefined
            };
        }
        return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);
    };
    return UploadTaskCompat1;
}();
var ListResultCompat = function() {
    function ListResultCompat1(_delegate, _service) {
        this._delegate = _delegate;
        this._service = _service;
    }
    Object.defineProperty(ListResultCompat1.prototype, "prefixes", {
        get: function() {
            var _this = this;
            return this._delegate.prefixes.map(function(ref1) {
                return new ReferenceCompat(ref1, _this._service);
            });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListResultCompat1.prototype, "items", {
        get: function() {
            var _this = this;
            return this._delegate.items.map(function(ref1) {
                return new ReferenceCompat(ref1, _this._service);
            });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListResultCompat1.prototype, "nextPageToken", {
        get: function() {
            return this._delegate.nextPageToken || null;
        },
        enumerable: false,
        configurable: true
    });
    return ListResultCompat1;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var ReferenceCompat = function() {
    function ReferenceCompat1(_delegate, storage) {
        this._delegate = _delegate;
        this.storage = storage;
    }
    Object.defineProperty(ReferenceCompat1.prototype, "name", {
        get: function() {
            return this._delegate.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ReferenceCompat1.prototype, "bucket", {
        get: function() {
            return this._delegate.bucket;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ReferenceCompat1.prototype, "fullPath", {
        get: function() {
            return this._delegate.fullPath;
        },
        enumerable: false,
        configurable: true
    });
    ReferenceCompat1.prototype.toString = function() {
        return this._delegate.toString();
    };
    /**
     * @returns A reference to the object obtained by
     * appending childPath, removing any duplicate, beginning, or trailing
     * slashes.
     */ ReferenceCompat1.prototype.child = function(childPath) {
        var reference = _getChild(this._delegate, childPath);
        return new ReferenceCompat1(reference, this.storage);
    };
    Object.defineProperty(ReferenceCompat1.prototype, "root", {
        get: function() {
            return new ReferenceCompat1(this._delegate.root, this.storage);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ReferenceCompat1.prototype, "parent", {
        /**
         * @returns A reference to the parent of the
         * current object, or null if the current object is the root.
         */ get: function() {
            var reference = this._delegate.parent;
            if (reference == null) return null;
            return new ReferenceCompat1(reference, this.storage);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Uploads a blob to this object's location.
     * @param data - The blob to upload.
     * @returns An UploadTask that lets you control and
     * observe the upload.
     */ ReferenceCompat1.prototype.put = function(data, metadata) {
        this._throwIfRoot('put');
        return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);
    };
    /**
     * Uploads a string to this object's location.
     * @param value - The string to upload.
     * @param format - The format of the string to upload.
     * @returns An UploadTask that lets you control and
     * observe the upload.
     */ ReferenceCompat1.prototype.putString = function(value, format, metadata) {
        if (format === void 0) format = StringFormat.RAW;
        this._throwIfRoot('putString');
        var data = dataFromString(format, value);
        var metadataClone = _tslib.__assign({
        }, metadata);
        if (metadataClone['contentType'] == null && data.contentType != null) metadataClone['contentType'] = data.contentType;
        return new UploadTaskCompat(new UploadTask(this._delegate, new FbsBlob(data.data, true), metadataClone), this);
    };
    /**
     * List all items (files) and prefixes (folders) under this storage reference.
     *
     * This is a helper method for calling list() repeatedly until there are
     * no more results. The default pagination size is 1000.
     *
     * Note: The results may not be consistent if objects are changed while this
     * operation is running.
     *
     * Warning: listAll may potentially consume too many resources if there are
     * too many results.
     *
     * @returns A Promise that resolves with all the items and prefixes under
     *  the current storage reference. `prefixes` contains references to
     *  sub-directories and `items` contains references to objects in this
     *  folder. `nextPageToken` is never returned.
     */ ReferenceCompat1.prototype.listAll = function() {
        var _this = this;
        return listAll(this._delegate).then(function(r) {
            return new ListResultCompat(r, _this.storage);
        });
    };
    /**
     * List items (files) and prefixes (folders) under this storage reference.
     *
     * List API is only available for Firebase Rules Version 2.
     *
     * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'
     * delimited folder structure. Refer to GCS's List API if you want to learn more.
     *
     * To adhere to Firebase Rules's Semantics, Firebase Storage does not
     * support objects whose paths end with "/" or contain two consecutive
     * "/"s. Firebase Storage List API will filter these unsupported objects.
     * list() may fail if there are too many unsupported objects in the bucket.
     *
     * @param options - See ListOptions for details.
     * @returns A Promise that resolves with the items and prefixes.
     * `prefixes` contains references to sub-folders and `items`
     * contains references to objects in this folder. `nextPageToken`
     * can be used to get the rest of the results.
     */ ReferenceCompat1.prototype.list = function(options) {
        var _this = this;
        return list(this._delegate, options || undefined).then(function(r) {
            return new ListResultCompat(r, _this.storage);
        });
    };
    /**
     * A promise that resolves with the metadata for this object. If this
     * object doesn't exist or metadata cannot be retreived, the promise is
     * rejected.
     */ ReferenceCompat1.prototype.getMetadata = function() {
        return getMetadata(this._delegate);
    };
    /**
     * Updates the metadata for this object.
     * @param metadata - The new metadata for the object.
     * Only values that have been explicitly set will be changed. Explicitly
     * setting a value to null will remove the metadata.
     * @returns A promise that resolves
     * with the new metadata for this object.
     * @see firebaseStorage.Reference.prototype.getMetadata
     */ ReferenceCompat1.prototype.updateMetadata = function(metadata) {
        return updateMetadata(this._delegate, metadata);
    };
    /**
     * @returns A promise that resolves with the download
     * URL for this object.
     */ ReferenceCompat1.prototype.getDownloadURL = function() {
        return getDownloadURL(this._delegate);
    };
    /**
     * Deletes the object at this location.
     * @returns A promise that resolves if the deletion succeeds.
     */ ReferenceCompat1.prototype.delete = function() {
        this._throwIfRoot('delete');
        return deleteObject(this._delegate);
    };
    ReferenceCompat1.prototype._throwIfRoot = function(name) {
        if (this._delegate._location.path === '') throw invalidRootOperation(name);
    };
    return ReferenceCompat1;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A service that provides firebaseStorage.Reference instances.
 * @param opt_url gs:// url to a custom Storage Bucket
 */ var StorageServiceCompat = function() {
    function StorageServiceCompat1(app, _delegate) {
        this.app = app;
        this._delegate = _delegate;
    }
    Object.defineProperty(StorageServiceCompat1.prototype, "maxOperationRetryTime", {
        get: function() {
            return this._delegate.maxOperationRetryTime;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StorageServiceCompat1.prototype, "maxUploadRetryTime", {
        get: function() {
            return this._delegate.maxUploadRetryTime;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns a firebaseStorage.Reference for the given path in the default
     * bucket.
     */ StorageServiceCompat1.prototype.ref = function(path) {
        if (isUrl(path)) throw invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');
        return new ReferenceCompat(ref(this._delegate, path), this);
    };
    /**
     * Returns a firebaseStorage.Reference object for the given absolute URL,
     * which must be a gs:// or http[s]:// URL.
     */ StorageServiceCompat1.prototype.refFromURL = function(url) {
        if (!isUrl(url)) throw invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');
        try {
            Location1.makeFromUrl(url, this._delegate.host);
        } catch (e) {
            throw invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');
        }
        return new ReferenceCompat(ref(this._delegate, url), this);
    };
    StorageServiceCompat1.prototype.setMaxUploadRetryTime = function(time) {
        this._delegate.maxUploadRetryTime = time;
    };
    StorageServiceCompat1.prototype.setMaxOperationRetryTime = function(time) {
        this._delegate.maxOperationRetryTime = time;
    };
    StorageServiceCompat1.prototype.useEmulator = function(host, port, options) {
        if (options === void 0) options = {
        };
        connectStorageEmulator(this._delegate, host, port, options);
    };
    return StorageServiceCompat1;
}();
var name = "@firebase/storage";
var version = "0.7.0";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Type constant for Firebase Storage.
 */ var STORAGE_TYPE = 'storage';
function factory(container, _a) {
    var url = _a.instanceIdentifier;
    // Dependencies
    // TODO: This should eventually be 'app-compat'
    var app = container.getProvider('app').getImmediate();
    var authProvider = container.getProvider('auth-internal');
    var appCheckProvider = container.getProvider('app-check-internal');
    // TODO: get StorageService instance from component framework instead
    // of creating a new one.
    var storageServiceCompat = new StorageServiceCompat(app, new FirebaseStorageImpl(app, authProvider, appCheckProvider, new ConnectionPool(), url, _appDefault.default.SDK_VERSION));
    return storageServiceCompat;
}
function registerStorage(instance) {
    var namespaceExports = {
        // no-inline
        TaskState: TaskState,
        TaskEvent: TaskEvent,
        StringFormat: StringFormat,
        Storage: FirebaseStorageImpl,
        Reference: ReferenceCompat
    };
    instance.INTERNAL.registerComponent(new _component.Component(STORAGE_TYPE, factory, "PUBLIC"/* PUBLIC */ ).setServiceProps(namespaceExports).setMultipleInstances(true));
    instance.registerVersion(name, version);
}
registerStorage(_appDefault.default);

},{"@firebase/app":"6IUA5","tslib":"4rd38","@firebase/util":"3bR6t","@firebase/component":"5qT0x","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"6u4rS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "registerPerformance", ()=>registerPerformance
);
var _app = require("@firebase/app");
var _appDefault = parcelHelpers.interopDefault(_app);
var _installations = require("@firebase/installations");
var _tslib = require("tslib");
var _util = require("@firebase/util");
var _logger = require("@firebase/logger");
var _component = require("@firebase/component");
var name = "@firebase/performance";
var version = "0.4.18";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var SDK_VERSION = version;
/** The prefix for start User Timing marks used for creating Traces. */ var TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';
/** The prefix for stop User Timing marks used for creating Traces. */ var TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';
/** The prefix for User Timing measure used for creating Traces. */ var TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';
/** The prefix for out of the box page load Trace name. */ var OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';
var FIRST_PAINT_COUNTER_NAME = '_fp';
var FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';
var FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';
var CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';
var CONFIG_EXPIRY_LOCAL_STORAGE_KEY = '@firebase/performance/configexpire';
var SERVICE = 'performance';
var SERVICE_NAME = 'Performance';
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _a;
var ERROR_DESCRIPTION_MAP = (_a = {
}, _a["trace started"] = 'Trace {$traceName} was started before.', _a["trace stopped"] = 'Trace {$traceName} is not running.', _a["nonpositive trace startTime"] = 'Trace {$traceName} startTime should be positive.', _a["nonpositive trace duration"] = 'Trace {$traceName} duration should be positive.', _a["no window"] = 'Window is not available.', _a["no app id"] = 'App id is not available.', _a["no project id"] = 'Project id is not available.', _a["no api key"] = 'Api key is not available.', _a["invalid cc log"] = 'Attempted to queue invalid cc event', _a["FB not default"] = 'Performance can only start when Firebase app instance is the default one.', _a["RC response not ok"] = 'RC response is not ok', _a["invalid attribute name"] = 'Attribute name {$attributeName} is invalid.', _a["invalid attribute value"] = 'Attribute value {$attributeValue} is invalid.', _a["invalid custom metric name"] = 'Custom metric name {$customMetricName} is invalid', _a["invalid String merger input"] = 'Input for String merger is invalid, contact support team to resolve.', _a);
var ERROR_FACTORY = new _util.ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var consoleLogger = new _logger.Logger(SERVICE_NAME);
consoleLogger.logLevel = _logger.LogLevel.INFO;
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var apiInstance;
var windowInstance;
/**
 * This class holds a reference to various browser related objects injected by
 * set methods.
 */ var Api = function() {
    function Api1(window) {
        this.window = window;
        if (!window) throw ERROR_FACTORY.create("no window"/* NO_WINDOW */ );
        this.performance = window.performance;
        this.PerformanceObserver = window.PerformanceObserver;
        this.windowLocation = window.location;
        this.navigator = window.navigator;
        this.document = window.document;
        if (this.navigator && this.navigator.cookieEnabled) // If user blocks cookies on the browser, accessing localStorage will
        // throw an exception.
        this.localStorage = window.localStorage;
        if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;
    }
    Api1.prototype.getUrl = function() {
        // Do not capture the string query part of url.
        return this.windowLocation.href.split('?')[0];
    };
    Api1.prototype.mark = function(name1) {
        if (!this.performance || !this.performance.mark) return;
        this.performance.mark(name1);
    };
    Api1.prototype.measure = function(measureName, mark1, mark2) {
        if (!this.performance || !this.performance.measure) return;
        this.performance.measure(measureName, mark1, mark2);
    };
    Api1.prototype.getEntriesByType = function(type) {
        if (!this.performance || !this.performance.getEntriesByType) return [];
        return this.performance.getEntriesByType(type);
    };
    Api1.prototype.getEntriesByName = function(name1) {
        if (!this.performance || !this.performance.getEntriesByName) return [];
        return this.performance.getEntriesByName(name1);
    };
    Api1.prototype.getTimeOrigin = function() {
        // Polyfill the time origin with performance.timing.navigationStart.
        return this.performance && (this.performance.timeOrigin || this.performance.timing.navigationStart);
    };
    Api1.prototype.requiredApisAvailable = function() {
        if (!fetch || !Promise || !this.navigator || !this.navigator.cookieEnabled) {
            consoleLogger.info('Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.');
            return false;
        }
        if (!_util.isIndexedDBAvailable()) {
            consoleLogger.info('IndexedDB is not supported by current browswer');
            return false;
        }
        return true;
    };
    Api1.prototype.setupObserver = function(entryType, callback) {
        if (!this.PerformanceObserver) return;
        var observer = new this.PerformanceObserver(function(list) {
            for(var _i = 0, _a1 = list.getEntries(); _i < _a1.length; _i++){
                var entry = _a1[_i];
                // `entry` is a PerformanceEntry instance.
                callback(entry);
            }
        });
        // Start observing the entry types you care about.
        observer.observe({
            entryTypes: [
                entryType
            ]
        });
    };
    Api1.getInstance = function() {
        if (apiInstance === undefined) apiInstance = new Api1(windowInstance);
        return apiInstance;
    };
    return Api1;
}();
function setupApi(window) {
    windowInstance = window;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function mergeStrings(part1, part2) {
    var sizeDiff = part1.length - part2.length;
    if (sizeDiff < 0 || sizeDiff > 1) throw ERROR_FACTORY.create("invalid String merger input"/* INVALID_STRING_MERGER_PARAMETER */ );
    var resultArray = [];
    for(var i = 0; i < part1.length; i++){
        resultArray.push(part1.charAt(i));
        if (part2.length > i) resultArray.push(part2.charAt(i));
    }
    return resultArray.join('');
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var settingsServiceInstance;
var SettingsService = function() {
    function SettingsService1() {
        // The variable which controls logging of automatic traces and HTTP/S network monitoring.
        this.instrumentationEnabled = true;
        // The variable which controls logging of custom traces.
        this.dataCollectionEnabled = true;
        // Configuration flags set through remote config.
        this.loggingEnabled = false;
        // Sampling rate between 0 and 1.
        this.tracesSamplingRate = 1;
        this.networkRequestsSamplingRate = 1;
        // Address of logging service.
        this.logEndPointUrl = 'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';
        // Performance event transport endpoint URL which should be compatible with proto3.
        // New Address for transport service, not configurable via Remote Config.
        this.flTransportEndpointUrl = mergeStrings('hts/frbslgigp.ogepscmv/ieo/eaylg', 'tp:/ieaeogn-agolai.o/1frlglgc/o');
        this.transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV');
        // Source type for performance event logs.
        this.logSource = 462;
        // Flags which control per session logging of traces and network requests.
        this.logTraceAfterSampling = false;
        this.logNetworkAfterSampling = false;
        // TTL of config retrieved from remote config in hours.
        this.configTimeToLive = 12;
    }
    SettingsService1.prototype.getAppId = function() {
        var appId = this.firebaseAppInstance && this.firebaseAppInstance.options && this.firebaseAppInstance.options.appId;
        if (!appId) throw ERROR_FACTORY.create("no app id"/* NO_APP_ID */ );
        return appId;
    };
    SettingsService1.prototype.getProjectId = function() {
        var projectId = this.firebaseAppInstance && this.firebaseAppInstance.options && this.firebaseAppInstance.options.projectId;
        if (!projectId) throw ERROR_FACTORY.create("no project id"/* NO_PROJECT_ID */ );
        return projectId;
    };
    SettingsService1.prototype.getApiKey = function() {
        var apiKey = this.firebaseAppInstance && this.firebaseAppInstance.options && this.firebaseAppInstance.options.apiKey;
        if (!apiKey) throw ERROR_FACTORY.create("no api key"/* NO_API_KEY */ );
        return apiKey;
    };
    SettingsService1.prototype.getFlTransportFullUrl = function() {
        return this.flTransportEndpointUrl.concat('?key=', this.transportKey);
    };
    SettingsService1.getInstance = function() {
        if (settingsServiceInstance === undefined) settingsServiceInstance = new SettingsService1();
        return settingsServiceInstance;
    };
    return SettingsService1;
}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var iid;
function getIidPromise() {
    var iidPromise = SettingsService.getInstance().installationsService.getId();
    // eslint-disable-next-line @typescript-eslint/no-floating-promises
    iidPromise.then(function(iidVal) {
        iid = iidVal;
    });
    return iidPromise;
}
// This method should be used after the iid is retrieved by getIidPromise method.
function getIid() {
    return iid;
}
function getAuthTokenPromise() {
    var authTokenPromise = SettingsService.getInstance().installationsService.getToken();
    // eslint-disable-next-line @typescript-eslint/no-floating-promises
    authTokenPromise.then(function(authTokenVal) {
    });
    return authTokenPromise;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var VisibilityState;
(function(VisibilityState1) {
    VisibilityState1[VisibilityState1["UNKNOWN"] = 0] = "UNKNOWN";
    VisibilityState1[VisibilityState1["VISIBLE"] = 1] = "VISIBLE";
    VisibilityState1[VisibilityState1["HIDDEN"] = 2] = "HIDDEN";
})(VisibilityState || (VisibilityState = {
}));
var RESERVED_ATTRIBUTE_PREFIXES = [
    'firebase_',
    'google_',
    'ga_'
];
var ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\w*$');
var MAX_ATTRIBUTE_NAME_LENGTH = 40;
var MAX_ATTRIBUTE_VALUE_LENGTH = 100;
function getServiceWorkerStatus() {
    var navigator = Api.getInstance().navigator;
    if ('serviceWorker' in navigator) {
        if (navigator.serviceWorker.controller) return 2;
        else return 3;
    } else return 1;
}
function getVisibilityState() {
    var document = Api.getInstance().document;
    var visibilityState = document.visibilityState;
    switch(visibilityState){
        case 'visible':
            return VisibilityState.VISIBLE;
        case 'hidden':
            return VisibilityState.HIDDEN;
        default:
            return VisibilityState.UNKNOWN;
    }
}
function getEffectiveConnectionType() {
    var navigator = Api.getInstance().navigator;
    var navigatorConnection = navigator.connection;
    var effectiveType = navigatorConnection && navigatorConnection.effectiveType;
    switch(effectiveType){
        case 'slow-2g':
            return 1;
        case '2g':
            return 2;
        case '3g':
            return 3;
        case '4g':
            return 4;
        default:
            return 0;
    }
}
function isValidCustomAttributeName(name1) {
    if (name1.length === 0 || name1.length > MAX_ATTRIBUTE_NAME_LENGTH) return false;
    var matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(function(prefix) {
        return name1.startsWith(prefix);
    });
    return !matchesReservedPrefix && !!name1.match(ATTRIBUTE_FORMAT_REGEX);
}
function isValidCustomAttributeValue(value) {
    return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var REMOTE_CONFIG_SDK_VERSION = '0.0.1';
// These values will be used if the remote config object is successfully
// retrieved, but the template does not have these fields.
var DEFAULT_CONFIGS = {
    loggingEnabled: true
};
var FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';
function getConfig(iid1) {
    var config = getStoredConfig();
    if (config) {
        processConfig(config);
        return Promise.resolve();
    }
    return getRemoteConfig(iid1).then(processConfig).then(function(config1) {
        return storeConfig(config1);
    }, /** Do nothing for error, use defaults set in settings service. */ function() {
    });
}
function getStoredConfig() {
    var localStorage = Api.getInstance().localStorage;
    if (!localStorage) return;
    var expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);
    if (!expiryString || !configValid(expiryString)) return;
    var configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);
    if (!configStringified) return;
    try {
        var configResponse = JSON.parse(configStringified);
        return configResponse;
    } catch (_a1) {
        return;
    }
}
function storeConfig(config) {
    var localStorage = Api.getInstance().localStorage;
    if (!config || !localStorage) return;
    localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));
    localStorage.setItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY, String(Date.now() + SettingsService.getInstance().configTimeToLive * 3600000));
}
var COULD_NOT_GET_CONFIG_MSG = 'Could not fetch config, will use default configs';
function getRemoteConfig(iid1) {
    // Perf needs auth token only to retrieve remote config.
    return getAuthTokenPromise().then(function(authToken) {
        var projectId = SettingsService.getInstance().getProjectId();
        var configEndPoint = "https://firebaseremoteconfig.googleapis.com/v1/projects/" + projectId + "/namespaces/fireperf:fetch?key=" + SettingsService.getInstance().getApiKey();
        var request = new Request(configEndPoint, {
            method: 'POST',
            headers: {
                Authorization: FIS_AUTH_PREFIX + " " + authToken
            },
            /* eslint-disable camelcase */ body: JSON.stringify({
                app_instance_id: iid1,
                app_instance_id_token: authToken,
                app_id: SettingsService.getInstance().getAppId(),
                app_version: SDK_VERSION,
                sdk_version: REMOTE_CONFIG_SDK_VERSION
            })
        });
        return fetch(request).then(function(response) {
            if (response.ok) return response.json();
            // In case response is not ok. This will be caught by catch.
            throw ERROR_FACTORY.create("RC response not ok"/* RC_NOT_OK */ );
        });
    }).catch(function() {
        consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);
        return undefined;
    });
}
/**
 * Processes config coming either from calling RC or from local storage.
 * This method only runs if call is successful or config in storage
 * is valid.
 */ function processConfig(config) {
    if (!config) return config;
    var settingsServiceInstance1 = SettingsService.getInstance();
    var entries = config.entries || {
    };
    if (entries.fpr_enabled !== undefined) // TODO: Change the assignment of loggingEnabled once the received type is
    // known.
    settingsServiceInstance1.loggingEnabled = String(entries.fpr_enabled) === 'true';
    else // Config retrieved successfully, but there is no fpr_enabled in template.
    // Use secondary configs value.
    settingsServiceInstance1.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;
    if (entries.fpr_log_source) settingsServiceInstance1.logSource = Number(entries.fpr_log_source);
    if (entries.fpr_log_endpoint_url) settingsServiceInstance1.logEndPointUrl = entries.fpr_log_endpoint_url;
    // Key from Remote Config has to be non-empty string, otherwsie use local value.
    if (entries.fpr_log_transport_key) settingsServiceInstance1.transportKey = entries.fpr_log_transport_key;
    if (entries.fpr_vc_network_request_sampling_rate !== undefined) settingsServiceInstance1.networkRequestsSamplingRate = Number(entries.fpr_vc_network_request_sampling_rate);
    if (entries.fpr_vc_trace_sampling_rate !== undefined) settingsServiceInstance1.tracesSamplingRate = Number(entries.fpr_vc_trace_sampling_rate);
    // Set the per session trace and network logging flags.
    settingsServiceInstance1.logTraceAfterSampling = shouldLogAfterSampling(settingsServiceInstance1.tracesSamplingRate);
    settingsServiceInstance1.logNetworkAfterSampling = shouldLogAfterSampling(settingsServiceInstance1.networkRequestsSamplingRate);
    return config;
}
function configValid(expiry) {
    return Number(expiry) > Date.now();
}
function shouldLogAfterSampling(samplingRate) {
    return Math.random() <= samplingRate;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var initializationStatus = 1/* notInitialized */ ;
var initializationPromise;
function getInitializationPromise() {
    initializationStatus = 2;
    initializationPromise = initializationPromise || initializePerf();
    return initializationPromise;
}
function isPerfInitialized() {
    return initializationStatus === 3;
}
function initializePerf() {
    return getDocumentReadyComplete().then(function() {
        return getIidPromise();
    }).then(function(iid1) {
        return getConfig(iid1);
    }).then(function() {
        return changeInitializationStatus();
    }, function() {
        return changeInitializationStatus();
    });
}
/**
 * Returns a promise which resolves whenever the document readystate is complete or
 * immediately if it is called after page load complete.
 */ function getDocumentReadyComplete() {
    var document = Api.getInstance().document;
    return new Promise(function(resolve) {
        if (document && document.readyState !== 'complete') {
            var handler_1 = function() {
                if (document.readyState === 'complete') {
                    document.removeEventListener('readystatechange', handler_1);
                    resolve();
                }
            };
            document.addEventListener('readystatechange', handler_1);
        } else resolve();
    });
}
function changeInitializationStatus() {
    initializationStatus = 3;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var DEFAULT_SEND_INTERVAL_MS = 10000;
var INITIAL_SEND_TIME_DELAY_MS = 5500;
// If end point does not work, the call will be tried for these many times.
var DEFAULT_REMAINING_TRIES = 3;
var MAX_EVENT_COUNT_PER_REQUEST = 1000;
var remainingTries = DEFAULT_REMAINING_TRIES;
/* eslint-enable camelcase */ var queue = [];
var isTransportSetup = false;
function setupTransportService() {
    if (!isTransportSetup) {
        processQueue(INITIAL_SEND_TIME_DELAY_MS);
        isTransportSetup = true;
    }
}
function processQueue(timeOffset) {
    setTimeout(function() {
        // If there is no remainingTries left, stop retrying.
        if (remainingTries === 0) return;
        // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.
        if (!queue.length) return processQueue(DEFAULT_SEND_INTERVAL_MS);
        dispatchQueueEvents();
    }, timeOffset);
}
function dispatchQueueEvents() {
    // Extract events up to the maximum cap of single logRequest from top of "official queue".
    // The staged events will be used for current logRequest attempt, remaining events will be kept
    // for next attempt.
    var staged = queue.splice(0, MAX_EVENT_COUNT_PER_REQUEST);
    /* eslint-disable camelcase */ // We will pass the JSON serialized event to the backend.
    var log_event = staged.map(function(evt) {
        return {
            source_extension_json_proto3: evt.message,
            event_time_ms: String(evt.eventTime)
        };
    });
    var data = {
        request_time_ms: String(Date.now()),
        client_info: {
            client_type: 1,
            js_client_info: {
            }
        },
        log_source: SettingsService.getInstance().logSource,
        log_event: log_event
    };
    /* eslint-enable camelcase */ sendEventsToFl(data, staged).catch(function() {
        // If the request fails for some reason, add the events that were attempted
        // back to the primary queue to retry later.
        queue = _tslib.__spreadArray(_tslib.__spreadArray([], staged), queue);
        remainingTries--;
        consoleLogger.info("Tries left: " + remainingTries + ".");
        processQueue(DEFAULT_SEND_INTERVAL_MS);
    });
}
function sendEventsToFl(data, staged) {
    return postToFlEndpoint(data).then(function(res) {
        if (!res.ok) consoleLogger.info('Call to Firebase backend failed.');
        return res.json();
    }).then(function(res) {
        // Find the next call wait time from the response.
        var transportWait = Number(res.nextRequestWaitMillis);
        var requestOffset = DEFAULT_SEND_INTERVAL_MS;
        if (!isNaN(transportWait)) requestOffset = Math.max(transportWait, requestOffset);
        // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.
        // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.
        var logResponseDetails = res.logResponseDetails;
        if (Array.isArray(logResponseDetails) && logResponseDetails.length > 0 && logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER') {
            queue = _tslib.__spreadArray(_tslib.__spreadArray([], staged), queue);
            consoleLogger.info("Retry transport request later.");
        }
        remainingTries = DEFAULT_REMAINING_TRIES;
        // Schedule the next process.
        processQueue(requestOffset);
    });
}
function postToFlEndpoint(data) {
    var flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();
    return fetch(flTransportFullUrl, {
        method: 'POST',
        body: JSON.stringify(data)
    });
}
function addToQueue(evt) {
    if (!evt.eventTime || !evt.message) throw ERROR_FACTORY.create("invalid cc log"/* INVALID_CC_LOG */ );
    // Add the new event to the queue.
    queue = _tslib.__spreadArray(_tslib.__spreadArray([], queue), [
        evt
    ]);
}
/** Log handler for cc service to send the performance logs to the server. */ function transportHandler(// eslint-disable-next-line @typescript-eslint/no-explicit-any
serializer) {
    return function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        var message = serializer.apply(void 0, args);
        addToQueue({
            message: message,
            eventTime: Date.now()
        });
    };
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /* eslint-enble camelcase */ var logger;
// This method is not called before initialization.
function sendLog(resource, resourceType) {
    if (!logger) logger = transportHandler(serializer);
    logger(resource, resourceType);
}
function logTrace(trace) {
    var settingsService = SettingsService.getInstance();
    // Do not log if trace is auto generated and instrumentation is disabled.
    if (!settingsService.instrumentationEnabled && trace.isAuto) return;
    // Do not log if trace is custom and data collection is disabled.
    if (!settingsService.dataCollectionEnabled && !trace.isAuto) return;
    // Do not log if required apis are not available.
    if (!Api.getInstance().requiredApisAvailable()) return;
    // Only log the page load auto traces if page is visible.
    if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) return;
    if (isPerfInitialized()) sendTraceLog(trace);
    else // Custom traces can be used before the initialization but logging
    // should wait until after.
    getInitializationPromise().then(function() {
        return sendTraceLog(trace);
    }, function() {
        return sendTraceLog(trace);
    });
}
function sendTraceLog(trace) {
    if (!getIid()) return;
    var settingsService = SettingsService.getInstance();
    if (!settingsService.loggingEnabled || !settingsService.logTraceAfterSampling) return;
    setTimeout(function() {
        return sendLog(trace, 1/* Trace */ );
    }, 0);
}
function logNetworkRequest(networkRequest) {
    var settingsService = SettingsService.getInstance();
    // Do not log network requests if instrumentation is disabled.
    if (!settingsService.instrumentationEnabled) return;
    // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.
    // Need to blacklist both old and new endpoints to avoid migration gap.
    var networkRequestUrl = networkRequest.url;
    // Blacklist old log endpoint and new transport endpoint.
    // Because Performance SDK doesn't instrument requests sent from SDK itself.
    var logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];
    var flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];
    if (networkRequestUrl === logEndpointUrl || networkRequestUrl === flEndpointUrl) return;
    if (!settingsService.loggingEnabled || !settingsService.logNetworkAfterSampling) return;
    setTimeout(function() {
        return sendLog(networkRequest, 0/* NetworkRequest */ );
    }, 0);
}
function serializer(resource, resourceType) {
    if (resourceType === 0) return serializeNetworkRequest(resource);
    return serializeTrace(resource);
}
function serializeNetworkRequest(networkRequest) {
    var networkRequestMetric = {
        url: networkRequest.url,
        http_method: networkRequest.httpMethod || 0,
        http_response_code: 200,
        response_payload_bytes: networkRequest.responsePayloadBytes,
        client_start_time_us: networkRequest.startTimeUs,
        time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,
        time_to_response_completed_us: networkRequest.timeToResponseCompletedUs
    };
    var perfMetric = {
        application_info: getApplicationInfo(),
        network_request_metric: networkRequestMetric
    };
    return JSON.stringify(perfMetric);
}
function serializeTrace(trace) {
    var traceMetric = {
        name: trace.name,
        is_auto: trace.isAuto,
        client_start_time_us: trace.startTimeUs,
        duration_us: trace.durationUs
    };
    if (Object.keys(trace.counters).length !== 0) traceMetric.counters = trace.counters;
    var customAttributes = trace.getAttributes();
    if (Object.keys(customAttributes).length !== 0) traceMetric.custom_attributes = customAttributes;
    var perfMetric = {
        application_info: getApplicationInfo(),
        trace_metric: traceMetric
    };
    return JSON.stringify(perfMetric);
}
function getApplicationInfo() {
    return {
        google_app_id: SettingsService.getInstance().getAppId(),
        app_instance_id: getIid(),
        web_app_info: {
            sdk_version: SDK_VERSION,
            page_url: Api.getInstance().getUrl(),
            service_worker_status: getServiceWorkerStatus(),
            visibility_state: getVisibilityState(),
            effective_connection_type: getEffectiveConnectionType()
        },
        application_process_state: 0
    };
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var MAX_METRIC_NAME_LENGTH = 100;
var RESERVED_AUTO_PREFIX = '_';
var oobMetrics = [
    FIRST_PAINT_COUNTER_NAME,
    FIRST_CONTENTFUL_PAINT_COUNTER_NAME,
    FIRST_INPUT_DELAY_COUNTER_NAME
];
/**
 * Returns true if the metric is custom and does not start with reserved prefix, or if
 * the metric is one of out of the box page load trace metrics.
 */ function isValidMetricName(name1, traceName) {
    if (name1.length === 0 || name1.length > MAX_METRIC_NAME_LENGTH) return false;
    return traceName && traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) && oobMetrics.indexOf(name1) > -1 || !name1.startsWith(RESERVED_AUTO_PREFIX);
}
/**
 * Converts the provided value to an integer value to be used in case of a metric.
 * @param providedValue Provided number value of the metric that needs to be converted to an integer.
 *
 * @returns Converted integer number to be set for the metric.
 */ function convertMetricValueToInteger(providedValue) {
    var valueAsInteger = Math.floor(providedValue);
    if (valueAsInteger < providedValue) consoleLogger.info("Metric value should be an Integer, setting the value as : " + valueAsInteger + ".");
    return valueAsInteger;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var Trace = function() {
    /**
     * @param name The name of the trace.
     * @param isAuto If the trace is auto-instrumented.
     * @param traceMeasureName The name of the measure marker in user timing specification. This field
     * is only set when the trace is built for logging when the user directly uses the user timing
     * api (performance.mark and performance.measure).
     */ function Trace1(name1, isAuto, traceMeasureName) {
        if (isAuto === void 0) isAuto = false;
        this.name = name1;
        this.isAuto = isAuto;
        this.state = 1;
        this.customAttributes = {
        };
        this.counters = {
        };
        this.api = Api.getInstance();
        this.randomId = Math.floor(Math.random() * 1000000);
        if (!this.isAuto) {
            this.traceStartMark = TRACE_START_MARK_PREFIX + "-" + this.randomId + "-" + this.name;
            this.traceStopMark = TRACE_STOP_MARK_PREFIX + "-" + this.randomId + "-" + this.name;
            this.traceMeasure = traceMeasureName || TRACE_MEASURE_PREFIX + "-" + this.randomId + "-" + this.name;
            if (traceMeasureName) // For the case of direct user timing traces, no start stop will happen. The measure object
            // is already available.
            this.calculateTraceMetrics();
        }
    }
    /**
     * Starts a trace. The measurement of the duration starts at this point.
     */ Trace1.prototype.start = function() {
        if (this.state !== 1) throw ERROR_FACTORY.create("trace started"/* TRACE_STARTED_BEFORE */ , {
            traceName: this.name
        });
        this.api.mark(this.traceStartMark);
        this.state = 2;
    };
    /**
     * Stops the trace. The measurement of the duration of the trace stops at this point and trace
     * is logged.
     */ Trace1.prototype.stop = function() {
        if (this.state !== 2) throw ERROR_FACTORY.create("trace stopped"/* TRACE_STOPPED_BEFORE */ , {
            traceName: this.name
        });
        this.state = 3;
        this.api.mark(this.traceStopMark);
        this.api.measure(this.traceMeasure, this.traceStartMark, this.traceStopMark);
        this.calculateTraceMetrics();
        logTrace(this);
    };
    /**
     * Records a trace with predetermined values. If this method is used a trace is created and logged
     * directly. No need to use start and stop methods.
     * @param startTime Trace start time since epoch in millisec
     * @param duration The duraction of the trace in millisec
     * @param options An object which can optionally hold maps of custom metrics and custom attributes
     */ Trace1.prototype.record = function(startTime, duration, options) {
        if (startTime <= 0) throw ERROR_FACTORY.create("nonpositive trace startTime"/* NONPOSITIVE_TRACE_START_TIME */ , {
            traceName: this.name
        });
        if (duration <= 0) throw ERROR_FACTORY.create("nonpositive trace duration"/* NONPOSITIVE_TRACE_DURATION */ , {
            traceName: this.name
        });
        this.durationUs = Math.floor(duration * 1000);
        this.startTimeUs = Math.floor(startTime * 1000);
        if (options && options.attributes) this.customAttributes = _tslib.__assign({
        }, options.attributes);
        if (options && options.metrics) for(var _i = 0, _a1 = Object.keys(options.metrics); _i < _a1.length; _i++){
            var metric = _a1[_i];
            if (!isNaN(Number(options.metrics[metric]))) this.counters[metric] = Number(Math.floor(options.metrics[metric]));
        }
        logTrace(this);
    };
    /**
     * Increments a custom metric by a certain number or 1 if number not specified. Will create a new
     * custom metric if one with the given name does not exist. The value will be floored down to an
     * integer.
     * @param counter Name of the custom metric
     * @param numAsInteger Increment by value
     */ Trace1.prototype.incrementMetric = function(counter, numAsInteger) {
        if (numAsInteger === void 0) numAsInteger = 1;
        if (this.counters[counter] === undefined) this.putMetric(counter, numAsInteger);
        else this.putMetric(counter, this.counters[counter] + numAsInteger);
    };
    /**
     * Sets a custom metric to a specified value. Will create a new custom metric if one with the
     * given name does not exist. The value will be floored down to an integer.
     * @param counter Name of the custom metric
     * @param numAsInteger Set custom metric to this value
     */ Trace1.prototype.putMetric = function(counter, numAsInteger) {
        if (isValidMetricName(counter, this.name)) this.counters[counter] = convertMetricValueToInteger(numAsInteger);
        else throw ERROR_FACTORY.create("invalid custom metric name"/* INVALID_CUSTOM_METRIC_NAME */ , {
            customMetricName: counter
        });
    };
    /**
     * Returns the value of the custom metric by that name. If a custom metric with that name does
     * not exist will return zero.
     * @param counter
     */ Trace1.prototype.getMetric = function(counter) {
        return this.counters[counter] || 0;
    };
    /**
     * Sets a custom attribute of a trace to a certain value.
     * @param attr
     * @param value
     */ Trace1.prototype.putAttribute = function(attr, value) {
        var isValidName = isValidCustomAttributeName(attr);
        var isValidValue = isValidCustomAttributeValue(value);
        if (isValidName && isValidValue) {
            this.customAttributes[attr] = value;
            return;
        }
        // Throw appropriate error when the attribute name or value is invalid.
        if (!isValidName) throw ERROR_FACTORY.create("invalid attribute name"/* INVALID_ATTRIBUTE_NAME */ , {
            attributeName: attr
        });
        if (!isValidValue) throw ERROR_FACTORY.create("invalid attribute value"/* INVALID_ATTRIBUTE_VALUE */ , {
            attributeValue: value
        });
    };
    /**
     * Retrieves the value a custom attribute of a trace is set to.
     * @param attr
     */ Trace1.prototype.getAttribute = function(attr) {
        return this.customAttributes[attr];
    };
    Trace1.prototype.removeAttribute = function(attr) {
        if (this.customAttributes[attr] === undefined) return;
        delete this.customAttributes[attr];
    };
    Trace1.prototype.getAttributes = function() {
        return _tslib.__assign({
        }, this.customAttributes);
    };
    Trace1.prototype.setStartTime = function(startTime) {
        this.startTimeUs = startTime;
    };
    Trace1.prototype.setDuration = function(duration) {
        this.durationUs = duration;
    };
    /**
     * Calculates and assigns the duration and start time of the trace using the measure performance
     * entry.
     */ Trace1.prototype.calculateTraceMetrics = function() {
        var perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);
        var perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];
        if (perfMeasureEntry) {
            this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);
            this.startTimeUs = Math.floor((perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000);
        }
    };
    /**
     * @param navigationTimings A single element array which contains the navigationTIming object of
     * the page load
     * @param paintTimings A array which contains paintTiming object of the page load
     * @param firstInputDelay First input delay in millisec
     */ Trace1.createOobTrace = function(navigationTimings, paintTimings, firstInputDelay) {
        var route = Api.getInstance().getUrl();
        if (!route) return;
        var trace = new Trace1(OOB_TRACE_PAGE_LOAD_PREFIX + route, true);
        var timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);
        trace.setStartTime(timeOriginUs);
        // navigationTimings includes only one element.
        if (navigationTimings && navigationTimings[0]) {
            trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));
            trace.putMetric('domInteractive', Math.floor(navigationTimings[0].domInteractive * 1000));
            trace.putMetric('domContentLoadedEventEnd', Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000));
            trace.putMetric('loadEventEnd', Math.floor(navigationTimings[0].loadEventEnd * 1000));
        }
        var FIRST_PAINT = 'first-paint';
        var FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';
        if (paintTimings) {
            var firstPaint = paintTimings.find(function(paintObject) {
                return paintObject.name === FIRST_PAINT;
            });
            if (firstPaint && firstPaint.startTime) trace.putMetric(FIRST_PAINT_COUNTER_NAME, Math.floor(firstPaint.startTime * 1000));
            var firstContentfulPaint = paintTimings.find(function(paintObject) {
                return paintObject.name === FIRST_CONTENTFUL_PAINT;
            });
            if (firstContentfulPaint && firstContentfulPaint.startTime) trace.putMetric(FIRST_CONTENTFUL_PAINT_COUNTER_NAME, Math.floor(firstContentfulPaint.startTime * 1000));
            if (firstInputDelay) trace.putMetric(FIRST_INPUT_DELAY_COUNTER_NAME, Math.floor(firstInputDelay * 1000));
        }
        logTrace(trace);
    };
    Trace1.createUserTimingTrace = function(measureName) {
        var trace = new Trace1(measureName, false, measureName);
        logTrace(trace);
    };
    return Trace1;
}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function createNetworkRequestEntry(entry) {
    var performanceEntry = entry;
    if (!performanceEntry || performanceEntry.responseStart === undefined) return;
    var timeOrigin = Api.getInstance().getTimeOrigin();
    var startTimeUs = Math.floor((performanceEntry.startTime + timeOrigin) * 1000);
    var timeToResponseInitiatedUs = performanceEntry.responseStart ? Math.floor((performanceEntry.responseStart - performanceEntry.startTime) * 1000) : undefined;
    var timeToResponseCompletedUs = Math.floor((performanceEntry.responseEnd - performanceEntry.startTime) * 1000);
    // Remove the query params from logged network request url.
    var url = performanceEntry.name && performanceEntry.name.split('?')[0];
    var networkRequest = {
        url: url,
        responsePayloadBytes: performanceEntry.transferSize,
        startTimeUs: startTimeUs,
        timeToResponseInitiatedUs: timeToResponseInitiatedUs,
        timeToResponseCompletedUs: timeToResponseCompletedUs
    };
    logNetworkRequest(networkRequest);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var FID_WAIT_TIME_MS = 5000;
function setupOobResources() {
    // Do not initialize unless iid is available.
    if (!getIid()) return;
    // The load event might not have fired yet, and that means performance navigation timing
    // object has a duration of 0. The setup should run after all current tasks in js queue.
    setTimeout(function() {
        return setupOobTraces();
    }, 0);
    setTimeout(function() {
        return setupNetworkRequests();
    }, 0);
    setTimeout(function() {
        return setupUserTimingTraces();
    }, 0);
}
function setupNetworkRequests() {
    var api = Api.getInstance();
    var resources = api.getEntriesByType('resource');
    for(var _i = 0, resources_1 = resources; _i < resources_1.length; _i++){
        var resource = resources_1[_i];
        createNetworkRequestEntry(resource);
    }
    api.setupObserver('resource', createNetworkRequestEntry);
}
function setupOobTraces() {
    var api = Api.getInstance();
    var navigationTimings = api.getEntriesByType('navigation');
    var paintTimings = api.getEntriesByType('paint');
    // If First Input Desly polyfill is added to the page, report the fid value.
    // https://github.com/GoogleChromeLabs/first-input-delay
    if (api.onFirstInputDelay) {
        // If the fid call back is not called for certain time, continue without it.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var timeoutId_1 = setTimeout(function() {
            Trace.createOobTrace(navigationTimings, paintTimings);
            timeoutId_1 = undefined;
        }, FID_WAIT_TIME_MS);
        api.onFirstInputDelay(function(fid) {
            if (timeoutId_1) {
                clearTimeout(timeoutId_1);
                Trace.createOobTrace(navigationTimings, paintTimings, fid);
            }
        });
    } else Trace.createOobTrace(navigationTimings, paintTimings);
}
function setupUserTimingTraces() {
    var api = Api.getInstance();
    // Run through the measure performance entries collected up to this point.
    var measures = api.getEntriesByType('measure');
    for(var _i = 0, measures_1 = measures; _i < measures_1.length; _i++){
        var measure = measures_1[_i];
        createUserTimingTrace(measure);
    }
    // Setup an observer to capture the measures from this point on.
    api.setupObserver('measure', createUserTimingTrace);
}
function createUserTimingTrace(measure) {
    var measureName = measure.name;
    // Do not create a trace, if the user timing marks and measures are created by the sdk itself.
    if (measureName.substring(0, TRACE_MEASURE_PREFIX.length) === TRACE_MEASURE_PREFIX) return;
    Trace.createUserTimingTrace(measureName);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var PerformanceController = function() {
    function PerformanceController1(app) {
        this.app = app;
        if (Api.getInstance().requiredApisAvailable()) _util.validateIndexedDBOpenable().then(function(isAvailable) {
            if (isAvailable) {
                setupTransportService();
                getInitializationPromise().then(setupOobResources, setupOobResources);
            }
        }).catch(function(error) {
            consoleLogger.info("Environment doesn't support IndexedDB: " + error);
        });
    }
    PerformanceController1.prototype.trace = function(name1) {
        return new Trace(name1);
    };
    Object.defineProperty(PerformanceController1.prototype, "instrumentationEnabled", {
        get: function() {
            return SettingsService.getInstance().instrumentationEnabled;
        },
        set: function(val) {
            SettingsService.getInstance().instrumentationEnabled = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PerformanceController1.prototype, "dataCollectionEnabled", {
        get: function() {
            return SettingsService.getInstance().dataCollectionEnabled;
        },
        set: function(val) {
            SettingsService.getInstance().dataCollectionEnabled = val;
        },
        enumerable: false,
        configurable: true
    });
    return PerformanceController1;
}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var DEFAULT_ENTRY_NAME = '[DEFAULT]';
function registerPerformance(instance) {
    var factoryMethod = function(app, installations) {
        if (app.name !== DEFAULT_ENTRY_NAME) throw ERROR_FACTORY.create("FB not default"/* FB_NOT_DEFAULT */ );
        if (typeof window === 'undefined') throw ERROR_FACTORY.create("no window"/* NO_WINDOW */ );
        setupApi(window);
        SettingsService.getInstance().firebaseAppInstance = app;
        SettingsService.getInstance().installationsService = installations;
        return new PerformanceController(app);
    };
    // Register performance with firebase-app.
    instance.INTERNAL.registerComponent(new _component.Component('performance', function(container) {
        /* Dependencies */ // getImmediate for FirebaseApp will always succeed
        var app = container.getProvider('app').getImmediate();
        // The following call will always succeed because perf has `import '@firebase/installations'`
        var installations = container.getProvider('installations').getImmediate();
        return factoryMethod(app, installations);
    }, "PUBLIC"/* PUBLIC */ ));
    instance.registerVersion(name, version);
}
registerPerformance(_appDefault.default);

},{"@firebase/app":"6IUA5","@firebase/installations":"7rMif","tslib":"4rd38","@firebase/util":"3bR6t","@firebase/logger":"5PuYX","@firebase/component":"5qT0x","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"5L5Kb":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var tslib = require('tslib');
var firebase = require('@firebase/app');
require('@firebase/installations');
var logger$1 = require('@firebase/logger');
var util = require('@firebase/util');
var component = require('@firebase/component');
function _interopDefaultLegacy(e) {
    return e && typeof e === 'object' && 'default' in e ? e : {
        'default': e
    };
}
var firebase__default = /*#__PURE__*/ _interopDefaultLegacy(firebase);
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Key to attach FID to in gtag params.
var GA_FID_KEY = 'firebase_id';
var ORIGIN_KEY = 'origin';
var FETCH_TIMEOUT_MILLIS = 60000;
var DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';
var GTAG_URL = 'https://www.googletagmanager.com/gtag/js';
var GtagCommand;
(function(GtagCommand1) {
    GtagCommand1["EVENT"] = "event";
    GtagCommand1["SET"] = "set";
    GtagCommand1["CONFIG"] = "config";
})(GtagCommand || (GtagCommand = {
}));
/**
 * Officially recommended event names for gtag.js
 * Any other string is also allowed.
 *
 * @public
 */ var EventName;
(function(EventName1) {
    EventName1["ADD_SHIPPING_INFO"] = "add_shipping_info";
    EventName1["ADD_PAYMENT_INFO"] = "add_payment_info";
    EventName1["ADD_TO_CART"] = "add_to_cart";
    EventName1["ADD_TO_WISHLIST"] = "add_to_wishlist";
    EventName1["BEGIN_CHECKOUT"] = "begin_checkout";
    /**
     * @deprecated
     * This event name is deprecated and is unsupported in updated
     * Enhanced Ecommerce reports.
     */ EventName1["CHECKOUT_PROGRESS"] = "checkout_progress";
    EventName1["EXCEPTION"] = "exception";
    EventName1["GENERATE_LEAD"] = "generate_lead";
    EventName1["LOGIN"] = "login";
    EventName1["PAGE_VIEW"] = "page_view";
    EventName1["PURCHASE"] = "purchase";
    EventName1["REFUND"] = "refund";
    EventName1["REMOVE_FROM_CART"] = "remove_from_cart";
    EventName1["SCREEN_VIEW"] = "screen_view";
    EventName1["SEARCH"] = "search";
    EventName1["SELECT_CONTENT"] = "select_content";
    EventName1["SELECT_ITEM"] = "select_item";
    EventName1["SELECT_PROMOTION"] = "select_promotion";
    /** @deprecated */ EventName1["SET_CHECKOUT_OPTION"] = "set_checkout_option";
    EventName1["SHARE"] = "share";
    EventName1["SIGN_UP"] = "sign_up";
    EventName1["TIMING_COMPLETE"] = "timing_complete";
    EventName1["VIEW_CART"] = "view_cart";
    EventName1["VIEW_ITEM"] = "view_item";
    EventName1["VIEW_ITEM_LIST"] = "view_item_list";
    EventName1["VIEW_PROMOTION"] = "view_promotion";
    EventName1["VIEW_SEARCH_RESULTS"] = "view_search_results";
})(EventName || (EventName = {
}));
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Logs an analytics event through the Firebase SDK.
 *
 * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
 * @param eventName Google Analytics event name, choose from standard list or use a custom string.
 * @param eventParams Analytics event parameters.
 */ function logEvent(gtagFunction, initializationPromise, eventName, eventParams, options) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var measurementId, params;
        return tslib.__generator(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (!(options && options.global)) return [
                        3,
                        1
                    ];
                    gtagFunction(GtagCommand.EVENT, eventName, eventParams);
                    return [
                        2
                    ];
                case 1:
                    return [
                        4,
                        initializationPromise
                    ];
                case 2:
                    measurementId = _a.sent();
                    params = tslib.__assign(tslib.__assign({
                    }, eventParams), {
                        'send_to': measurementId
                    });
                    gtagFunction(GtagCommand.EVENT, eventName, params);
                    _a.label = 3;
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
}
/**
 * Set screen_name parameter for this Google Analytics ID.
 *
 * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
 * @param screenName Screen name string to set.
 */ function setCurrentScreen(gtagFunction, initializationPromise, screenName, options) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var measurementId;
        return tslib.__generator(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (!(options && options.global)) return [
                        3,
                        1
                    ];
                    gtagFunction(GtagCommand.SET, {
                        'screen_name': screenName
                    });
                    return [
                        2,
                        Promise.resolve()
                    ];
                case 1:
                    return [
                        4,
                        initializationPromise
                    ];
                case 2:
                    measurementId = _a.sent();
                    gtagFunction(GtagCommand.CONFIG, measurementId, {
                        update: true,
                        'screen_name': screenName
                    });
                    _a.label = 3;
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
}
/**
 * Set user_id parameter for this Google Analytics ID.
 *
 * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
 * @param id User ID string to set
 */ function setUserId(gtagFunction, initializationPromise, id, options) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var measurementId;
        return tslib.__generator(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (!(options && options.global)) return [
                        3,
                        1
                    ];
                    gtagFunction(GtagCommand.SET, {
                        'user_id': id
                    });
                    return [
                        2,
                        Promise.resolve()
                    ];
                case 1:
                    return [
                        4,
                        initializationPromise
                    ];
                case 2:
                    measurementId = _a.sent();
                    gtagFunction(GtagCommand.CONFIG, measurementId, {
                        update: true,
                        'user_id': id
                    });
                    _a.label = 3;
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
}
/**
 * Set all other user properties other than user_id and screen_name.
 *
 * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
 * @param properties Map of user properties to set
 */ function setUserProperties(gtagFunction, initializationPromise, properties, options) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var flatProperties, _i, _a, key, measurementId;
        return tslib.__generator(this, function(_b) {
            switch(_b.label){
                case 0:
                    if (!(options && options.global)) return [
                        3,
                        1
                    ];
                    flatProperties = {
                    };
                    for(_i = 0, _a = Object.keys(properties); _i < _a.length; _i++){
                        key = _a[_i];
                        // use dot notation for merge behavior in gtag.js
                        flatProperties["user_properties." + key] = properties[key];
                    }
                    gtagFunction(GtagCommand.SET, flatProperties);
                    return [
                        2,
                        Promise.resolve()
                    ];
                case 1:
                    return [
                        4,
                        initializationPromise
                    ];
                case 2:
                    measurementId = _b.sent();
                    gtagFunction(GtagCommand.CONFIG, measurementId, {
                        update: true,
                        'user_properties': properties
                    });
                    _b.label = 3;
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
}
/**
 * Set whether collection is enabled for this ID.
 *
 * @param enabled If true, collection is enabled for this ID.
 */ function setAnalyticsCollectionEnabled(initializationPromise, enabled) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var measurementId;
        return tslib.__generator(this, function(_a) {
            switch(_a.label){
                case 0:
                    return [
                        4,
                        initializationPromise
                    ];
                case 1:
                    measurementId = _a.sent();
                    window["ga-disable-" + measurementId] = !enabled;
                    return [
                        2
                    ];
            }
        });
    });
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var logger = new logger$1.Logger('@firebase/analytics');
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Inserts gtag script tag into the page to asynchronously download gtag.
 * @param dataLayerName Name of datalayer (most often the default, "_dataLayer").
 */ function insertScriptTag(dataLayerName, measurementId) {
    var script = document.createElement('script');
    script.src = GTAG_URL + "?l=" + dataLayerName + "&id=" + measurementId;
    script.async = true;
    document.head.appendChild(script);
}
/**
 * Get reference to, or create, global datalayer.
 * @param dataLayerName Name of datalayer (most often the default, "_dataLayer").
 */ function getOrCreateDataLayer(dataLayerName) {
    // Check for existing dataLayer and create if needed.
    var dataLayer = [];
    if (Array.isArray(window[dataLayerName])) dataLayer = window[dataLayerName];
    else window[dataLayerName] = dataLayer;
    return dataLayer;
}
/**
 * Wrapped gtag logic when gtag is called with 'config' command.
 *
 * @param gtagCore Basic gtag function that just appends to dataLayer.
 * @param initializationPromisesMap Map of appIds to their initialization promises.
 * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
 * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.
 * @param measurementId GA Measurement ID to set config for.
 * @param gtagParams Gtag config params to set.
 */ function gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var correspondingAppId, dynamicConfigResults, foundConfig, e_1;
        return tslib.__generator(this, function(_a) {
            switch(_a.label){
                case 0:
                    correspondingAppId = measurementIdToAppId[measurementId];
                    _a.label = 1;
                case 1:
                    _a.trys.push([
                        1,
                        7,
                        ,
                        8
                    ]);
                    if (!correspondingAppId) return [
                        3,
                        3
                    ];
                    return [
                        4,
                        initializationPromisesMap[correspondingAppId]
                    ];
                case 2:
                    _a.sent();
                    return [
                        3,
                        6
                    ];
                case 3:
                    return [
                        4,
                        Promise.all(dynamicConfigPromisesList)
                    ];
                case 4:
                    dynamicConfigResults = _a.sent();
                    foundConfig = dynamicConfigResults.find(function(config) {
                        return config.measurementId === measurementId;
                    });
                    if (!foundConfig) return [
                        3,
                        6
                    ];
                    return [
                        4,
                        initializationPromisesMap[foundConfig.appId]
                    ];
                case 5:
                    _a.sent();
                    _a.label = 6;
                case 6:
                    return [
                        3,
                        8
                    ];
                case 7:
                    e_1 = _a.sent();
                    logger.error(e_1);
                    return [
                        3,
                        8
                    ];
                case 8:
                    gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);
                    return [
                        2
                    ];
            }
        });
    });
}
/**
 * Wrapped gtag logic when gtag is called with 'event' command.
 *
 * @param gtagCore Basic gtag function that just appends to dataLayer.
 * @param initializationPromisesMap Map of appIds to their initialization promises.
 * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
 * @param measurementId GA Measurement ID to log event to.
 * @param gtagParams Params to log with this event.
 */ function gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var initializationPromisesToWaitFor, gaSendToList, dynamicConfigResults, _loop_1, _i, gaSendToList_1, sendToId, state_1, e_2;
        return tslib.__generator(this, function(_a) {
            switch(_a.label){
                case 0:
                    _a.trys.push([
                        0,
                        4,
                        ,
                        5
                    ]);
                    initializationPromisesToWaitFor = [];
                    if (!(gtagParams && gtagParams['send_to'])) return [
                        3,
                        2
                    ];
                    gaSendToList = gtagParams['send_to'];
                    // Make it an array if is isn't, so it can be dealt with the same way.
                    if (!Array.isArray(gaSendToList)) gaSendToList = [
                        gaSendToList
                    ];
                    return [
                        4,
                        Promise.all(dynamicConfigPromisesList)
                    ];
                case 1:
                    dynamicConfigResults = _a.sent();
                    _loop_1 = function(sendToId1) {
                        // Any fetched dynamic measurement ID that matches this 'send_to' ID
                        var foundConfig = dynamicConfigResults.find(function(config) {
                            return config.measurementId === sendToId1;
                        });
                        var initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];
                        if (initializationPromise) initializationPromisesToWaitFor.push(initializationPromise);
                        else {
                            // Found an item in 'send_to' that is not associated
                            // directly with an FID, possibly a group.  Empty this array,
                            // exit the loop early, and let it get populated below.
                            initializationPromisesToWaitFor = [];
                            return "break";
                        }
                    };
                    for(_i = 0, gaSendToList_1 = gaSendToList; _i < gaSendToList_1.length; _i++){
                        sendToId = gaSendToList_1[_i];
                        state_1 = _loop_1(sendToId);
                        if (state_1 === "break") break;
                    }
                    _a.label = 2;
                case 2:
                    // This will be unpopulated if there was no 'send_to' field , or
                    // if not all entries in the 'send_to' field could be mapped to
                    // a FID. In these cases, wait on all pending initialization promises.
                    if (initializationPromisesToWaitFor.length === 0) initializationPromisesToWaitFor = Object.values(initializationPromisesMap);
                    // Run core gtag function with args after all relevant initialization
                    // promises have been resolved.
                    return [
                        4,
                        Promise.all(initializationPromisesToWaitFor)
                    ];
                case 3:
                    // Run core gtag function with args after all relevant initialization
                    // promises have been resolved.
                    _a.sent();
                    // Workaround for http://b/141370449 - third argument cannot be undefined.
                    gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {
                    });
                    return [
                        3,
                        5
                    ];
                case 4:
                    e_2 = _a.sent();
                    logger.error(e_2);
                    return [
                        3,
                        5
                    ];
                case 5:
                    return [
                        2
                    ];
            }
        });
    });
}
/**
 * Wraps a standard gtag function with extra code to wait for completion of
 * relevant initialization promises before sending requests.
 *
 * @param gtagCore Basic gtag function that just appends to dataLayer.
 * @param initializationPromisesMap Map of appIds to their initialization promises.
 * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
 * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.
 */ function wrapGtag(gtagCore, /**
 * Allows wrapped gtag calls to wait on whichever intialization promises are required,
 * depending on the contents of the gtag params' `send_to` field, if any.
 */ initializationPromisesMap, /**
 * Wrapped gtag calls sometimes require all dynamic config fetches to have returned
 * before determining what initialization promises (which include FIDs) to wait for.
 */ dynamicConfigPromisesList, /**
 * Wrapped gtag config calls can narrow down which initialization promise (with FID)
 * to wait for if the measurementId is already fetched, by getting the corresponding appId,
 * which is the key for the initialization promises map.
 */ measurementIdToAppId) {
    /**
     * Wrapper around gtag that ensures FID is sent with gtag calls.
     * @param command Gtag command type.
     * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.
     * @param gtagParams Params if event is EVENT/CONFIG.
     */ function gtagWrapper(command, idOrNameOrParams, gtagParams) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var e_3;
            return tslib.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _a.trys.push([
                            0,
                            6,
                            ,
                            7
                        ]);
                        if (!(command === GtagCommand.EVENT)) return [
                            3,
                            2
                        ];
                        // If EVENT, second arg must be measurementId.
                        return [
                            4,
                            gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, idOrNameOrParams, gtagParams)
                        ];
                    case 1:
                        // If EVENT, second arg must be measurementId.
                        _a.sent();
                        return [
                            3,
                            5
                        ];
                    case 2:
                        if (!(command === GtagCommand.CONFIG)) return [
                            3,
                            4
                        ];
                        // If CONFIG, second arg must be measurementId.
                        return [
                            4,
                            gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, idOrNameOrParams, gtagParams)
                        ];
                    case 3:
                        // If CONFIG, second arg must be measurementId.
                        _a.sent();
                        return [
                            3,
                            5
                        ];
                    case 4:
                        // If SET, second arg must be params.
                        gtagCore(GtagCommand.SET, idOrNameOrParams);
                        _a.label = 5;
                    case 5:
                        return [
                            3,
                            7
                        ];
                    case 6:
                        e_3 = _a.sent();
                        logger.error(e_3);
                        return [
                            3,
                            7
                        ];
                    case 7:
                        return [
                            2
                        ];
                }
            });
        });
    }
    return gtagWrapper;
}
/**
 * Creates global gtag function or wraps existing one if found.
 * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and
 * 'event' calls that belong to the GAID associated with this Firebase instance.
 *
 * @param initializationPromisesMap Map of appIds to their initialization promises.
 * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
 * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.
 * @param dataLayerName Name of global GA datalayer array.
 * @param gtagFunctionName Name of global gtag function ("gtag" if not user-specified).
 */ function wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {
    // Create a basic core gtag function
    var gtagCore = function() {
        var _args = [];
        for(var _i = 0; _i < arguments.length; _i++)_args[_i] = arguments[_i];
        // Must push IArguments object, not an array.
        window[dataLayerName].push(arguments);
    };
    // Replace it with existing one if found
    if (window[gtagFunctionName] && typeof window[gtagFunctionName] === 'function') // @ts-ignore
    gtagCore = window[gtagFunctionName];
    window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);
    return {
        gtagCore: gtagCore,
        wrappedGtag: window[gtagFunctionName]
    };
}
/**
 * Returns first script tag in DOM matching our gtag url pattern.
 */ function findGtagScriptOnPage() {
    var scriptTags = window.document.getElementsByTagName('script');
    for(var _i = 0, _a = Object.values(scriptTags); _i < _a.length; _i++){
        var tag = _a[_i];
        if (tag.src && tag.src.includes(GTAG_URL)) return tag;
    }
    return null;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _a;
var ERRORS = (_a = {
}, _a["already-exists"] = "A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.", _a["already-initialized"] = "Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.", _a["interop-component-reg-failed"] = 'Firebase Analytics Interop Component failed to instantiate: {$reason}', _a["invalid-analytics-context"] = "Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}", _a["indexeddb-unavailable"] = "IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}", _a["fetch-throttle"] = "The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.", _a["config-fetch-failed"] = 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}', _a["no-api-key"] = "The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.", _a["no-app-id"] = "The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.", _a);
var ERROR_FACTORY = new util.ErrorFactory('analytics', 'Analytics', ERRORS);
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Backoff factor for 503 errors, which we want to be conservative about
 * to avoid overloading servers. Each retry interval will be
 * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one
 * will be ~30 seconds (with fuzzing).
 */ var LONG_RETRY_FACTOR = 30;
/**
 * Base wait interval to multiplied by backoffFactor^backoffCount.
 */ var BASE_INTERVAL_MILLIS = 1000;
/**
 * Stubbable retry data storage class.
 */ var RetryData = function() {
    function RetryData1(throttleMetadata, intervalMillis) {
        if (throttleMetadata === void 0) throttleMetadata = {
        };
        if (intervalMillis === void 0) intervalMillis = BASE_INTERVAL_MILLIS;
        this.throttleMetadata = throttleMetadata;
        this.intervalMillis = intervalMillis;
    }
    RetryData1.prototype.getThrottleMetadata = function(appId) {
        return this.throttleMetadata[appId];
    };
    RetryData1.prototype.setThrottleMetadata = function(appId, metadata) {
        this.throttleMetadata[appId] = metadata;
    };
    RetryData1.prototype.deleteThrottleMetadata = function(appId) {
        delete this.throttleMetadata[appId];
    };
    return RetryData1;
}();
var defaultRetryData = new RetryData();
/**
 * Set GET request headers.
 * @param apiKey App API key.
 */ function getHeaders(apiKey) {
    return new Headers({
        Accept: 'application/json',
        'x-goog-api-key': apiKey
    });
}
/**
 * Fetches dynamic config from backend.
 * @param app Firebase app to fetch config for.
 */ function fetchDynamicConfig(appFields) {
    var _a1;
    return tslib.__awaiter(this, void 0, void 0, function() {
        var appId, apiKey, request, appUrl, response, errorMessage, jsonResponse;
        return tslib.__generator(this, function(_b) {
            switch(_b.label){
                case 0:
                    appId = appFields.appId, apiKey = appFields.apiKey;
                    request = {
                        method: 'GET',
                        headers: getHeaders(apiKey)
                    };
                    appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);
                    return [
                        4,
                        fetch(appUrl, request)
                    ];
                case 1:
                    response = _b.sent();
                    if (!(response.status !== 200 && response.status !== 304)) return [
                        3,
                        6
                    ];
                    errorMessage = '';
                    _b.label = 2;
                case 2:
                    _b.trys.push([
                        2,
                        4,
                        ,
                        5
                    ]);
                    return [
                        4,
                        response.json()
                    ];
                case 3:
                    jsonResponse = _b.sent();
                    if ((_a1 = jsonResponse.error) === null || _a1 === void 0 ? void 0 : _a1.message) errorMessage = jsonResponse.error.message;
                    return [
                        3,
                        5
                    ];
                case 4:
                    _b.sent();
                    return [
                        3,
                        5
                    ];
                case 5:
                    throw ERROR_FACTORY.create("config-fetch-failed"/* CONFIG_FETCH_FAILED */ , {
                        httpStatus: response.status,
                        responseMessage: errorMessage
                    });
                case 6:
                    return [
                        2,
                        response.json()
                    ];
            }
        });
    });
}
/**
 * Fetches dynamic config from backend, retrying if failed.
 * @param app Firebase app to fetch config for.
 */ function fetchDynamicConfigWithRetry(app, // retryData and timeoutMillis are parameterized to allow passing a different value for testing.
retryData, timeoutMillis) {
    if (retryData === void 0) retryData = defaultRetryData;
    return tslib.__awaiter(this, void 0, void 0, function() {
        var _a1, appId, apiKey, measurementId, throttleMetadata, signal;
        var _this = this;
        return tslib.__generator(this, function(_b) {
            _a1 = app.options, appId = _a1.appId, apiKey = _a1.apiKey, measurementId = _a1.measurementId;
            if (!appId) throw ERROR_FACTORY.create("no-app-id"/* NO_APP_ID */ );
            if (!apiKey) {
                if (measurementId) return [
                    2,
                    {
                        measurementId: measurementId,
                        appId: appId
                    }
                ];
                throw ERROR_FACTORY.create("no-api-key"/* NO_API_KEY */ );
            }
            throttleMetadata = retryData.getThrottleMetadata(appId) || {
                backoffCount: 0,
                throttleEndTimeMillis: Date.now()
            };
            signal = new AnalyticsAbortSignal();
            setTimeout(function() {
                return tslib.__awaiter(_this, void 0, void 0, function() {
                    return tslib.__generator(this, function(_a2) {
                        // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.
                        signal.abort();
                        return [
                            2
                        ];
                    });
                });
            }, timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);
            return [
                2,
                attemptFetchDynamicConfigWithRetry({
                    appId: appId,
                    apiKey: apiKey,
                    measurementId: measurementId
                }, throttleMetadata, signal, retryData)
            ];
        });
    });
}
/**
 * Runs one retry attempt.
 * @param appFields Necessary app config fields.
 * @param throttleMetadata Ongoing metadata to determine throttling times.
 * @param signal Abort signal.
 */ function attemptFetchDynamicConfigWithRetry(appFields, _a1, signal, retryData// for testing
) {
    var throttleEndTimeMillis = _a1.throttleEndTimeMillis, backoffCount = _a1.backoffCount;
    if (retryData === void 0) retryData = defaultRetryData;
    return tslib.__awaiter(this, void 0, void 0, function() {
        var appId, measurementId, e_1, response, e_2, backoffMillis, throttleMetadata;
        return tslib.__generator(this, function(_b) {
            switch(_b.label){
                case 0:
                    appId = appFields.appId, measurementId = appFields.measurementId;
                    _b.label = 1;
                case 1:
                    _b.trys.push([
                        1,
                        3,
                        ,
                        4
                    ]);
                    return [
                        4,
                        setAbortableTimeout(signal, throttleEndTimeMillis)
                    ];
                case 2:
                    _b.sent();
                    return [
                        3,
                        4
                    ];
                case 3:
                    e_1 = _b.sent();
                    if (measurementId) {
                        logger.warn("Timed out fetching this Firebase app's measurement ID from the server." + (" Falling back to the measurement ID " + measurementId) + (" provided in the \"measurementId\" field in the local Firebase config. [" + e_1.message + "]"));
                        return [
                            2,
                            {
                                appId: appId,
                                measurementId: measurementId
                            }
                        ];
                    }
                    throw e_1;
                case 4:
                    _b.trys.push([
                        4,
                        6,
                        ,
                        7
                    ]);
                    return [
                        4,
                        fetchDynamicConfig(appFields)
                    ];
                case 5:
                    response = _b.sent();
                    // Note the SDK only clears throttle state if response is success or non-retriable.
                    retryData.deleteThrottleMetadata(appId);
                    return [
                        2,
                        response
                    ];
                case 6:
                    e_2 = _b.sent();
                    if (!isRetriableError(e_2)) {
                        retryData.deleteThrottleMetadata(appId);
                        if (measurementId) {
                            logger.warn("Failed to fetch this Firebase app's measurement ID from the server." + (" Falling back to the measurement ID " + measurementId) + (" provided in the \"measurementId\" field in the local Firebase config. [" + e_2.message + "]"));
                            return [
                                2,
                                {
                                    appId: appId,
                                    measurementId: measurementId
                                }
                            ];
                        } else throw e_2;
                    }
                    backoffMillis = Number(e_2.customData.httpStatus) === 503 ? util.calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR) : util.calculateBackoffMillis(backoffCount, retryData.intervalMillis);
                    throttleMetadata = {
                        throttleEndTimeMillis: Date.now() + backoffMillis,
                        backoffCount: backoffCount + 1
                    };
                    // Persists state.
                    retryData.setThrottleMetadata(appId, throttleMetadata);
                    logger.debug("Calling attemptFetch again in " + backoffMillis + " millis");
                    return [
                        2,
                        attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData)
                    ];
                case 7:
                    return [
                        2
                    ];
            }
        });
    });
}
/**
 * Supports waiting on a backoff by:
 *
 * <ul>
 *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>
 *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>
 *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled
 *       request appear the same.</li>
 * </ul>
 *
 * <p>Visible for testing.
 */ function setAbortableTimeout(signal, throttleEndTimeMillis) {
    return new Promise(function(resolve, reject) {
        // Derives backoff from given end time, normalizing negative numbers to zero.
        var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);
        var timeout = setTimeout(resolve, backoffMillis);
        // Adds listener, rather than sets onabort, because signal is a shared object.
        signal.addEventListener(function() {
            clearTimeout(timeout);
            // If the request completes before this timeout, the rejection has no effect.
            reject(ERROR_FACTORY.create("fetch-throttle"/* FETCH_THROTTLE */ , {
                throttleEndTimeMillis: throttleEndTimeMillis
            }));
        });
    });
}
/**
 * Returns true if the {@link Error} indicates a fetch request may succeed later.
 */ function isRetriableError(e) {
    if (!(e instanceof util.FirebaseError) || !e.customData) return false;
    // Uses string index defined by ErrorData, which FirebaseError implements.
    var httpStatus = Number(e.customData['httpStatus']);
    return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;
}
/**
 * Shims a minimal AbortSignal (copied from Remote Config).
 *
 * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects
 * of networking, such as retries. Firebase doesn't use AbortController enough to justify a
 * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be
 * swapped out if/when we do.
 */ var AnalyticsAbortSignal = function() {
    function AnalyticsAbortSignal1() {
        this.listeners = [];
    }
    AnalyticsAbortSignal1.prototype.addEventListener = function(listener) {
        this.listeners.push(listener);
    };
    AnalyticsAbortSignal1.prototype.abort = function() {
        this.listeners.forEach(function(listener) {
            return listener();
        });
    };
    return AnalyticsAbortSignal1;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function validateIndexedDB() {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var e_1;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    if (!!util.isIndexedDBAvailable()) return [
                        3,
                        1
                    ];
                    logger.warn(ERROR_FACTORY.create("indexeddb-unavailable"/* INDEXEDDB_UNAVAILABLE */ , {
                        errorInfo: 'IndexedDB is not available in this environment.'
                    }).message);
                    return [
                        2,
                        false
                    ];
                case 1:
                    _a1.trys.push([
                        1,
                        3,
                        ,
                        4
                    ]);
                    return [
                        4,
                        util.validateIndexedDBOpenable()
                    ];
                case 2:
                    _a1.sent();
                    return [
                        3,
                        4
                    ];
                case 3:
                    e_1 = _a1.sent();
                    logger.warn(ERROR_FACTORY.create("indexeddb-unavailable"/* INDEXEDDB_UNAVAILABLE */ , {
                        errorInfo: e_1
                    }).message);
                    return [
                        2,
                        false
                    ];
                case 4:
                    return [
                        2,
                        true
                    ];
            }
        });
    });
}
/**
 * Initialize the analytics instance in gtag.js by calling config command with fid.
 *
 * NOTE: We combine analytics initialization and setting fid together because we want fid to be
 * part of the `page_view` event that's sent during the initialization
 * @param app Firebase app
 * @param gtagCore The gtag function that's not wrapped.
 * @param dynamicConfigPromisesList Array of all dynamic config promises.
 * @param measurementIdToAppId Maps measurementID to appID.
 * @param installations FirebaseInstallations instance.
 *
 * @returns Measurement ID.
 */ function initializeIds(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore, dataLayerName) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var dynamicConfigPromise, fidPromise, _a1, dynamicConfig, fid, configProperties;
        var _b;
        return tslib.__generator(this, function(_c) {
            switch(_c.label){
                case 0:
                    dynamicConfigPromise = fetchDynamicConfigWithRetry(app);
                    // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.
                    dynamicConfigPromise.then(function(config) {
                        measurementIdToAppId[config.measurementId] = config.appId;
                        if (app.options.measurementId && config.measurementId !== app.options.measurementId) logger.warn("The measurement ID in the local Firebase config (" + app.options.measurementId + ")" + (" does not match the measurement ID fetched from the server (" + config.measurementId + ").") + " To ensure analytics events are always sent to the correct Analytics property," + " update the" + " measurement ID field in the local config or remove it from the local config.");
                    }).catch(function(e) {
                        return logger.error(e);
                    });
                    // Add to list to track state of all dynamic config promises.
                    dynamicConfigPromisesList.push(dynamicConfigPromise);
                    fidPromise = validateIndexedDB().then(function(envIsValid) {
                        if (envIsValid) return installations.getId();
                        else return undefined;
                    });
                    return [
                        4,
                        Promise.all([
                            dynamicConfigPromise,
                            fidPromise
                        ])
                    ];
                case 1:
                    _a1 = _c.sent(), dynamicConfig = _a1[0], fid = _a1[1];
                    // Detect if user has already put the gtag <script> tag on this page.
                    if (!findGtagScriptOnPage()) insertScriptTag(dataLayerName, dynamicConfig.measurementId);
                    // This command initializes gtag.js and only needs to be called once for the entire web app,
                    // but since it is idempotent, we can call it multiple times.
                    // We keep it together with other initialization logic for better code structure.
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    gtagCore('js', new Date());
                    configProperties = (_b = {
                    }, // guard against developers accidentally setting properties with prefix `firebase_`
                    _b[ORIGIN_KEY] = 'firebase', _b.update = true, _b);
                    if (fid != null) configProperties[GA_FID_KEY] = fid;
                    // It should be the first config command called on this GA-ID
                    // Initialize this GA-ID and set FID on it using the gtag config API.
                    // Note: This will trigger a page_view event unless 'send_page_view' is set to false in
                    // `configProperties`.
                    gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);
                    return [
                        2,
                        dynamicConfig.measurementId
                    ];
            }
        });
    });
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Maps appId to full initialization promise. Wrapped gtag calls must wait on
 * all or some of these, depending on the call's `send_to` param and the status
 * of the dynamic config fetches (see below).
 */ var initializationPromisesMap = {
};
/**
 * List of dynamic config fetch promises. In certain cases, wrapped gtag calls
 * wait on all these to be complete in order to determine if it can selectively
 * wait for only certain initialization (FID) promises or if it must wait for all.
 */ var dynamicConfigPromisesList = [];
/**
 * Maps fetched measurementIds to appId. Populated when the app's dynamic config
 * fetch completes. If already populated, gtag config calls can use this to
 * selectively wait for only this app's initialization promise (FID) instead of all
 * initialization promises.
 */ var measurementIdToAppId = {
};
/**
 * Name for window global data layer array used by GA: defaults to 'dataLayer'.
 */ var dataLayerName = 'dataLayer';
/**
 * Name for window global gtag function used by GA: defaults to 'gtag'.
 */ var gtagName = 'gtag';
/**
 * Reproduction of standard gtag function or reference to existing
 * gtag function on window object.
 */ var gtagCoreFunction;
/**
 * Wrapper around gtag function that ensures FID is sent with all
 * relevant event and config calls.
 */ var wrappedGtagFunction;
/**
 * Flag to ensure page initialization steps (creation or wrapping of
 * dataLayer and gtag script) are only run once per page load.
 */ var globalInitDone = false;
/**
 * For testing
 */ function resetGlobalVars(newGlobalInitDone, newInitializationPromisesMap, newDynamicPromises) {
    if (newGlobalInitDone === void 0) newGlobalInitDone = false;
    if (newInitializationPromisesMap === void 0) newInitializationPromisesMap = {
    };
    if (newDynamicPromises === void 0) newDynamicPromises = [];
    globalInitDone = newGlobalInitDone;
    initializationPromisesMap = newInitializationPromisesMap;
    dynamicConfigPromisesList = newDynamicPromises;
    dataLayerName = 'dataLayer';
    gtagName = 'gtag';
}
/**
 * For testing
 */ function getGlobalVars() {
    return {
        initializationPromisesMap: initializationPromisesMap,
        dynamicConfigPromisesList: dynamicConfigPromisesList
    };
}
/**
 * This must be run before calling firebase.analytics() or it won't
 * have any effect.
 * @param options Custom gtag and dataLayer names.
 */ function settings(options) {
    if (globalInitDone) throw ERROR_FACTORY.create("already-initialized"/* ALREADY_INITIALIZED */ );
    if (options.dataLayerName) dataLayerName = options.dataLayerName;
    if (options.gtagName) gtagName = options.gtagName;
}
/**
 * Returns true if no environment mismatch is found.
 * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT
 * error that also lists details for each mismatch found.
 */ function warnOnBrowserContextMismatch() {
    var mismatchedEnvMessages = [];
    if (util.isBrowserExtension()) mismatchedEnvMessages.push('This is a browser extension environment.');
    if (!util.areCookiesEnabled()) mismatchedEnvMessages.push('Cookies are not available.');
    if (mismatchedEnvMessages.length > 0) {
        var details = mismatchedEnvMessages.map(function(message, index) {
            return "(" + (index + 1) + ") " + message;
        }).join(' ');
        var err = ERROR_FACTORY.create("invalid-analytics-context"/* INVALID_ANALYTICS_CONTEXT */ , {
            errorInfo: details
        });
        logger.warn(err.message);
    }
}
function factory(app, installations) {
    warnOnBrowserContextMismatch();
    var appId = app.options.appId;
    if (!appId) throw ERROR_FACTORY.create("no-app-id"/* NO_APP_ID */ );
    if (!app.options.apiKey) {
        if (app.options.measurementId) logger.warn("The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest" + (" measurement ID for this Firebase app. Falling back to the measurement ID " + app.options.measurementId) + " provided in the \"measurementId\" field in the local Firebase config.");
        else throw ERROR_FACTORY.create("no-api-key"/* NO_API_KEY */ );
    }
    if (initializationPromisesMap[appId] != null) throw ERROR_FACTORY.create("already-exists"/* ALREADY_EXISTS */ , {
        id: appId
    });
    if (!globalInitDone) {
        // Steps here should only be done once per page: creation or wrapping
        // of dataLayer and global gtag function.
        getOrCreateDataLayer(dataLayerName);
        var _a1 = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName), wrappedGtag = _a1.wrappedGtag, gtagCore = _a1.gtagCore;
        wrappedGtagFunction = wrappedGtag;
        gtagCoreFunction = gtagCore;
        globalInitDone = true;
    }
    // Async but non-blocking.
    // This map reflects the completion state of all promises for each appId.
    initializationPromisesMap[appId] = initializeIds(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction, dataLayerName);
    var analyticsInstance = {
        app: app,
        // Public methods return void for API simplicity and to better match gtag,
        // while internal implementations return promises.
        logEvent: function(eventName, eventParams, options) {
            logEvent(wrappedGtagFunction, initializationPromisesMap[appId], eventName, eventParams, options).catch(function(e) {
                return logger.error(e);
            });
        },
        setCurrentScreen: function(screenName, options) {
            setCurrentScreen(wrappedGtagFunction, initializationPromisesMap[appId], screenName, options).catch(function(e) {
                return logger.error(e);
            });
        },
        setUserId: function(id, options) {
            setUserId(wrappedGtagFunction, initializationPromisesMap[appId], id, options).catch(function(e) {
                return logger.error(e);
            });
        },
        setUserProperties: function(properties, options) {
            setUserProperties(wrappedGtagFunction, initializationPromisesMap[appId], properties, options).catch(function(e) {
                return logger.error(e);
            });
        },
        setAnalyticsCollectionEnabled: function(enabled) {
            setAnalyticsCollectionEnabled(initializationPromisesMap[appId], enabled).catch(function(e) {
                return logger.error(e);
            });
        },
        INTERNAL: {
            delete: function() {
                delete initializationPromisesMap[appId];
                return Promise.resolve();
            }
        }
    };
    return analyticsInstance;
}
var name = "@firebase/analytics";
var version = "0.6.18";
/**
 * Type constant for Firebase Analytics.
 */ var ANALYTICS_TYPE = 'analytics';
function registerAnalytics(instance) {
    instance.INTERNAL.registerComponent(new component.Component(ANALYTICS_TYPE, function(container) {
        // getImmediate for FirebaseApp will always succeed
        var app = container.getProvider('app').getImmediate();
        var installations = container.getProvider('installations').getImmediate();
        return factory(app, installations);
    }, "PUBLIC"/* PUBLIC */ ).setServiceProps({
        settings: settings,
        EventName: EventName,
        isSupported: isSupported
    }));
    instance.INTERNAL.registerComponent(new component.Component('analytics-internal', internalFactory, "PRIVATE"/* PRIVATE */ ));
    instance.registerVersion(name, version);
    function internalFactory(container) {
        try {
            var analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();
            return {
                logEvent: analytics.logEvent
            };
        } catch (e) {
            throw ERROR_FACTORY.create("interop-component-reg-failed"/* INTEROP_COMPONENT_REG_FAILED */ , {
                reason: e
            });
        }
    }
}
registerAnalytics(firebase__default['default']);
/**
 * this is a public static method provided to users that wraps four different checks:
 *
 * 1. check if it's not a browser extension environment.
 * 1. check if cookie is enabled in current browser.
 * 3. check if IndexedDB is supported by the browser environment.
 * 4. check if the current browser context is valid for using IndexedDB.
 *
 */ function isSupported() {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var isDBOpenable;
        return tslib.__generator(this, function(_a2) {
            switch(_a2.label){
                case 0:
                    if (util.isBrowserExtension()) return [
                        2,
                        false
                    ];
                    if (!util.areCookiesEnabled()) return [
                        2,
                        false
                    ];
                    if (!util.isIndexedDBAvailable()) return [
                        2,
                        false
                    ];
                    _a2.label = 1;
                case 1:
                    _a2.trys.push([
                        1,
                        3,
                        ,
                        4
                    ]);
                    return [
                        4,
                        util.validateIndexedDBOpenable()
                    ];
                case 2:
                    isDBOpenable = _a2.sent();
                    return [
                        2,
                        isDBOpenable
                    ];
                case 3:
                    _a2.sent();
                    return [
                        2,
                        false
                    ];
                case 4:
                    return [
                        2
                    ];
            }
        });
    });
}
exports.factory = factory;
exports.getGlobalVars = getGlobalVars;
exports.registerAnalytics = registerAnalytics;
exports.resetGlobalVars = resetGlobalVars;
exports.settings = settings;

},{"tslib":"4rd38","@firebase/app":"6IUA5","@firebase/installations":"7rMif","@firebase/logger":"5PuYX","@firebase/util":"3bR6t","@firebase/component":"5qT0x"}],"ZvaH1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "registerRemoteConfig", ()=>registerRemoteConfig
);
var _app = require("@firebase/app");
var _appDefault = parcelHelpers.interopDefault(_app);
var _installations = require("@firebase/installations");
var _tslib = require("tslib");
var _util = require("@firebase/util");
var _logger = require("@firebase/logger");
var _component = require("@firebase/component");
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Implements the {@link RemoteConfigClient} abstraction with success response caching.
 *
 * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service
 * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the
 * Cache API doesn't support matching entries by time.
 */ var CachingClient = function() {
    function CachingClient1(client, storage, storageCache, logger) {
        this.client = client;
        this.storage = storage;
        this.storageCache = storageCache;
        this.logger = logger;
    }
    /**
     * Returns true if the age of the cached fetched configs is less than or equal to
     * {@link Settings#minimumFetchIntervalInSeconds}.
     *
     * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the
     * native Fetch API.
     *
     * <p>Visible for testing.
     */ CachingClient1.prototype.isCachedDataFresh = function(cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis) {
        // Cache can only be fresh if it's populated.
        if (!lastSuccessfulFetchTimestampMillis) {
            this.logger.debug('Config fetch cache check. Cache unpopulated.');
            return false;
        }
        // Calculates age of cache entry.
        var cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;
        var isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;
        this.logger.debug('Config fetch cache check.' + (" Cache age millis: " + cacheAgeMillis + ".") + (" Cache max age millis (minimumFetchIntervalMillis setting): " + cacheMaxAgeMillis + ".") + (" Is cache hit: " + isCachedDataFresh + "."));
        return isCachedDataFresh;
    };
    CachingClient1.prototype.fetch = function(request) {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var _a, lastSuccessfulFetchTimestampMillis, lastSuccessfulFetchResponse, response, storageOperations;
            return _tslib.__generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        return [
                            4,
                            Promise.all([
                                this.storage.getLastSuccessfulFetchTimestampMillis(),
                                this.storage.getLastSuccessfulFetchResponse()
                            ])
                        ];
                    case 1:
                        _a = _b.sent(), lastSuccessfulFetchTimestampMillis = _a[0], lastSuccessfulFetchResponse = _a[1];
                        // Exits early on cache hit.
                        if (lastSuccessfulFetchResponse && this.isCachedDataFresh(request.cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis)) return [
                            2,
                            lastSuccessfulFetchResponse
                        ];
                        // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API
                        // that allows the caller to pass an ETag.
                        request.eTag = lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;
                        return [
                            4,
                            this.client.fetch(request)
                        ];
                    case 2:
                        response = _b.sent();
                        storageOperations = [
                            // Uses write-through cache for consistency with synchronous public API.
                            this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())
                        ];
                        if (response.status === 200) // Caches response only if it has changed, ie non-304 responses.
                        storageOperations.push(this.storage.setLastSuccessfulFetchResponse(response));
                        return [
                            4,
                            Promise.all(storageOperations)
                        ];
                    case 3:
                        _b.sent();
                        return [
                            2,
                            response
                        ];
                }
            });
        });
    };
    return CachingClient1;
}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _a;
var ERROR_DESCRIPTION_MAP = (_a = {
}, _a["registration-window"] = 'Undefined window object. This SDK only supports usage in a browser environment.', _a["registration-project-id"] = 'Undefined project identifier. Check Firebase app initialization.', _a["registration-api-key"] = 'Undefined API key. Check Firebase app initialization.', _a["registration-app-id"] = 'Undefined app identifier. Check Firebase app initialization.', _a["storage-open"] = 'Error thrown when opening storage. Original error: {$originalErrorMessage}.', _a["storage-get"] = 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.', _a["storage-set"] = 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.', _a["storage-delete"] = 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.', _a["fetch-client-network"] = "Fetch client failed to connect to a network. Check Internet connection. Original error: {$originalErrorMessage}.", _a["fetch-timeout"] = "The config fetch request timed out.  Configure timeout using \"fetchTimeoutMillis\" SDK setting.", _a["fetch-throttle"] = "The config fetch request timed out while in an exponential backoff state. Configure timeout using \"fetchTimeoutMillis\" SDK setting. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.", _a["fetch-client-parse"] = "Fetch client could not parse response. Original error: {$originalErrorMessage}.", _a["fetch-status"] = 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.', _a);
var ERROR_FACTORY = new _util.ErrorFactory('remoteconfig'/* service */ , 'Remote Config'/* service name */ , ERROR_DESCRIPTION_MAP);
// Note how this is like typeof/instanceof, but for ErrorCode.
function hasErrorCode(e, errorCode) {
    return e instanceof _util.FirebaseError && e.code.indexOf(errorCode) !== -1;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Attempts to get the most accurate browser language setting.
 *
 * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.
 *
 * <p>Defers default language specification to server logic for consistency.
 *
 * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.
 */ function getUserLanguage(navigatorLanguage) {
    if (navigatorLanguage === void 0) navigatorLanguage = navigator;
    return(// Most reliable, but only supported in Chrome/Firefox.
    navigatorLanguage.languages && navigatorLanguage.languages[0] || // Supported in most browsers, but returns the language of the browser
    // UI, not the language set in browser settings.
    navigatorLanguage.language);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Implements the Client abstraction for the Remote Config REST API.
 */ var RestClient = function() {
    function RestClient1(firebaseInstallations, sdkVersion, namespace, projectId, apiKey, appId) {
        this.firebaseInstallations = firebaseInstallations;
        this.sdkVersion = sdkVersion;
        this.namespace = namespace;
        this.projectId = projectId;
        this.apiKey = apiKey;
        this.appId = appId;
    }
    /**
     * Fetches from the Remote Config REST API.
     *
     * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't
     * connect to the network.
     * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the
     * fetch response.
     * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.
     */ RestClient1.prototype.fetch = function(request) {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var _a1, installationId, installationToken, urlBase, url, headers, requestBody, options, fetchPromise, timeoutPromise, response, originalError_1, errorCode, status, responseEtag, config, state, responseBody, originalError_2;
            return _tslib.__generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        return [
                            4,
                            Promise.all([
                                this.firebaseInstallations.getId(),
                                this.firebaseInstallations.getToken()
                            ])
                        ];
                    case 1:
                        _a1 = _b.sent(), installationId = _a1[0], installationToken = _a1[1];
                        urlBase = window.FIREBASE_REMOTE_CONFIG_URL_BASE || 'https://firebaseremoteconfig.googleapis.com';
                        url = urlBase + "/v1/projects/" + this.projectId + "/namespaces/" + this.namespace + ":fetch?key=" + this.apiKey;
                        headers = {
                            'Content-Type': 'application/json',
                            'Content-Encoding': 'gzip',
                            // Deviates from pure decorator by not passing max-age header since we don't currently have
                            // service behavior using that header.
                            'If-None-Match': request.eTag || '*'
                        };
                        requestBody = {
                            /* eslint-disable camelcase */ sdk_version: this.sdkVersion,
                            app_instance_id: installationId,
                            app_instance_id_token: installationToken,
                            app_id: this.appId,
                            language_code: getUserLanguage()
                        };
                        options = {
                            method: 'POST',
                            headers: headers,
                            body: JSON.stringify(requestBody)
                        };
                        fetchPromise = fetch(url, options);
                        timeoutPromise = new Promise(function(_resolve, reject) {
                            // Maps async event listener to Promise API.
                            request.signal.addEventListener(function() {
                                // Emulates https://heycam.github.io/webidl/#aborterror
                                var error = new Error('The operation was aborted.');
                                error.name = 'AbortError';
                                reject(error);
                            });
                        });
                        _b.label = 2;
                    case 2:
                        _b.trys.push([
                            2,
                            5,
                            ,
                            6
                        ]);
                        return [
                            4,
                            Promise.race([
                                fetchPromise,
                                timeoutPromise
                            ])
                        ];
                    case 3:
                        _b.sent();
                        return [
                            4,
                            fetchPromise
                        ];
                    case 4:
                        response = _b.sent();
                        return [
                            3,
                            6
                        ];
                    case 5:
                        originalError_1 = _b.sent();
                        errorCode = "fetch-client-network";
                        if (originalError_1.name === 'AbortError') errorCode = "fetch-timeout";
                        throw ERROR_FACTORY.create(errorCode, {
                            originalErrorMessage: originalError_1.message
                        });
                    case 6:
                        status = response.status;
                        responseEtag = response.headers.get('ETag') || undefined;
                        if (!(response.status === 200)) return [
                            3,
                            11
                        ];
                        responseBody = void 0;
                        _b.label = 7;
                    case 7:
                        _b.trys.push([
                            7,
                            9,
                            ,
                            10
                        ]);
                        return [
                            4,
                            response.json()
                        ];
                    case 8:
                        responseBody = _b.sent();
                        return [
                            3,
                            10
                        ];
                    case 9:
                        originalError_2 = _b.sent();
                        throw ERROR_FACTORY.create("fetch-client-parse"/* FETCH_PARSE */ , {
                            originalErrorMessage: originalError_2.message
                        });
                    case 10:
                        config = responseBody['entries'];
                        state = responseBody['state'];
                        _b.label = 11;
                    case 11:
                        // Normalizes based on legacy state.
                        if (state === 'INSTANCE_STATE_UNSPECIFIED') status = 500;
                        else if (state === 'NO_CHANGE') status = 304;
                        else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') // These cases can be fixed remotely, so normalize to safe value.
                        config = {
                        };
                        // Normalize to exception-based control flow for non-success cases.
                        // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for
                        // differentiating success states (200 from 304; the state body param is undefined in a
                        // standard 304).
                        if (status !== 304 && status !== 200) throw ERROR_FACTORY.create("fetch-status"/* FETCH_STATUS */ , {
                            httpStatus: status
                        });
                        return [
                            2,
                            {
                                status: status,
                                eTag: responseEtag,
                                config: config
                            }
                        ];
                }
            });
        });
    };
    return RestClient1;
}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Shims a minimal AbortSignal.
 *
 * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects
 * of networking, such as retries. Firebase doesn't use AbortController enough to justify a
 * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be
 * swapped out if/when we do.
 */ var RemoteConfigAbortSignal = function() {
    function RemoteConfigAbortSignal1() {
        this.listeners = [];
    }
    RemoteConfigAbortSignal1.prototype.addEventListener = function(listener) {
        this.listeners.push(listener);
    };
    RemoteConfigAbortSignal1.prototype.abort = function() {
        this.listeners.forEach(function(listener) {
            return listener();
        });
    };
    return RemoteConfigAbortSignal1;
}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var DEFAULT_VALUE_FOR_BOOLEAN = false;
var DEFAULT_VALUE_FOR_STRING = '';
var DEFAULT_VALUE_FOR_NUMBER = 0;
var BOOLEAN_TRUTHY_VALUES = [
    '1',
    'true',
    't',
    'yes',
    'y',
    'on'
];
var Value = function() {
    function Value1(_source, _value) {
        if (_value === void 0) _value = DEFAULT_VALUE_FOR_STRING;
        this._source = _source;
        this._value = _value;
    }
    Value1.prototype.asString = function() {
        return this._value;
    };
    Value1.prototype.asBoolean = function() {
        if (this._source === 'static') return DEFAULT_VALUE_FOR_BOOLEAN;
        return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;
    };
    Value1.prototype.asNumber = function() {
        if (this._source === 'static') return DEFAULT_VALUE_FOR_NUMBER;
        var num = Number(this._value);
        if (isNaN(num)) num = DEFAULT_VALUE_FOR_NUMBER;
        return num;
    };
    Value1.prototype.getSource = function() {
        return this._source;
    };
    return Value1;
}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var DEFAULT_FETCH_TIMEOUT_MILLIS = 60000; // One minute
var DEFAULT_CACHE_MAX_AGE_MILLIS = 43200000; // Twelve hours.
/**
 * Encapsulates business logic mapping network and storage dependencies to the public SDK API.
 *
 * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.
 */ var RemoteConfig = function() {
    function RemoteConfig1(// Required by FirebaseServiceFactory interface.
    app, // JS doesn't support private yet
    // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an
    // underscore prefix.
    _client, _storageCache, _storage, _logger1) {
        this.app = app;
        this._client = _client;
        this._storageCache = _storageCache;
        this._storage = _storage;
        this._logger = _logger1;
        // Tracks completion of initialization promise.
        this._isInitializationComplete = false;
        this.settings = {
            fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,
            minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS
        };
        this.defaultConfig = {
        };
    }
    // Based on packages/firestore/src/util/log.ts but not static because we need per-instance levels
    // to differentiate 2p and 3p use-cases.
    RemoteConfig1.prototype.setLogLevel = function(logLevel) {
        switch(logLevel){
            case 'debug':
                this._logger.logLevel = _logger.LogLevel.DEBUG;
                break;
            case 'silent':
                this._logger.logLevel = _logger.LogLevel.SILENT;
                break;
            default:
                this._logger.logLevel = _logger.LogLevel.ERROR;
        }
    };
    Object.defineProperty(RemoteConfig1.prototype, "fetchTimeMillis", {
        get: function() {
            return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RemoteConfig1.prototype, "lastFetchStatus", {
        get: function() {
            return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';
        },
        enumerable: false,
        configurable: true
    });
    RemoteConfig1.prototype.activate = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var _a1, lastSuccessfulFetchResponse, activeConfigEtag;
            return _tslib.__generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        return [
                            4,
                            Promise.all([
                                this._storage.getLastSuccessfulFetchResponse(),
                                this._storage.getActiveConfigEtag()
                            ])
                        ];
                    case 1:
                        _a1 = _b.sent(), lastSuccessfulFetchResponse = _a1[0], activeConfigEtag = _a1[1];
                        if (!lastSuccessfulFetchResponse || !lastSuccessfulFetchResponse.config || !lastSuccessfulFetchResponse.eTag || lastSuccessfulFetchResponse.eTag === activeConfigEtag) // Either there is no successful fetched config, or is the same as current active
                        // config.
                        return [
                            2,
                            false
                        ];
                        return [
                            4,
                            Promise.all([
                                this._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config),
                                this._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)
                            ])
                        ];
                    case 2:
                        _b.sent();
                        return [
                            2,
                            true
                        ];
                }
            });
        });
    };
    RemoteConfig1.prototype.ensureInitialized = function() {
        var _this = this;
        if (!this._initializePromise) this._initializePromise = this._storageCache.loadFromStorage().then(function() {
            _this._isInitializationComplete = true;
        });
        return this._initializePromise;
    };
    /**
     * @throws a {@link ErrorCode.FETCH_CLIENT_TIMEOUT} if the request takes longer than
     * {@link Settings.fetchTimeoutInSeconds} or
     * {@link DEFAULT_FETCH_TIMEOUT_SECONDS}.
     */ RemoteConfig1.prototype.fetch = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var abortSignal, e_1, lastFetchStatus;
            var _this = this;
            return _tslib.__generator(this, function(_a1) {
                switch(_a1.label){
                    case 0:
                        abortSignal = new RemoteConfigAbortSignal();
                        setTimeout(function() {
                            return _tslib.__awaiter(_this, void 0, void 0, function() {
                                return _tslib.__generator(this, function(_a2) {
                                    // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.
                                    abortSignal.abort();
                                    return [
                                        2
                                    ];
                                });
                            });
                        }, this.settings.fetchTimeoutMillis);
                        _a1.label = 1;
                    case 1:
                        _a1.trys.push([
                            1,
                            4,
                            ,
                            6
                        ]);
                        return [
                            4,
                            this._client.fetch({
                                cacheMaxAgeMillis: this.settings.minimumFetchIntervalMillis,
                                signal: abortSignal
                            })
                        ];
                    case 2:
                        _a1.sent();
                        return [
                            4,
                            this._storageCache.setLastFetchStatus('success')
                        ];
                    case 3:
                        _a1.sent();
                        return [
                            3,
                            6
                        ];
                    case 4:
                        e_1 = _a1.sent();
                        lastFetchStatus = hasErrorCode(e_1, "fetch-throttle"/* FETCH_THROTTLE */ ) ? 'throttle' : 'failure';
                        return [
                            4,
                            this._storageCache.setLastFetchStatus(lastFetchStatus)
                        ];
                    case 5:
                        _a1.sent();
                        throw e_1;
                    case 6:
                        return [
                            2
                        ];
                }
            });
        });
    };
    RemoteConfig1.prototype.fetchAndActivate = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            return _tslib.__generator(this, function(_a1) {
                switch(_a1.label){
                    case 0:
                        return [
                            4,
                            this.fetch()
                        ];
                    case 1:
                        _a1.sent();
                        return [
                            2,
                            this.activate()
                        ];
                }
            });
        });
    };
    RemoteConfig1.prototype.getAll = function() {
        var _this = this;
        return getAllKeys(this._storageCache.getActiveConfig(), this.defaultConfig).reduce(function(allConfigs, key) {
            allConfigs[key] = _this.getValue(key);
            return allConfigs;
        }, {
        });
    };
    RemoteConfig1.prototype.getBoolean = function(key) {
        return this.getValue(key).asBoolean();
    };
    RemoteConfig1.prototype.getNumber = function(key) {
        return this.getValue(key).asNumber();
    };
    RemoteConfig1.prototype.getString = function(key) {
        return this.getValue(key).asString();
    };
    RemoteConfig1.prototype.getValue = function(key) {
        if (!this._isInitializationComplete) this._logger.debug("A value was requested for key \"" + key + "\" before SDK initialization completed." + ' Await on ensureInitialized if the intent was to get a previously activated value.');
        var activeConfig = this._storageCache.getActiveConfig();
        if (activeConfig && activeConfig[key] !== undefined) return new Value('remote', activeConfig[key]);
        else if (this.defaultConfig && this.defaultConfig[key] !== undefined) return new Value('default', String(this.defaultConfig[key]));
        this._logger.debug("Returning static value for key \"" + key + "\"." + ' Define a default or remote value if this is unintentional.');
        return new Value('static');
    };
    return RemoteConfig1;
}();
/**
 * Dedupes and returns an array of all the keys of the received objects.
 */ function getAllKeys(obj1, obj2) {
    if (obj1 === void 0) obj1 = {
    };
    if (obj2 === void 0) obj2 = {
    };
    return Object.keys(_tslib.__assign(_tslib.__assign({
    }, obj1), obj2));
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.
 */ function toFirebaseError(event, errorCode) {
    var originalError = event.target.error || undefined;
    return ERROR_FACTORY.create(errorCode, {
        originalErrorMessage: originalError && originalError.message
    });
}
/**
 * A general-purpose store keyed by app + namespace + {@link
 * ProjectNamespaceKeyFieldValue}.
 *
 * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact
 * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys
 * for a set of key-value pairs. See {@link Storage#createCompositeKey}.
 *
 * <p>Visible for testing.
 */ var APP_NAMESPACE_STORE = 'app_namespace_store';
var DB_NAME = 'firebase_remote_config';
var DB_VERSION = 1;
// Visible for testing.
function openDatabase() {
    return new Promise(function(resolve, reject) {
        var request = indexedDB.open(DB_NAME, DB_VERSION);
        request.onerror = function(event) {
            reject(toFirebaseError(event, "storage-open"/* STORAGE_OPEN */ ));
        };
        request.onsuccess = function(event) {
            resolve(event.target.result);
        };
        request.onupgradeneeded = function(event) {
            var db = event.target.result;
            // We don't use 'break' in this switch statement, the fall-through
            // behavior is what we want, because if there are multiple versions between
            // the old version and the current version, we want ALL the migrations
            // that correspond to those versions to run, not only the last one.
            // eslint-disable-next-line default-case
            switch(event.oldVersion){
                case 0:
                    db.createObjectStore(APP_NAMESPACE_STORE, {
                        keyPath: 'compositeKey'
                    });
            }
        };
    });
}
/**
 * Abstracts data persistence.
 */ var Storage1 = function() {
    /**
     * @param appId enables storage segmentation by app (ID + name).
     * @param appName enables storage segmentation by app (ID + name).
     * @param namespace enables storage segmentation by namespace.
     */ function Storage2(appId, appName, namespace, openDbPromise) {
        if (openDbPromise === void 0) openDbPromise = openDatabase();
        this.appId = appId;
        this.appName = appName;
        this.namespace = namespace;
        this.openDbPromise = openDbPromise;
    }
    Storage2.prototype.getLastFetchStatus = function() {
        return this.get('last_fetch_status');
    };
    Storage2.prototype.setLastFetchStatus = function(status) {
        return this.set('last_fetch_status', status);
    };
    // This is comparable to a cache entry timestamp. If we need to expire other data, we could
    // consider adding timestamp to all storage records and an optional max age arg to getters.
    Storage2.prototype.getLastSuccessfulFetchTimestampMillis = function() {
        return this.get('last_successful_fetch_timestamp_millis');
    };
    Storage2.prototype.setLastSuccessfulFetchTimestampMillis = function(timestamp) {
        return this.set('last_successful_fetch_timestamp_millis', timestamp);
    };
    Storage2.prototype.getLastSuccessfulFetchResponse = function() {
        return this.get('last_successful_fetch_response');
    };
    Storage2.prototype.setLastSuccessfulFetchResponse = function(response) {
        return this.set('last_successful_fetch_response', response);
    };
    Storage2.prototype.getActiveConfig = function() {
        return this.get('active_config');
    };
    Storage2.prototype.setActiveConfig = function(config) {
        return this.set('active_config', config);
    };
    Storage2.prototype.getActiveConfigEtag = function() {
        return this.get('active_config_etag');
    };
    Storage2.prototype.setActiveConfigEtag = function(etag) {
        return this.set('active_config_etag', etag);
    };
    Storage2.prototype.getThrottleMetadata = function() {
        return this.get('throttle_metadata');
    };
    Storage2.prototype.setThrottleMetadata = function(metadata) {
        return this.set('throttle_metadata', metadata);
    };
    Storage2.prototype.deleteThrottleMetadata = function() {
        return this.delete('throttle_metadata');
    };
    Storage2.prototype.get = function(key) {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var db;
            var _this = this;
            return _tslib.__generator(this, function(_a1) {
                switch(_a1.label){
                    case 0:
                        return [
                            4,
                            this.openDbPromise
                        ];
                    case 1:
                        db = _a1.sent();
                        return [
                            2,
                            new Promise(function(resolve, reject) {
                                var transaction = db.transaction([
                                    APP_NAMESPACE_STORE
                                ], 'readonly');
                                var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);
                                var compositeKey = _this.createCompositeKey(key);
                                try {
                                    var request = objectStore.get(compositeKey);
                                    request.onerror = function(event) {
                                        reject(toFirebaseError(event, "storage-get"/* STORAGE_GET */ ));
                                    };
                                    request.onsuccess = function(event) {
                                        var result = event.target.result;
                                        if (result) resolve(result.value);
                                        else resolve(undefined);
                                    };
                                } catch (e) {
                                    reject(ERROR_FACTORY.create("storage-get"/* STORAGE_GET */ , {
                                        originalErrorMessage: e && e.message
                                    }));
                                }
                            })
                        ];
                }
            });
        });
    };
    Storage2.prototype.set = function(key, value) {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var db;
            var _this = this;
            return _tslib.__generator(this, function(_a1) {
                switch(_a1.label){
                    case 0:
                        return [
                            4,
                            this.openDbPromise
                        ];
                    case 1:
                        db = _a1.sent();
                        return [
                            2,
                            new Promise(function(resolve, reject) {
                                var transaction = db.transaction([
                                    APP_NAMESPACE_STORE
                                ], 'readwrite');
                                var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);
                                var compositeKey = _this.createCompositeKey(key);
                                try {
                                    var request = objectStore.put({
                                        compositeKey: compositeKey,
                                        value: value
                                    });
                                    request.onerror = function(event) {
                                        reject(toFirebaseError(event, "storage-set"/* STORAGE_SET */ ));
                                    };
                                    request.onsuccess = function() {
                                        resolve();
                                    };
                                } catch (e) {
                                    reject(ERROR_FACTORY.create("storage-set"/* STORAGE_SET */ , {
                                        originalErrorMessage: e && e.message
                                    }));
                                }
                            })
                        ];
                }
            });
        });
    };
    Storage2.prototype.delete = function(key) {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var db;
            var _this = this;
            return _tslib.__generator(this, function(_a1) {
                switch(_a1.label){
                    case 0:
                        return [
                            4,
                            this.openDbPromise
                        ];
                    case 1:
                        db = _a1.sent();
                        return [
                            2,
                            new Promise(function(resolve, reject) {
                                var transaction = db.transaction([
                                    APP_NAMESPACE_STORE
                                ], 'readwrite');
                                var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);
                                var compositeKey = _this.createCompositeKey(key);
                                try {
                                    var request = objectStore.delete(compositeKey);
                                    request.onerror = function(event) {
                                        reject(toFirebaseError(event, "storage-delete"/* STORAGE_DELETE */ ));
                                    };
                                    request.onsuccess = function() {
                                        resolve();
                                    };
                                } catch (e) {
                                    reject(ERROR_FACTORY.create("storage-delete"/* STORAGE_DELETE */ , {
                                        originalErrorMessage: e && e.message
                                    }));
                                }
                            })
                        ];
                }
            });
        });
    };
    // Facilitates composite key functionality (which is unsupported in IE).
    Storage2.prototype.createCompositeKey = function(key) {
        return [
            this.appId,
            this.appName,
            this.namespace,
            key
        ].join();
    };
    return Storage2;
}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A memory cache layer over storage to support the SDK's synchronous read requirements.
 */ var StorageCache = function() {
    function StorageCache1(storage) {
        this.storage = storage;
    }
    /**
     * Memory-only getters
     */ StorageCache1.prototype.getLastFetchStatus = function() {
        return this.lastFetchStatus;
    };
    StorageCache1.prototype.getLastSuccessfulFetchTimestampMillis = function() {
        return this.lastSuccessfulFetchTimestampMillis;
    };
    StorageCache1.prototype.getActiveConfig = function() {
        return this.activeConfig;
    };
    /**
     * Read-ahead getter
     */ StorageCache1.prototype.loadFromStorage = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var lastFetchStatusPromise, lastSuccessfulFetchTimestampMillisPromise, activeConfigPromise, lastFetchStatus, lastSuccessfulFetchTimestampMillis, activeConfig;
            return _tslib.__generator(this, function(_a1) {
                switch(_a1.label){
                    case 0:
                        lastFetchStatusPromise = this.storage.getLastFetchStatus();
                        lastSuccessfulFetchTimestampMillisPromise = this.storage.getLastSuccessfulFetchTimestampMillis();
                        activeConfigPromise = this.storage.getActiveConfig();
                        return [
                            4,
                            lastFetchStatusPromise
                        ];
                    case 1:
                        lastFetchStatus = _a1.sent();
                        if (lastFetchStatus) this.lastFetchStatus = lastFetchStatus;
                        return [
                            4,
                            lastSuccessfulFetchTimestampMillisPromise
                        ];
                    case 2:
                        lastSuccessfulFetchTimestampMillis = _a1.sent();
                        if (lastSuccessfulFetchTimestampMillis) this.lastSuccessfulFetchTimestampMillis = lastSuccessfulFetchTimestampMillis;
                        return [
                            4,
                            activeConfigPromise
                        ];
                    case 3:
                        activeConfig = _a1.sent();
                        if (activeConfig) this.activeConfig = activeConfig;
                        return [
                            2
                        ];
                }
            });
        });
    };
    /**
     * Write-through setters
     */ StorageCache1.prototype.setLastFetchStatus = function(status) {
        this.lastFetchStatus = status;
        return this.storage.setLastFetchStatus(status);
    };
    StorageCache1.prototype.setLastSuccessfulFetchTimestampMillis = function(timestampMillis) {
        this.lastSuccessfulFetchTimestampMillis = timestampMillis;
        return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);
    };
    StorageCache1.prototype.setActiveConfig = function(activeConfig) {
        this.activeConfig = activeConfig;
        return this.storage.setActiveConfig(activeConfig);
    };
    return StorageCache1;
}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Supports waiting on a backoff by:
 *
 * <ul>
 *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>
 *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>
 *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled
 *       request appear the same.</li>
 * </ul>
 *
 * <p>Visible for testing.
 */ function setAbortableTimeout(signal, throttleEndTimeMillis) {
    return new Promise(function(resolve, reject) {
        // Derives backoff from given end time, normalizing negative numbers to zero.
        var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);
        var timeout = setTimeout(resolve, backoffMillis);
        // Adds listener, rather than sets onabort, because signal is a shared object.
        signal.addEventListener(function() {
            clearTimeout(timeout);
            // If the request completes before this timeout, the rejection has no effect.
            reject(ERROR_FACTORY.create("fetch-throttle"/* FETCH_THROTTLE */ , {
                throttleEndTimeMillis: throttleEndTimeMillis
            }));
        });
    });
}
/**
 * Returns true if the {@link Error} indicates a fetch request may succeed later.
 */ function isRetriableError(e) {
    if (!(e instanceof _util.FirebaseError) || !e.customData) return false;
    // Uses string index defined by ErrorData, which FirebaseError implements.
    var httpStatus = Number(e.customData['httpStatus']);
    return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;
}
/**
 * Decorates a Client with retry logic.
 *
 * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache
 * responses (because the SDK has no use for error responses).
 */ var RetryingClient = function() {
    function RetryingClient1(client, storage) {
        this.client = client;
        this.storage = storage;
    }
    RetryingClient1.prototype.fetch = function(request) {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var throttleMetadata;
            return _tslib.__generator(this, function(_a1) {
                switch(_a1.label){
                    case 0:
                        return [
                            4,
                            this.storage.getThrottleMetadata()
                        ];
                    case 1:
                        throttleMetadata = _a1.sent() || {
                            backoffCount: 0,
                            throttleEndTimeMillis: Date.now()
                        };
                        return [
                            2,
                            this.attemptFetch(request, throttleMetadata)
                        ];
                }
            });
        });
    };
    /**
     * A recursive helper for attempting a fetch request repeatedly.
     *
     * @throws any non-retriable errors.
     */ RetryingClient1.prototype.attemptFetch = function(request, _a1) {
        var throttleEndTimeMillis = _a1.throttleEndTimeMillis, backoffCount = _a1.backoffCount;
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var response, e_1, throttleMetadata;
            return _tslib.__generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        // Starts with a (potentially zero) timeout to support resumption from stored state.
                        // Ensures the throttle end time is honored if the last attempt timed out.
                        // Note the SDK will never make a request if the fetch timeout expires at this point.
                        return [
                            4,
                            setAbortableTimeout(request.signal, throttleEndTimeMillis)
                        ];
                    case 1:
                        // Starts with a (potentially zero) timeout to support resumption from stored state.
                        // Ensures the throttle end time is honored if the last attempt timed out.
                        // Note the SDK will never make a request if the fetch timeout expires at this point.
                        _b.sent();
                        _b.label = 2;
                    case 2:
                        _b.trys.push([
                            2,
                            5,
                            ,
                            7
                        ]);
                        return [
                            4,
                            this.client.fetch(request)
                        ];
                    case 3:
                        response = _b.sent();
                        // Note the SDK only clears throttle state if response is success or non-retriable.
                        return [
                            4,
                            this.storage.deleteThrottleMetadata()
                        ];
                    case 4:
                        // Note the SDK only clears throttle state if response is success or non-retriable.
                        _b.sent();
                        return [
                            2,
                            response
                        ];
                    case 5:
                        e_1 = _b.sent();
                        if (!isRetriableError(e_1)) throw e_1;
                        throttleMetadata = {
                            throttleEndTimeMillis: Date.now() + _util.calculateBackoffMillis(backoffCount),
                            backoffCount: backoffCount + 1
                        };
                        // Persists state.
                        return [
                            4,
                            this.storage.setThrottleMetadata(throttleMetadata)
                        ];
                    case 6:
                        // Persists state.
                        _b.sent();
                        return [
                            2,
                            this.attemptFetch(request, throttleMetadata)
                        ];
                    case 7:
                        return [
                            2
                        ];
                }
            });
        });
    };
    return RetryingClient1;
}();
var name = "@firebase/remote-config";
var version = "0.1.43";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function registerRemoteConfig(firebaseInstance) {
    firebaseInstance.INTERNAL.registerComponent(new _component.Component('remoteConfig', remoteConfigFactory, "PUBLIC"/* PUBLIC */ ).setMultipleInstances(true));
    firebaseInstance.registerVersion(name, version);
    function remoteConfigFactory(container, _a1) {
        var namespace = _a1.instanceIdentifier;
        /* Dependencies */ // getImmediate for FirebaseApp will always succeed
        var app = container.getProvider('app').getImmediate();
        // The following call will always succeed because rc has `import '@firebase/installations'`
        var installations = container.getProvider('installations').getImmediate();
        // Guards against the SDK being used in non-browser environments.
        if (typeof window === 'undefined') throw ERROR_FACTORY.create("registration-window"/* REGISTRATION_WINDOW */ );
        // Normalizes optional inputs.
        var _b = app.options, projectId = _b.projectId, apiKey = _b.apiKey, appId = _b.appId;
        if (!projectId) throw ERROR_FACTORY.create("registration-project-id"/* REGISTRATION_PROJECT_ID */ );
        if (!apiKey) throw ERROR_FACTORY.create("registration-api-key"/* REGISTRATION_API_KEY */ );
        if (!appId) throw ERROR_FACTORY.create("registration-app-id"/* REGISTRATION_APP_ID */ );
        namespace = namespace || 'firebase';
        var storage = new Storage1(appId, app.name, namespace);
        var storageCache = new StorageCache(storage);
        var logger = new _logger.Logger(name);
        // Sets ERROR as the default log level.
        // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.
        logger.logLevel = _logger.LogLevel.ERROR;
        var restClient = new RestClient(installations, // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.
        firebaseInstance.SDK_VERSION, namespace, projectId, apiKey, appId);
        var retryingClient = new RetryingClient(restClient, storage);
        var cachingClient = new CachingClient(retryingClient, storage, storageCache, logger);
        var remoteConfigInstance = new RemoteConfig(app, cachingClient, storageCache, storage, logger);
        // Starts warming cache.
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        remoteConfigInstance.ensureInitialized();
        return remoteConfigInstance;
    }
}
registerRemoteConfig(_appDefault.default);

},{"@firebase/app":"6IUA5","@firebase/installations":"7rMif","tslib":"4rd38","@firebase/util":"3bR6t","@firebase/logger":"5PuYX","@firebase/component":"5qT0x","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"5QDSN":[function(require,module,exports) {
'use strict';
var firebase = require('@firebase/app');
var component = require('@firebase/component');
var tslib = require('tslib');
var util = require('@firebase/util');
var logger$1 = require('@firebase/logger');
function _interopDefaultLegacy(e) {
    return e && typeof e === 'object' && 'default' in e ? e : {
        'default': e
    };
}
var firebase__default = /*#__PURE__*/ _interopDefaultLegacy(firebase);
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _a;
var ERRORS = (_a = {
}, _a["already-activated"] = "You are trying to activate AppCheck for FirebaseApp {$appName}, while it is already activated. AppCheck can only be activated once.", _a["use-before-activation"] = "AppCheck is being used before activate() is called for FirebaseApp {$appName}. Please make sure you call activate() before instantiating other Firebase services.", _a["fetch-network-error"] = "Fetch failed to connect to a network. Check Internet connection. Original error: {$originalErrorMessage}.", _a["fetch-parse-error"] = "Fetch client could not parse response. Original error: {$originalErrorMessage}.", _a["fetch-status-error"] = 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.', _a["storage-open"] = 'Error thrown when opening storage. Original error: {$originalErrorMessage}.', _a["storage-get"] = 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.', _a["storage-set"] = 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.', _a["recaptcha-error"] = 'ReCAPTCHA error.', _a);
var ERROR_FACTORY = new util.ErrorFactory('appCheck', 'AppCheck', ERRORS);
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var APP_CHECK_STATES = new Map();
var DEFAULT_STATE = {
    activated: false,
    tokenObservers: []
};
var DEBUG_STATE = {
    enabled: false
};
function getState(app) {
    return APP_CHECK_STATES.get(app) || DEFAULT_STATE;
}
function setState(app, state) {
    APP_CHECK_STATES.set(app, state);
}
function getDebugState() {
    return DEBUG_STATE;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var BASE_ENDPOINT = 'https://content-firebaseappcheck.googleapis.com/v1beta';
var EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaToken';
var EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';
var TOKEN_REFRESH_TIME = {
    /**
     * The offset time before token natural expiration to run the refresh.
     * This is currently 5 minutes.
     */ OFFSET_DURATION: 300000,
    /**
     * This is the first retrial wait after an error. This is currently
     * 30 seconds.
     */ RETRIAL_MIN_WAIT: 30000,
    /**
     * This is the maximum retrial wait, currently 16 minutes.
     */ RETRIAL_MAX_WAIT: 960000
};
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Port from auth proactiverefresh.js
 *
 */ // TODO: move it to @firebase/util?
// TODO: allow to config whether refresh should happen in the background
var Refresher = function() {
    function Refresher1(operation, retryPolicy, getWaitDuration, lowerBound, upperBound) {
        this.operation = operation;
        this.retryPolicy = retryPolicy;
        this.getWaitDuration = getWaitDuration;
        this.lowerBound = lowerBound;
        this.upperBound = upperBound;
        this.pending = null;
        this.nextErrorWaitInterval = lowerBound;
        if (lowerBound > upperBound) throw new Error('Proactive refresh lower bound greater than upper bound!');
    }
    Refresher1.prototype.start = function() {
        this.nextErrorWaitInterval = this.lowerBound;
        this.process(true).catch(function() {
        /* we don't care about the result */ });
    };
    Refresher1.prototype.stop = function() {
        if (this.pending) {
            this.pending.reject('cancelled');
            this.pending = null;
        }
    };
    Refresher1.prototype.isRunning = function() {
        return !!this.pending;
    };
    Refresher1.prototype.process = function(hasSucceeded) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var error_1;
            return tslib.__generator(this, function(_a1) {
                switch(_a1.label){
                    case 0:
                        this.stop();
                        _a1.label = 1;
                    case 1:
                        _a1.trys.push([
                            1,
                            6,
                            ,
                            7
                        ]);
                        this.pending = new util.Deferred();
                        return [
                            4,
                            sleep(this.getNextRun(hasSucceeded))
                        ];
                    case 2:
                        _a1.sent();
                        // Why do we resolve a promise, then immediate wait for it?
                        // We do it to make the promise chain cancellable.
                        // We can call stop() which rejects the promise before the following line execute, which makes
                        // the code jump to the catch block.
                        // TODO: unit test this
                        this.pending.resolve();
                        return [
                            4,
                            this.pending.promise
                        ];
                    case 3:
                        _a1.sent();
                        this.pending = new util.Deferred();
                        return [
                            4,
                            this.operation()
                        ];
                    case 4:
                        _a1.sent();
                        this.pending.resolve();
                        return [
                            4,
                            this.pending.promise
                        ];
                    case 5:
                        _a1.sent();
                        this.process(true).catch(function() {
                        /* we don't care about the result */ });
                        return [
                            3,
                            7
                        ];
                    case 6:
                        error_1 = _a1.sent();
                        if (this.retryPolicy(error_1)) this.process(false).catch(function() {
                        /* we don't care about the result */ });
                        else this.stop();
                        return [
                            3,
                            7
                        ];
                    case 7:
                        return [
                            2
                        ];
                }
            });
        });
    };
    Refresher1.prototype.getNextRun = function(hasSucceeded) {
        if (hasSucceeded) {
            // If last operation succeeded, reset next error wait interval and return
            // the default wait duration.
            this.nextErrorWaitInterval = this.lowerBound;
            // Return typical wait duration interval after a successful operation.
            return this.getWaitDuration();
        } else {
            // Get next error wait interval.
            var currentErrorWaitInterval = this.nextErrorWaitInterval;
            // Double interval for next consecutive error.
            this.nextErrorWaitInterval *= 2;
            // Make sure next wait interval does not exceed the maximum upper bound.
            if (this.nextErrorWaitInterval > this.upperBound) this.nextErrorWaitInterval = this.upperBound;
            return currentErrorWaitInterval;
        }
    };
    return Refresher1;
}();
function sleep(ms) {
    return new Promise(function(resolve) {
        setTimeout(resolve, ms);
    });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function getRecaptcha() {
    return self.grecaptcha;
}
function ensureActivated(app) {
    if (!getState(app).activated) throw ERROR_FACTORY.create("use-before-activation"/* USE_BEFORE_ACTIVATION */ , {
        appName: app.name
    });
}
/**
 * Copied from https://stackoverflow.com/a/2117523
 */ function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random() * 16 | 0, v = c === 'x' ? r : r & 3 | 8;
        return v.toString(16);
    });
}
/**
 * Stringify and base64 encode token error data.
 *
 * @param tokenError Error data, currently hardcoded.
 */ function formatDummyToken(tokenErrorData) {
    return util.base64.encodeString(JSON.stringify(tokenErrorData), /* webSafe= */ false);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function exchangeToken(_a1, platformLoggerProvider) {
    var url = _a1.url, body = _a1.body;
    return tslib.__awaiter(this, void 0, void 0, function() {
        var headers, platformLogger, options, response, originalError_1, responseBody, originalError_2, match, timeToLiveAsNumber, now;
        return tslib.__generator(this, function(_b) {
            switch(_b.label){
                case 0:
                    headers = {
                        'Content-Type': 'application/json'
                    };
                    platformLogger = platformLoggerProvider.getImmediate({
                        optional: true
                    });
                    if (platformLogger) headers['X-Firebase-Client'] = platformLogger.getPlatformInfoString();
                    options = {
                        method: 'POST',
                        body: JSON.stringify(body),
                        headers: headers
                    };
                    _b.label = 1;
                case 1:
                    _b.trys.push([
                        1,
                        3,
                        ,
                        4
                    ]);
                    return [
                        4,
                        fetch(url, options)
                    ];
                case 2:
                    response = _b.sent();
                    return [
                        3,
                        4
                    ];
                case 3:
                    originalError_1 = _b.sent();
                    throw ERROR_FACTORY.create("fetch-network-error"/* FETCH_NETWORK_ERROR */ , {
                        originalErrorMessage: originalError_1.message
                    });
                case 4:
                    if (response.status !== 200) throw ERROR_FACTORY.create("fetch-status-error"/* FETCH_STATUS_ERROR */ , {
                        httpStatus: response.status
                    });
                    _b.label = 5;
                case 5:
                    _b.trys.push([
                        5,
                        7,
                        ,
                        8
                    ]);
                    return [
                        4,
                        response.json()
                    ];
                case 6:
                    // JSON parsing throws SyntaxError if the response body isn't a JSON string.
                    responseBody = _b.sent();
                    return [
                        3,
                        8
                    ];
                case 7:
                    originalError_2 = _b.sent();
                    throw ERROR_FACTORY.create("fetch-parse-error"/* FETCH_PARSE_ERROR */ , {
                        originalErrorMessage: originalError_2.message
                    });
                case 8:
                    match = responseBody.ttl.match(/^([\d.]+)(s)$/);
                    if (!match || !match[2] || isNaN(Number(match[1]))) throw ERROR_FACTORY.create("fetch-parse-error"/* FETCH_PARSE_ERROR */ , {
                        originalErrorMessage: "ttl field (timeToLive) is not in standard Protobuf Duration " + ("format: " + responseBody.ttl)
                    });
                    timeToLiveAsNumber = Number(match[1]) * 1000;
                    now = Date.now();
                    return [
                        2,
                        {
                            token: responseBody.attestationToken,
                            expireTimeMillis: now + timeToLiveAsNumber,
                            issuedAtTimeMillis: now
                        }
                    ];
            }
        });
    });
}
function getExchangeRecaptchaTokenRequest(app, reCAPTCHAToken) {
    var _a1 = app.options, projectId = _a1.projectId, appId = _a1.appId, apiKey = _a1.apiKey;
    return {
        url: BASE_ENDPOINT + "/projects/" + projectId + "/apps/" + appId + ":" + EXCHANGE_RECAPTCHA_TOKEN_METHOD + "?key=" + apiKey,
        body: {
            // eslint-disable-next-line
            recaptcha_token: reCAPTCHAToken
        }
    };
}
function getExchangeDebugTokenRequest(app, debugToken) {
    var _a1 = app.options, projectId = _a1.projectId, appId = _a1.appId, apiKey = _a1.apiKey;
    return {
        url: BASE_ENDPOINT + "/projects/" + projectId + "/apps/" + appId + ":" + EXCHANGE_DEBUG_TOKEN_METHOD + "?key=" + apiKey,
        body: {
            // eslint-disable-next-line
            debug_token: debugToken
        }
    };
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var DB_NAME = 'firebase-app-check-database';
var DB_VERSION = 1;
var STORE_NAME = 'firebase-app-check-store';
var DEBUG_TOKEN_KEY = 'debug-token';
var dbPromise = null;
function getDBPromise() {
    if (dbPromise) return dbPromise;
    dbPromise = new Promise(function(resolve, reject) {
        try {
            var request = indexedDB.open(DB_NAME, DB_VERSION);
            request.onsuccess = function(event) {
                resolve(event.target.result);
            };
            request.onerror = function(event) {
                var _a1;
                reject(ERROR_FACTORY.create("storage-open"/* STORAGE_OPEN */ , {
                    originalErrorMessage: (_a1 = event.target.error) === null || _a1 === void 0 ? void 0 : _a1.message
                }));
            };
            request.onupgradeneeded = function(event) {
                var db = event.target.result;
                // We don't use 'break' in this switch statement, the fall-through
                // behavior is what we want, because if there are multiple versions between
                // the old version and the current version, we want ALL the migrations
                // that correspond to those versions to run, not only the last one.
                // eslint-disable-next-line default-case
                switch(event.oldVersion){
                    case 0:
                        db.createObjectStore(STORE_NAME, {
                            keyPath: 'compositeKey'
                        });
                }
            };
        } catch (e) {
            reject(ERROR_FACTORY.create("storage-open"/* STORAGE_OPEN */ , {
                originalErrorMessage: e.message
            }));
        }
    });
    return dbPromise;
}
function readTokenFromIndexedDB(app) {
    return read(computeKey(app));
}
function writeTokenToIndexedDB(app, token) {
    return write(computeKey(app), token);
}
function writeDebugTokenToIndexedDB(token) {
    return write(DEBUG_TOKEN_KEY, token);
}
function readDebugTokenFromIndexedDB() {
    return read(DEBUG_TOKEN_KEY);
}
function write(key, value) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var db, transaction, store, request;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    return [
                        4,
                        getDBPromise()
                    ];
                case 1:
                    db = _a1.sent();
                    transaction = db.transaction(STORE_NAME, 'readwrite');
                    store = transaction.objectStore(STORE_NAME);
                    request = store.put({
                        compositeKey: key,
                        value: value
                    });
                    return [
                        2,
                        new Promise(function(resolve, reject) {
                            request.onsuccess = function(_event) {
                                resolve();
                            };
                            transaction.onerror = function(event) {
                                var _a2;
                                reject(ERROR_FACTORY.create("storage-set"/* STORAGE_WRITE */ , {
                                    originalErrorMessage: (_a2 = event.target.error) === null || _a2 === void 0 ? void 0 : _a2.message
                                }));
                            };
                        })
                    ];
            }
        });
    });
}
function read(key) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var db, transaction, store, request;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    return [
                        4,
                        getDBPromise()
                    ];
                case 1:
                    db = _a1.sent();
                    transaction = db.transaction(STORE_NAME, 'readonly');
                    store = transaction.objectStore(STORE_NAME);
                    request = store.get(key);
                    return [
                        2,
                        new Promise(function(resolve, reject) {
                            request.onsuccess = function(event) {
                                var result = event.target.result;
                                if (result) resolve(result.value);
                                else resolve(undefined);
                            };
                            transaction.onerror = function(event) {
                                var _a2;
                                reject(ERROR_FACTORY.create("storage-get"/* STORAGE_GET */ , {
                                    originalErrorMessage: (_a2 = event.target.error) === null || _a2 === void 0 ? void 0 : _a2.message
                                }));
                            };
                        })
                    ];
            }
        });
    });
}
function computeKey(app) {
    return app.options.appId + "-" + app.name;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var logger = new logger$1.Logger('@firebase/app-check');
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Always resolves. In case of an error reading from indexeddb, resolve with undefined
 */ function readTokenFromStorage(app) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var token, e_1;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    if (!util.isIndexedDBAvailable()) return [
                        3,
                        5
                    ];
                    token = undefined;
                    _a1.label = 1;
                case 1:
                    _a1.trys.push([
                        1,
                        3,
                        ,
                        4
                    ]);
                    return [
                        4,
                        readTokenFromIndexedDB(app)
                    ];
                case 2:
                    token = _a1.sent();
                    return [
                        3,
                        4
                    ];
                case 3:
                    e_1 = _a1.sent();
                    // swallow the error and return undefined
                    logger.warn("Failed to read token from indexeddb. Error: " + e_1);
                    return [
                        3,
                        4
                    ];
                case 4:
                    return [
                        2,
                        token
                    ];
                case 5:
                    return [
                        2,
                        undefined
                    ];
            }
        });
    });
}
/**
 * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise
 */ function writeTokenToStorage(app, token) {
    if (util.isIndexedDBAvailable()) return writeTokenToIndexedDB(app, token).catch(function(e) {
        // swallow the error and resolve the promise
        logger.warn("Failed to write token to indexeddb. Error: " + e);
    });
    return Promise.resolve();
}
function readOrCreateDebugTokenFromStorage() {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var existingDebugToken, newToken;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    existingDebugToken = undefined;
                    _a1.label = 1;
                case 1:
                    _a1.trys.push([
                        1,
                        3,
                        ,
                        4
                    ]);
                    return [
                        4,
                        readDebugTokenFromIndexedDB()
                    ];
                case 2:
                    existingDebugToken = _a1.sent();
                    return [
                        3,
                        4
                    ];
                case 3:
                    _a1.sent();
                    return [
                        3,
                        4
                    ];
                case 4:
                    if (!existingDebugToken) {
                        newToken = uuidv4();
                        // We don't need to block on writing to indexeddb
                        // In case persistence failed, a new debug token will be generated everytime the page is refreshed.
                        // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.
                        // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.
                        // You should switch to a different browser that supports indexeddb
                        writeDebugTokenToIndexedDB(newToken).catch(function(e) {
                            return logger.warn("Failed to persist debug token to indexeddb. Error: " + e);
                        });
                        // Not using logger because I don't think we ever want this accidentally hidden?
                        console.log("AppCheck debug token: " + newToken + ". You will need to whitelist it in the Firebase console for it to work");
                        return [
                            2,
                            newToken
                        ];
                    } else return [
                        2,
                        existingDebugToken
                    ];
            }
        });
    });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function isDebugMode() {
    var debugState = getDebugState();
    return debugState.enabled;
}
function getDebugToken() {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var state;
        return tslib.__generator(this, function(_a1) {
            state = getDebugState();
            if (state.enabled && state.token) return [
                2,
                state.token.promise
            ];
            else // should not happen!
            throw Error("\n            Can't get debug token in production mode.\n        ");
        });
    });
}
function initializeDebugMode() {
    var globals = util.getGlobal();
    if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' && globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true) return;
    var debugState = getDebugState();
    debugState.enabled = true;
    var deferredToken = new util.Deferred();
    debugState.token = deferredToken;
    if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);
    else deferredToken.resolve(readOrCreateDebugTokenFromStorage());
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Initial hardcoded value agreed upon across platforms for initial launch.
// Format left open for possible dynamic error values and other fields in the future.
var defaultTokenErrorData = {
    error: 'UNKNOWN_ERROR'
};
/**
 * This function will always resolve.
 * The result will contain an error field if there is any error.
 * In case there is an error, the token field in the result will be populated with a dummy value
 */ function getToken$2(app, platformLoggerProvider, forceRefresh) {
    if (forceRefresh === void 0) forceRefresh = false;
    return tslib.__awaiter(this, void 0, void 0, function() {
        var state, token, error, cachedToken, tokenFromDebugExchange, _a1, _b, _c, e_1, interopTokenResult;
        return tslib.__generator(this, function(_d) {
            switch(_d.label){
                case 0:
                    ensureActivated(app);
                    state = getState(app);
                    token = state.token;
                    error = undefined;
                    if (!!token) return [
                        3,
                        2
                    ];
                    return [
                        4,
                        state.cachedTokenPromise
                    ];
                case 1:
                    cachedToken = _d.sent();
                    if (cachedToken && isValid(cachedToken)) {
                        token = cachedToken;
                        setState(app, tslib.__assign(tslib.__assign({
                        }, state), {
                            token: token
                        }));
                        // notify all listeners with the cached token
                        notifyTokenListeners(app, {
                            token: token.token
                        });
                    }
                    _d.label = 2;
                case 2:
                    // Return the cached token (from either memory or indexedDB) if it's valid
                    if (!forceRefresh && token && isValid(token)) return [
                        2,
                        {
                            token: token.token
                        }
                    ];
                    if (!isDebugMode()) return [
                        3,
                        6
                    ];
                    _a1 = exchangeToken;
                    _b = getExchangeDebugTokenRequest;
                    _c = [
                        app
                    ];
                    return [
                        4,
                        getDebugToken()
                    ];
                case 3:
                    return [
                        4,
                        _a1.apply(void 0, [
                            _b.apply(void 0, _c.concat([
                                _d.sent()
                            ])),
                            platformLoggerProvider
                        ])
                    ];
                case 4:
                    tokenFromDebugExchange = _d.sent();
                    // Write debug token to indexedDB.
                    return [
                        4,
                        writeTokenToStorage(app, tokenFromDebugExchange)
                    ];
                case 5:
                    // Write debug token to indexedDB.
                    _d.sent();
                    // Write debug token to state.
                    setState(app, tslib.__assign(tslib.__assign({
                    }, state), {
                        token: tokenFromDebugExchange
                    }));
                    return [
                        2,
                        {
                            token: tokenFromDebugExchange.token
                        }
                    ];
                case 6:
                    _d.trys.push([
                        6,
                        8,
                        ,
                        9
                    ]);
                    return [
                        4,
                        state.provider.getToken()
                    ];
                case 7:
                    // state.provider is populated in initializeAppCheck()
                    // ensureActivated() at the top of this function checks that
                    // initializeAppCheck() has been called.
                    token = _d.sent();
                    return [
                        3,
                        9
                    ];
                case 8:
                    e_1 = _d.sent();
                    // `getToken()` should never throw, but logging error text to console will aid debugging.
                    logger.error(e_1);
                    error = e_1;
                    return [
                        3,
                        9
                    ];
                case 9:
                    if (!!token) return [
                        3,
                        10
                    ];
                    // if token is undefined, there must be an error.
                    // we return a dummy token along with the error
                    interopTokenResult = makeDummyTokenResult(error);
                    return [
                        3,
                        12
                    ];
                case 10:
                    interopTokenResult = {
                        token: token.token
                    };
                    // write the new token to the memory state as well as the persistent storage.
                    // Only do it if we got a valid new token
                    setState(app, tslib.__assign(tslib.__assign({
                    }, state), {
                        token: token
                    }));
                    return [
                        4,
                        writeTokenToStorage(app, token)
                    ];
                case 11:
                    _d.sent();
                    _d.label = 12;
                case 12:
                    notifyTokenListeners(app, interopTokenResult);
                    return [
                        2,
                        interopTokenResult
                    ];
            }
        });
    });
}
function addTokenListener(app, platformLoggerProvider, type, listener, onError) {
    var state = getState(app);
    var tokenListener = {
        next: listener,
        error: onError,
        type: type
    };
    var newState = tslib.__assign(tslib.__assign({
    }, state), {
        tokenObservers: tslib.__spreadArray(tslib.__spreadArray([], state.tokenObservers), [
            tokenListener
        ])
    });
    /**
     * Invoke the listener with the valid token, then start the token refresher
     */ if (!newState.tokenRefresher) {
        var tokenRefresher = createTokenRefresher(app, platformLoggerProvider);
        newState.tokenRefresher = tokenRefresher;
    }
    // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`
    // is not true.
    if (!newState.tokenRefresher.isRunning() && state.isTokenAutoRefreshEnabled) newState.tokenRefresher.start();
    // Invoke the listener async immediately if there is a valid token
    // in memory.
    if (state.token && isValid(state.token)) {
        var validToken_1 = state.token;
        Promise.resolve().then(function() {
            return listener({
                token: validToken_1.token
            });
        }).catch(function() {
        /** Ignore errors in listeners. */ });
    } else if (state.token == null) state.cachedTokenPromise.then(function(cachedToken) {
        if (cachedToken && isValid(cachedToken)) listener({
            token: cachedToken.token
        });
    }).catch(function() {
    /** Ignore errors in listeners. */ });
    setState(app, newState);
}
function removeTokenListener(app, listener) {
    var state = getState(app);
    var newObservers = state.tokenObservers.filter(function(tokenObserver) {
        return tokenObserver.next !== listener;
    });
    if (newObservers.length === 0 && state.tokenRefresher && state.tokenRefresher.isRunning()) state.tokenRefresher.stop();
    setState(app, tslib.__assign(tslib.__assign({
    }, state), {
        tokenObservers: newObservers
    }));
}
function createTokenRefresher(app, platformLoggerProvider) {
    var _this = this;
    return new Refresher(// Keep in mind when this fails for any reason other than the ones
    // for which we should retry, it will effectively stop the proactive refresh.
    function() {
        return tslib.__awaiter(_this, void 0, void 0, function() {
            var state, result;
            return tslib.__generator(this, function(_a1) {
                switch(_a1.label){
                    case 0:
                        state = getState(app);
                        if (!!state.token) return [
                            3,
                            2
                        ];
                        return [
                            4,
                            getToken$2(app, platformLoggerProvider)
                        ];
                    case 1:
                        result = _a1.sent();
                        return [
                            3,
                            4
                        ];
                    case 2:
                        return [
                            4,
                            getToken$2(app, platformLoggerProvider, true)
                        ];
                    case 3:
                        result = _a1.sent();
                        _a1.label = 4;
                    case 4:
                        // getToken() always resolves. In case the result has an error field defined, it means the operation failed, and we should retry.
                        if (result.error) throw result.error;
                        return [
                            2
                        ];
                }
            });
        });
    }, function() {
        // TODO: when should we retry?
        return true;
    }, function() {
        var state = getState(app);
        if (state.token) {
            // issuedAtTime + (50% * total TTL) + 5 minutes
            var nextRefreshTimeMillis = state.token.issuedAtTimeMillis + (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) * 0.5 + 300000;
            // Do not allow refresh time to be past (expireTime - 5 minutes)
            var latestAllowableRefresh = state.token.expireTimeMillis - 300000;
            nextRefreshTimeMillis = Math.min(nextRefreshTimeMillis, latestAllowableRefresh);
            return Math.max(0, nextRefreshTimeMillis - Date.now());
        } else return 0;
    }, TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT, TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT);
}
function notifyTokenListeners(app, token) {
    var observers = getState(app).tokenObservers;
    for(var _i = 0, observers_1 = observers; _i < observers_1.length; _i++){
        var observer = observers_1[_i];
        try {
            if (observer.type === "EXTERNAL" && token.error != null) // If this listener was added by a 3P call, send any token error to
            // the supplied error handler. A 3P observer always has an error
            // handler.
            observer.error(token.error);
            else // If the token has no error field, always return the token.
            // If this is a 2P listener, return the token, whether or not it
            // has an error field.
            observer.next(token);
        } catch (ignored) {
        // Errors in the listener function itself are always ignored.
        }
    }
}
function isValid(token) {
    return token.expireTimeMillis - Date.now() > 0;
}
function makeDummyTokenResult(error) {
    return {
        token: formatDummyToken(defaultTokenErrorData),
        error: error
    };
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';
function initialize(app, siteKey) {
    var state = getState(app);
    var initialized = new util.Deferred();
    setState(app, tslib.__assign(tslib.__assign({
    }, state), {
        reCAPTCHAState: {
            initialized: initialized
        }
    }));
    var divId = "fire_app_check_" + app.name;
    var invisibleDiv = document.createElement('div');
    invisibleDiv.id = divId;
    invisibleDiv.style.display = 'none';
    document.body.appendChild(invisibleDiv);
    var grecaptcha = getRecaptcha();
    if (!grecaptcha) loadReCAPTCHAScript(function() {
        var grecaptcha1 = getRecaptcha();
        if (!grecaptcha1) // it shouldn't happen.
        throw new Error('no recaptcha');
        grecaptcha1.ready(function() {
            // Invisible widgets allow us to set a different siteKey for each widget, so we use them to support multiple apps
            renderInvisibleWidget(app, siteKey, grecaptcha1, divId);
            initialized.resolve(grecaptcha1);
        });
    });
    else grecaptcha.ready(function() {
        renderInvisibleWidget(app, siteKey, grecaptcha, divId);
        initialized.resolve(grecaptcha);
    });
    return initialized.promise;
}
function getToken$1(app) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var reCAPTCHAState, recaptcha;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    ensureActivated(app);
                    reCAPTCHAState = getState(app).reCAPTCHAState;
                    return [
                        4,
                        reCAPTCHAState.initialized.promise
                    ];
                case 1:
                    recaptcha = _a1.sent();
                    return [
                        2,
                        new Promise(function(resolve, _reject) {
                            // Updated after initialization is complete.
                            var reCAPTCHAState1 = getState(app).reCAPTCHAState;
                            recaptcha.ready(function() {
                                resolve(// widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.
                                recaptcha.execute(reCAPTCHAState1.widgetId, {
                                    action: 'fire_app_check'
                                }));
                            });
                        })
                    ];
            }
        });
    });
}
/**
 *
 * @param app
 * @param container - Id of a HTML element.
 */ function renderInvisibleWidget(app, siteKey, grecaptcha, container) {
    var widgetId = grecaptcha.render(container, {
        sitekey: siteKey,
        size: 'invisible'
    });
    var state = getState(app);
    setState(app, tslib.__assign(tslib.__assign({
    }, state), {
        reCAPTCHAState: tslib.__assign(tslib.__assign({
        }, state.reCAPTCHAState), {
            widgetId: widgetId
        })
    }));
}
function loadReCAPTCHAScript(onload) {
    var script = document.createElement('script');
    script.src = "" + RECAPTCHA_URL;
    script.onload = onload;
    document.head.appendChild(script);
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * App Check provider that can obtain a reCAPTCHA V3 token and exchange it
 * for an App Check token.
 */ var ReCaptchaV3Provider = function() {
    /**
     * Create a ReCaptchaV3Provider instance.
     * @param siteKey - ReCAPTCHA V3 siteKey.
     */ function ReCaptchaV3Provider1(_siteKey) {
        this._siteKey = _siteKey;
    }
    /**
     * Returns an App Check token.
     * @internal
     */ ReCaptchaV3Provider1.prototype.getToken = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var attestedClaimsToken;
            return tslib.__generator(this, function(_a1) {
                switch(_a1.label){
                    case 0:
                        if (!this._app || !this._platformLoggerProvider) // This should only occur if user has not called initializeAppCheck().
                        // We don't have an appName to provide if so.
                        // This should already be caught in the top level `getToken()` function.
                        throw ERROR_FACTORY.create("use-before-activation"/* USE_BEFORE_ACTIVATION */ , {
                            appName: ''
                        });
                        _a1.label = 1;
                    case 1:
                        _a1.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4,
                            getToken$1(this._app)
                        ];
                    case 2:
                        attestedClaimsToken = _a1.sent();
                        return [
                            3,
                            4
                        ];
                    case 3:
                        _a1.sent();
                        // reCaptcha.execute() throws null which is not very descriptive.
                        throw ERROR_FACTORY.create("recaptcha-error"/* RECAPTCHA_ERROR */ );
                    case 4:
                        return [
                            2,
                            exchangeToken(getExchangeRecaptchaTokenRequest(this._app, attestedClaimsToken), this._platformLoggerProvider)
                        ];
                }
            });
        });
    };
    ReCaptchaV3Provider1.prototype.initialize = function(app, platformLoggerProvider) {
        this._app = app;
        this._platformLoggerProvider = platformLoggerProvider;
        initialize(app, this._siteKey).catch(function() {
        /* we don't care about the initialization result */ });
    };
    return ReCaptchaV3Provider1;
}();
/**
 * Custom provider class.
 */ var CustomProvider = function() {
    function CustomProvider1(_customProviderOptions) {
        this._customProviderOptions = _customProviderOptions;
    }
    /**
     * @internal
     */ CustomProvider1.prototype.getToken = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var customToken, issuedAtTimeSeconds, issuedAtTimeMillis;
            return tslib.__generator(this, function(_a1) {
                switch(_a1.label){
                    case 0:
                        if (!this._app) // This should only occur if user has not called initializeAppCheck().
                        // We don't have an appName to provide if so.
                        // This should already be caught in the top level `getToken()` function.
                        throw ERROR_FACTORY.create("use-before-activation"/* USE_BEFORE_ACTIVATION */ , {
                            appName: ''
                        });
                        return [
                            4,
                            this._customProviderOptions.getToken()
                        ];
                    case 1:
                        customToken = _a1.sent();
                        issuedAtTimeSeconds = util.issuedAtTime(customToken.token);
                        issuedAtTimeMillis = issuedAtTimeSeconds !== null && issuedAtTimeSeconds < Date.now() && issuedAtTimeSeconds > 0 ? issuedAtTimeSeconds * 1000 : Date.now();
                        return [
                            2,
                            tslib.__assign(tslib.__assign({
                            }, customToken), {
                                issuedAtTimeMillis: issuedAtTimeMillis
                            })
                        ];
                }
            });
        });
    };
    /**
     * @internal
     */ CustomProvider1.prototype.initialize = function(app) {
        this._app = app;
    };
    return CustomProvider1;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 *
 * @param app
 * @param siteKeyOrProvider - optional custom attestation provider
 * or reCAPTCHA provider
 * @param isTokenAutoRefreshEnabled - if true, enables auto refresh
 * of appCheck token.
 */ function activate(app, siteKeyOrProvider, platformLoggerProvider, isTokenAutoRefreshEnabled) {
    var state = getState(app);
    if (state.activated) throw ERROR_FACTORY.create("already-activated"/* ALREADY_ACTIVATED */ , {
        appName: app.name
    });
    var newState = tslib.__assign(tslib.__assign({
    }, state), {
        activated: true
    });
    // Read cached token from storage if it exists and store it in memory.
    newState.cachedTokenPromise = readTokenFromStorage(app).then(function(cachedToken) {
        if (cachedToken && isValid(cachedToken)) setState(app, tslib.__assign(tslib.__assign({
        }, getState(app)), {
            token: cachedToken
        }));
        return cachedToken;
    });
    if (typeof siteKeyOrProvider === 'string') newState.provider = new ReCaptchaV3Provider(siteKeyOrProvider);
    else if (siteKeyOrProvider instanceof ReCaptchaV3Provider || siteKeyOrProvider instanceof CustomProvider) newState.provider = siteKeyOrProvider;
    else // Process "old" custom provider to avoid breaking previous users.
    // This was defined at beta release as simply an object with a
    // getToken() method.
    newState.provider = new CustomProvider({
        getToken: siteKeyOrProvider.getToken
    });
    // Use value of global `automaticDataCollectionEnabled` (which
    // itself defaults to false if not specified in config) if
    // `isTokenAutoRefreshEnabled` param was not provided by user.
    newState.isTokenAutoRefreshEnabled = isTokenAutoRefreshEnabled === undefined ? app.automaticDataCollectionEnabled : isTokenAutoRefreshEnabled;
    setState(app, newState);
    newState.provider.initialize(app, platformLoggerProvider);
}
function setTokenAutoRefreshEnabled(app, isTokenAutoRefreshEnabled) {
    var state = getState(app);
    // This will exist if any product libraries have called
    // `addTokenListener()`
    if (state.tokenRefresher) {
        if (isTokenAutoRefreshEnabled === true) state.tokenRefresher.start();
        else state.tokenRefresher.stop();
    }
    setState(app, tslib.__assign(tslib.__assign({
    }, state), {
        isTokenAutoRefreshEnabled: isTokenAutoRefreshEnabled
    }));
}
/**
 * Differs from internal getToken in that it throws the error.
 */ function getToken(app, platformLoggerProvider, forceRefresh) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        var result;
        return tslib.__generator(this, function(_a1) {
            switch(_a1.label){
                case 0:
                    return [
                        4,
                        getToken$2(app, platformLoggerProvider, forceRefresh)
                    ];
                case 1:
                    result = _a1.sent();
                    if (result.error) throw result.error;
                    return [
                        2,
                        {
                            token: result.token
                        }
                    ];
            }
        });
    });
}
function onTokenChanged(app, platformLoggerProvider, onNextOrObserver, onError, /**
 * NOTE: Although an `onCompletion` callback can be provided, it will
 * never be called because the token stream is never-ending.
 * It is added only for API consistency with the observer pattern, which
 * we follow in JS APIs.
 */ // eslint-disable-next-line @typescript-eslint/no-unused-vars
onCompletion) {
    var nextFn = function() {
    };
    var errorFn = function() {
    };
    if (onNextOrObserver.next != null) nextFn = onNextOrObserver.next.bind(onNextOrObserver);
    else nextFn = onNextOrObserver;
    if (onNextOrObserver.error != null) errorFn = onNextOrObserver.error.bind(onNextOrObserver);
    else if (onError) errorFn = onError;
    addTokenListener(app, platformLoggerProvider, "EXTERNAL"/* EXTERNAL */ , nextFn, errorFn);
    return function() {
        return removeTokenListener(app, nextFn);
    };
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function factory(app, platformLoggerProvider) {
    return {
        app: app,
        activate: function(siteKeyOrProvider, isTokenAutoRefreshEnabled) {
            return activate(app, // Public types of ReCaptchaV3Provider/CustomProvider don't
            // expose getToken() and aren't recognized as the internal
            // class version of themselves.
            siteKeyOrProvider, platformLoggerProvider, isTokenAutoRefreshEnabled);
        },
        setTokenAutoRefreshEnabled: function(isTokenAutoRefreshEnabled) {
            return setTokenAutoRefreshEnabled(app, isTokenAutoRefreshEnabled);
        },
        getToken: function(forceRefresh) {
            return getToken(app, platformLoggerProvider, forceRefresh);
        },
        onTokenChanged: function(onNextOrObserver, onError, onCompletion) {
            return onTokenChanged(app, platformLoggerProvider, /**
             * This can still be an observer. Need to do this casting because
             * according to Typescript: "Implementation signatures of overloads
             * are not externally visible"
             */ onNextOrObserver, onError);
        },
        INTERNAL: {
            delete: function() {
                var tokenObservers = getState(app).tokenObservers;
                for(var _i = 0, tokenObservers_1 = tokenObservers; _i < tokenObservers_1.length; _i++){
                    var tokenObserver = tokenObservers_1[_i];
                    removeTokenListener(app, tokenObserver.next);
                }
                return Promise.resolve();
            }
        }
    };
}
function internalFactory(app, platformLoggerProvider) {
    return {
        getToken: function(forceRefresh) {
            return getToken$2(app, platformLoggerProvider, forceRefresh);
        },
        addTokenListener: function(listener) {
            return addTokenListener(app, platformLoggerProvider, "INTERNAL"/* INTERNAL */ , listener);
        },
        removeTokenListener: function(listener) {
            return removeTokenListener(app, listener);
        }
    };
}
var name = "@firebase/app-check";
var version = "0.3.2";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var APP_CHECK_NAME = 'appCheck';
var APP_CHECK_NAME_INTERNAL = 'app-check-internal';
function registerAppCheck(firebase1) {
    // The public interface
    firebase1.INTERNAL.registerComponent(new component.Component(APP_CHECK_NAME, function(container) {
        // getImmediate for FirebaseApp will always succeed
        var app = container.getProvider('app').getImmediate();
        var platformLoggerProvider = container.getProvider('platform-logger');
        return factory(app, platformLoggerProvider);
    }, "PUBLIC"/* PUBLIC */ ).setServiceProps({
        ReCaptchaV3Provider: ReCaptchaV3Provider,
        CustomProvider: CustomProvider
    })/**
         * AppCheck can only be initialized by explicitly calling firebase.appCheck()
         * We don't want firebase products that consume AppCheck to gate on AppCheck
         * if the user doesn't intend them to, just because the AppCheck component
         * is registered.
         */ .setInstantiationMode("EXPLICIT"/* EXPLICIT */ )/**
         * Because all firebase products that depend on app-check depend on app-check-internal directly,
         * we need to initialize app-check-internal after app-check is initialized to make it
         * available to other firebase products.
         */ .setInstanceCreatedCallback(function(container, _instanceIdentifier, _instance) {
        var appCheckInternalProvider = container.getProvider(APP_CHECK_NAME_INTERNAL);
        appCheckInternalProvider.initialize();
    }));
    // The internal interface used by other Firebase products
    firebase1.INTERNAL.registerComponent(new component.Component(APP_CHECK_NAME_INTERNAL, function(container) {
        // getImmediate for FirebaseApp will always succeed
        var app = container.getProvider('app').getImmediate();
        var platformLoggerProvider = container.getProvider('platform-logger');
        return internalFactory(app, platformLoggerProvider);
    }, "PUBLIC"/* PUBLIC */ ).setInstantiationMode("EXPLICIT"/* EXPLICIT */ ));
    firebase1.registerVersion(name, version);
}
registerAppCheck(firebase__default['default']);
initializeDebugMode();

},{"@firebase/app":"6IUA5","@firebase/component":"5qT0x","tslib":"4rd38","@firebase/util":"3bR6t","@firebase/logger":"5PuYX"}],"2ceTA":[function(require,module,exports) {
module.exports = require('./bundle-url').getBundleURL() + "lose-sign.e69dd917.png";

},{"./bundle-url":"3seVR"}],"3seVR":[function(require,module,exports) {
"use strict";
/* globals document:readonly */ var bundleURL = null;
function getBundleURLCached() {
    if (!bundleURL) bundleURL = getBundleURL();
    return bundleURL;
}
function getBundleURL() {
    try {
        throw new Error();
    } catch (err) {
        var matches = ('' + err.stack).match(/(https?|file|ftp):\/\/[^)\n]+/g);
        if (matches) return getBaseURL(matches[0]);
    }
    return '/';
}
function getBaseURL(url) {
    return ('' + url).replace(/^((?:https?|file|ftp):\/\/.+)\/[^/]+$/, '$1') + '/';
} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.
function getOrigin(url) {
    let matches = ('' + url).match(/(https?|file|ftp):\/\/[^/]+/);
    if (!matches) throw new Error('Origin not found');
    return matches[0];
}
exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
exports.getOrigin = getOrigin;

},{}],"1bKAa":[function(require,module,exports) {
module.exports = require('./bundle-url').getBundleURL() + "success-sign.267f496d.png";

},{"./bundle-url":"3seVR"}],"7xh9Q":[function(require,module,exports) {
module.exports = require('./bundle-url').getBundleURL() + "tijeras.47390fc0.png";

},{"./bundle-url":"3seVR"}],"405Ce":[function(require,module,exports) {
module.exports = require('./bundle-url').getBundleURL() + "piedra.b2a5cfcf.png";

},{"./bundle-url":"3seVR"}],"6MZTm":[function(require,module,exports) {
module.exports = require('./bundle-url').getBundleURL() + "papel.a95c2b2e.png";

},{"./bundle-url":"3seVR"}],"3TKas":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initEmpezarPage", ()=>initEmpezarPage
);
var _button = require("../components/button");
var _state = require("./../state");
const tijerasIMG = require("url:./../img/tijeras.png");
const piedraIMG = require("url:./../img/piedra.png");
const papelIMG = require("url:./../img/papel.png");
function initEmpezarPage(params) {
    const el = document.createElement("div");
    el.innerHTML = `\n    <div class="container_content">\n    </div>\n    \n    <div class="hands_container">\n      <div class="hands">\n        <img src="${tijerasIMG}" alt="" class="img-hand__tijeras" />\n        <img src="${piedraIMG}" alt="" class="img-hand__piedra" />\n        <img src="${papelIMG}" alt="" class="img-hand__papel" />\n      </div>\n    </div>\n  `;
    _state.state.subscribe(()=>{
        if (window.location.pathname == "/empezar") {
            const content = document.querySelector(".container_content");
            const { name , oponentName , oponentObject , sala  } = _state.state.getState();
            if (oponentObject) {
                const afterDiv = document.createElement("div");
                afterDiv.innerHTML = `\n\n        <div class="header-empezar text-header">\n          <div class="left-header">\n            <h5>\n              ${name}\n            </h5>\n            <span class="text-orange">\n              ${oponentName}\n            </span>\n          </div>\n\n          <div class="right-header">\n            <h5 class="sala-header">\n              Sala:\n            </h5>\n            <span>\n              ${sala}\n            </span>\n          </div>\n        </div>\n\n        <div class="description-empezar">\n          <p>\n            Presioná jugar <br />\n            y elegí: piedra,<br />\n            papel o tijera<br />\n            antes de que <br />pasen los 3<br />\n            segundos.\n          </p>\n        </div>\n\n        ${_button.buttonComponent("Jugar", "startGame", "")}\n        \n\n        `;
                setTimeout(()=>{
                    const startGameButton = document.querySelector("#startGame");
                    startGameButton?.addEventListener("click", ()=>{
                        _state.state.setReady();
                    });
                    const { oponentObject: oponentObject1 , userObject , oponentName: oponentName1  } = _state.state.getState();
                    if (!oponentObject1.ready && userObject.ready) {
                        const descriptionEmpezar = document.querySelector(".description-empezar");
                        const waitingDiv = document.createElement("div");
                        waitingDiv.innerHTML = `<span>Esperando a que <strong> ${oponentName1} </strong> presione ¡Jugar!...</span>`;
                        waitingDiv.classList.add("waiting-text");
                        descriptionEmpezar.parentNode?.removeChild(descriptionEmpezar);
                        startGameButton.parentNode.removeChild(startGameButton);
                        content.firstChild.appendChild(waitingDiv);
                    } else if (oponentObject1.ready && userObject.ready) // Si el oponente y tu estan listo redirigir a /juego
                    params.goTo("/juego");
                }, 2000);
                content.firstChild?.remove();
                content.appendChild(afterDiv);
            } else {
                const { sala: sala1  } = _state.state.getState();
                const beforeDiv = document.createElement("div");
                beforeDiv.innerHTML = `\n        <div class="container-divs-before">\n          <div class="div-before-game normal-divs">\n            <span>\n              Comparte el codigo\n            </span>\n          </div>\n          <br />\n\n          <div class="div-before-game code-div">\n            <h3>\n              ${sala1}\n            </h3>\n          </div>\n          <br />\n\n          <div class="div-before-game normal-divs">\n            <span>\n              Con tu contricante\n            </span>\n          </div>\n        </div>\n      `;
                content.firstChild?.remove();
                content.appendChild(beforeDiv);
            }
        }
    });
    return el;
}

},{"../components/button":"1zpZY","./../state":"5mroK","url:./../img/tijeras.png":"7xh9Q","url:./../img/piedra.png":"405Ce","url:./../img/papel.png":"6MZTm","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"3ZMao":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initJuego", ()=>initJuego
);
var _state = require("../state");
var _addSelected = require("./utils/addSelected");
const tijerasIMG = require("url:./../img/tijeras.png");
const piedraIMG = require("url:./../img/piedra.png");
const papelIMG = require("url:./../img/papel.png");
const three = require("url:./../img/three.png");
const two = require("url:./../img/two.png");
function initJuego(params) {
    const el = document.createElement("div");
    el.innerHTML = `\n  <div class="cron_container"></div>\n  <div class="hands_container">\n      <div class="hands">\n        <img src="${tijerasIMG}" alt="" class="img-hand__tijeras" />\n        <img src="${piedraIMG}" alt="" class="img-hand__piedra" />\n        <img src="${papelIMG}" alt="" class="img-hand__papel" />\n      </div>\n    </div>\n    `;
    const tijeras = el.querySelector(".img-hand__tijeras");
    const piedra = el.querySelector(".img-hand__piedra");
    const papel = el.querySelector(".img-hand__papel");
    const tijerasListeners = ()=>{
        _addSelected.addSelected("tijeras", el);
        _state.state.setState({
            ..._state.state.getState(),
            handOn: "tijeras"
        });
    };
    const piedraListeners = ()=>{
        _addSelected.addSelected("piedra", el);
        _state.state.setState({
            ..._state.state.getState(),
            handOn: "piedra"
        });
    };
    const papelListeners = ()=>{
        _addSelected.addSelected("papel", el);
        _state.state.setState({
            ..._state.state.getState(),
            handOn: "papel"
        });
    };
    tijeras.addEventListener("click", tijerasListeners);
    piedra.addEventListener("click", piedraListeners);
    papel.addEventListener("click", papelListeners);
    _state.state.setState({
        ..._state.state.getState(),
        time: 0,
        moment: "waiting"
    });
    setTimeout(()=>{
        const container = document.querySelector(".cron_container");
        container.innerHTML = `<img src="${three}" class="cron-item" />`;
    }, 1000);
    setTimeout(()=>{
        const container = document.querySelector(".cron_container");
        container.innerHTML = `<img src="${two}" class="cron-item" />`;
    }, 2000);
    setTimeout(()=>{
        const container = document.querySelector(".cron_container");
        container.innerHTML = `<h1 class="ready-sign">Ready!</h1>`;
        _state.state.setState({
            ..._state.state.getState(),
            time: 3,
            moment: "result"
        });
    }, 3000);
    _state.state.subscribe(()=>{
        const { pathname  } = window.location;
        let { time , moment  } = _state.state.getState();
        if (time === 3 && moment === "result" && pathname === "/juego") setTimeout(()=>{
            let handsContainer = document.querySelector(".hands_container");
            let selected = document.querySelector(".selected");
            let arrayHands = [
                tijeras,
                piedra,
                papel
            ];
            tijeras.removeEventListener("click", tijerasListeners);
            piedra.removeEventListener("click", piedraListeners);
            papel.removeEventListener("click", papelListeners);
            let { handOn , userObject  } = _state.state.getState();
            if (!handOn) {
                let random = Math.floor(Math.random() * 3);
                let arrayToState = [
                    "tijeras",
                    "piedra",
                    "papel"
                ];
                selected = arrayHands[random];
                _addSelected.addSelected(arrayToState[random], "");
                _state.state.setState({
                    ..._state.state.getState(),
                    handOn: arrayToState[random]
                });
            }
            if (!userObject.handChoosen && handOn) _state.state.setState({
                ..._state.state.getState(),
                userObject: {
                    handChoosen: _state.state.getState().handOn,
                    ready: true,
                    winner: false
                }
            });
            if (_state.state.getState().userObject.handChoosen) _state.state.setHand();
            let handOponent = document.querySelector(`.img-hand__${_state.state.getState().oponentObject.handChoosen}`);
            handsContainer?.appendChild(handOponent);
            handsContainer?.appendChild(selected);
            let containerToRemove = document.querySelector(".hands");
            containerToRemove?.parentNode.removeChild(containerToRemove);
            handOponent.classList.remove("deselected");
            handOponent.classList.add("hand-oponent");
            selected.classList.remove("selected");
            selected.classList.add("hand-selected");
            handsContainer.parentNode.removeChild(document.querySelector(".cron_container"));
            handsContainer.classList.remove("hands_container");
            handsContainer.classList.add("hands_result");
            const handSelected = document.querySelector(".hand-selected");
            const root = document.querySelector(".root");
            const TheResultDiv = document.createElement("div");
            TheResultDiv.classList.add("result");
            root.firstChild.appendChild(TheResultDiv);
            const handOponentcomp = document.querySelector(".hand-oponent");
            let { winner  } = _state.state.getState();
            if (!winner) {
                if (handSelected.classList.value.includes("tijeras") && handOponentcomp.classList.value.includes("papel") || handSelected.classList.value.includes("papel") && handOponentcomp.classList.value.includes("piedra") || handSelected.classList.value.includes("piedra") && handOponentcomp.classList.value.includes("tijeras")) {
                    let { name  } = _state.state.getState();
                    _state.state.setState({
                        ..._state.state.getState(),
                        winner: name
                    });
                } else {
                    let { oponentName  } = _state.state.getState();
                    _state.state.setState({
                        ..._state.state.getState(),
                        winner: oponentName
                    });
                }
                _state.state.setState({
                    ..._state.state.getState(),
                    validator: true,
                    time: 0,
                    moment: "waiting"
                });
            }
        }, 1000);
    });
    setTimeout(()=>{
        _state.state.fetchResults(params);
    }, 7000);
    return el;
}

},{"../state":"5mroK","./utils/addSelected":"3OVih","url:./../img/tijeras.png":"7xh9Q","url:./../img/piedra.png":"405Ce","url:./../img/papel.png":"6MZTm","url:./../img/three.png":"77257","url:./../img/two.png":"2PIAe","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"3OVih":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addSelected", ()=>addSelected
);
function addSelected(hand, el) {
    // export function addSelected(hand) {
    const tijeras = document.querySelector(".img-hand__tijeras");
    const piedra = document.querySelector(".img-hand__piedra");
    const papel = document.querySelector(".img-hand__papel");
    if (hand === "tijeras") {
        tijeras?.classList.add("selected");
        tijeras?.classList.remove("deselected");
        piedra?.classList.add("deselected");
        piedra?.classList.remove("selected");
        papel?.classList.add("deselected");
        papel?.classList.remove("selected");
    } else if (hand === "piedra") {
        tijeras?.classList.add("deselected");
        tijeras?.classList.remove("selected");
        piedra?.classList.add("selected");
        piedra?.classList.remove("deselected");
        papel?.classList.add("deselected");
        papel?.classList.remove("selected");
    } else if (hand === "papel") {
        tijeras?.classList.add("deselected");
        tijeras?.classList.remove("selected");
        piedra?.classList.add("deselected");
        piedra?.classList.remove("selected");
        papel?.classList.add("selected");
        papel?.classList.remove("deselected");
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"77257":[function(require,module,exports) {
module.exports = require('./bundle-url').getBundleURL() + "three.b834e663.png";

},{"./bundle-url":"3seVR"}],"2PIAe":[function(require,module,exports) {
module.exports = require('./bundle-url').getBundleURL() + "two.5422a034.png";

},{"./bundle-url":"3seVR"}]},["3lxtH","6s8cZ"], "6s8cZ", "parcelRequire6bbe")

//# sourceMappingURL=index.12a967f5.js.map
